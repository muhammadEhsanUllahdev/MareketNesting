{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./drizzle\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":322},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack multi-vendor e-commerce marketplace application built with modern web technologies. The platform supports multiple languages (English, French, Arabic with RTL support), role-based authentication (client, seller, admin), and provides comprehensive dashboards for different user types. The application features a React frontend with shadcn/ui components, an Express.js backend with PostgreSQL database using Drizzle ORM, and includes file upload capabilities with Google Cloud Storage integration.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React 18 with TypeScript and Vite for fast development and building\n- **UI Library**: shadcn/ui components built on Radix UI primitives with Tailwind CSS for styling\n- **Routing**: Wouter for lightweight client-side routing with protected routes\n- **State Management**: TanStack Query for server state and custom React hooks for client state\n- **Internationalization**: i18next with support for English, French, and Arabic (including RTL layout)\n- **Authentication**: Context-based auth provider with JWT token handling\n- **Forms**: React Hook Form with Zod validation schemas\n- **File Upload**: Uppy integration for file handling with drag-and-drop support\n\n## Backend Architecture\n- **Framework**: Express.js with TypeScript running on Node.js\n- **Authentication**: Passport.js with local strategy, session-based auth with express-session\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **API Design**: RESTful endpoints with role-based access control\n- **Security**: Password hashing with scrypt, session management, CORS handling\n- **Development**: Hot reload with tsx, ESBuild for production bundling\n\n## Database Design\n- **Primary Database**: PostgreSQL with connection pooling via Neon serverless\n- **Schema Management**: Drizzle migrations with versioned database changes\n- **Multi-language Support**: Separate translation tables for categories and products\n- **User Roles**: Role-based access (client, seller, admin) with proper permissions\n- **Product Management**: Hierarchical categories, vendor-specific products, inventory tracking\n\n## Authentication & Authorization\n- **Session Management**: Express-session with memory store for development\n- **Password Security**: Scrypt-based hashing with salt for secure password storage\n- **Role-Based Access**: Three-tier system (client, seller, admin) with protected routes\n- **JWT Integration**: Token-based authentication for API requests\n\n## UI/UX Features\n- **Responsive Design**: Mobile-first approach with Tailwind CSS breakpoints\n- **Dark Mode Support**: CSS custom properties for theme switching\n- **Component Library**: Comprehensive set of reusable UI components\n- **Accessibility**: ARIA labels, keyboard navigation, screen reader support\n- **Performance**: Code splitting, lazy loading, optimized bundle sizes\n\n# External Dependencies\n\n## Core Technologies\n- **Database**: PostgreSQL via Neon serverless with WebSocket support\n- **File Storage**: Google Cloud Storage for product images and user uploads\n- **Styling**: Tailwind CSS with PostCSS processing and Autoprefixer\n\n## Development Tools\n- **Build System**: Vite with React plugin and runtime error overlay\n- **Type Checking**: TypeScript with strict mode and path mapping\n- **Code Quality**: ESLint and Prettier configurations (referenced in components.json)\n- **Development Server**: Replit integration with cartographer plugin\n\n## Third-Party Services\n- **UI Components**: Radix UI primitives for accessible component foundations\n- **Icons**: Lucide React for consistent iconography\n- **Fonts**: Google Fonts integration (Inter, DM Sans, Fira Code, Geist Mono)\n- **Internationalization**: i18next ecosystem for translation management\n- **Query Management**: TanStack Query for server state synchronization\n\n## Production Infrastructure\n- **Session Storage**: Configurable session store (memory for development, can be extended to Redis/PostgreSQL)\n- **Environment Configuration**: Environment variable management for database URLs and secrets\n- **Deployment**: Docker-ready with separate client/server build processes","size_bytes":4240},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n          50: \"var(--primary-50)\",\n          100: \"var(--primary-100)\",\n          200: \"var(--primary-200)\",\n          300: \"var(--primary-300)\",\n          400: \"var(--primary-400)\",\n          500: \"var(--primary-500)\",\n          600: \"var(--primary-600)\",\n          700: \"var(--primary-700)\",\n          800: \"var(--primary-800)\",\n          900: \"var(--primary-900)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        inter: ['Inter', 'sans-serif'],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        \"fade-in\": {\n          from: {\n            opacity: \"0\",\n            transform: \"translateY(20px)\",\n          },\n          to: {\n            opacity: \"1\",\n            transform: \"translateY(0)\",\n          },\n        },\n        \"slide-up\": {\n          from: {\n            transform: \"translateY(100%)\",\n          },\n          to: {\n            transform: \"translateY(0%)\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fade-in 0.6s ease-out\",\n        \"slide-up\": \"slide-up 0.3s ease-out\",\n      },\n      backgroundImage: {\n        'gradient-primary': 'linear-gradient(135deg, hsl(var(--primary-500)), hsl(var(--primary-700)))',\n        'gradient-secondary': 'linear-gradient(135deg, hsl(var(--primary-600)), hsl(var(--primary-800)))',\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3914},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/ar_1755701716870.ts":{"content":"// Export Arabic translations\nexport const ar = {\n  common: {\n    save: 'حفظ',\n    cancel: 'إلغاء',\n    delete: 'حذف',\n    edit: 'تعديل',\n    create: 'إنشاء',\n    search: 'بحث',\n    filter: 'تصفية',\n    sort: 'فرز',\n    view: 'عرض',\n    more: 'المزيد',\n    less: 'أقل',\n    all: 'الكل',\n    none: 'لا شيء',\n    back: 'عودة',\n    next: 'التالي',\n    previous: 'السابق',\n    confirm: 'تأكيد',\n    clear: 'مسح البحث',\n    resetFilters: 'إعادة ضبط الفلاتر',\n  },\n  categories: {\n    title: 'الفئات',\n    subtitle: 'إدارة وتصنيف المنتجات والخدمات',\n    treeView: 'عرض شجري',\n    gridView: 'عرض شبكي',\n    tableView: 'عرض جدولي',\n    create: 'إنشاء فئة',\n    update: 'تحديث الفئة',\n    delete: 'حذف الفئة',\n    editCategory: 'تعديل الفئة',\n    addSubcategory: 'إضافة فئة فرعية',\n    editSubcategory: 'تعديل فئة فرعية',\n    deleteSubcategory: 'حذف فئة فرعية',\n    name: 'اسم الفئة',\n    description: 'وصف الفئة',\n    parentCategory: 'الفئة الرئيسية',\n    visibility: 'الرؤية',\n    featured: 'مميزة',\n    template: 'قالب',\n    attributes: 'الخصائص',\n    save: 'حفظ',\n    cancel: 'إلغاء',\n    search: 'بحث',\n    filters: 'مرشحات',\n    sortBy: 'ترتيب حسب',\n    allCategories: 'جميع الفئات',\n    popularCategories: 'الفئات الشائعة',\n    recentCategories: 'الفئات الحديثة',\n    categoryDetails: 'تفاصيل الفئة',\n    categoryProducts: 'منتجات الفئة',\n    addSubcategoryTo: 'إضافة فئة فرعية إلى',\n    editCategoryDetails: 'تعديل تفاصيل الفئة',\n    deleteCategoryConfirmation: 'هل أنت متأكد أنك تريد حذف هذه الفئة؟',\n    deleteCategorySuccess: 'تم حذف الفئة بنجاح',\n    visibilityUpdated: 'تم تحديث حالة الرؤية',\n    featuredUpdated: 'تم تحديث حالة العرض المميز',\n    templateApplied: 'تم تطبيق القالب',\n    newCategory: 'فئة جديدة',\n    editExistingCategory: 'تعديل فئة موجودة',\n    noCategoriesFound: 'لا توجد فئات',\n    addFirstCategory: 'أضف أول فئة لتبدأ',\n    applyTemplateToCategory: 'تطبيق قالب على الفئة',\n  },\n  products: {\n    title: 'المنتجات',\n    subtitle: 'إدارة المنتجات والخدمات',\n    create: 'إنشاء منتج',\n    update: 'تحديث المنتج',\n    delete: 'حذف المنتج',\n    editProduct: 'تعديل المنتج',\n    name: 'اسم المنتج',\n    description: 'وصف المنتج',\n    category: 'الفئة',\n    price: 'السعر',\n    quantity: 'الكمية',\n    images: 'الصور',\n    attributes: 'الخصائص',\n    save: 'حفظ',\n    cancel: 'إلغاء',\n    search: 'بحث',\n    filters: 'مرشحات',\n    sortBy: 'ترتيب حسب',\n    allProducts: 'جميع المنتجات',\n    popularProducts: 'المنتجات الشائعة',\n    recentProducts: 'المنتجات الحديثة',\n    productDetails: 'تفاصيل المنتج',\n    productReviews: 'تقييمات المنتج',\n    addProductToCategory: 'إضافة منتج إلى الفئة',\n    editProductDetails: 'تعديل تفاصيل المنتج',\n    deleteProductConfirmation: 'هل أنت متأكد أنك تريد حذف هذا المنتج؟',\n    deleteProductSuccess: 'تم حذف المنتج بنجاح',\n    newProduct: 'منتج جديد',\n    editExistingProduct: 'تعديل منتج موجود',\n  },\n  templates: {\n    title: 'القوالب',\n    subtitle: 'إدارة قوالب الحقول المخصصة',\n    create: 'إنشاء قالب',\n    management: 'إدارة القوالب',\n    allTemplates: 'جميع القوالب',\n    productTemplates: 'قوالب المنتجات',\n    categoryTemplates: 'قوالب الفئات',\n    noTemplates: 'لم يتم العثور على قوالب',\n    createFirstTemplate: 'قم بإنشاء القالب الأول الخاص بك لتوحيد منتجاتك أو فئاتك',\n    edit: 'تعديل القالب',\n    new: 'قالب جديد',\n    updated: 'تم تحديث القالب',\n    updatedDesc: 'تم تحديث القالب {template} بنجاح.',\n    added: 'تمت إضافة القالب',\n    addedDesc: 'تمت إضافة القالب {template} بنجاح.',\n    deleted: 'تم حذف القالب',\n    deletedDesc: 'تم حذف القالب {template}.',\n    error: 'خطأ',\n    errorNameRequired: 'اسم القالب مطلوب.',\n    searchPlaceholder: 'البحث في القوالب...',\n    filters: 'تصفية',\n    all: 'الكل',\n    popular: 'شائع',\n    recent: 'حديث',\n    viewAllProductTemplates: 'عرض كل قوالب المنتجات',\n    save: 'حفظ'\n  },\n};\n","size_bytes":4982},"attached_assets/en_1755701716871.ts":{"content":"// Import or define the Translations type\nimport { Translations } from './utils';\n\n// English translations\nexport const en = {\n  common: {\n    save: 'Save',\n    cancel: 'Cancel',\n    delete: 'Delete',\n    edit: 'Edit',\n    create: 'Create',\n    search: 'Search',\n    filter: 'Filter',\n    sort: 'Sort',\n    view: 'View',\n    more: 'More',\n    less: 'Less',\n    all: 'All',\n    none: 'None',\n    back: 'Back',\n    next: 'Next',\n    previous: 'Previous',\n    confirm: 'Confirm',\n    clear: 'Clear search',\n    resetFilters: 'Reset filters',\n  },\n  pages: {\n    home: 'Home',\n    categories: 'Categories',\n    categoryManagement: 'Category Management',\n    categoryTemplates: 'Category Templates',\n    categoryBrowser: 'Browse Categories',\n    products: 'Products',\n    productManagement: 'Product Management',\n    templates: 'Templates',\n    templateManagement: 'Template Management'\n  },\n  categories: {\n    title: 'Categories',\n    subtitle: 'Manage your product categories',\n    create: 'Create Category',\n    edit: 'Edit Category',\n    delete: 'Delete Category',\n    nameRequired: 'Category name is required',\n    categoryAdded: 'Category Created',\n    categoryAddedDesc: 'Category {category} has been created successfully',\n    categoryUpdated: 'Category Updated',\n    categoryUpdatedDesc: 'Category {category} has been updated successfully',\n    categoryDeleted: 'Category Deleted',\n    categoryDeletedDesc: 'Category {category} has been deleted successfully',\n    confirmDelete: 'Are you sure you want to delete this category?',\n    confirmDeleteDesc: 'This action cannot be undone.',\n    subcategoryCreated: 'Subcategory Created',\n    subcategoryCreatedDesc: 'A subcategory has been created for {category}',\n    treeView: 'Tree View',\n    grid: 'Grid View',\n    table: 'Table View',\n    search: 'Search categories...',\n    filter: {\n      all: 'All',\n      visible: 'Visible',\n      hidden: 'Hidden',\n      featured: 'Featured',\n    },\n    sort: {\n      nameAsc: 'Name (A-Z)',\n      nameDesc: 'Name (Z-A)',\n      newest: 'Newest',\n      oldest: 'Oldest',\n    },\n    visibility: 'Visibility',\n    visible: 'Visible',\n    hidden: 'Hidden',\n    featured: 'Featured',\n    items: '{count} items',\n    empty: 'No categories found',\n    emptyDesc: 'Start by creating your first category',\n    addSubcategory: 'Add Subcategory',\n    categoryTemplates: 'Category Templates',\n    templatesInfo: 'Get started quickly with pre-built category structures for various industries.',\n    viewAllTemplates: 'View All Templates'\n  },\n  products: {\n    editor: 'Product Editor',\n    generalInfo: 'General Information',\n    name: 'Product Name',\n    namePlaceholder: 'Enter product name',\n    nameRequired: 'Product name is required',\n    shortDescription: 'Short Description',\n    shortDescPlaceholder: 'Brief description of the product',\n    fullDescription: 'Full Description',\n    description: 'Description',\n    details: 'Details',\n    variations: 'Variations',\n    mainFeatures: 'Main Features',\n    addFeature: 'Add Feature',\n    addFeaturesHint: 'Add features to highlight the main selling points of the product.',\n    featurePlaceholder: 'E.g. High-resolution screen',\n    packageContents: 'Package Contents',\n    packageContentsPlaceholder: 'E.g. 1x Headphones, 1x Charging cable, 1x User manual',\n    warranty: 'Warranty & Return Information',\n    warrantyPlaceholder: 'Warranty and return policy information',\n    priceInfo: 'Price Information',\n    price: 'Price',\n    comparePrice: 'Compare at Price',\n    inventory: 'Inventory',\n    sku: 'SKU (Stock Keeping Unit)',\n    barcode: 'Barcode (EAN, UPC)',\n    quantity: 'Quantity in Stock',\n    dimensions: 'Dimensions & Weight',\n    length: 'Length',\n    width: 'Width',\n    height: 'Height',\n    weight: 'Weight',\n    productVariations: 'Product Variations',\n    addVariation: 'Add Variation',\n    variationsDescription: 'Variations allow you to offer different versions of the same product (sizes, colors, etc.)',\n    statusVisibility: 'Status & Visibility',\n    active: 'Product Active',\n    activeDescription: 'The product will be visible on the store',\n    featured: 'Featured Product',\n    featuredDescription: 'Feature this product on the homepage',\n    category: 'Category',\n    selectCategory: 'Select Category',\n    categoryDescription: 'Choose the main category for the product',\n    images: 'Images',\n    dragImagesHere: 'Drag and drop images here or click to upload',\n    addImages: 'Add Images',\n    uploadImages: 'Image Upload',\n    uploadImagesDescription: 'Image upload will be available soon',\n    saved: 'Product Saved',\n    savedDescription: 'Product {name} has been saved successfully.',\n    seoTitle: 'SEO Title',\n    seoTitlePlaceholder: 'Title for search engines',\n    seoTitleDescription: 'If empty, the product name will be used',\n    seoDescription: 'SEO Description',\n    seoDescriptionPlaceholder: 'Description for search engines',\n    seoDescriptionHelp: 'Recommended: 150-160 characters',\n    keywords: 'Keywords',\n    keywordsPlaceholder: 'keyword1, keyword2, keyword3'\n  },\n  templates: {\n    title: 'Templates',\n    subtitle: 'Manage custom field templates',\n    create: 'Create template',\n    update: 'Update',\n    management: 'Template Management',\n    allTemplates: 'All templates',\n    productTemplates: 'Product templates',\n    categoryTemplates: 'Category templates',\n    noTemplates: 'No templates found',\n    createFirstTemplate: 'Create your first template to standardize your products or categories',\n    edit: 'Edit template',\n    new: 'New template',\n    updated: 'Template updated',\n    updatedDesc: 'The template {template} has been successfully updated.',\n    added: 'Template added',\n    addedDesc: 'The template {template} has been successfully added.',\n    deleted: 'Template deleted',\n    deletedDesc: 'The template {template} has been deleted.',\n    error: 'Error',\n    errorNameRequired: 'Template name is required.',\n    searchPlaceholder: 'Search templates...',\n    filters: 'Filters',\n    all: 'All',\n    popular: 'Popular',\n    recent: 'Recent',\n    viewAllProductTemplates: 'View all product templates',\n    save: 'Save template',\n    fields: 'Fields'\n  }\n};\n","size_bytes":6165},"attached_assets/fr_1755701716872.ts":{"content":"// Import the Translations type\nimport { Translations } from './utils';\n\n// French translations\nexport const fr = {\n  common: {\n    save: 'Sauvegarder',\n    cancel: 'Annuler',\n    delete: 'Supprimer',\n    edit: 'Modifier',\n    create: 'Créer',\n    search: 'Rechercher',\n    filter: 'Filtrer',\n    sort: 'Trier',\n    view: 'Voir',\n    more: 'Plus',\n    less: 'Moins',\n    all: 'Tous',\n    none: 'Aucun',\n    back: 'Retour',\n    next: 'Suivant',\n    previous: 'Précédent',\n    confirm: 'Confirmer',\n    clear: 'Effacer la recherche',\n    resetFilters: 'Réinitialiser les filtres',\n  },\n  pages: {\n    home: 'Accueil',\n    categories: 'Catégories',\n    categoryManagement: 'Gestion des catégories',\n    categoryTemplates: 'Modèles de catégories',\n    categoryBrowser: 'Parcourir les catégories',\n    products: 'Produits',\n    productManagement: 'Gestion des produits',\n    templates: 'Modèles',\n    templateManagement: 'Gestion des modèles'\n  },\n  categories: {\n    title: 'Catégories',\n    subtitle: 'Gérez vos catégories de produits',\n    create: 'Créer une catégorie',\n    edit: 'Modifier la catégorie',\n    delete: 'Supprimer la catégorie',\n    nameRequired: 'Le nom de la catégorie est requis',\n    categoryAdded: 'Catégorie créée',\n    categoryAddedDesc: 'La catégorie {category} a été créée avec succès',\n    categoryUpdated: 'Catégorie mise à jour',\n    categoryUpdatedDesc: 'La catégorie {category} a été mise à jour avec succès',\n    categoryDeleted: 'Catégorie supprimée',\n    categoryDeletedDesc: 'La catégorie {category} a été supprimée avec succès',\n    confirmDelete: 'Êtes-vous sûr de vouloir supprimer cette catégorie?',\n    confirmDeleteDesc: 'Cette action ne peut pas être annulée.',\n    subcategoryCreated: 'Sous-catégorie créée',\n    subcategoryCreatedDesc: 'Une sous-catégorie a été créée pour {category}',\n    treeView: 'Vue en arbre',\n    tree: 'Arborescence',\n    grid: 'Vue en grille',\n    table: 'Vue en tableau',\n    search: 'Rechercher des catégories...',\n    add: 'Ajouter une catégorie',\n    children: 'Sous-catégories',\n    noRecords: 'Aucune catégorie trouvée',\n    createFirst: 'Commencez par créer votre première catégorie',\n    addSuccess: 'Catégorie ajoutée',\n    updateSuccess: 'Catégorie mise à jour',\n    deleteSuccess: 'Catégorie supprimée',\n    filter: {\n      all: 'Toutes',\n      visible: 'Visibles',\n      hidden: 'Masquées',\n      featured: 'En vedette',\n    },\n    sort: {\n      nameAsc: 'Nom (A-Z)',\n      nameDesc: 'Nom (Z-A)',\n      newest: 'Plus récentes',\n      oldest: 'Plus anciennes',\n    },\n    visibility: 'Visibilité',\n    visible: 'Visible',\n    hidden: 'Masquée',\n    featured: 'En vedette',\n    items: '{count} éléments',\n    empty: 'Aucune catégorie trouvée',\n    emptyDesc: 'Commencez par créer votre première catégorie',\n    addSubcategory: 'Ajouter une sous-catégorie',\n    categoryTemplates: 'Modèles de catégories',\n    templatesInfo: 'Démarrez rapidement avec des structures de catégories prédéfinies pour différents secteurs.',\n    viewAllTemplates: 'Voir tous les modèles',\n    selectTemplate: 'Sélectionner un modèle',\n    selectTemplateDescription: 'Choisissez un modèle pour votre nouvelle catégorie',\n    noTemplate: 'Aucun modèle',\n    continue: 'Continuer',\n    name: 'Nom',\n    namePlaceholder: 'Entrez le nom de la catégorie',\n    description: 'Description',\n    descriptionPlaceholder: 'Entrez une description de la catégorie',\n    usingTemplate: 'Utilisation du modèle',\n    subCategoryOf: 'Sous-catégorie de',\n    saving: 'Sauvegarde en cours',\n  },\n  templates: {\n    title: 'Modèles',\n    create: 'Créer un modèle',\n    update: 'Mettre à jour',\n    management: 'Gestion des modèles',\n    allTemplates: 'Tous les modèles',\n    productTemplates: 'Modèles de produits',\n    categoryTemplates: 'Modèles de catégories',\n    noTemplates: 'Aucun modèle trouvé',\n    createFirstTemplate: 'Créez votre premier modèle pour standardiser vos produits ou catégories',\n    edit: 'Modifier le modèle',\n    new: 'Nouveau modèle',\n    updated: 'Modèle mis à jour',\n    updatedDesc: 'Le modèle {template} a été mis à jour avec succès.',\n    added: 'Modèle ajouté',\n    addedDesc: 'Le modèle {template} a été ajouté avec succès.',\n    deleted: 'Modèle supprimé',\n    deletedDesc: 'Le modèle {template} a été supprimé.',\n    error: 'Erreur',\n    errorNameRequired: 'Le nom du modèle est requis.',\n    searchPlaceholder: 'Rechercher des modèles...',\n    filters: 'Filtres',\n    all: 'Tous',\n    popular: 'Populaires',\n    recent: 'Récents',\n    viewAllProductTemplates: 'Voir tous les modèles de produits',\n    notFound: 'Modèle non trouvé',\n    notFoundDesc: 'Le modèle demandé n\\'a pas été trouvé.',\n    save: 'Sauvegarder le modèle',\n    fields: 'Champs'\n  },\n  products: {\n    title: 'Produits',\n    subtitle: 'Gérez vos produits',\n    editor: 'Éditeur de produit',\n    generalInfo: 'Informations générales',\n    name: 'Nom du produit',\n    namePlaceholder: 'Entrez le nom du produit',\n    nameRequired: 'Le nom du produit est requis',\n    shortDescription: 'Description courte',\n    shortDescPlaceholder: 'Brève description du produit',\n    fullDescription: 'Description complète',\n    description: 'Description',\n    details: 'Détails',\n    variations: 'Variations',\n    mainFeatures: 'Caractéristiques principales',\n    addFeature: 'Ajouter une caractéristique',\n    addFeaturesHint: 'Ajoutez des caractéristiques pour mettre en avant les points forts du produit.',\n    featurePlaceholder: 'Ex: Écran haute résolution',\n    packageContents: 'Contenu du package',\n    packageContentsPlaceholder: 'Ex: 1x Écouteurs, 1x Câble de chargement, 1x Manuel d\\'utilisation',\n    warranty: 'Garantie & Informations de retour',\n    warrantyPlaceholder: 'Informations sur la garantie et la politique de retour',\n    priceInfo: 'Informations de prix',\n    price: 'Prix',\n    comparePrice: 'Prix de comparaison',\n    inventory: 'Inventaire',\n    sku: 'SKU (Unité de gestion de stock)',\n    barcode: 'Code-barres (EAN, UPC)',\n    quantity: 'Quantité en stock'\n  },\n  fieldGroups: {\n    title: 'Groupes de champs',\n    type: 'Type de groupe',\n    grid: 'Grille',\n    table: 'Tableau',\n    rows: 'Lignes',\n    name: 'Nom du groupe',\n    namePlaceholder: 'Entrez un nom pour le groupe',\n    fields: 'Champs',\n    addField: 'Ajouter un champ',\n    noFields: 'Aucun champ dans ce groupe',\n    addGroup: 'Ajouter un groupe',\n    removeGroup: 'Supprimer le groupe',\n    confirmRemove: 'Êtes-vous sûr de vouloir supprimer ce groupe?',\n    createGroup: 'Créer le groupe',\n    columns: 'Colonnes',\n    spacingValues: {\n      small: 'Petit',\n      medium: 'Moyen',\n      large: 'Grand'\n    },\n    spacing: 'Espacement',\n    layoutPreview: 'Aperçu de la mise en page',\n    layoutPreviewDesc: 'Cette fonctionnalité sera disponible prochainement',\n    groups: 'Groupes',\n    fieldsManagement: 'Gestion des champs'\n  }\n};\n\n// Default export for backwards compatibility\nexport default fr;\n","size_bytes":7090},"attached_assets/index_1755701716872.ts":{"content":"\nimport { en } from './en';\nimport { fr } from './fr';\nimport { ar } from './ar';\n\n// Create a combined translations object for use in the application\nexport const translations = { en, fr, ar };\n\nexport { en, fr, ar };\n\nexport * from './utils';\n","size_bytes":245},"attached_assets/utils_1755701716873.ts":{"content":"\n// Define the Translations type that was missing\nexport interface Translations {\n  [key: string]: string | Translations;\n}\n\n// Helper functions for translations\nexport const getNestedTranslation = (obj: any, path: string): string => {\n  const keys = path.split('.');\n  let result = obj;\n  \n  for (const key of keys) {\n    if (result && typeof result === 'object' && key in result) {\n      result = result[key];\n    } else {\n      return path; // Return the key path if translation not found\n    }\n  }\n  \n  return typeof result === 'string' ? result : path;\n};\n","size_bytes":561},"docs/agent-commands-log.md":{"content":"# Agent Commands Log\n\nThis file logs all commands executed during the project setup and development.\n\n## Session Start - August 20, 2025\n\n### Initial Project Assessment\n```bash\n# Analyzed existing project structure\n# Found established frontend framework with React, Tailwind, shadcn/ui\n# Identified database setup with Drizzle ORM and PostgreSQL\n# Reviewed authentication system with passport.js\n","size_bytes":396},"docs/functionalities.md":{"content":"# Functionalities Log\n\nThis file tracks all implemented functionalities and changes made to the marketplace application.\n\n## Project Setup - [Date: August 20, 2025]\n\n✅ **Project Structure Created**\n- Created backend/, frontend/, infra/, docs/, scripts/ directories\n- Initialized git repository\n- Added .gitignore and .env.example\n- Set up tracking files (functionalities.md, agent-commands-log.md)\n\n✅ **Database Schema Implemented**\n- PostgreSQL integration with Drizzle ORM\n- Multi-language support for products and categories\n- User roles (client, seller, admin)\n- Product management with translations\n- Order and inventory tracking\n- Session store integration for authentication\n\n✅ **Authentication System**\n- JWT-based authentication with passport.js\n- Session management with express-session\n- Password hashing with scrypt\n- Role-based access control\n- Protected routes implementation\n- User registration and login APIs\n\n✅ **Multi-Language Support**\n- i18next integration for English, French, Arabic\n- Translation files for all UI texts\n- Language switcher component with flag icons\n- RTL support for Arabic language\n- Dynamic language switching without page reload\n- Fallback mechanism to English for missing translations\n\n✅ **Frontend Components**\n- Header with navigation, search, language switcher, user menu\n- Footer with links and social media\n- Product cards with ratings, pricing, vendor info\n- Category grid with icons and hover effects\n- Vendor cards with ratings and product counts\n- Language switcher dropdown with flags\n\n✅ **Authentication Page**\n- Two-column layout with forms and hero section\n- Login and registration forms with validation\n- Role selection (Client, Seller, Admin)\n- Form validation with Zod schemas\n- Error handling and loading states\n- Responsive design with purple theme\n\n✅ **Role-Based Dashboards**\n- Client Dashboard: Orders, wishlist, reviews tracking\n- Seller Dashboard: Product management, sales analytics, inventory\n- Admin Dashboard: User management, vendor approval, platform stats\n- Protected routes based on user roles\n- Real-time stats and metrics display\n- Quick action buttons for common tasks\n\n✅ **Home Page Features**\n- Hero section with call-to-action buttons\n- Featured products grid with sorting options\n- Category navigation with icons\n- Vendor spotlight section\n- Dashboard preview cards for each role\n- Responsive design with loading states\n\n✅ **API Integration**\n- RESTful API endpoints for products, categories, vendors\n- Dashboard statistics APIs for each role\n- Error handling and loading states\n- Real-time data fetching with React Query\n- Fallback to mock data when APIs are unavailable\n\n✅ **UI/UX Enhancements**\n- Purple color theme throughout the application\n- Consistent typography and spacing\n- Hover effects and animations\n- Loading skeletons for better UX\n- Responsive design for all screen sizes\n- Accessible components with proper ARIA labels\n\n## Technical Implementation Details\n\n### Database Models\n- Users with role-based permissions\n- Products with multilingual translations\n- Categories with translation support\n- Orders and order items tracking\n- Session management for authentication\n\n### Security Features\n- Password hashing with scrypt\n- JWT token authentication\n- Protected API routes\n- Role-based access control\n- Session management with secure cookies\n\n### Performance Optimizations\n- React Query for efficient data fetching\n- Loading states and skeleton components\n- Optimized images with proper sizing\n- Lazy loading for large datasets\n- Responsive design patterns\n\n### Accessibility\n- Proper semantic HTML structure\n- ARIA labels for interactive elements\n- Keyboard navigation support\n- Screen reader compatibility\n- Color contrast compliance\n\n## Next Steps (Planned Features)\n\n### Product Management\n- [ ] Add/Edit products with multilingual support\n- [ ] Image upload functionality\n- [ ] Inventory management system\n- [ ] Product filtering and search\n- [ ] Advanced product categories\n\n### E-commerce Features\n- [ ] Shopping cart functionality\n- [ ] Checkout and payment processing\n- [ ] Order tracking system\n- [ ] Shipping and delivery management\n- [ ] Customer reviews and ratings\n\n### Vendor Management\n- [ ] Vendor registration and verification\n- [ ] Store customization options\n- [ ] Vendor analytics and reports\n- [ ] Commission and payment system\n- [ ] Vendor communication tools\n\n### Admin Features\n- [ ] Advanced user management\n- [ ] Content moderation tools\n- [ ] Platform analytics and insights\n- [ ] System configuration options\n- [ ] Automated reporting system\n\n### Mobile Experience\n- [ ] Progressive Web App (PWA) features\n- [ ] Mobile-specific optimizations\n- [ ] Touch gesture support\n- [ ] Offline functionality\n- [ ] Push notifications\n\n---\n\n*Last updated: August 20, 2025*\n","size_bytes":4806},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\nimport { emailService } from \"./emailService\";\nimport { createNotification } from \"./routes\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function setupAuth(app: Express) {\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET!,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: string, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  // Import multer configuration from routes for file upload\n  const upload = multer({\n    storage: multer.diskStorage({\n      destination: (req, file, cb) => {\n        const uploadsDir = path.join(process.cwd(), \"uploads\");\n        if (!fs.existsSync(uploadsDir)) {\n          fs.mkdirSync(uploadsDir, { recursive: true });\n        }\n        cb(null, uploadsDir);\n      },\n      filename: (req, file, cb) => {\n        const timestamp = Date.now();\n        const randomString = Math.random().toString(36).substring(2, 15);\n        const extension = path.extname(file.originalname);\n        const filename = `${timestamp}_${randomString}${extension}`;\n        cb(null, filename);\n      },\n    }),\n    limits: {\n      fileSize: 5 * 1024 * 1024, // 5MB limit\n    },\n    fileFilter: (req, file, cb) => {\n      if (file.mimetype.startsWith(\"image/\")) {\n        cb(null, true);\n      } else {\n        cb(new Error(\"Only image files are allowed\"));\n      }\n    },\n  });\n\n  app.post(\"/api/register\", upload.single(\"avatar\"), async (req, res, next) => {\n    try {\n      // Prevent admin registration\n      if (req.body.role === \"admin\") {\n        return res\n          .status(403)\n          .json({ error: \"Admin registration is not allowed\" });\n      }\n\n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(req.body.username);\n      if (existingUser) {\n        return res.status(400).json({ error: \"Username already exists\" });\n      }\n\n      // Check if email already exists\n      const existingEmail = await storage.getUserByEmail(req.body.email);\n      if (existingEmail) {\n        return res.status(400).json({ error: \"Email already exists\" });\n      }\n\n      // Handle avatar file upload\n      let avatarPath = null;\n      if (req.file) {\n        avatarPath = `/uploads/${req.file.filename}`;\n      }\n\n      // Create user data object\n      const userData = {\n        username: req.body.username,\n        email: req.body.email,\n        password: await hashPassword(req.body.password),\n        firstName: req.body.firstName,\n        lastName: req.body.lastName,\n        role: req.body.role,\n        avatar: avatarPath,\n        // Seller-specific fields (only if role is seller)\n        ...(req.body.role === \"seller\" && {\n          storeName: req.body.storeName,\n          storeDescription: req.body.storeDescription,\n          businessType: req.body.businessType,\n          businessAddress: req.body.businessAddress,\n          businessPhone: req.body.businessPhone,\n          businessWebsite: req.body.businessWebsite,\n          taxId: req.body.taxId,\n        }),\n      };\n\n      const user = await storage.createUser(userData);\n\n      // Generate email verification token\n      const verificationToken = emailService.generateVerificationToken();\n      await storage.setEmailVerificationToken(user.id, verificationToken);\n\n      // Send verification email instead of welcome email\n      try {\n        await emailService.sendEmailVerification(\n          user.email,\n          user.firstName,\n          verificationToken,\n        );\n        console.log(`Verification email sent to ${user.email}`);\n      } catch (emailError) {\n        console.error(\"Failed to send verification email:\", emailError);\n        return res\n          .status(500)\n          .json({ error: \"Failed to send verification email\" });\n      }\n\n      // Create notification for new user registration\n      try {\n        if (user.role === \"seller\") {\n          // Notify admins about new seller registration\n          await createNotification({\n            userId: null, // Global notification for admins\n            type: \"seller_registration\",\n            title: \"New Seller Registration\",\n            message: `${user.firstName} ${user.lastName} has registered as a seller and is awaiting approval`,\n            data: {\n              userId: user.id,\n              userEmail: user.email,\n              userRole: user.role,\n            },\n            isRead: false,\n          });\n        } else {\n          // Notify admins about new user registration\n          await createNotification({\n            userId: null, // Global notification for admins\n            type: \"user_registration\",\n            title: \"New User Registration\",\n            message: `${user.firstName} ${user.lastName} has registered as a ${user.role}`,\n            data: {\n              userId: user.id,\n              userEmail: user.email,\n              userRole: user.role,\n            },\n            isRead: false,\n          });\n        }\n      } catch (notificationError) {\n        console.error(\"Failed to create notification:\", notificationError);\n        // Don't fail registration if notification fails\n      }\n\n      res.status(201).json({\n        message:\n          \"Registration successful! Please check your email to verify your account.\",\n        userId: user.id,\n        emailSent: true,\n      });\n    } catch (error) {\n      console.error(\"Registration error:\", error);\n      res.status(500).json({ error: \"Registration failed\" });\n    }\n  });\n\n  app.post(\"/api/login\", (req, res, next) => {\n    passport.authenticate(\"local\", (err: any, user: any, info: any) => {\n      if (err) return next(err);\n      if (!user) {\n        return res.status(401).json({ error: \"Invalid credentials\" });\n      }\n\n      // Check email verification\n      if (!user.emailVerified) {\n        return res\n          .status(403)\n          .send(\"Please verify your email address before logging in\");\n      }\n\n      // Check user status - block inactive users\n      if (user.status && user.status !== \"Active\") {\n        return res.status(403).json({\n          error: \"Now You can't use your dashboard more, Please Contact to Admin\",\n          userStatus: user.status,\n          blocked: true,\n        });\n      }\n\n      // Fallback check for users without status field (backward compatibility)\n      if (!user.status && !user.isActive) {\n        return res.status(403).json({\n          error: \"Now You can't use your dashboard more, Please Contact to Admin\",\n          userStatus: \"Inactive\",\n          blocked: true,\n        });\n      }\n\n      // For sellers, check approval status\n      if (user.role === \"seller\" && user.sellerStatus !== \"approved\") {\n        let message = \"Your seller account is pending approval\";\n        if (user.sellerStatus === \"rejected\") {\n          message =\n            \"Your seller application was rejected. Please contact support.\";\n        }\n        return res.status(403).json({\n          error: message,\n          needsApproval: true,\n          sellerStatus: user.sellerStatus,\n        });\n      }\n\n      req.login(user, (err) => {\n        if (err) return next(err);\n        res.status(200).json(user);\n      });\n    })(req, res, next);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n\n  // Forgot password route\n  app.post(\"/api/forgot-password\", async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists or not for security\n        return res.json({\n          message:\n            \"If an account with this email exists, you will receive a password reset email.\",\n        });\n      }\n\n      // Generate reset token\n      const resetToken = emailService.generateResetToken();\n      const expiry = new Date(Date.now() + 60 * 60 * 1000); // 1 hour from now\n\n      // Save reset token to database\n      const tokenSaved = await storage.setPasswordResetToken(\n        email,\n        resetToken,\n        expiry,\n      );\n      if (!tokenSaved) {\n        return res\n          .status(500)\n          .json({ error: \"Failed to generate reset token\" });\n      }\n\n      // Send reset email\n      try {\n        await emailService.sendPasswordResetEmail(email, resetToken);\n        console.log(`Password reset email sent to ${email}`);\n      } catch (emailError) {\n        console.error(\"Failed to send reset email:\", emailError);\n        return res.status(500).json({ error: \"Failed to send reset email\" });\n      }\n\n      res.json({\n        message:\n          \"If an account with this email exists, you will receive a password reset email.\",\n      });\n    } catch (error) {\n      console.error(\"Forgot password error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Reset password route\n  app.post(\"/api/reset-password\", async (req, res) => {\n    try {\n      const { token, password } = req.body;\n\n      if (!token || !password) {\n        return res\n          .status(400)\n          .json({ error: \"Token and password are required\" });\n      }\n\n      if (password.length < 6) {\n        return res\n          .status(400)\n          .json({ error: \"Password must be at least 6 characters long\" });\n      }\n\n      // Find user by reset token\n      const user = await storage.getUserByResetToken(token);\n      if (!user) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid or expired reset token\" });\n      }\n\n      // Hash new password\n      const hashedPassword = await hashPassword(password);\n\n      // Update password\n      const passwordUpdated = await storage.updatePassword(\n        user.id,\n        hashedPassword,\n      );\n      if (!passwordUpdated) {\n        return res.status(500).json({ error: \"Failed to update password\" });\n      }\n\n      // Clear reset token\n      await storage.clearPasswordResetToken(user.id);\n\n      res.json({ message: \"Password has been reset successfully\" });\n    } catch (error) {\n      console.error(\"Reset password error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Email verification route\n  app.get(\"/api/verify-email\", async (req, res) => {\n    try {\n      const { token } = req.query;\n\n      if (!token) {\n        return res\n          .status(400)\n          .json({ error: \"Verification token is required\" });\n      }\n\n      const user = await storage.verifyEmail(token as string);\n      if (!user) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid or expired verification token\" });\n      }\n\n      // Send welcome email after verification\n      try {\n        await emailService.sendWelcomeEmail(user.email, user.firstName);\n        console.log(`Welcome email sent to ${user.email} after verification`);\n      } catch (emailError) {\n        console.error(\"Failed to send welcome email:\", emailError);\n        // Don't fail verification if welcome email fails\n      }\n\n      res.json({\n        message: \"Email verified successfully!\",\n        user: {\n          id: user.id,\n          email: user.email,\n          role: user.role,\n          emailVerified: user.emailVerified,\n        },\n      });\n    } catch (error) {\n      console.error(\"Email verification error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Admin routes for seller management\n  app.get(\"/api/admin/pending-sellers\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const pendingSellers = await storage.getPendingSellers();\n      res.json(pendingSellers);\n    } catch (error) {\n      console.error(\"Error fetching pending sellers:\", error);\n      res.status(500).json({ error: \"Failed to fetch pending sellers\" });\n    }\n  });\n\n  app.post(\"/api/admin/approve-seller\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { userId, approved } = req.body;\n\n      if (!userId || typeof approved !== \"boolean\") {\n        return res.status(400).json({ error: \"Invalid request parameters\" });\n      }\n\n      const status = approved ? \"approved\" : \"rejected\";\n      const success = await storage.updateSellerStatus(userId, status);\n\n      if (!success) {\n        return res\n          .status(500)\n          .json({ error: \"Failed to update seller status\" });\n      }\n\n      // Get user details for email notification\n      const user = await storage.getUser(userId);\n      if (user) {\n        try {\n          await emailService.sendSellerApprovalNotification(\n            user.email,\n            user.firstName,\n            approved,\n          );\n          console.log(\n            `Seller ${approved ? \"approval\" : \"rejection\"} email sent to ${user.email}`,\n          );\n        } catch (emailError) {\n          console.error(\"Failed to send seller approval email:\", emailError);\n          // Don't fail the approval if email fails\n        }\n      }\n\n      res.json({\n        message: `Seller ${approved ? \"approved\" : \"rejected\"} successfully`,\n        status,\n      });\n    } catch (error) {\n      console.error(\"Error updating seller status:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n\n  // Resend verification email\n  app.post(\"/api/resend-verification\", async (req, res) => {\n    try {\n      const { email } = req.body;\n\n      if (!email) {\n        return res.status(400).json({ error: \"Email is required\" });\n      }\n\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        // Don't reveal if email exists\n        return res.json({\n          message:\n            \"If an account with this email exists, a verification email has been sent.\",\n        });\n      }\n\n      if (user.emailVerified) {\n        return res.status(400).json({ error: \"Email is already verified\" });\n      }\n\n      // Generate new verification token\n      const verificationToken = emailService.generateVerificationToken();\n      await storage.setEmailVerificationToken(user.id, verificationToken);\n\n      // Send verification email\n      try {\n        await emailService.sendEmailVerification(\n          user.email,\n          user.firstName,\n          verificationToken,\n        );\n        console.log(`Verification email resent to ${user.email}`);\n      } catch (emailError) {\n        console.error(\"Failed to resend verification email:\", emailError);\n        return res\n          .status(500)\n          .json({ error: \"Failed to send verification email\" });\n      }\n\n      res.json({\n        message:\n          \"If an account with this email exists, a verification email has been sent.\",\n      });\n    } catch (error) {\n      console.error(\"Resend verification error:\", error);\n      res.status(500).json({ error: \"Internal server error\" });\n    }\n  });\n}\n\n// Export password hashing functions for use in other modules\nexport { hashPassword, comparePasswords };\n","size_bytes":16864},"server/db.ts":{"content":"// import { Pool, neonConfig } from '@neondatabase/serverless';\n// import { drizzle } from 'drizzle-orm/neon-serverless';\n// import ws from \"ws\";\n// import * as schema from \"@shared/schema\";\n\n// neonConfig.webSocketConstructor = ws;\n\n// if (!process.env.DATABASE_URL) {\n//   throw new Error(\n//     \"DATABASE_URL must be set. Did you forget to provision a database?\",\n//   );\n// }\n\n// export const pool = new Pool({ connectionString: process.env.DATABASE_URL });\n// export const db = drizzle({ client: pool, schema });\n\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport * as schema from \"@shared/schema\";\nimport dotenv from \"dotenv\";\nimport pkg from \"pg\";\n\ndotenv.config(); // loads DATABASE_URL from .env\n\nconst { Pool } = pkg;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\"\n  );\n}\n\nlet pool: typeof Pool.prototype | null = null;\nlet db: ReturnType<typeof drizzle> | null = null;\n\n// Initialize database connection with error handling\ntry {\n  const connectionString = process.env.DATABASE_URL;\n  const isNeonDatabase = connectionString.includes('neon.tech');\n  \n  pool = new Pool({\n    connectionString: connectionString,\n    ssl: isNeonDatabase ? { rejectUnauthorized: false } : undefined,\n    connectionTimeoutMillis: 10000,\n    idleTimeoutMillis: 30000,\n    max: 10\n  });\n  \n  db = drizzle(pool, { schema });\n  \n  // Test the connection\n  pool.connect().then(client => {\n    console.log(\"Database connection established successfully ✅\");\n    client.release();\n  }).catch(error => {\n    console.error(\"Database connection test failed:\", error);\n    console.log(\"The application will continue with limited functionality.\");\n    db = null;\n    pool = null;\n  });\n  \n} catch (error) {\n  console.error(\"Failed to initialize database connection:\", error);\n  console.log(\"The application will continue with limited functionality.\");\n  db = null;\n  pool = null;\n}\n\nexport { pool, db };\n","size_bytes":1972},"server/dbInit.ts":{"content":"import { migrate } from \"drizzle-orm/node-postgres/migrator\";\nimport { drizzle } from \"drizzle-orm/node-postgres\";\nimport * as schema from \"../shared/schema\";\nimport pg from \"pg\";\nimport { exec } from \"child_process\";\nimport util from \"util\";\n\nconst execPromise = util.promisify(exec);\nconst { Client } = pg;\nconst connectionString = process.env.DATABASE_URL!;\n\nasync function runSeed(db: any) {\n  console.log(\"Running seeders...\");\n  // 👉 Put your seeding logic here\n  await execPromise(\"npm run seed\");\n  console.log(\"Seeding complete ✅\");\n}\n\nexport async function initDatabase() {\n  try {\n    console.log(\"Attempting to connect to database...\");\n    \n    // Test connection first\n    const testClient = new Client({ \n      connectionString,\n      ssl: connectionString.includes('neon.tech') ? { rejectUnauthorized: false } : undefined,\n      connectionTimeoutMillis: 10000\n    });\n    \n    await testClient.connect();\n    console.log(\"Database connection test successful ✅\");\n    await testClient.end();\n    \n    // For Neon databases, we don't need to create the database manually\n    // as it's already provisioned. Skip the database creation step.\n    const isNeonDatabase = connectionString.includes('neon.tech');\n    \n    if (isNeonDatabase) {\n      console.log(\"Detected Neon database, skipping database creation step...\");\n      \n      // Connect directly to the target database\n      const client = new Client({ \n        connectionString,\n        ssl: { rejectUnauthorized: false } // Add SSL configuration for Neon\n      });\n      await client.connect();\n      console.log(\"Connected to database successfully ✅\");\n\n      const db = drizzle(client, { schema });\n\n      console.log(\"Running migrations...\");\n      await migrate(db, { migrationsFolder: \"./drizzle\" });\n      console.log(\"Migrations complete ✅\");\n\n      // For Neon databases, always run seeding to ensure data exists\n      try {\n        await runSeed(db);\n      } catch (seedError) {\n        console.warn(\"Seeding failed, but database is ready:\", seedError);\n      }\n\n      return db;\n    } else {\n      // Original logic for non-Neon databases\n      const url = new URL(connectionString);\n      const dbName = url.pathname.replace(\"/\", \"\");\n\n      // Default postgres connection (to create DB if missing)\n      const defaultUrl = new URL(connectionString);\n      defaultUrl.pathname = \"/postgres\";\n\n      const defaultClient = new Client({ connectionString: defaultUrl.toString() });\n      await defaultClient.connect();\n\n      const res = await defaultClient.query(\n        `SELECT 1 FROM pg_database WHERE datname = $1`,\n        [dbName]\n      );\n\n      let freshDb = false;\n\n      if (res.rowCount === 0) {\n        console.log(`Database \"${dbName}\" does not exist. Creating...`);\n        await defaultClient.query(`CREATE DATABASE \"${dbName}\"`);\n        freshDb = true;\n      } else {\n        console.log(`Database \"${dbName}\" already exists ✅`);\n      }\n\n      await defaultClient.end();\n\n      // Connect to target DB\n      const client = new Client({ connectionString });\n      await client.connect();\n\n      const db = drizzle(client, { schema });\n\n      console.log(\"Running migrations...\");\n      await migrate(db, { migrationsFolder: \"./drizzle\" });\n      console.log(\"Migrations complete ✅\");\n\n      if (freshDb) {\n        try {\n          await runSeed(db);\n        } catch (seedError) {\n          console.warn(\"Seeding failed, but database is ready:\", seedError);\n        }\n      }\n\n      return db;\n    }\n  } catch (error) {\n    console.error(\"Database initialization failed:\", error);\n    console.log(\"Note: The application will attempt to continue with limited functionality.\");\n    console.log(\"Some features may not work properly without a database connection.\");\n    \n    // Don't throw the error, let the app continue\n    return null;\n  }\n}\n","size_bytes":3852},"server/emailService.ts":{"content":"import nodemailer from 'nodemailer';\nimport { randomBytes } from 'crypto';\n\n// Create transporter using the SMTP credentials\nconst transporter = nodemailer.createTransport({\n  host: process.env.SMTP_HOST,\n  port: parseInt(process.env.SMTP_PORT || '587'),\n  secure: false, // true for 465, false for other ports\n  auth: {\n    user: process.env.SMTP_USER,\n    pass: process.env.SMTP_PASS,\n  },\n});\n\nexport interface EmailOptions {\n  to: string;\n  subject: string;\n  html: string;\n  text?: string;\n}\n\nexport class EmailService {\n  private fromEmail = process.env.SMTP_USER || 'test@devnaza.com';\n\n  async sendEmail(options: EmailOptions): Promise<boolean> {\n    try {\n      const mailOptions = {\n        from: `\"E-commerce Marketplace\" <${this.fromEmail}>`,\n        to: options.to,\n        subject: options.subject,\n        html: options.html,\n        text: options.text,\n      };\n\n      const info = await transporter.sendMail(mailOptions);\n      console.log('Email sent successfully:', info.messageId);\n      return true;\n    } catch (error) {\n      console.error('Error sending email:', error);\n      return false;\n    }\n  }\n\n  async sendWelcomeEmail(email: string, username: string): Promise<boolean> {\n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Welcome to E-commerce Marketplace</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>Welcome to E-commerce Marketplace!</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hello ${username}!</h2>\n          <p>Thank you for joining our marketplace. We're excited to have you as part of our community.</p>\n          <p>With your account, you can:</p>\n          <ul>\n            <li>Browse thousands of products from verified sellers</li>\n            <li>Track your orders and manage your profile</li>\n            <li>Enjoy secure payments and fast delivery</li>\n            <li>Get exclusive deals and offers</li>\n          </ul>\n          <p>Start exploring our marketplace and find amazing products!</p>\n          <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}\" class=\"button\">Start Shopping</a>\n        </div>\n        <div class=\"footer\">\n          <p>Thank you for choosing E-commerce Marketplace</p>\n          <p>If you have any questions, feel free to contact our support team.</p>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const text = `\n      Welcome to E-commerce Marketplace!\n      \n      Hello ${username}!\n      \n      Thank you for joining our marketplace. We're excited to have you as part of our community.\n      \n      With your account, you can:\n      - Browse thousands of products from verified sellers\n      - Track your orders and manage your profile\n      - Enjoy secure payments and fast delivery\n      - Get exclusive deals and offers\n      \n      Start exploring our marketplace and find amazing products!\n      \n      Visit: ${process.env.FRONTEND_URL || 'http://localhost:5000'}\n      \n      Thank you for choosing E-commerce Marketplace\n    `;\n\n    return this.sendEmail({\n      to: email,\n      subject: 'Welcome to E-commerce Marketplace',\n      html,\n      text,\n    });\n  }\n\n  async sendPasswordResetEmail(email: string, resetToken: string): Promise<boolean> {\n    const resetUrl = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/reset-password?token=${resetToken}`;\n    \n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Password Reset Request</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #dc3545; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n          .warning { background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>Password Reset Request</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Reset Your Password</h2>\n          <p>We received a request to reset your password for your E-commerce Marketplace account.</p>\n          <p>Click the button below to reset your password:</p>\n          <a href=\"${resetUrl}\" class=\"button\">Reset Password</a>\n          <div class=\"warning\">\n            <p><strong>Important:</strong></p>\n            <ul>\n              <li>This link will expire in 1 hour</li>\n              <li>If you didn't request this reset, please ignore this email</li>\n              <li>Your password won't be changed unless you click the link above</li>\n            </ul>\n          </div>\n          <p>If the button doesn't work, copy and paste this link into your browser:</p>\n          <p style=\"word-break: break-all; background: #f1f1f1; padding: 10px; border-radius: 5px;\">${resetUrl}</p>\n        </div>\n        <div class=\"footer\">\n          <p>This email was sent from E-commerce Marketplace</p>\n          <p>If you have any questions, contact our support team.</p>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const text = `\n      Password Reset Request\n      \n      We received a request to reset your password for your E-commerce Marketplace account.\n      \n      Click this link to reset your password: ${resetUrl}\n      \n      Important:\n      - This link will expire in 1 hour\n      - If you didn't request this reset, please ignore this email\n      - Your password won't be changed unless you click the link above\n      \n      This email was sent from E-commerce Marketplace\n    `;\n\n    return this.sendEmail({\n      to: email,\n      subject: 'Password Reset Request - E-commerce Marketplace',\n      html,\n      text,\n    });\n  }\n\n  generateResetToken(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  generateVerificationToken(): string {\n    return randomBytes(32).toString('hex');\n  }\n\n  async sendEmailVerification(email: string, username: string, verificationToken: string): Promise<boolean> {\n    const verificationUrl = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/verify-email?token=${verificationToken}`;\n    \n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>Verify Your Email - E-commerce Marketplace</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #28a745; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; font-weight: bold; }\n          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n          .warning { background: #e3f2fd; border: 1px solid #2196f3; padding: 15px; border-radius: 5px; margin: 20px 0; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>Verify Your Email Address</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hello ${username}!</h2>\n          <p>Thank you for registering with E-commerce Marketplace. To complete your registration, please verify your email address by clicking the button below:</p>\n          \n          <div style=\"text-align: center;\">\n            <a href=\"${verificationUrl}\" class=\"button\">Verify Your Email</a>\n          </div>\n          \n          <div class=\"warning\">\n            <p><strong>Important:</strong></p>\n            <ul>\n              <li>This verification link is required to activate your account</li>\n              <li>Click the button above to verify your email address</li>\n              <li>If you didn't create this account, please ignore this email</li>\n            </ul>\n          </div>\n          \n          <p>If the button doesn't work, copy and paste this link into your browser:</p>\n          <p style=\"word-break: break-all; background: #f1f1f1; padding: 10px; border-radius: 5px;\">${verificationUrl}</p>\n        </div>\n        <div class=\"footer\">\n          <p>This email was sent from E-commerce Marketplace</p>\n          <p>Please do not reply to this email.</p>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const text = `\n      Verify Your Email Address\n      \n      Hello ${username}!\n      \n      Thank you for registering with E-commerce Marketplace. To complete your registration, please verify your email address by clicking this link:\n      \n      ${verificationUrl}\n      \n      Important:\n      - This verification link is required to activate your account\n      - If you didn't create this account, please ignore this email\n      \n      This email was sent from E-commerce Marketplace\n    `;\n\n    return this.sendEmail({\n      to: email,\n      subject: 'Verify Your Email - E-commerce Marketplace',\n      html,\n      text,\n    });\n  }\n\n  async sendSellerApprovalNotification(email: string, username: string, isApproved: boolean): Promise<boolean> {\n    const subject = isApproved ? 'Seller Application Approved!' : 'Seller Application Status Update';\n    \n    const html = `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"utf-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>${subject}</title>\n        <style>\n          body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; max-width: 600px; margin: 0 auto; padding: 20px; }\n          .header { background: linear-gradient(135deg, ${isApproved ? '#28a745' : '#dc3545'} 0%, ${isApproved ? '#20c997' : '#c82333'} 100%); color: white; padding: 30px; text-align: center; border-radius: 8px 8px 0 0; }\n          .content { background: #f9f9f9; padding: 30px; border-radius: 0 0 8px 8px; }\n          .button { display: inline-block; background: #667eea; color: white; padding: 12px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }\n          .footer { text-align: center; margin-top: 30px; color: #666; font-size: 14px; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>${isApproved ? '🎉 Congratulations!' : '📋 Application Update'}</h1>\n        </div>\n        <div class=\"content\">\n          <h2>Hello ${username}!</h2>\n          ${isApproved ? `\n            <p>Great news! Your seller application has been approved by our admin team.</p>\n            <p>You can now:</p>\n            <ul>\n              <li>Access your seller dashboard</li>\n              <li>Add and manage your products</li>\n              <li>Start selling to customers worldwide</li>\n              <li>Track your sales and earnings</li>\n            </ul>\n            <a href=\"${process.env.FRONTEND_URL || 'http://localhost:5000'}/dashboard/seller\" class=\"button\">Access Seller Dashboard</a>\n          ` : `\n            <p>Thank you for your interest in becoming a seller on our marketplace.</p>\n            <p>After careful review, we are unable to approve your seller application at this time.</p>\n            <p>This decision may be due to:</p>\n            <ul>\n              <li>Incomplete application information</li>\n              <li>Documentation requirements not met</li>\n              <li>Other verification issues</li>\n            </ul>\n            <p>You're welcome to contact our support team for more information or to reapply in the future.</p>\n          `}\n        </div>\n        <div class=\"footer\">\n          <p>Thank you for choosing E-commerce Marketplace</p>\n        </div>\n      </body>\n      </html>\n    `;\n\n    const text = `\n      ${subject}\n      \n      Hello ${username}!\n      \n      ${isApproved ? \n        `Great news! Your seller application has been approved. You can now access your seller dashboard and start selling.` :\n        `Thank you for your interest in becoming a seller. We are unable to approve your application at this time. Please contact support for more information.`\n      }\n      \n      Visit: ${process.env.FRONTEND_URL || 'http://localhost:5000'}\n    `;\n\n    return this.sendEmail({\n      to: email,\n      subject,\n      html,\n      text,\n    });\n  }\n}\n\nexport const emailService = new EmailService();","size_bytes":13677},"server/index.ts":{"content":"// import express, { type Request, Response, NextFunction } from \"express\";\n// import { registerRoutes } from \"./routes\";\n// import { setupVite, serveStatic, log } from \"./vite\";\n// import { initDatabase } from \"./dbInit\";\n\n// const app = express();\n// (async () => {\n//   const dbResult = await initDatabase();\n//   if (dbResult === null) {\n//     console.warn(\"⚠️  Database initialization failed. The app will continue with limited functionality.\");\n//   }\n// })();\n// app.use(express.json({ limit: \"50mb\" }));\n// app.use(express.urlencoded({ extended: false, limit: \"50mb\" }));\n\n// app.use((req, res, next) => {\n//   const start = Date.now();\n//   const path = req.path;\n//   let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n//   const originalResJson = res.json;\n//   res.json = function (bodyJson, ...args) {\n//     capturedJsonResponse = bodyJson;\n//     return originalResJson.apply(res, [bodyJson, ...args]);\n//   };\n\n//   res.on(\"finish\", () => {\n//     const duration = Date.now() - start;\n//     if (path.startsWith(\"/api\")) {\n//       let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n//       if (capturedJsonResponse) {\n//         logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n//       }\n\n//       if (logLine.length > 80) {\n//         logLine = logLine.slice(0, 79) + \"…\";\n//       }\n\n//       log(logLine);\n//     }\n//   });\n\n//   next();\n// });\n\n// (async () => {\n//   const server = await registerRoutes(app);\n\n//   app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n//     const status = err.status || err.statusCode || 500;\n//     const message = err.message || \"Internal Server Error\";\n\n//     res.status(status).json({ message });\n//     throw err;\n//   });\n\n//   // importantly only setup vite in development and after\n//   // setting up all the other routes so the catch-all route\n//   // doesn't interfere with the other routes\n//   if (app.get(\"env\") === \"development\") {\n//     await setupVite(app, server);\n//   } else {\n//     serveStatic(app);\n//   }\n\n//   // ALWAYS serve the app on the port specified in the environment variable PORT\n//   // Other ports are firewalled. Default to 5000 if not specified.\n//   // this serves both the API and the client.\n//   // It is the only port that is not firewalled.\n//   const port = parseInt(process.env.PORT || \"5000\", 10);\n//   server.listen(\n//     {\n//       port,\n//       host: \"0.0.0.0\",\n//       reusePort: true,\n//     },\n//     () => {\n//       log(`serving on port ${port}`);\n//     },\n//   );\n// })();\nimport express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { serveStatic, log } from \"./vite\"; // keep serveStatic + log here\nimport { initDatabase } from \"./dbInit\";\n\nconst app = express();\n\n(async () => {\n  const dbResult = await initDatabase();\n  if (dbResult === null) {\n    console.warn(\n      \"⚠️  Database initialization failed. The app will continue with limited functionality.\",\n    );\n  }\n})();\n\napp.use(express.json({ limit: \"50mb\" }));\napp.use(express.urlencoded({ extended: false, limit: \"50mb\" }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  if (app.get(\"env\") === \"development\") {\n    // 🚀 import setupVite only in dev mode\n    const { setupVite } = await import(\"./vite\");\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  const port = parseInt(process.env.PORT || \"5000\", 10);\n  server.listen({ port, host: \"0.0.0.0\", reusePort: true }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":4628},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport express from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { Server as SocketIOServer } from \"socket.io\";\nimport { setupAuth, hashPassword } from \"./auth\";\nimport { storage } from \"./storage\";\nimport { db } from \"./db\";\nimport multer from \"multer\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport {\n  users,\n  notifications,\n  type InsertNotification,\n  categories,\n  categoryTranslations,\n  categoryFeatures,\n  products,\n  insertCategorySchema,\n  insertCategoryTranslationSchema,\n  insertCategoryFeatureSchema,\n} from \"@shared/schema\";\nimport { z } from \"zod\";\nimport { eq, desc, and, isNull, inArray, sql } from \"drizzle-orm\";\nimport Stripe from \"stripe\";\n\n// Global Socket.IO server instance\nlet io: SocketIOServer;\n\n// Ensure uploads directory exists\nconst uploadsDir = path.join(process.cwd(), \"uploads\");\nif (!fs.existsSync(uploadsDir)) {\n  fs.mkdirSync(uploadsDir, { recursive: true });\n}\n\n// Configure multer for image uploads\nconst storage_multer = multer.diskStorage({\n  destination: (req, file, cb) => {\n    cb(null, uploadsDir);\n  },\n  filename: (req, file, cb) => {\n    const timestamp = Date.now();\n    const randomString = Math.random().toString(36).substring(2, 15);\n    const extension = path.extname(file.originalname);\n    const filename = `${timestamp}_${randomString}${extension}`;\n    cb(null, filename);\n  },\n});\n\nconst upload = multer({\n  storage: storage_multer,\n  limits: {\n    fileSize: 5 * 1024 * 1024, // 5MB limit\n  },\n  fileFilter: (req, file, cb) => {\n    if (file.mimetype.startsWith(\"image/\")) {\n      cb(null, true);\n    } else {\n      cb(new Error(\"Only image files are allowed\"));\n    }\n  },\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Setup authentication routes\n  setupAuth(app);\n\n  // Serve uploaded images statically\n  app.use(\"/uploads\", express.static(uploadsDir));\n\n  // Image upload API endpoint\n  app.post(\"/api/upload/images\", upload.array(\"images\", 8), (req, res) => {\n    try {\n      if (!req.files || !Array.isArray(req.files)) {\n        return res.status(400).json({ error: \"No files uploaded\" });\n      }\n\n      const uploadedFiles = req.files.map((file) => ({\n        filename: file.filename,\n        originalname: file.originalname,\n        path: `/uploads/${file.filename}`,\n        size: file.size,\n      }));\n\n      res.json({\n        message: \"Images uploaded successfully\",\n        files: uploadedFiles,\n      });\n    } catch (error) {\n      console.error(\"Error uploading images:\", error);\n      res.status(500).json({ error: \"Failed to upload images\" });\n    }\n  });\n\n  // Categories API\n  app.get(\"/api/categories\", async (req, res) => {\n    const lang = (req.query.lang as string) || \"en\";\n    const excludeSuper = req.query.excludeSuper === \"true\";\n    try {\n      const categories = await storage.getCategoriesWithTranslations(lang);\n\n      // Filter out supercategories if requested\n      const filteredCategories = excludeSuper\n        ? categories.filter((cat) => cat.type !== \"supercategory\")\n        : categories;\n\n      res.json(filteredCategories);\n    } catch (error) {\n      console.error(\"Error fetching categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Public Category Features API (for sellers)\n  app.get(\"/api/categories/:id/features\", async (req, res) => {\n    const categoryId = req.params.id;\n\n    try {\n      if (!db) {\n        return res.status(500).json({ error: \"Database not available\" });\n      }\n\n      const category = await db\n        .select({\n          id: categories.id,\n          type: categories.type,\n          parentId: categories.parentId,\n          slug: categories.slug,\n          icon: categories.icon,\n          imageUrl: categories.imageUrl,\n          isActive: categories.isActive,\n          isFeatured: categories.isFeatured,\n          sortOrder: categories.sortOrder,\n          metadata: categories.metadata,\n          createdAt: categories.createdAt,\n          updatedAt: categories.updatedAt,\n        })\n        .from(categories)\n        .where(eq(categories.id, categoryId))\n        .limit(1);\n\n      if (category.length === 0) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n\n      // Fetch features separately\n      const features = await db\n        .select()\n        .from(categoryFeatures)\n        .where(eq(categoryFeatures.categoryId, categoryId));\n\n      res.json(features || []);\n    } catch (error) {\n      console.error(\"Error fetching category features:\", error);\n      res.status(500).json({ error: \"Failed to fetch category features\" });\n    }\n  });\n\n  // Admin Categories Management API\n  app.get(\"/api/admin/categories\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      if (!db) {\n        return res.status(500).json({ error: \"Database not available\" });\n      }\n\n      // Fetch categories with relations (exclude soft deleted)\n      const categoriesWithData = await db.query.categories.findMany({\n        where: isNull(categories.deletedAt),\n        with: {\n          translations: true,\n          features: true,\n        },\n      });\n\n      // Calculate subcategory count and product count for each category\n      const categoriesWithCount = await Promise.all(\n        categoriesWithData.map(async (category) => {\n          const subcategoryCount = categoriesWithData.filter(\n            (subcat) => subcat.parentId === category.id,\n          ).length;\n\n          let productCount = 0;\n\n          if (category.type === \"super\") {\n            // For supercategories, count products in all child categories\n            const childCategories = categoriesWithData.filter(\n              (child) => child.parentId === category.id,\n            );\n\n            if (childCategories.length > 0) {\n              const childCategoryIds = childCategories.map((child) => child.id);\n              const productCountResult = await db\n                .select({ count: sql<number>`COUNT(*)::int` })\n                .from(products)\n                .where(\n                  and(\n                    inArray(products.categoryId, childCategoryIds),\n                    eq(products.isActive, true),\n                    isNull(products.deletedAt),\n                  ),\n                );\n              productCount = productCountResult[0]?.count || 0;\n            }\n          } else if (category.type === \"standard\") {\n            // For standard categories, count products directly assigned to this category\n            const productCountResult = await db\n              .select({ count: sql<number>`COUNT(*)::int` })\n              .from(products)\n              .where(\n                and(\n                  eq(products.categoryId, category.id),\n                  eq(products.isActive, true),\n                  isNull(products.deletedAt),\n                ),\n              );\n            productCount = productCountResult[0]?.count || 0;\n          }\n\n          return {\n            ...category,\n            subcategoryCount,\n            productCount,\n          };\n        }),\n      );\n\n      res.json(categoriesWithCount);\n    } catch (error) {\n      console.error(\"Error fetching admin categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch categories\" });\n    }\n  });\n\n  // Create Category\n  app.post(\"/api/admin/categories\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    const categorySchema = z.object({\n      type: z.string(),\n      parentId: z.string().optional(),\n      slug: z.string(),\n      icon: z.string(),\n      imageUrl: z.string().optional(),\n      isActive: z.boolean().default(true),\n      isFeatured: z.boolean().default(false),\n      sortOrder: z.number().default(0),\n      metadata: z.record(z.any()).default({}),\n      translations: z.array(\n        z.object({\n          language: z.string(),\n          name: z.string(),\n          description: z.string().optional(),\n          seoTitle: z.string().optional(),\n          seoDescription: z.string().optional(),\n          seoKeywords: z.string().optional(),\n        }),\n      ),\n      features: z\n        .array(\n          z.object({\n            name: z.string(),\n            type: z.string(),\n            value: z.string().optional(),\n            isRequired: z.boolean().default(false),\n            options: z.array(z.string()).default([]),\n            sortOrder: z.number().default(0),\n          }),\n        )\n        .default([]),\n    });\n\n    try {\n      console.log(\n        \"🚀 Server: POST /api/admin/categories - Request body:\",\n        req.body,\n      );\n      const data = categorySchema.parse(req.body);\n      console.log(\"✅ Server: Schema validation passed:\", data);\n\n      if (!db) {\n        return res.status(500).json({ error: \"Database not available\" });\n      }\n\n      // Create category\n      const [category] = await db\n        .insert(categories)\n        .values({\n          type: data.type,\n          parentId: data.parentId || null,\n          slug: data.slug,\n          icon: data.icon,\n          imageUrl: data.imageUrl,\n          isActive: data.isActive,\n          isFeatured: data.isFeatured,\n          sortOrder: data.sortOrder,\n          metadata: data.metadata,\n        })\n        .returning();\n\n      // Create translations\n      if (data.translations.length > 0) {\n        await db.insert(categoryTranslations).values(\n          data.translations.map((trans) => ({\n            categoryId: category.id,\n            language: trans.language,\n            name: trans.name,\n            description: trans.description,\n            seoTitle: trans.seoTitle,\n            seoDescription: trans.seoDescription,\n            seoKeywords: trans.seoKeywords,\n          })),\n        );\n      }\n\n      // Create features\n      if (data.features.length > 0) {\n        await db.insert(categoryFeatures).values(\n          data.features.map((feature, index) => ({\n            categoryId: category.id,\n            name: feature.name,\n            type: feature.type,\n            value: feature.value || null,\n            isRequired: feature.isRequired,\n            options: feature.options,\n            sortOrder: feature.sortOrder || index,\n          })),\n        );\n      }\n\n      // Fetch the complete category with relations\n      const createdCategory = await db.query.categories.findFirst({\n        where: eq(categories.id, category.id),\n        with: {\n          translations: true,\n          features: true,\n        },\n      });\n\n      res.status(201).json(createdCategory);\n    } catch (error) {\n      console.error(\"❌ Server: Error creating category:\", error);\n      if (error instanceof z.ZodError) {\n        console.error(\"🔍 Server: Validation errors:\", error.errors);\n        return res\n          .status(400)\n          .json({ error: \"Invalid data\", details: error.errors });\n      }\n      console.error(\"💥 Server: Database or other error:\", error);\n      res.status(500).json({ error: \"Failed to create category\" });\n    }\n  });\n\n  // Update Category\n  app.put(\"/api/admin/categories/:id\", async (req, res) => {\n    console.log(\"Req got it for update cat\");\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    const categoryId = req.params.id;\n    const updateSchema = z.object({\n      type: z.string().optional(),\n      parentId: z.string().optional(),\n      slug: z.string().optional(),\n      icon: z.string().optional(),\n      imageUrl: z.string().optional(),\n      isActive: z.boolean().optional(),\n      isFeatured: z.boolean().optional(),\n      sortOrder: z.number().optional(),\n      metadata: z.record(z.any()).optional(),\n      translations: z\n        .array(\n          z.object({\n            id: z.string().optional(),\n            language: z.string(),\n            name: z.string(),\n            description: z.string().optional(),\n            seoTitle: z.string().optional(),\n            seoDescription: z.string().optional(),\n            seoKeywords: z.string().optional(),\n          }),\n        )\n        .optional(),\n      features: z\n        .array(\n          z.object({\n            id: z.string().optional(),\n            name: z.string(),\n            type: z.string(),\n            value: z.string().optional(),\n            isRequired: z.boolean().default(false),\n            options: z.array(z.string()).default([]),\n            sortOrder: z.number().default(0),\n          }),\n        )\n        .optional(),\n    });\n\n    try {\n      const data = updateSchema.parse(req.body);\n\n      // Update category\n      const updateData: any = {};\n      if (data.type !== undefined) updateData.type = data.type;\n      if (data.parentId !== undefined) updateData.parentId = data.parentId;\n      if (data.slug !== undefined) updateData.slug = data.slug;\n      if (data.icon !== undefined) updateData.icon = data.icon;\n      if (data.imageUrl !== undefined) updateData.imageUrl = data.imageUrl;\n      if (data.isActive !== undefined) updateData.isActive = data.isActive;\n      if (data.isFeatured !== undefined)\n        updateData.isFeatured = data.isFeatured;\n      if (data.sortOrder !== undefined) updateData.sortOrder = data.sortOrder;\n      if (data.metadata !== undefined) updateData.metadata = data.metadata;\n      updateData.updatedAt = new Date();\n\n      if (Object.keys(updateData).length > 1) {\n        // More than just updatedAt\n        await db\n          .update(categories)\n          .set(updateData)\n          .where(eq(categories.id, categoryId));\n      }\n\n      // Update translations if provided\n      if (data.translations) {\n        // Delete existing translations\n        await db\n          .delete(categoryTranslations)\n          .where(eq(categoryTranslations.categoryId, categoryId));\n\n        // Insert new translations\n        if (data.translations.length > 0) {\n          await db.insert(categoryTranslations).values(\n            data.translations.map((trans) => ({\n              categoryId,\n              language: trans.language,\n              name: trans.name,\n              description: trans.description,\n              seoTitle: trans.seoTitle,\n              seoDescription: trans.seoDescription,\n              seoKeywords: trans.seoKeywords,\n            })),\n          );\n        }\n      }\n\n      // Update features if provided\n      if (data.features) {\n        // Delete existing features\n        await db\n          .delete(categoryFeatures)\n          .where(eq(categoryFeatures.categoryId, categoryId));\n\n        // Insert new features\n        if (data.features.length > 0) {\n          await db.insert(categoryFeatures).values(\n            data.features.map((feature, index) => ({\n              categoryId,\n              name: feature.name,\n              type: feature.type,\n              value: feature.value || null,\n              isRequired: feature.isRequired,\n              options: feature.options,\n              sortOrder: feature.sortOrder || index,\n            })),\n          );\n        }\n      }\n\n      // Fetch updated category\n      const updatedCategory = await db.query.categories.findFirst({\n        where: eq(categories.id, categoryId),\n        with: {\n          translations: true,\n          features: true,\n        },\n      });\n\n      res.json(updatedCategory);\n    } catch (error) {\n      console.error(\"Error updating category:\", error);\n      if (error instanceof z.ZodError) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to update category\" });\n    }\n  });\n\n  // Create Supercategory\n  app.post(\"/api/admin/supercategories\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    const createSchema = z.object({\n      nameFr: z.string().min(1, \"French name is required\"),\n      nameEn: z.string().min(1, \"English name is required\"),\n      nameAr: z.string().optional(),\n      descriptionFr: z.string().optional(),\n      descriptionEn: z.string().optional(),\n      descriptionAr: z.string().optional(),\n      icon: z.string().optional(),\n      mainImageUrl: z.string().url().optional().or(z.literal(\"\")),\n      isFeatured: z.boolean().default(false),\n      isVisible: z.boolean().default(true),\n      seoTitleFr: z.string().optional(),\n      seoTitleEn: z.string().optional(),\n      seoTitleAr: z.string().optional(),\n      seoDescriptionFr: z.string().optional(),\n      seoDescriptionEn: z.string().optional(),\n      seoDescriptionAr: z.string().optional(),\n      seoKeywordsFr: z.string().optional(),\n      seoKeywordsEn: z.string().optional(),\n      seoKeywordsAr: z.string().optional(),\n      enabledFeatures: z.array(z.string()).default([]),\n    });\n\n    try {\n      const data = createSchema.parse(req.body);\n\n      // Generate slug from French name\n      const slug = data.nameFr\n        .toLowerCase()\n        .replace(/[^a-z0-9]+/g, \"-\")\n        .replace(/(^-|-$)/g, \"\");\n\n      // Create supercategory (category with type=\"super\")\n      const [newCategory] = await db\n        .insert(categories)\n        .values({\n          type: \"super\",\n          parentId: null,\n          slug,\n          icon: data.icon || \"star\",\n          imageUrl: data.mainImageUrl || \"\",\n          isActive: data.isVisible,\n          isFeatured: data.isFeatured,\n          sortOrder: 0,\n          metadata: { enabledFeatures: data.enabledFeatures },\n        })\n        .returning();\n\n      // Create translations\n      const translations = [\n        {\n          categoryId: newCategory.id,\n          language: \"fr\",\n          name: data.nameFr,\n          description: data.descriptionFr,\n          seoTitle: data.seoTitleFr,\n          seoDescription: data.seoDescriptionFr,\n          seoKeywords: data.seoKeywordsFr,\n        },\n        {\n          categoryId: newCategory.id,\n          language: \"en\",\n          name: data.nameEn,\n          description: data.descriptionEn,\n          seoTitle: data.seoTitleEn,\n          seoDescription: data.seoDescriptionEn,\n          seoKeywords: data.seoKeywordsEn,\n        },\n      ];\n\n      if (data.nameAr) {\n        translations.push({\n          categoryId: newCategory.id,\n          language: \"ar\",\n          name: data.nameAr,\n          description: data.descriptionAr,\n          seoTitle: data.seoTitleAr,\n          seoDescription: data.seoDescriptionAr,\n          seoKeywords: data.seoKeywordsAr,\n        });\n      }\n\n      await db.insert(categoryTranslations).values(translations);\n\n      // Fetch the complete category with translations\n      const categoryWithTranslations = await db.query.categories.findFirst({\n        where: eq(categories.id, newCategory.id),\n        with: {\n          translations: true,\n          features: true,\n        },\n      });\n\n      res.status(201).json(categoryWithTranslations);\n    } catch (error) {\n      console.error(\"Error creating supercategory:\", error);\n      if (error instanceof z.ZodError) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create supercategory\" });\n    }\n  });\n\n  // Delete Category\n  app.delete(\"/api/admin/categories/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    const categoryId = req.params.id;\n\n    try {\n      // Check if category has children\n      const children = await db.query.categories.findMany({\n        where: eq(categories.parentId, categoryId),\n      });\n\n      if (children.length > 0) {\n        return res\n          .status(400)\n          .json({ error: \"Cannot delete category with subcategories\" });\n      }\n\n      // Check if this category is used in any supercategory (has a parent)\n      const categoryToDelete = await db.query.categories.findFirst({\n        where: eq(categories.id, categoryId),\n      });\n\n      if (categoryToDelete?.parentId) {\n        return res.status(400).json({\n          error:\n            \"Cannot delete category that is part of a supercategory. Please remove it from the supercategory first.\",\n        });\n      }\n\n      // Check if category has any products (exclude soft deleted products)\n      const productsInCategory = await db.query.products.findMany({\n        where: and(\n          eq(products.categoryId, categoryId),\n          isNull(products.deletedAt),\n        ),\n      });\n\n      if (productsInCategory.length > 0) {\n        return res.status(400).json({\n          error: `Cannot delete category that contains ${productsInCategory.length} active product(s). Please move or delete the products first.`,\n        });\n      }\n\n      // Soft delete the category instead of permanent deletion\n      await db\n        .update(categories)\n        .set({\n          deletedAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .where(eq(categories.id, categoryId));\n\n      res.json({ message: \"Category deleted successfully\" });\n    } catch (error) {\n      console.error(\"Error deleting category:\", error);\n      res.status(500).json({ error: \"Failed to delete category\" });\n    }\n  });\n\n  // Get Category by ID\n  app.get(\"/api/admin/categories/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    const categoryId = req.params.id;\n\n    try {\n      const category = await db.query.categories.findFirst({\n        where: eq(categories.id, categoryId),\n        with: {\n          translations: true,\n          features: true,\n          parent: {\n            with: {\n              translations: true,\n            },\n          },\n          children: {\n            with: {\n              translations: true,\n            },\n          },\n        },\n      });\n\n      if (!category) {\n        return res.status(404).json({ error: \"Category not found\" });\n      }\n\n      res.json(category);\n    } catch (error) {\n      console.error(\"Error fetching category:\", error);\n      res.status(500).json({ error: \"Failed to fetch category\" });\n    }\n  });\n\n  // Get supercategories only (type=\"super\")\n  app.get(\"/api/admin/supercategories\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const supercategories = await db.query.categories.findMany({\n        where: and(eq(categories.type, \"super\"), isNull(categories.deletedAt)),\n        with: {\n          translations: true,\n          features: true,\n          children: {\n            where: isNull(categories.deletedAt),\n            with: {\n              translations: true,\n            },\n          },\n        },\n        orderBy: [categories.sortOrder, categories.createdAt],\n      });\n\n      // Calculate product count for each supercategory by counting products in child categories\n      const supercategoriesWithProductCount = await Promise.all(\n        supercategories.map(async (supercategory) => {\n          if (supercategory.children && supercategory.children.length > 0) {\n            const childCategoryIds = supercategory.children.map(\n              (child) => child.id,\n            );\n\n            // Count products in all child categories\n            const productCountResult = await db\n              .select({ count: sql<number>`COUNT(*)::int` })\n              .from(products)\n              .where(\n                and(\n                  inArray(products.categoryId, childCategoryIds),\n                  eq(products.isActive, true),\n                ),\n              );\n\n            return {\n              ...supercategory,\n              productCount: productCountResult[0]?.count || 0,\n            };\n          } else {\n            return {\n              ...supercategory,\n              productCount: 0,\n            };\n          }\n        }),\n      );\n\n      res.json(supercategoriesWithProductCount);\n    } catch (error) {\n      console.error(\"Error fetching supercategories:\", error);\n      res.status(500).json({ error: \"Failed to fetch supercategories\" });\n    }\n  });\n\n  // Get standard categories only (type=\"standard\") - for template selection\n  app.get(\"/api/admin/categories/standard\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const standardCategories = await db.query.categories.findMany({\n        where: eq(categories.type, \"standard\"),\n        with: {\n          translations: true,\n        },\n        orderBy: [categories.sortOrder, categories.createdAt],\n      });\n\n      res.json(standardCategories);\n    } catch (error) {\n      console.error(\"Error fetching standard categories:\", error);\n      res.status(500).json({ error: \"Failed to fetch standard categories\" });\n    }\n  });\n\n  // Products API\n  app.get(\"/api/products\", async (req, res) => {\n    try {\n      // Return all products with all translations for frontend filtering\n      const products = await storage.getAllProductsWithTranslations();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  app.get(\"/api/products/:id\", async (req, res) => {\n    const lang = (req.query.lang as string) || \"en\";\n    const productId = req.params.id;\n\n    try {\n      const product = await storage.getProductWithTranslations(productId, lang);\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  // Create product API with comprehensive data\n  app.post(\"/api/products\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const {\n        name,\n        description,\n        shortDescription,\n        translations,\n        specifications = [],\n        faqs = [],\n        ...productData\n      } = req.body;\n\n      // Use multilingual translations if provided, fallback to single language for backward compatibility\n      const productTranslations = translations || {\n        en: { name, description, shortDescription },\n      };\n\n      // Create the main product with multilingual support\n      const product = await storage.createProductWithDetails({\n        ...productData,\n        vendorId: req.user.id,\n        images: req.body.images || [],\n        translations: productTranslations,\n        specifications,\n        faqs,\n      });\n\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n\n      // Handle specific database constraint errors\n      if (error.code === \"23505\") {\n        if (error.constraint === \"products_sku_unique\") {\n          return res.status(400).json({\n            error: \"SKU already exists. Please use a different SKU.\",\n            field: \"sku\",\n          });\n        }\n      }\n\n      res.status(500).json({ error: \"Failed to create product\" });\n    }\n  });\n\n  // Update Product\n  app.put(\"/api/products/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.id;\n      const {\n        name,\n        description,\n        shortDescription,\n        translations,\n        specifications = [],\n        faqs = [],\n        ...productData\n      } = req.body;\n\n      // Use multilingual translations if provided, fallback to single language for backward compatibility\n      const productTranslations = translations || {\n        en: { name, description, shortDescription },\n      };\n\n      // Update the product with multilingual support\n      const updatedProduct = await storage.updateProductWithDetails(\n        productId,\n        req.user.id,\n        {\n          ...productData,\n          images: req.body.images || [],\n          translations: productTranslations,\n          specifications,\n          faqs,\n        },\n      );\n\n      res.json(updatedProduct);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n\n      // Handle specific database constraint errors\n      if (error.code === \"23505\") {\n        if (error.constraint === \"products_sku_unique\") {\n          return res.status(400).json({\n            error: \"SKU already exists. Please use a different SKU.\",\n            field: \"sku\",\n          });\n        }\n      }\n\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  // Delete Product\n  app.delete(\"/api/products/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.id;\n\n      // Delete the product (this will cascade delete translations, specs, and FAQs)\n      const deletedProduct = await storage.deleteProduct(\n        productId,\n        req.user.id,\n      );\n\n      if (!deletedProduct) {\n        return res.status(404).json({\n          error: \"Product not found or you don't have permission to delete it\",\n        });\n      }\n\n      res.json({\n        message: \"Product deleted successfully\",\n        product: deletedProduct,\n      });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n\n      if (error.message === \"PRODUCT_HAS_ORDERS\") {\n        return res.status(400).json({\n          error:\n            \"Cannot delete product with existing orders. This product is referenced in customer orders and cannot be removed to maintain order history.\",\n        });\n      }\n\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  // Get seller's products\n  app.get(\"/api/seller/products\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      // Return all products by vendor with all translations for frontend filtering\n      const products = await storage.getProductsByVendor(req.user.id);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching seller products:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  // Get product for editing (with all translations)\n  app.get(\"/api/seller/products/:id/edit\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.id;\n      const product = await storage.getProductForEdit(productId, req.user.id);\n\n      if (!product) {\n        return res.status(404).json({\n          error: \"Product not found or you don't have permission to edit it\",\n        });\n      }\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error fetching product for edit:\", error);\n      res.status(500).json({ error: \"Failed to fetch product\" });\n    }\n  });\n\n  // Adjust product stock\n  app.patch(\"/api/seller/products/:id/adjust-stock\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    const adjustmentSchema = z.object({\n      adjustmentType: z.enum([\"increase\", \"decrease\"]),\n      quantity: z.number().positive(),\n      reason: z.string().min(1),\n      notes: z.string().optional(),\n      alsoPriceAdjust: z.boolean().optional(),\n      newPrice: z.number().positive().optional(),\n    });\n\n    try {\n      const productId = req.params.id;\n      const adjustmentData = adjustmentSchema.parse(req.body);\n\n      // Get current product to verify ownership and current stock\n      const product = await storage.getProductForEdit(productId, req.user.id);\n      if (!product) {\n        return res.status(404).json({\n          error: \"Product not found or you don't have permission to modify it\",\n        });\n      }\n\n      // Calculate new stock level\n      let newStock = product.stock;\n      if (adjustmentData.adjustmentType === \"increase\") {\n        newStock += adjustmentData.quantity;\n      } else {\n        newStock = Math.max(0, newStock - adjustmentData.quantity);\n      }\n\n      // Update the product stock\n      const updatedProduct = await storage.updateProductStock(\n        productId,\n        newStock,\n        req.user.id,\n      );\n\n      if (!updatedProduct) {\n        return res\n          .status(404)\n          .json({ error: \"Failed to update product stock\" });\n      }\n\n      // Log the stock adjustment for audit trail\n      console.log(`Stock adjustment for product ${productId}:`, {\n        sellerId: req.user.id,\n        oldStock: product.stock,\n        newStock,\n        adjustmentType: adjustmentData.adjustmentType,\n        quantity: adjustmentData.quantity,\n        reason: adjustmentData.reason,\n        notes: adjustmentData.notes,\n      });\n\n      res.json({\n        message: \"Stock adjusted successfully\",\n        product: updatedProduct,\n        oldStock: product.stock,\n        newStock,\n      });\n    } catch (error) {\n      console.error(\"Error adjusting product stock:\", error);\n      if (error instanceof z.ZodError) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid adjustment data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to adjust stock\" });\n    }\n  });\n\n  // Seed dummy products for seller\n  app.post(\"/api/seller/seed-products\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      await storage.seedDummyProducts(req.user.id);\n      res.json({ message: \"Dummy products created successfully\" });\n    } catch (error) {\n      console.error(\"Error seeding dummy products:\", error);\n      res.status(500).json({ error: \"Failed to create dummy products\" });\n    }\n  });\n\n  // Get seller's store status\n  app.get(\"/api/seller/store/status\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const store = await storage.getStoreByOwnerId(req.user.id);\n      if (!store) {\n        return res.status(404).json({ error: \"Store not found\" });\n      }\n\n      res.json({\n        id: store.id,\n        name: store.name,\n        status: store.status,\n        suspensionReason: store.suspensionReason,\n        createdAt: store.createdAt,\n        updatedAt: store.updatedAt,\n      });\n    } catch (error) {\n      console.error(\"Error fetching seller store status:\", error);\n      res.status(500).json({ error: \"Failed to fetch store status\" });\n    }\n  });\n\n  // Product inquiry/query API\n  app.post(\"/api/products/:id/inquiry\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    const { message, customerEmail, customerName } = req.body;\n    const productId = req.params.id;\n\n    try {\n      // Get product details to find the seller\n      const product = await storage.getProductWithTranslations(productId, \"en\");\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      // Create notification for seller about product inquiry\n      await createNotification({\n        userId: product.vendorId,\n        type: \"product_inquiry\",\n        title: \"Product Inquiry\",\n        message: `${\n          customerName || req.user?.firstName\n        } asked about your product: ${product.name}`,\n        data: {\n          productId: product.id,\n          productName: product.name,\n          customerMessage: message,\n          customerEmail: customerEmail || req.user?.email,\n          customerId: req.user?.id,\n        },\n        isRead: false,\n      });\n\n      res.json({ success: true, message: \"Inquiry sent successfully\" });\n    } catch (error) {\n      console.error(\"Error sending product inquiry:\", error);\n      res.status(500).json({ error: \"Failed to send inquiry\" });\n    }\n  });\n\n  // Vendors API\n  app.get(\"/api/vendors\", async (req, res) => {\n    try {\n      const vendors = await storage.getVendors();\n      res.json(vendors);\n    } catch (error) {\n      console.error(\"Error fetching vendors:\", error);\n      res.status(500).json({ error: \"Failed to fetch vendors\" });\n    }\n  });\n\n  // Dashboard stats APIs\n  app.get(\"/api/dashboard/client\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"client\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const stats = await storage.getClientDashboardStats(req.user.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching client dashboard stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/seller\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"seller\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const stats = await storage.getSellerDashboardStats(req.user.id);\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching seller dashboard stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/admin\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const stats = await storage.getAdminDashboardStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching admin dashboard stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch dashboard stats\" });\n    }\n  });\n\n  // User Management API\n  app.get(\"/api/admin/users\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const roleFilter = req.query.role as string;\n      const users = await storage.getAllUsers();\n\n      // Filter by role if specified\n      const filteredUsers = roleFilter\n        ? users.filter((user) => user.role === roleFilter)\n        : users;\n\n      res.json(filteredUsers);\n    } catch (error) {\n      console.error(\"Error fetching users:\", error);\n      res.status(500).json({ error: \"Failed to fetch users\" });\n    }\n  });\n\n  app.get(\"/api/admin/users/stats\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const stats = await storage.getUserStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch user stats\" });\n    }\n  });\n\n  // Create user by admin\n  app.post(\"/api/admin/users\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    const createUserSchema = z.object({\n      firstName: z.string().min(1),\n      lastName: z.string().min(1),\n      email: z.string().email(),\n      username: z.string().min(3),\n      password: z.string().min(6),\n      role: z.enum([\"client\", \"seller\", \"admin\"]),\n      isActive: z.boolean().default(true),\n    });\n\n    try {\n      const userData = createUserSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByEmail(userData.email);\n      if (existingUser) {\n        return res\n          .status(400)\n          .json({ error: \"User with this email already exists\" });\n      }\n\n      const existingUsername = await storage.getUserByUsername(\n        userData.username,\n      );\n      if (existingUsername) {\n        return res.status(400).json({ error: \"Username already taken\" });\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(userData.password);\n\n      // Create user\n      const newUser = await storage.createUser({\n        ...userData,\n        password: hashedPassword,\n        emailVerified: true, // Admin-created users are pre-verified\n        preferredLanguage: \"en\",\n        sellerStatus: userData.role === \"seller\" ? \"approved\" : null,\n      });\n\n      // Don't return the password\n      const { password, ...userWithoutPassword } = newUser;\n      res.status(201).json(userWithoutPassword);\n    } catch (error) {\n      console.error(\"Error creating user:\", error);\n      if (error instanceof z.ZodError) {\n        return res\n          .status(400)\n          .json({ error: \"Invalid user data\", details: error.errors });\n      }\n      res.status(500).json({ error: \"Failed to create user\" });\n    }\n  });\n\n  app.post(\"/api/admin/users/create-test-users\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      // Create additional test users\n      await db.insert(users).values([\n        {\n          username: \"test_user_1\",\n          email: \"test1@example.com\",\n          password: await hashPassword(\"password123\"),\n          firstName: \"Test\",\n          lastName: \"User One\",\n          role: \"client\",\n          avatar:\n            \"https://ui-avatars.com/api/?name=Test+User+One&background=3b82f6&color=fff\",\n          isActive: true,\n          emailVerified: true,\n          preferredLanguage: \"en\",\n          sellerStatus: null,\n        },\n        {\n          username: \"test_user_2\",\n          email: \"test2@example.com\",\n          password: await hashPassword(\"password123\"),\n          firstName: \"Test\",\n          lastName: \"User Two\",\n          role: \"seller\",\n          avatar:\n            \"https://ui-avatars.com/api/?name=Test+User+Two&background=10b981&color=fff\",\n          isActive: true,\n          emailVerified: true,\n          preferredLanguage: \"en\",\n          sellerStatus: \"approved\",\n        },\n        {\n          username: \"test_user_3\",\n          email: \"test3@example.com\",\n          password: await hashPassword(\"password123\"),\n          firstName: \"Test\",\n          lastName: \"User Three\",\n          role: \"client\",\n          avatar:\n            \"https://ui-avatars.com/api/?name=Test+User+Three&background=f59e0b&color=fff\",\n          isActive: false,\n          emailVerified: false,\n          preferredLanguage: \"en\",\n          sellerStatus: null,\n        },\n      ]);\n\n      res.json({ message: \"Test users created successfully\" });\n    } catch (error) {\n      console.error(\"Error creating test users:\", error);\n      res.status(500).json({ error: \"Failed to create test users\" });\n    }\n  });\n\n  // Delete user endpoint\n  app.delete(\"/api/users/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const userId = req.params.id;\n      const success = await storage.deleteUser(userId);\n\n      if (success) {\n        res.json({ message: \"User deleted successfully\" });\n      } else {\n        res.status(404).json({ error: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting user:\", error);\n      res.status(500).json({ error: \"Failed to delete user\" });\n    }\n  });\n\n  // Update user endpoint\n  app.patch(\"/api/users/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const userId = req.params.id;\n      const { status, role } = req.body;\n\n      // Convert status to boolean for isActive field (backward compatibility)\n      const isActive = status === \"Active\";\n\n      // Convert role to lowercase for database storage\n      const userRole = role.toLowerCase();\n\n      const updates = {\n        isActive,\n        status, // Store the actual status string\n        role: userRole,\n      };\n\n      const updatedUser = await storage.updateUser(userId, updates);\n\n      if (updatedUser) {\n        res.json(updatedUser);\n      } else {\n        res.status(404).json({ error: \"User not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error updating user:\", error);\n      res.status(500).json({ error: \"Failed to update user\" });\n    }\n  });\n\n  // Store Management API\n  app.get(\"/api/admin/stores\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const stores = await storage.getAllStores();\n      res.json(stores);\n    } catch (error) {\n      console.error(\"Error fetching stores:\", error);\n      res.status(500).json({ error: \"Failed to fetch stores\" });\n    }\n  });\n\n  app.get(\"/api/admin/stores/stats\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const stats = await storage.getStoreStats();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching store stats:\", error);\n      res.status(500).json({ error: \"Failed to fetch store stats\" });\n    }\n  });\n\n  app.get(\"/api/admin/stores/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const store = await storage.getStoreById(req.params.id);\n      if (!store) {\n        return res.status(404).json({ error: \"Store not found\" });\n      }\n      res.json(store);\n    } catch (error) {\n      console.error(\"Error fetching store:\", error);\n      res.status(500).json({ error: \"Failed to fetch store\" });\n    }\n  });\n\n  app.post(\"/api/admin/stores\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { name, ownerEmail, categoryId, description } = req.body;\n\n      // Find owner by email\n      const owner = await storage.getUserByEmail(ownerEmail);\n      if (!owner) {\n        return res\n          .status(400)\n          .json({ error: \"Owner not found with provided email\" });\n      }\n\n      const storeData = {\n        ownerId: owner.id,\n        name,\n        categoryId,\n        description,\n        status: \"pending_validation\",\n      };\n\n      const store = await storage.createStore(storeData);\n      res.status(201).json(store);\n    } catch (error) {\n      console.error(\"Error creating store:\", error);\n      res.status(500).json({ error: \"Failed to create store\" });\n    }\n  });\n\n  app.patch(\"/api/admin/stores/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { status, messagesSent, suspensionReason } = req.body;\n      const updates: Partial<any> = {};\n\n      if (status) updates.status = status;\n      if (messagesSent !== undefined) updates.messagesSent = messagesSent;\n      if (suspensionReason !== undefined)\n        updates.suspensionReason = suspensionReason;\n\n      const updatedStore = await storage.updateStore(req.params.id, updates);\n\n      if (!updatedStore) {\n        return res.status(404).json({ error: \"Store not found\" });\n      }\n\n      res.json(updatedStore);\n    } catch (error) {\n      console.error(\"Error updating store:\", error);\n      res.status(500).json({ error: \"Failed to update store\" });\n    }\n  });\n\n  app.delete(\"/api/admin/stores/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const success = await storage.deleteStore(req.params.id);\n\n      if (success) {\n        res.json({ message: \"Store deleted successfully\" });\n      } else {\n        res.status(404).json({ error: \"Store not found\" });\n      }\n    } catch (error) {\n      console.error(\"Error deleting store:\", error);\n      res.status(500).json({ error: \"Failed to delete store\" });\n    }\n  });\n\n  // Admin Products Management API - Get sellers with their products\n  app.get(\"/api/admin/sellers-with-products\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const sellers = await storage.getSellersWithProducts();\n      res.json(sellers);\n    } catch (error) {\n      console.error(\"Error fetching sellers with products:\", error);\n      res.status(500).json({ error: \"Failed to fetch sellers with products\" });\n    }\n  });\n\n  // Admin Products Management API - Get products for specific seller\n  app.get(\"/api/admin/sellers/:id/products\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const sellerId = req.params.id;\n      const products = await storage.getProductsByVendor(sellerId);\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching seller products:\", error);\n      res.status(500).json({ error: \"Failed to fetch seller products\" });\n    }\n  });\n\n  // Admin - Delete any product\n  app.delete(\"/api/admin/products/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.id;\n\n      // Admin can delete any product, so we pass null as vendorId to skip ownership check\n      const deletedProduct = await storage.deleteProductAsAdmin(productId);\n\n      if (!deletedProduct) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      res.json({\n        message: \"Product deleted successfully\",\n        product: deletedProduct,\n      });\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n\n      if (error.message === \"PRODUCT_HAS_ORDERS\") {\n        return res.status(400).json({\n          error:\n            \"Cannot delete product with existing orders. This product is referenced in customer orders and cannot be removed to maintain order history.\",\n        });\n      }\n\n      res.status(500).json({ error: \"Failed to delete product\" });\n    }\n  });\n\n  // Admin - Get all products\n  app.get(\"/api/admin/products\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const products = await storage.getAllProductsWithTranslations();\n      res.json(products);\n    } catch (error) {\n      console.error(\"Error fetching admin products:\", error);\n      res.status(500).json({ error: \"Failed to fetch products\" });\n    }\n  });\n\n  // Admin - Update product\n  app.put(\"/api/admin/products/:id\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.id;\n      const {\n        name,\n        description,\n        shortDescription,\n        translations,\n        specifications = [],\n        faqs = [],\n        categoryId,\n        ...productData\n      } = req.body;\n\n      // Use multilingual translations if provided, fallback to single language for backward compatibility\n      const productTranslations = translations || {\n        en: { name, description, shortDescription },\n      };\n\n      // Update the product with multilingual support\n      const product = await storage.updateProductWithDetails(productId, {\n        ...productData,\n        categoryId: categoryId || productData.category,\n        images: req.body.images || [],\n        translations: productTranslations,\n        specifications,\n        faqs,\n      });\n\n      if (!product) {\n        return res.status(404).json({ error: \"Product not found\" });\n      }\n\n      res.json(product);\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n\n      // Handle specific database constraint errors\n      if (error.code === \"23505\") {\n        if (error.constraint === \"products_sku_unique\") {\n          return res.status(400).json({\n            error: \"SKU already exists. Please use a different SKU.\",\n            field: \"sku\",\n          });\n        }\n      }\n\n      res.status(500).json({ error: \"Failed to update product\" });\n    }\n  });\n\n  // Admin - Bulk upload products from CSV\n  app.post(\n    \"/api/admin/products/bulk-upload\",\n    upload.single(\"csvFile\"),\n    async (req, res) => {\n      if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n        return res.sendStatus(401);\n      }\n\n      if (!req.file) {\n        return res.status(400).json({ error: \"No CSV file provided\" });\n      }\n\n      try {\n        const csvContent = req.file.buffer.toString(\"utf-8\");\n        const lines = csvContent\n          .split(\"\\n\")\n          .map((line) => line.trim())\n          .filter((line) => line);\n\n        if (lines.length < 2) {\n          return res.status(400).json({\n            error: \"CSV file must contain at least a header and one data row\",\n          });\n        }\n\n        const headers = lines[0]\n          .split(\",\")\n          .map((h) => h.trim().replace(/\"/g, \"\"));\n        const dataRows = lines.slice(1);\n\n        let created = 0;\n        const errors: string[] = [];\n\n        for (let i = 0; i < dataRows.length; i++) {\n          const rowIndex = i + 2; // +2 because we skip header and arrays are 0-indexed\n\n          try {\n            const values = dataRows[i]\n              .split(\",\")\n              .map((v) => v.trim().replace(/\"/g, \"\"));\n\n            if (values.length !== headers.length) {\n              errors.push(`Row ${rowIndex}: Column count mismatch`);\n              continue;\n            }\n\n            const rowData: any = {};\n            headers.forEach((header, index) => {\n              rowData[header] = values[index] || \"\";\n            });\n\n            // Validate required fields\n            const requiredFields = [\n              \"name\",\n              \"description\",\n              \"sku\",\n              \"price\",\n              \"categoryId\",\n              \"vendorId\",\n            ];\n            const missingFields = requiredFields.filter(\n              (field) => !rowData[field],\n            );\n\n            if (missingFields.length > 0) {\n              errors.push(\n                `Row ${rowIndex}: Missing required fields: ${missingFields.join(\", \")}`,\n              );\n              continue;\n            }\n\n            // Parse specifications from CSV format\n            const specifications: Array<{ name: string; value: string }> = [];\n            if (rowData.specifications_name && rowData.specifications_value) {\n              const specNames = rowData.specifications_name\n                .split(\";\")\n                .map((s: string) => s.trim());\n              const specValues = rowData.specifications_value\n                .split(\";\")\n                .map((s: string) => s.trim());\n\n              for (\n                let j = 0;\n                j < Math.min(specNames.length, specValues.length);\n                j++\n              ) {\n                if (specNames[j] && specValues[j]) {\n                  specifications.push({\n                    name: specNames[j],\n                    value: specValues[j],\n                  });\n                }\n              }\n            }\n\n            // Parse FAQs from CSV format\n            const faqs: Array<{ question: string; answer: string }> = [];\n            if (rowData.faqs_question && rowData.faqs_answer) {\n              const questions = rowData.faqs_question\n                .split(\";\")\n                .map((q: string) => q.trim());\n              const answers = rowData.faqs_answer\n                .split(\";\")\n                .map((a: string) => a.trim());\n\n              for (\n                let j = 0;\n                j < Math.min(questions.length, answers.length);\n                j++\n              ) {\n                if (questions[j] && answers[j]) {\n                  faqs.push({ question: questions[j], answer: answers[j] });\n                }\n              }\n            }\n\n            // Parse images from CSV format\n            const images: string[] = [];\n            if (rowData.images) {\n              images.push(\n                ...rowData.images\n                  .split(\";\")\n                  .map((img: string) => img.trim())\n                  .filter((img: string) => img),\n              );\n            }\n\n            // Build translations object\n            const translations: any = {};\n            if (rowData.translations_en_name) {\n              translations.en = {\n                name: rowData.translations_en_name,\n                description:\n                  rowData.translations_en_description || rowData.description,\n                shortDescription:\n                  rowData.translations_en_shortDescription ||\n                  rowData.shortDescription,\n              };\n            }\n            if (rowData.translations_fr_name) {\n              translations.fr = {\n                name: rowData.translations_fr_name,\n                description: rowData.translations_fr_description,\n                shortDescription: rowData.translations_fr_shortDescription,\n              };\n            }\n            if (rowData.translations_ar_name) {\n              translations.ar = {\n                name: rowData.translations_ar_name,\n                description: rowData.translations_ar_description,\n                shortDescription: rowData.translations_ar_shortDescription,\n              };\n            }\n\n            // If no translations provided, use default values\n            if (Object.keys(translations).length === 0) {\n              translations.en = {\n                name: rowData.name,\n                description: rowData.description,\n                shortDescription: rowData.shortDescription,\n              };\n            }\n\n            // Create the product\n            const productData = {\n              name: rowData.name,\n              description: rowData.description,\n              shortDescription: rowData.shortDescription || \"\",\n              sku: rowData.sku,\n              price: parseFloat(rowData.price),\n              originalPrice: rowData.originalPrice\n                ? parseFloat(rowData.originalPrice)\n                : null,\n              stock: parseInt(rowData.stock) || 0,\n              categoryId: rowData.categoryId,\n              vendorId: rowData.vendorId,\n              brand: rowData.brand || \"\",\n              images,\n              isFeatured:\n                rowData.isFeatured === \"true\" || rowData.isFeatured === \"1\",\n              isActive:\n                rowData.isActive !== \"false\" && rowData.isActive !== \"0\", // default true\n              specifications,\n              faqs,\n              translations,\n            };\n\n            await storage.createProductWithDetails(productData);\n            created++;\n          } catch (error: any) {\n            errors.push(`Row ${rowIndex}: ${error.message || \"Unknown error\"}`);\n          }\n        }\n\n        res.json({\n          message: `Bulk upload completed. ${created} products created.`,\n          created,\n          errors: errors.length > 0 ? errors : undefined,\n        });\n      } catch (error) {\n        console.error(\"Error processing CSV bulk upload:\", error);\n        res.status(500).json({ error: \"Failed to process CSV file\" });\n      }\n    },\n  );\n\n  // Admin - Create product for any store\n  app.post(\"/api/admin/products\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const {\n        name,\n        description,\n        shortDescription,\n        translations,\n        specifications = [],\n        faqs = [],\n        vendorId,\n        ...productData\n      } = req.body;\n\n      if (!vendorId) {\n        return res.status(400).json({ error: \"vendorId is required\" });\n      }\n\n      // Use multilingual translations if provided, fallback to single language for backward compatibility\n      const productTranslations = translations || {\n        en: { name, description, shortDescription },\n      };\n\n      // Create the main product with multilingual support\n      const product = await storage.createProductWithDetails({\n        ...productData,\n        vendorId,\n        images: req.body.images || [],\n        translations: productTranslations,\n        specifications,\n        faqs,\n      });\n\n      res.status(201).json(product);\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n\n      // Handle specific database constraint errors\n      if (error.code === \"23505\") {\n        if (error.constraint === \"products_sku_unique\") {\n          return res.status(400).json({\n            error: \"SKU already exists. Please use a different SKU.\",\n            field: \"sku\",\n          });\n        }\n      }\n\n      res.status(500).json({ error: \"Failed to create product\" });\n    }\n  });\n\n  // Orders API\n  app.get(\"/api/orders\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      let orders;\n      if (req.user?.role === \"seller\") {\n        orders = await storage.getOrdersByVendorId(req.user.id);\n      } else if (req.user?.role === \"admin\") {\n        orders = await storage.getAllOrders();\n      } else {\n        orders = await storage.getOrdersByUserId(req.user.id);\n      }\n      res.json(orders);\n    } catch (error) {\n      console.error(\"Error fetching orders:\", error);\n      res.status(500).json({ error: \"Failed to fetch orders\" });\n    }\n  });\n\n  app.get(\"/api/orders/:id\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    const orderId = req.params.id;\n\n    try {\n      const order = await storage.getOrderWithItems(orderId);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n      res.json(order);\n    } catch (error) {\n      console.error(\"Error fetching order:\", error);\n      res.status(500).json({ error: \"Failed to fetch order\" });\n    }\n  });\n\n  // Checkout API - creates order from cart\n  // app.post(\"/api/checkout\", async (req, res) => {\n  //   if (!req.isAuthenticated()) {\n  //     return res.sendStatus(401);\n  //   }\n\n  //   try {\n  //     const { shippingAddress, paymentMethod } = req.body;\n\n  //     // Get user's cart items\n  //     const cartItems = await storage.getUserCart(req.user!.id);\n  //     if (cartItems.length === 0) {\n  //       return res.status(400).json({ error: \"Cart is empty\" });\n  //     }\n\n  //     // Calculate total amount\n  //     const totalAmount = cartItems.reduce(\n  //       (total, item) => total + (item.price * item.quantity),\n  //       0\n  //     );\n\n  //     // Get vendor name from first item (assuming single vendor for now)\n  //     const vendorName = cartItems[0]?.brand || \"Unknown Store\";\n\n  //     // Create order\n  //     const order = await storage.createOrder({\n  //       userId: req.user!.id,\n  //       totalAmount: totalAmount.toString(),\n  //       status: \"pending\",\n  //       paymentStatus: \"pending\",\n  //       paymentMethod,\n  //       shippingAddress,\n  //       vendorName,\n  //       itemCount: cartItems.length,\n  //       trackingNumber: `TRK-${Math.random().toString(36).substr(2, 8).toUpperCase()}`,\n  //     });\n\n  //     // Add order items from cart\n  //     for (const item of cartItems) {\n  //       await storage.createOrderItem({\n  //         orderId: order.id,\n  //         productId: item.productId,\n  //         quantity: item.quantity,\n  //         unitPrice: item.price.toString(),\n  //         totalPrice: (item.price * item.quantity).toString(),\n  //       });\n\n  //       // Notify seller about new order\n  //       await createNotification({\n  //         userId: item.vendorId,\n  //         type: \"new_order\",\n  //         title: \"New Order Received\",\n  //         message: `You have a new order #${order.orderNumber} for ${item.quantity}x ${item.name}`,\n  //         data: {\n  //           orderId: order.id,\n  //           orderNumber: order.orderNumber,\n  //           productId: item.productId,\n  //           productName: item.name,\n  //           quantity: item.quantity,\n  //           customerName: `${req.user!.firstName} ${req.user!.lastName}`,\n  //         },\n  //         isRead: false,\n  //       });\n  //     }\n\n  //     // Clear user's cart\n  //     await storage.clearCart(req.user!.id);\n\n  //     // Notify customer about order confirmation\n  //     await createNotification({\n  //       userId: req.user!.id,\n  //       type: \"order_confirmation\",\n  //       title: \"Order Confirmed\",\n  //       message: `Your order #${order.orderNumber} has been confirmed and is being processed`,\n  //       data: {\n  //         orderId: order.id,\n  //         orderNumber: order.orderNumber,\n  //         totalAmount,\n  //         itemCount: cartItems.length,\n  //       },\n  //       isRead: false,\n  //     });\n\n  //     res.status(201).json({ success: true, order });\n  //   } catch (error) {\n  //     console.error(\"Error processing checkout:\", error);\n  //     res.status(500).json({ error: \"Failed to process checkout\" });\n  //   }\n  // });\n\n  const stripe = new Stripe(process.env.STRIPE_SECRET_KEY as string, {\n    apiVersion: \"2025-08-27.basil\",\n  });\n\n  app.post(\"/api/checkout/payment\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"client\") {\n      return res.sendStatus(401);\n    }\n\n    const checkoutSchema = z.object({\n      cartItems: z.array(\n        z.object({\n          productId: z.string(),\n          quantity: z.number().min(1),\n          price: z.string(),\n        }),\n      ),\n      shippingAddress: z.object({\n        fullName: z.string(),\n        phone: z.string(),\n        street: z.string(),\n        city: z.string(),\n        state: z.string(),\n        zipCode: z.string(),\n        // country: z.string(),\n        email: z.string().email(),\n      }),\n      amount: z.number().min(1),\n      currency: z.string().default(\"usd\"),\n    });\n\n    try {\n      console.log(\"🚀 Server: POST /api/checkout/payment - body:\", req.body);\n\n      const data = checkoutSchema.parse(req.body);\n      console.log(\"✅ Validation passed:\", data);\n\n      if (!db) {\n        return res.status(500).json({ error: \"Database not available\" });\n      }\n\n      // 1. Create Stripe PaymentIntent\n      // const paymentIntent = await stripe.paymentIntents.create({\n      //   amount: Math.round(data.amount * 100), // convert to cents\n      //   currency: data.currency,\n      //   metadata: {\n      //     userId: req.user.id,\n      //     addressLine1: data.shippingAddress.street,\n      //     addressCity: data.shippingAddress.city,\n      //     addressState: data.shippingAddress.state,\n      //     addressPostalCode: data.shippingAddress.zipCode,\n      //     // addressCountry: data.shippingAddress.country,\n      //   },\n      //   description: `Order for user is generated`,\n      //   customer: data.shippingAddress.fullName,\n      // });\n\n      // const paymentIntent = await stripe.paymentIntents.create({\n      //   amount: Math.round(data.amount * 100),\n      //   currency: data.currency,\n      //   description: `Order for ${data.shippingAddress.fullName}`,\n      //   payment_method_types: [\"card\"],\n      //   shipping: {\n      //     name: data.shippingAddress.fullName,\n      //     phone: data.shippingAddress.phone,\n      //     address: {\n      //       line1: data.shippingAddress.street,\n      //       city: data.shippingAddress.city,\n      //       state: data.shippingAddress.state,\n      //       postal_code: data.shippingAddress.zipCode,\n      //     },\n      //   },\n      // });\n\n      const paymentIntent = await stripe.paymentIntents.create({\n        amount: Math.round(data.amount * 100),\n        currency: data.currency,\n        description: `Order for ${data.shippingAddress.fullName}`,\n        payment_method_types: [\"card\"],\n        receipt_email: data.shippingAddress.email, // required for invoice/export rules\n        shipping: {\n          name: data.shippingAddress.fullName,\n          phone: data.shippingAddress.phone,\n          address: {\n            line1: data.shippingAddress.street,\n            city: data.shippingAddress.city,\n            state: data.shippingAddress.state,\n            postal_code: data.shippingAddress.zipCode,\n            // country: data.shippingAddress.country, // also needed here\n          },\n        },\n      });\n\n      // 2. Insert \"pending\" order into DB\n      const [newOrder] = await db\n        .insert(orders)\n        .values({\n          orderNumber: `ORD-${Date.now()}`, // Generate a unique order number\n          userId: String(req.user.id), // Ensure userId is a string\n          customerName: data.shippingAddress.fullName,\n          customerEmail: data.shippingAddress.email,\n          customerPhone: data.shippingAddress.phone,\n          // Add customer phone (optional)\n          totalAmount: String(data.amount), // Convert totalAmount to string if required\n          currency: data.currency,\n          status: \"pending\",\n          paymentIntentId: paymentIntent.id,\n          shippingAddress: {\n            ...data.shippingAddress,\n            country: data.shippingAddress.state, // Replace \"US\" with the appropriate default or dynamic value\n          },\n        })\n        .returning()\n        .then(\n          (result) =>\n            result.map((item) => ({\n              ...item,\n              totalAmount: Number(item.totalAmount),\n            })) as {\n              id: string;\n              userId: string;\n              totalAmount: number;\n              currency: string;\n              status: string;\n              paymentIntentId: string;\n              shippingAddress: any;\n            }[],\n        );\n\n      // 3. Insert order items\n      if (data.cartItems.length > 0) {\n        await db.insert(orderItems).values(\n          data.cartItems.map((item) => ({\n            orderId: newOrder.id,\n            productId: item.productId,\n            quantity: item.quantity,\n            unitPrice: item.price,\n            totalPrice: (item.quantity * parseFloat(item.price)).toString(),\n          })),\n        );\n      }\n\n      res.status(201).json({\n        clientSecret: paymentIntent.client_secret,\n        orderId: newOrder.id,\n      });\n    } catch (error) {\n      console.error(\"❌ Error in /api/checkout/payment:\", error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({\n          error: \"Invalid data\",\n          details: error.errors,\n        });\n      }\n      res.status(500).json({ error: \"Payment failed\" });\n    }\n  });\n\n  app.post(\"/api/checkout\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { shippingAddress, paymentMethod } = req.body;\n\n      // Get user's cart items\n      const cartItems = await storage.getUserCart(req.user!.id);\n      if (cartItems.length === 0) {\n        return res.status(400).json({ error: \"Cart is empty\" });\n      }\n\n      // Calculate total amount\n      const totalAmount = cartItems.reduce(\n        (total, item) => total + item.price * item.quantity,\n        0,\n      );\n\n      // Get vendor name from first item (assuming single vendor for now)\n      const vendorName = cartItems[0]?.brand || \"Unknown Store\";\n\n      // Create order\n      const order = await storage.createOrder({\n        userId: req.user!.id,\n        customerName: shippingAddress.fullName,\n        customerEmail: shippingAddress.email,\n        customerPhone: shippingAddress.phone || \"N/A\",\n        totalAmount: totalAmount.toString(),\n        status: \"pending\",\n        paymentStatus: \"pending\",\n        paymentMethod,\n        shippingAddress,\n        vendorName,\n        itemCount: cartItems.length,\n        trackingNumber: `TRK-${Math.random().toString(36).substr(2, 8).toUpperCase()}`,\n      });\n\n      // Add order items from cart\n      for (const item of cartItems) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          unitPrice: item.price.toString(),\n          totalPrice: (item.price * item.quantity).toString(),\n        });\n\n        // Notify seller about new order\n        await createNotification({\n          userId: item.vendorId,\n          type: \"new_order\",\n          title: \"New Order Received\",\n          message: `You have a new order #${order.orderNumber} for ${item.quantity}x ${item.name}`,\n          data: {\n            orderId: [order.id],\n            orderNumber: [order.orderNumber],\n            productId: item.productId,\n            productName: item.name,\n            quantity: item.quantity,\n            customerName: [`${req.user!.firstName} ${req.user!.lastName}`],\n          },\n          isRead: false,\n        });\n      }\n\n      // Clear user's cart\n      await storage.clearCart(req.user!.id);\n\n      // Notify customer about order confirmation\n      await createNotification({\n        userId: req.user!.id,\n        type: \"order_confirmation\",\n        title: \"Order Confirmed\",\n        message: `Your order #${order.orderNumber} has been confirmed and is being processed`,\n        data: {\n          orderId: [order.id],\n          orderNumber: [order.orderNumber],\n          totalAmount,\n          itemCount: [cartItems.length],\n        },\n        isRead: false,\n      });\n\n      res.status(201).json({ success: true, order });\n    } catch (error) {\n      console.error(\"Error processing checkout:\", error);\n      res.status(500).json({ error: \"Failed to process checkout\" });\n    }\n  });\n\n  // Create order API\n  app.post(\"/api/orders\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const { items, shippingAddress, totalAmount } = req.body;\n\n      // Create order\n      const order = await storage.createOrder({\n        userId: req.user!.id,\n        totalAmount,\n        status: \"pending\",\n        shippingAddress,\n      });\n\n      // Add order items\n      for (const item of items) {\n        await storage.createOrderItem({\n          orderId: order.id,\n          productId: item.productId,\n          quantity: item.quantity,\n          price: item.price,\n        });\n\n        // Get product details to notify seller\n        const product = await storage.getProductWithTranslations(\n          item.productId,\n          \"en\",\n        );\n        if (product) {\n          // Notify seller about new order\n          await createNotification({\n            userId: product.vendorId,\n            type: \"new_order\",\n            title: \"New Order Received\",\n            message: `You have a new order for ${item.quantity}x ${product.name}`,\n            data: {\n              orderId: order.id,\n              productId: item.productId,\n              productName: product.name,\n              quantity: item.quantity,\n              customerName: `${req.user!.firstName} ${req.user!.lastName}`,\n            },\n            isRead: false,\n          });\n        }\n      }\n\n      // Notify customer about order confirmation\n      await createNotification({\n        userId: req.user!.id,\n        type: \"order_confirmation\",\n        title: \"Order Confirmed\",\n        message: `Your order #${order.id.slice(\n          -8,\n        )} has been confirmed and is being processed`,\n        data: {\n          orderId: order.id,\n          totalAmount,\n          itemCount: items.length,\n        },\n        isRead: false,\n      });\n\n      res.status(201).json({ success: true, order });\n    } catch (error) {\n      console.error(\"Error creating order:\", error);\n      res.status(500).json({ error: \"Failed to create order\" });\n    }\n  });\n\n  // Update order status API (for sellers/admins)\n  app.patch(\"/api/orders/:id/status\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    const { status } = req.body;\n    const orderId = req.params.id;\n\n    try {\n      const order = await storage.getOrderWithItems(orderId);\n      if (!order) {\n        return res.status(404).json({ error: \"Order not found\" });\n      }\n\n      // Update order status\n      await storage.updateOrderStatus(orderId, status);\n\n      // Notify customer about status change\n      const statusMessages = {\n        processing: \"Your order is now being processed\",\n        shipped: \"Your order has been shipped! Track your package\",\n        delivered: \"Your order has been delivered. Thank you for shopping!\",\n        cancelled: \"Your order has been cancelled\",\n      };\n\n      await createNotification({\n        userId: order.userId,\n        type: \"order_status_update\",\n        title: \"Order Status Update\",\n        message: `Order #${orderId.slice(-8)}: ${\n          statusMessages[status] || \"Status updated\"\n        }`,\n        data: {\n          orderId: orderId,\n          newStatus: status,\n          orderTotal: order.totalAmount,\n        },\n        isRead: false,\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error updating order status:\", error);\n      res.status(500).json({ error: \"Failed to update order status\" });\n    }\n  });\n\n  // Create offer/promotion API (for admins)\n  app.post(\"/api/offers\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(403);\n    }\n\n    const { title, description, discountPercentage, expiresAt, targetUsers } =\n      req.body;\n\n    try {\n      // Determine which users to notify\n      let userIds = [];\n      if (targetUsers === \"all\") {\n        const allUsers = await storage.getAllUsers();\n        userIds = allUsers.filter((u) => u.role === \"client\").map((u) => u.id);\n      } else if (Array.isArray(targetUsers)) {\n        userIds = targetUsers;\n      }\n\n      // Create notifications for targeted users\n      for (const userId of userIds) {\n        await createNotification({\n          userId: userId,\n          type: \"offer\",\n          title: \"Special Offer!\",\n          message: `${title} - ${discountPercentage}% off! ${description}`,\n          data: {\n            offerTitle: title,\n            description,\n            discountPercentage,\n            expiresAt,\n            offerCode: `SAVE${discountPercentage}`,\n          },\n          isRead: false,\n        });\n      }\n\n      res.json({\n        success: true,\n        message: `Offer sent to ${userIds.length} users`,\n        notificationsSent: userIds.length,\n      });\n    } catch (error) {\n      console.error(\"Error creating offer:\", error);\n      res.status(500).json({ error: \"Failed to create offer\" });\n    }\n  });\n\n  // Notifications API\n  app.get(\"/api/notifications\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      // Get notifications for current user or admin-specific notifications for admin\n      const userNotifications = await db\n        .select()\n        .from(notifications)\n        .where(\n          req.user?.role === \"admin\"\n            ? isNull(notifications.userId) // Admins only see global notifications (userId is null)\n            : eq(notifications.userId, req.user!.id), // Users see their own notifications\n        )\n        .orderBy(desc(notifications.createdAt))\n        .limit(50);\n\n      res.json(userNotifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ error: \"Failed to fetch notifications\" });\n    }\n  });\n\n  app.patch(\"/api/notifications/:id/read\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      await db\n        .update(notifications)\n        .set({ isRead: true })\n        .where(eq(notifications.id, req.params.id));\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notification as read:\", error);\n      res.status(500).json({ error: \"Failed to update notification\" });\n    }\n  });\n\n  // Seller approval/rejection by admin\n  app.patch(\"/api/users/:id/seller-status\", async (req, res) => {\n    if (!req.isAuthenticated() || req.user?.role !== \"admin\") {\n      return res.sendStatus(403);\n    }\n\n    const { status } = req.body; // approved, rejected, pending\n    const userId = req.params.id;\n\n    try {\n      // Update seller status\n      const [updatedUser] = await db\n        .update(users)\n        .set({ sellerStatus: status })\n        .where(eq(users.id, userId))\n        .returning();\n\n      if (!updatedUser) {\n        return res.status(404).json({ error: \"User not found\" });\n      }\n\n      // Create notification for the seller\n      const notificationMessage =\n        status === \"approved\"\n          ? \"Congratulations! Your seller account has been approved. You can now start selling.\"\n          : status === \"rejected\"\n            ? \"Your seller application has been rejected. Please contact support for more information.\"\n            : \"Your seller application is under review.\";\n\n      await createNotification({\n        userId: updatedUser.id,\n        type: `seller_${status}`,\n        title:\n          status === \"approved\"\n            ? \"Seller Account Approved\"\n            : status === \"rejected\"\n              ? \"Seller Application Rejected\"\n              : \"Seller Application Updated\",\n        message: notificationMessage,\n        data: { sellerStatus: status, adminId: req.user.id },\n        isRead: false,\n      });\n\n      res.json({ success: true, user: updatedUser });\n    } catch (error) {\n      console.error(\"Error updating seller status:\", error);\n      res.status(500).json({ error: \"Failed to update seller status\" });\n    }\n  });\n\n  // Wishlist API endpoints\n  app.get(\"/api/wishlist\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const wishlistItems = await storage.getUserWishlist(req.user!.id);\n      res.json(wishlistItems);\n    } catch (error) {\n      console.error(\"Error fetching wishlist:\", error);\n      res.status(500).json({ error: \"Failed to fetch wishlist\" });\n    }\n  });\n\n  app.post(\"/api/wishlist/:productId\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.productId;\n      const wishlistItem = await storage.addToWishlist(req.user!.id, productId);\n      res.json(wishlistItem);\n    } catch (error) {\n      console.error(\"Error adding to wishlist:\", error);\n      res.status(500).json({ error: \"Failed to add to wishlist\" });\n    }\n  });\n\n  app.delete(\"/api/wishlist/:productId\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.productId;\n      const success = await storage.removeFromWishlist(req.user!.id, productId);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error removing from wishlist:\", error);\n      res.status(500).json({ error: \"Failed to remove from wishlist\" });\n    }\n  });\n\n  app.get(\"/api/wishlist/:productId/check\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.json({ inWishlist: false });\n    }\n\n    try {\n      const productId = req.params.productId;\n      const inWishlist = await storage.isProductInWishlist(\n        req.user!.id,\n        productId,\n      );\n      res.json({ inWishlist });\n    } catch (error) {\n      console.error(\"Error checking wishlist:\", error);\n      res.json({ inWishlist: false });\n    }\n  });\n\n  // Cart API endpoints\n  app.get(\"/api/cart\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const cartItems = await storage.getUserCart(req.user!.id);\n      res.json(cartItems);\n    } catch (error) {\n      console.error(\"Error fetching cart:\", error);\n      res.status(500).json({ error: \"Failed to fetch cart\" });\n    }\n  });\n\n  app.get(\"/api/cart/count\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.json({ count: 0 });\n    }\n\n    try {\n      const count = await storage.getCartItemCount(req.user!.id);\n      res.json({ count });\n    } catch (error) {\n      console.error(\"Error fetching cart count:\", error);\n      res.json({ count: 0 });\n    }\n  });\n\n  app.post(\"/api/cart/:productId\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.productId;\n      const { quantity = 1 } = req.body;\n      const cartItem = await storage.addToCart(\n        req.user!.id,\n        productId,\n        quantity,\n      );\n      res.json(cartItem);\n    } catch (error) {\n      console.error(\"Error adding to cart:\", error);\n      res.status(500).json({ error: \"Failed to add to cart\" });\n    }\n  });\n\n  app.patch(\"/api/cart/:productId\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.productId;\n      const { quantity } = req.body;\n      const success = await storage.updateCartQuantity(\n        req.user!.id,\n        productId,\n        quantity,\n      );\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error updating cart quantity:\", error);\n      res.status(500).json({ error: \"Failed to update cart quantity\" });\n    }\n  });\n\n  app.delete(\"/api/cart/:productId\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const productId = req.params.productId;\n      const success = await storage.removeFromCart(req.user!.id, productId);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error removing from cart:\", error);\n      res.status(500).json({ error: \"Failed to remove from cart\" });\n    }\n  });\n\n  app.delete(\"/api/cart\", async (req, res) => {\n    if (!req.isAuthenticated()) {\n      return res.sendStatus(401);\n    }\n\n    try {\n      const success = await storage.clearCart(req.user!.id);\n      res.json({ success });\n    } catch (error) {\n      console.error(\"Error clearing cart:\", error);\n      res.status(500).json({ error: \"Failed to clear cart\" });\n    }\n  });\n\n  // Create HTTP server and Socket.IO\n  const httpServer = createServer(app);\n\n  // Set up Socket.IO with CORS for development\n  io = new SocketIOServer(httpServer, {\n    path: \"/socket.io\",\n    cors: {\n      origin: true,\n      credentials: true,\n    },\n  });\n\n  // Socket.IO connection handling\n  io.on(\"connection\", (socket) => {\n    console.log(\"User connected:\", socket.id);\n\n    // Join user to their personal room for targeted notifications\n    socket.on(\"join-user-room\", (userId) => {\n      socket.join(`user-${userId}`);\n      console.log(`User ${userId} joined their room`);\n    });\n\n    // Join admins to admin room for admin notifications\n    socket.on(\"join-admin-room\", () => {\n      socket.join(\"admin-room\");\n      console.log(\"User joined admin room\");\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"User disconnected:\", socket.id);\n    });\n  });\n\n  return httpServer;\n}\n\n// Notification helper functions\nexport async function createNotification(notification: InsertNotification) {\n  try {\n    const [newNotification] = await db\n      .insert(notifications)\n      .values(notification)\n      .returning();\n\n    // Emit to specific user or all admins\n    if (notification.userId) {\n      io.to(`user-${notification.userId}`).emit(\n        \"notification\",\n        newNotification,\n      );\n    } else {\n      // Global notification (for admins)\n      io.to(\"admin-room\").emit(\"notification\", newNotification);\n    }\n\n    return newNotification;\n  } catch (error) {\n    console.error(\"Error creating notification:\", error);\n    throw error;\n  }\n}\n\nexport function getSocketIO() {\n  return io;\n}\n","size_bytes":87503},"server/seed-data.ts":{"content":"import { db } from \"./db\";\nimport {\n  users,\n  categories,\n  categoryTranslations,\n  products,\n  productTranslations,\n  orders,\n  orderItems,\n} from \"@shared/schema\";\nimport { hashPassword } from \"./auth\";\n\nexport async function seedDatabase() {\n  try {\n    console.log(\"🌱 Starting database seeding...\");\n\n    // Check if data already exists\n    const existingUsers = await db.select().from(users).limit(1);\n    if (existingUsers.length > 0) {\n      console.log(\"📋 Database already has data, skipping seed.\");\n      return;\n    }\n\n    // 1. Create Users (Admin, Sellers, Clients)\n    console.log(\"👥 Creating users...\");\n\n    // Admin\n    const adminUser = await db\n      .insert(users)\n      .values({\n        username: \"admin\",\n        email: \"admin@devnaza.com\",\n        password: await hashPassword(\"admin123456\"),\n        firstName: \"System\",\n        lastName: \"Administrator\",\n        role: \"admin\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=System+Administrator&background=6366f1&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"en\",\n        sellerStatus: null,\n      })\n      .returning();\n\n    // Sellers\n    const sellerUser = await db\n      .insert(users)\n      .values({\n        username: \"techstore_seller\",\n        email: \"seller@devnaza.com\",\n        password: await hashPassword(\"seller123456\"),\n        firstName: \"Ahmed\",\n        lastName: \"Benali\",\n        role: \"seller\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Ahmed+Benali&background=10b981&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"en\",\n        sellerStatus: \"approved\",\n      })\n      .returning();\n\n    const pendingSeller = await db\n      .insert(users)\n      .values({\n        username: \"fashion_seller\",\n        email: \"fashionseller@devnaza.com\",\n        password: await hashPassword(\"seller123456\"),\n        firstName: \"Fatima\",\n        lastName: \"Boutaiba\",\n        role: \"seller\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Fatima+Boutaiba&background=8b5cf6&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: \"pending\",\n      })\n      .returning();\n\n    const aliSeller = await db\n      .insert(users)\n      .values({\n        username: \"ali_seller\",\n        email: \"ali.seller@example.com\",\n        password: await hashPassword(\"seller123456\"),\n        firstName: \"Ali\",\n        lastName: \"Khan\",\n        role: \"seller\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Ali+Khan&background=14b8a6&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"en\",\n        sellerStatus: \"approved\",\n      })\n      .returning();\n\n    const hinaSeller = await db\n      .insert(users)\n      .values({\n        username: \"hina_seller\",\n        email: \"hina.seller@example.com\",\n        password: await hashPassword(\"seller123456\"),\n        firstName: \"Hina\",\n        lastName: \"Malik\",\n        role: \"seller\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Hina+Malik&background=f472b6&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: \"pending\",\n      })\n      .returning();\n\n    // Clients\n    const clientUser1 = await db\n      .insert(users)\n      .values({\n        username: \"sara_client\",\n        email: \"sara@devnaza.com\",\n        password: await hashPassword(\"client123456\"),\n        firstName: \"Sara\",\n        lastName: \"Djouad\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Sara+Djouad&background=f59e0b&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: null,\n      })\n      .returning();\n\n    const clientUser2 = await db\n      .insert(users)\n      .values({\n        username: \"mohamed_client\",\n        email: \"mohamed@devnaza.com\",\n        password: await hashPassword(\"client123456\"),\n        firstName: \"Mohamed\",\n        lastName: \"Kaddour\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Mohamed+Kaddour&background=ef4444&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"ar\",\n        sellerStatus: null,\n      })\n      .returning();\n\n    const usmanClient = await db\n      .insert(users)\n      .values({\n        username: \"usman_client\",\n        email: \"usman@example.com\",\n        password: await hashPassword(\"client123456\"),\n        firstName: \"Usman\",\n        lastName: \"Ali\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Usman+Ali&background=0ea5e9&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"en\",\n        sellerStatus: null,\n      })\n      .returning();\n\n    const aishaClient = await db\n      .insert(users)\n      .values({\n        username: \"aisha_client\",\n        email: \"aisha@example.com\",\n        password: await hashPassword(\"client123456\"),\n        firstName: \"Aisha\",\n        lastName: \"Yousuf\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Aisha+Yousuf&background=9333ea&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"ar\",\n        sellerStatus: null,\n      })\n      .returning();\n\n    // Extra demo clients from before\n    await db.insert(users).values([\n      {\n        username: \"jean_dupont\",\n        email: \"jean.dupont@example.com\",\n        password: await hashPassword(\"password123\"),\n        firstName: \"Jean\",\n        lastName: \"Dupont\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Jean+Dupont&background=3b82f6&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: null,\n      },\n      {\n        username: \"marie_martin\",\n        email: \"marie.martin@example.com\",\n        password: await hashPassword(\"password123\"),\n        firstName: \"Marie\",\n        lastName: \"Martin\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Marie+Martin&background=ec4899&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: null,\n      },\n      {\n        username: \"pierre_durand\",\n        email: \"pierre.durand@example.com\",\n        password: await hashPassword(\"password123\"),\n        firstName: \"Pierre\",\n        lastName: \"Durand\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Pierre+Durand&background=10b981&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: null,\n      },\n      {\n        username: \"sophie_bernard\",\n        email: \"sophie.bernard@example.com\",\n        password: await hashPassword(\"password123\"),\n        firstName: \"Sophie\",\n        lastName: \"Bernard\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Sophie+Bernard&background=f59e0b&color=fff\",\n        isActive: false,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: null,\n      },\n      {\n        username: \"luc_moreau\",\n        email: \"luc.moreau@example.com\",\n        password: await hashPassword(\"password123\"),\n        firstName: \"Luc\",\n        lastName: \"Moreau\",\n        role: \"seller\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Luc+Moreau&background=6366f1&color=fff\",\n        isActive: true,\n        emailVerified: true,\n        preferredLanguage: \"fr\",\n        sellerStatus: \"approved\",\n      },\n      {\n        username: \"julie_legrand\",\n        email: \"julie.legrand@example.com\",\n        password: await hashPassword(\"password123\"),\n        firstName: \"Julie\",\n        lastName: \"Legrand\",\n        role: \"client\",\n        avatar:\n          \"https://ui-avatars.com/api/?name=Julie+Legrand&background=ef4444&color=fff\",\n        isActive: false,\n        emailVerified: false,\n        preferredLanguage: \"fr\",\n        sellerStatus: null,\n      },\n    ]);\n\n    const sellerId = sellerUser[0].id;\n    const aliSellerId = aliSeller[0].id;\n    const clientId = clientUser1[0].id;\n\n    // Categories\n    console.log(\"📂 Creating categories...\");\n    const electronicsCategory = await db\n      .insert(categories)\n      .values({\n        slug: \"electronics\",\n        icon: \"smartphone\",\n        isActive: true,\n        sortOrder: 1,\n      })\n      .returning();\n    const fashionCategory = await db\n      .insert(categories)\n      .values({ slug: \"fashion\", icon: \"shirt\", isActive: true, sortOrder: 2 })\n      .returning();\n    const homeCategory = await db\n      .insert(categories)\n      .values({\n        slug: \"home-garden\",\n        icon: \"home\",\n        isActive: true,\n        sortOrder: 3,\n      })\n      .returning();\n\n    // Products (original ones + Ali's)\n    console.log(\"📱 Creating products...\");\n    const product1 = await db\n      .insert(products)\n      .values({\n        vendorId: sellerId,\n        categoryId: electronicsCategory[0].id,\n        slug: \"samsung-galaxy-s24-ultra\",\n        sku: \"SAM-S24-ULTRA-256\",\n        price: \"1299.99\",\n        originalPrice: \"1399.99\",\n        stock: 25,\n        images: [\n          \"https://images.unsplash.com/photo-1592899677977-9c10ca588bbd?ixlib=rb-4.0.3&w=400&h=400\",\n        ],\n        isActive: true,\n        isFeatured: true,\n        rating: \"4.8\",\n        reviewCount: 156,\n      })\n      .returning();\n\n    const aliProduct1 = await db\n      .insert(products)\n      .values({\n        vendorId: aliSellerId,\n        categoryId: electronicsCategory[0].id,\n        slug: \"ali-smartwatch\",\n        sku: \"ALI-SMART-01\",\n        price: \"149.99\",\n        originalPrice: \"199.99\",\n        stock: 30,\n        images: [\n          \"https://images.unsplash.com/photo-1511739001486-6bfe10ce785f?w=400&h=400\",\n        ],\n        isActive: true,\n        isFeatured: true,\n        rating: \"4.4\",\n        reviewCount: 42,\n      })\n      .returning();\n\n    // Orders\n    console.log(\"📦 Creating orders...\");\n    const order1 = await db\n      .insert(orders)\n      .values({\n        userId: clientId,\n        status: \"packed\",\n        totalAmount: \"1375.97\",\n        shippingAddress: {\n          street: \"123 Main Street\",\n          city: \"Algiers\",\n          state: \"Algiers\",\n          zipCode: \"16000\",\n          country: \"Algeria\",\n        },\n      })\n      .returning();\n\n    const usmanOrder = await db\n      .insert(orders)\n      .values({\n        userId: usmanClient[0].id,\n        status: \"packed\",\n        totalAmount: \"149.99\",\n        shippingAddress: {\n          street: \"12 Street\",\n          city: \"Lahore\",\n          state: \"Punjab\",\n          zipCode: \"54000\",\n          country: \"Pakistan\",\n        },\n      })\n      .returning();\n\n    const aishaOrder = await db\n      .insert(orders)\n      .values({\n        userId: aishaClient[0].id,\n        status: \"on-way\",\n        totalAmount: \"1299.99\",\n        shippingAddress: {\n          street: \"45 Avenue\",\n          city: \"Karachi\",\n          state: \"Sindh\",\n          zipCode: \"74000\",\n          country: \"Pakistan\",\n        },\n      })\n      .returning();\n\n    await db.insert(orderItems).values([\n      {\n        orderId: order1[0].id,\n        productId: product1[0].id,\n        quantity: 1,\n        unitPrice: \"1299.99\",\n        totalPrice: \"1299.99\",\n      },\n      {\n        orderId: usmanOrder[0].id,\n        productId: aliProduct1[0].id,\n        quantity: 1,\n        unitPrice: \"149.99\",\n        totalPrice: \"149.99\",\n      },\n    ]);\n\n    console.log(\n      \"✅ Database seeded successfully with extended users and data!\",\n    );\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n    throw error;\n  }\n}\n\nseedDatabase()\n  .then(() => {\n    console.log(\"Seeding completed successfully\");\n    process.exit(0);\n  })\n  .catch((error) => {\n    console.error(\"Seeding failed:\", error);\n    process.exit(1);\n  });\n","size_bytes":12066},"server/storage.ts":{"content":"import {\n  users,\n  categories,\n  categoryTranslations,\n  categoryFeatures,\n  products,\n  productTranslations,\n  productSpecifications,\n  productFaqs,\n  orders,\n  orderItems,\n  stores,\n  wishlists,\n  carts,\n  type User,\n  type InsertUser,\n  type Order,\n  type OrderItem,\n  type InsertOrder,\n  type InsertOrderItem,\n  type Store,\n  type InsertStore,\n  type Wishlist,\n  type InsertWishlist,\n  type Cart,\n  type InsertCart,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, sql, desc, inArray, isNull } from \"drizzle-orm\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\nconst MemoryStore = createMemoryStore(session);\n\n// Update IStorage interface to include all required methods\nexport interface IStorage {\n  // User management\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(insertUser: InsertUser): Promise<User>;\n  getAllUsers(): Promise<User[]>;\n  getUserStats(): Promise<{\n    totalUsers: number;\n    activeUsers: number;\n    sellers: number;\n    onHold: number;\n  }>;\n  setPasswordResetToken(\n    email: string,\n    token: string,\n    expiry: Date,\n  ): Promise<boolean>;\n  getUserByResetToken(token: string): Promise<User | undefined>;\n  clearPasswordResetToken(userId: string): Promise<boolean>;\n  updatePassword(userId: string, hashedPassword: string): Promise<boolean>;\n  setEmailVerificationToken(userId: string, token: string): Promise<boolean>;\n  verifyEmail(token: string): Promise<User | undefined>;\n  updateSellerStatus(userId: string, status: string): Promise<boolean>;\n  getPendingSellers(): Promise<User[]>;\n  deleteUser(userId: string): Promise<boolean>;\n  updateUser(userId: string, updates: Partial<User>): Promise<User | undefined>;\n\n  // Categories\n  getCategoriesWithTranslations(language: string): Promise<any[]>;\n\n  // Products\n  getProductsWithTranslations(options: {\n    language: string;\n    featured?: boolean;\n    categoryId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<any[]>;\n  getAllProductsWithTranslations(): Promise<any[]>;\n  getProductWithTranslations(productId: string, language: string): Promise<any>;\n  createProduct(productData: any): Promise<any>;\n  getProductForEdit(productId: string, vendorId: string): Promise<any>;\n  getProductsByVendor(vendorId: string, language?: string): Promise<any[]>;\n  updateProductStock(\n    productId: string,\n    newStock: number,\n    vendorId: string,\n  ): Promise<any>;\n  deleteProduct(productId: string, vendorId: string): Promise<any>;\n  deleteProductAsAdmin(productId: string): Promise<any>;\n  createProductWithDetails(productData: any): Promise<any>;\n  updateProductWithDetails(\n    productId: string,\n    vendorId: string,\n    productData: any,\n  ): Promise<any>;\n  seedDummyProducts(vendorId: string): Promise<void>;\n  getSellersWithProducts(): Promise<any[]>;\n\n  // Vendors\n  getVendors(): Promise<any[]>;\n\n  // Orders\n  getOrdersByUserId(userId: string): Promise<any[]>;\n  getOrdersByVendorId(vendorId: string): Promise<any[]>;\n  getAllOrders(): Promise<any[]>;\n  getOrderWithItems(orderId: string): Promise<any>;\n  createOrder(orderData: any): Promise<any>;\n  createOrderItem(orderItemData: any): Promise<any>;\n  updateOrderStatus(orderId: string, status: string): Promise<boolean>;\n\n  // Store management\n  getAllStores(): Promise<any[]>;\n  getStoreById(id: string): Promise<Store | undefined>;\n  getStoreByOwnerId(ownerId: string): Promise<Store | undefined>;\n  createStore(storeData: InsertStore): Promise<Store>;\n  updateStore(id: string, updates: Partial<Store>): Promise<Store | undefined>;\n  deleteStore(id: string): Promise<boolean>;\n\n  // Wishlist management\n  addToWishlist(userId: string, productId: string): Promise<Wishlist>;\n  removeFromWishlist(userId: string, productId: string): Promise<boolean>;\n  getUserWishlist(userId: string): Promise<any[]>;\n  isProductInWishlist(userId: string, productId: string): Promise<boolean>;\n\n  // Cart management\n  addToCart(userId: string, productId: string, quantity: number): Promise<Cart>;\n  updateCartQuantity(\n    userId: string,\n    productId: string,\n    quantity: number,\n  ): Promise<boolean>;\n  removeFromCart(userId: string, productId: string): Promise<boolean>;\n  getUserCart(userId: string): Promise<any[]>;\n  getCartItemCount(userId: string): Promise<number>;\n  clearCart(userId: string): Promise<boolean>;\n  getStoreStats(): Promise<{\n    totalStores: number;\n    activeStores: number;\n    onHoldStores: number;\n    totalRevenue: string;\n  }>;\n\n  // Dashboard statistics\n  getClientDashboardStats(userId: string): Promise<any>;\n  getSellerDashboardStats(userId: string): Promise<any>;\n  getAdminDashboardStats(): Promise<any>;\n\n  // Session store\n  sessionStore: session.Store;\n}\n\nexport class DatabaseStorage implements IStorage {\n  public sessionStore: session.Store;\n\n  constructor() {\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000, // 24 hours\n    });\n  }\n\n  private checkDatabase(): boolean {\n    if (!db) {\n      console.warn(\"Database not available\");\n      return false;\n    }\n    return true;\n  }\n\n  private async executeWithFallback<T>(\n    operation: () => Promise<T>,\n    fallback: T,\n  ): Promise<T> {\n    if (!this.checkDatabase()) {\n      return fallback;\n    }\n    try {\n      return await operation();\n    } catch (error) {\n      console.error(\"Database operation failed:\", error);\n      return fallback;\n    }\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.executeWithFallback(async () => {\n      const [user] = await db!\n        .select()\n        .from(users)\n        .where(and(eq(users.id, id), isNull(users.deletedAt)));\n      return user || undefined;\n    }, undefined);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return this.executeWithFallback(async () => {\n      const [user] = await db!\n        .select()\n        .from(users)\n        .where(eq(users.username, username));\n      return user || undefined;\n    }, undefined);\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    return this.executeWithFallback(async () => {\n      const [user] = await db!\n        .select()\n        .from(users)\n        .where(eq(users.email, email));\n      return user || undefined;\n    }, undefined);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    if (!db) {\n      throw new Error(\"Database not available, cannot create user\");\n    }\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    try {\n      if (!db) {\n        console.warn(\"Database not available, returning empty array\");\n        return [];\n      }\n      const result = await db\n        .select()\n        .from(users)\n        .where(isNull(users.deletedAt))\n        .orderBy(desc(users.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching all users:\", error);\n      return [];\n    }\n  }\n\n  async getUserStats(): Promise<{\n    totalUsers: number;\n    activeUsers: number;\n    sellers: number;\n    onHold: number;\n  }> {\n    try {\n      if (!db) {\n        console.warn(\"Database not available, returning empty stats\");\n        return { totalUsers: 0, activeUsers: 0, sellers: 0, onHold: 0 };\n      }\n      const [stats] = await db\n        .select({\n          totalUsers: sql<number>`COUNT(*)`,\n          activeUsers: sql<number>`COUNT(CASE WHEN ${users.isActive} = true THEN 1 END)`,\n          sellers: sql<number>`COUNT(CASE WHEN ${users.role} = 'seller' THEN 1 END)`,\n          onHold: sql<number>`COUNT(CASE WHEN ${users.isActive} = false THEN 1 END)`,\n        })\n        .from(users);\n\n      return stats || { totalUsers: 0, activeUsers: 0, sellers: 0, onHold: 0 };\n    } catch (error) {\n      console.error(\"Error fetching user stats:\", error);\n      return { totalUsers: 0, activeUsers: 0, sellers: 0, onHold: 0 };\n    }\n  }\n\n  async setPasswordResetToken(\n    email: string,\n    token: string,\n    expiry: Date,\n  ): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .update(users)\n        .set({\n          resetToken: token,\n          resetTokenExpiry: expiry,\n        })\n        .where(eq(users.email, email));\n      return true;\n    }, false);\n  }\n\n  async getUserByResetToken(token: string): Promise<User | undefined> {\n    return this.executeWithFallback(async () => {\n      const [user] = await db!\n        .select()\n        .from(users)\n        .where(\n          and(\n            eq(users.resetToken, token),\n            sql`${users.resetTokenExpiry} > NOW()`,\n          ),\n        );\n      return user || undefined;\n    }, undefined);\n  }\n\n  async clearPasswordResetToken(userId: string): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .update(users)\n        .set({\n          resetToken: null,\n          resetTokenExpiry: null,\n        })\n        .where(eq(users.id, userId));\n      return true;\n    }, false);\n  }\n\n  async updatePassword(\n    userId: string,\n    hashedPassword: string,\n  ): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .update(users)\n        .set({\n          password: hashedPassword,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n      return true;\n    }, false);\n  }\n\n  async setEmailVerificationToken(\n    userId: string,\n    token: string,\n  ): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .update(users)\n        .set({\n          emailVerificationToken: token,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n      return true;\n    }, false);\n  }\n\n  async verifyEmail(token: string): Promise<User | undefined> {\n    return this.executeWithFallback(async () => {\n      const [user] = await db!\n        .select()\n        .from(users)\n        .where(eq(users.emailVerificationToken, token));\n\n      if (user) {\n        // Mark email as verified and clear token\n        await db!\n          .update(users)\n          .set({\n            emailVerified: true,\n            emailVerificationToken: null,\n            updatedAt: new Date(),\n          })\n          .where(eq(users.id, user.id));\n\n        // Return updated user\n        const [updatedUser] = await db!\n          .select()\n          .from(users)\n          .where(eq(users.id, user.id));\n\n        return updatedUser;\n      }\n\n      return undefined;\n    }, undefined);\n  }\n\n  async updateSellerStatus(userId: string, status: string): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .update(users)\n        .set({\n          sellerStatus: status,\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n      return true;\n    }, false);\n  }\n\n  async getPendingSellers(): Promise<User[]> {\n    return this.executeWithFallback(async () => {\n      const pendingSellers = await db!\n        .select()\n        .from(users)\n        .where(\n          and(\n            eq(users.role, \"seller\"),\n            eq(users.emailVerified, true),\n            eq(users.sellerStatus, \"pending\"),\n          ),\n        );\n      return pendingSellers;\n    }, []);\n  }\n\n  async getCategoriesWithTranslations(language: string): Promise<any[]> {\n    return this.executeWithFallback(async () => {\n      const result = await db!\n        .select({\n          id: categories.id,\n          slug: categories.slug,\n          icon: categories.icon,\n          name: categoryTranslations.name,\n          description: categoryTranslations.description,\n        })\n        .from(categories)\n        .leftJoin(\n          categoryTranslations,\n          and(\n            eq(categoryTranslations.categoryId, categories.id),\n            eq(categoryTranslations.language, language),\n          ),\n        )\n        .where(and(eq(categories.isActive, true), isNull(categories.deletedAt)))\n        .orderBy(categories.sortOrder);\n\n      return result;\n    }, []);\n  }\n\n  async getProductsWithTranslations(options: {\n    language: string;\n    featured?: boolean;\n    categoryId?: string;\n    limit?: number;\n    offset?: number;\n  }): Promise<any[]> {\n    try {\n      let whereConditions = [eq(products.isActive, true)];\n\n      if (options.featured) {\n        whereConditions.push(eq(products.isFeatured, true));\n      }\n\n      if (options.categoryId) {\n        whereConditions.push(eq(products.categoryId, options.categoryId));\n      }\n\n      if (!db) throw new Error(\"Database not available\");\n\n      let query = db\n        .select({\n          id: products.id,\n          vendorId: products.vendorId,\n          categoryId: products.categoryId,\n          slug: products.slug,\n          sku: products.sku,\n          brand: products.brand,\n          price: products.price,\n          originalPrice: products.originalPrice,\n          stock: products.stock,\n          images: products.images,\n          isFeatured: products.isFeatured,\n          rating: products.rating,\n          reviewCount: products.reviewCount,\n          name: productTranslations.name,\n          description: productTranslations.description,\n          shortDescription: productTranslations.shortDescription,\n          vendorName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        })\n        .from(products)\n        .leftJoin(\n          productTranslations,\n          and(\n            eq(productTranslations.productId, products.id),\n            eq(productTranslations.language, options.language),\n          ),\n        )\n        .leftJoin(users, eq(users.id, products.vendorId))\n        .where(and(...whereConditions));\n\n      if (options.limit) {\n        query = query.limit(options.limit) as any;\n      }\n\n      if (options.offset) {\n        query = query.offset(options.offset) as any;\n      }\n\n      const result = await query;\n\n      // If we have products, fetch their FAQs and specifications\n      if (result.length > 0) {\n        const productIds = result.map((p) => p.id);\n\n        // Get specifications for all products\n        const specificationsResult = await db\n          .select({\n            productId: productSpecifications.productId,\n            featureName: productSpecifications.featureName,\n            featureValue: productSpecifications.featureValue,\n          })\n          .from(productSpecifications)\n          .where(inArray(productSpecifications.productId, productIds));\n\n        // Get FAQs for all products\n        const faqsResult = await db\n          .select({\n            productId: productFaqs.productId,\n            question: productFaqs.question,\n            answer: productFaqs.answer,\n          })\n          .from(productFaqs)\n          .where(inArray(productFaqs.productId, productIds));\n\n        // Group specifications by product ID\n        const specificationsByProduct: { [productId: string]: any[] } = {};\n        specificationsResult.forEach((spec) => {\n          if (!specificationsByProduct[spec.productId]) {\n            specificationsByProduct[spec.productId] = [];\n          }\n          specificationsByProduct[spec.productId].push({\n            featureName: spec.featureName,\n            featureValue: spec.featureValue,\n          });\n        });\n\n        // Group FAQs by product ID\n        const faqsByProduct: { [productId: string]: any[] } = {};\n        faqsResult.forEach((faq) => {\n          if (!faqsByProduct[faq.productId]) {\n            faqsByProduct[faq.productId] = [];\n          }\n          faqsByProduct[faq.productId].push({\n            question: faq.question,\n            answer: faq.answer,\n          });\n        });\n\n        // Add specifications and FAQs to each product\n        return result.map((product) => ({\n          ...product,\n          specifications: specificationsByProduct[product.id] || [],\n          faqs: faqsByProduct[product.id] || [],\n        }));\n      }\n\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching products:\", error);\n      return [];\n    }\n  }\n\n  // New method to get ALL products with ALL translations for frontend filtering\n  async getAllProductsWithTranslations(): Promise<any[]> {\n    try {\n      if (!db) throw new Error(\"Database not available\");\n\n      // Get all products from active stores only\n      const productsResult = await db\n        .select({\n          id: products.id,\n          vendorId: products.vendorId,\n          categoryId: products.categoryId,\n          categoryName: categoryTranslations.name,\n          slug: products.slug,\n          sku: products.sku,\n          price: products.price,\n          originalPrice: products.originalPrice,\n          stock: products.stock,\n          images: products.images,\n          isFeatured: products.isFeatured,\n          rating: products.rating,\n          reviewCount: products.reviewCount,\n          isActive: products.isActive,\n          status: products.status,\n          brand: products.brand,\n          createdAt: products.createdAt,\n          vendorName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        })\n        .from(products)\n        .leftJoin(users, eq(users.id, products.vendorId))\n        .leftJoin(stores, eq(stores.ownerId, products.vendorId))\n        .leftJoin(categories, eq(categories.id, products.categoryId))\n        .leftJoin(\n          categoryTranslations,\n          and(\n            eq(categoryTranslations.categoryId, categories.id),\n            eq(categoryTranslations.language, \"en\"),\n          ),\n        )\n        .where(\n          and(\n            eq(products.isActive, true),\n            // eq(stores.status, \"active\"),\n            isNull(products.deletedAt),\n            // isNull(stores.deletedAt),\n          ),\n        )\n        .orderBy(desc(products.createdAt));\n\n      // Get ALL translations for these products\n      const productIds = productsResult.map((p) => p.id);\n\n      if (productIds.length === 0) {\n        return [];\n      }\n\n      const translationsResult = await db\n        .select({\n          productId: productTranslations.productId,\n          language: productTranslations.language,\n          name: productTranslations.name,\n          description: productTranslations.description,\n          highlights: productTranslations.highlights,\n        })\n        .from(productTranslations)\n        .where(inArray(productTranslations.productId, productIds));\n\n      // Group translations by product ID and language\n      const translationsByProduct: {\n        [productId: string]: { [language: string]: any };\n      } = {};\n\n      translationsResult.forEach((translation) => {\n        if (!translationsByProduct[translation.productId]) {\n          translationsByProduct[translation.productId] = {};\n        }\n        translationsByProduct[translation.productId][translation.language] = {\n          name: translation.name,\n          description: translation.description,\n          highlights: translation.highlights,\n        };\n      });\n\n      // Combine products with their translations\n      const result = productsResult.map((product) => ({\n        ...product,\n        name: translationsByProduct[product.id]?.en?.name || \"Untitled Product\",\n        translations: translationsByProduct[product.id] || {},\n      }));\n\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching all products:\", error);\n      return [];\n    }\n  }\n\n  async getProductWithTranslations(\n    productId: string,\n    language: string,\n  ): Promise<any> {\n    try {\n      const [result] = await db\n        .select({\n          id: products.id,\n          vendorId: products.vendorId,\n          categoryId: products.categoryId,\n          slug: products.slug,\n          sku: products.sku,\n          brand: products.brand,\n          price: products.price,\n          originalPrice: products.originalPrice,\n          stock: products.stock,\n          images: products.images,\n          isFeatured: products.isFeatured,\n          rating: products.rating,\n          reviewCount: products.reviewCount,\n          name: productTranslations.name,\n          description: productTranslations.description,\n          shortDescription: productTranslations.shortDescription,\n          vendorName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        })\n        .from(products)\n        .leftJoin(\n          productTranslations,\n          and(\n            eq(productTranslations.productId, products.id),\n            eq(productTranslations.language, language),\n          ),\n        )\n        .leftJoin(users, eq(users.id, products.vendorId))\n        .where(and(eq(products.id, productId), eq(products.isActive, true)));\n\n      if (!result) {\n        return null;\n      }\n\n      // Fetch specifications for this product\n      const specifications = await db\n        .select({\n          featureName: productSpecifications.featureName,\n          featureValue: productSpecifications.featureValue,\n        })\n        .from(productSpecifications)\n        .where(eq(productSpecifications.productId, productId));\n\n      // Fetch FAQs for this product\n      const faqs = await db\n        .select({\n          question: productFaqs.question,\n          answer: productFaqs.answer,\n        })\n        .from(productFaqs)\n        .where(eq(productFaqs.productId, productId));\n\n      return {\n        ...result,\n        specifications,\n        faqs,\n      };\n    } catch (error) {\n      console.error(\"Error fetching product:\", error);\n      return null;\n    }\n  }\n\n  async createProduct(productData: any): Promise<any> {\n    try {\n      // Create the product\n      const [product] = await db\n        .insert(products)\n        .values({\n          vendorId: productData.vendorId,\n          categoryId: productData.categoryId,\n          slug:\n            productData.name\n              .toLowerCase()\n              .replace(/\\s+/g, \"-\")\n              .replace(/[^a-z0-9-]/g, \"\") +\n            \"-\" +\n            Date.now(),\n          sku: productData.productNumber || `PRD-${Date.now()}`,\n          price: productData.price.toString(),\n          originalPrice: productData.originalPrice?.toString(),\n          stock: productData.stockQuantity || 0,\n          images: productData.images || [],\n          isFeatured: false,\n          isActive: true,\n          rating: \"0.0\",\n          reviewCount: 0,\n        })\n        .returning();\n\n      // Create product translations for default language (English)\n      await db.insert(productTranslations).values({\n        productId: product.id,\n        language: \"en\",\n        name: productData.name,\n        description: productData.description,\n        shortDescription: productData.highlights || \"\",\n      });\n\n      return {\n        ...product,\n        name: productData.name,\n        description: productData.description,\n        shortDescription: productData.highlights || \"\",\n      };\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      throw error;\n    }\n  }\n\n  async createProductWithDetails(productData: any): Promise<any> {\n    try {\n      // Generate slug from primary name (prefer English, fallback to French)\n      const primaryName =\n        productData.translations.en?.name ||\n        productData.translations.fr?.name ||\n        \"product\";\n      const slug =\n        primaryName\n          .toLowerCase()\n          .replace(/\\s+/g, \"-\")\n          .replace(/[^a-z0-9-]/g, \"\") +\n        \"-\" +\n        Date.now();\n\n      // Create the main product\n      const [product] = await db\n        .insert(products)\n        .values({\n          vendorId: productData.vendorId,\n          categoryId: productData.categoryId,\n          slug,\n          sku:\n            productData.sku ||\n            `PRD-${Date.now()}-${Math.random().toString(36).substring(2, 8)}`,\n          brand: productData.brand || \"Unknown Brand\",\n          price: productData.price.toString(),\n          originalPrice: productData.originalPrice?.toString(),\n          stock: productData.stock || 0,\n          images: productData.images || [],\n          isFeatured: false,\n          isActive: productData.status === \"active\",\n          rating: \"0.0\",\n          reviewCount: 0,\n        })\n        .returning();\n\n      // Create product translations for all provided languages\n      const translationPromises = Object.entries(productData.translations).map(\n        ([language, translation]: [string, any]) => {\n          if (translation.name) {\n            return db.insert(productTranslations).values({\n              productId: product.id,\n              language,\n              name: translation.name,\n              description: translation.description || \"\",\n              shortDescription: translation.shortDescription || \"\",\n              highlights: translation.highlights || \"\",\n            });\n          }\n          return Promise.resolve();\n        },\n      );\n\n      await Promise.all(translationPromises.filter((p) => p));\n\n      // Create product specifications\n      if (productData.specifications && productData.specifications.length > 0) {\n        const specificationPromises = productData.specifications.map(\n          (spec: any, index: number) => {\n            if (spec.featureName && spec.featureValue) {\n              return db.insert(productSpecifications).values({\n                productId: product.id,\n                featureName: spec.featureName,\n                featureValue: spec.featureValue,\n                featureType: spec.featureType || \"text\",\n                sortOrder: index,\n              });\n            }\n            return Promise.resolve();\n          },\n        );\n\n        await Promise.all(specificationPromises.filter((p: any) => p));\n      }\n\n      // Create product FAQs\n      if (productData.faqs && productData.faqs.length > 0) {\n        const faqPromises = productData.faqs.map((faq: any, index: number) => {\n          if (faq.question && faq.answer) {\n            return db.insert(productFaqs).values({\n              productId: product.id,\n              question: faq.question,\n              answer: faq.answer,\n              sortOrder: index,\n              isActive: true,\n            });\n          }\n          return Promise.resolve();\n        });\n\n        await Promise.all(faqPromises.filter((p: any) => p));\n      }\n\n      // Update store product count\n      await db\n        .update(stores)\n        .set({\n          productCount: sql`${stores.productCount} + 1`,\n          updatedAt: new Date(),\n        })\n        .where(eq(stores.ownerId, productData.vendorId));\n\n      // Return product with primary language translation\n      const primaryTranslation =\n        productData.translations.en ||\n        productData.translations.fr ||\n        Object.values(productData.translations)[0];\n      return {\n        ...product,\n        name: primaryTranslation?.name || \"Unnamed Product\",\n        description: primaryTranslation?.description || \"\",\n        shortDescription: primaryTranslation?.shortDescription || \"\",\n      };\n    } catch (error) {\n      console.error(\"Error creating product with details:\", error);\n      throw error;\n    }\n  }\n\n  async getProductForEdit(productId: string, vendorId: string): Promise<any> {\n    try {\n      // Get the basic product information\n      const [product] = await db!\n        .select()\n        .from(products)\n        .where(and(eq(products.id, productId), eq(products.vendorId, vendorId)))\n        .limit(1);\n\n      if (!product) {\n        return null;\n      }\n\n      // Get all translations for this product\n      const translations = await db!\n        .select()\n        .from(productTranslations)\n        .where(eq(productTranslations.productId, productId));\n\n      // Get specifications\n      const specifications = await db!\n        .select()\n        .from(productSpecifications)\n        .where(eq(productSpecifications.productId, productId))\n        .orderBy(productSpecifications.sortOrder);\n\n      // Get FAQs\n      const faqs = await db!\n        .select()\n        .from(productFaqs)\n        .where(eq(productFaqs.productId, productId))\n        .orderBy(productFaqs.sortOrder);\n\n      // Organize translations by language\n      const translationsByLanguage: any = {};\n      translations.forEach((translation) => {\n        translationsByLanguage[translation.language] = {\n          name: translation.name,\n          description: translation.description,\n          highlights: translation.highlights,\n        };\n      });\n\n      // Transform images array to extract URLs for edit mode\n      const imageUrls = Array.isArray(product.images)\n        ? product.images.map((img: any) =>\n            typeof img === \"string\" ? img : img?.url || img,\n          )\n        : [];\n\n      return {\n        ...product,\n        images: imageUrls, // Use transformed image URLs\n        status: product.isActive ? \"active\" : \"inactive\",\n        translations: translationsByLanguage,\n        specifications,\n        faqs,\n      };\n    } catch (error) {\n      console.error(\"Error fetching product for edit:\", error);\n      return null;\n    }\n  }\n\n  async getProductsByVendor(\n    vendorId: string,\n    language: string = \"en\",\n  ): Promise<any[]> {\n    try {\n      if (!db) throw new Error(\"Database not available\");\n\n      // First, get all products by vendor\n      const productsResult = await db\n        .select({\n          id: products.id,\n          vendorId: products.vendorId,\n          categoryId: products.categoryId,\n          categoryName: categoryTranslations.name,\n          slug: products.slug,\n          sku: products.sku,\n          brand: products.brand,\n          price: products.price,\n          originalPrice: products.originalPrice,\n          stock: products.stock,\n          images: products.images,\n          isFeatured: products.isFeatured,\n          rating: products.rating,\n          reviewCount: products.reviewCount,\n          isActive: products.isActive,\n          vendorName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n        })\n        .from(products)\n        .leftJoin(users, eq(users.id, products.vendorId))\n        .leftJoin(categories, eq(categories.id, products.categoryId))\n        .leftJoin(\n          categoryTranslations,\n          and(\n            eq(categoryTranslations.categoryId, categories.id),\n            eq(categoryTranslations.language, language),\n          ),\n        )\n        .where(\n          and(\n            eq(products.vendorId, vendorId),\n            eq(products.isActive, true),\n            isNull(products.deletedAt),\n          ),\n        )\n        .orderBy(desc(products.createdAt));\n\n      // Then, get ALL translations for these products\n      const productIds = productsResult.map((p) => p.id);\n\n      if (productIds.length === 0) {\n        return [];\n      }\n\n      const translationsResult = await db\n        .select({\n          productId: productTranslations.productId,\n          language: productTranslations.language,\n          name: productTranslations.name,\n          description: productTranslations.description,\n          highlights: productTranslations.highlights,\n        })\n        .from(productTranslations)\n        .where(inArray(productTranslations.productId, productIds));\n\n      // Group translations by product ID and language\n      const translationsByProduct: {\n        [productId: string]: { [language: string]: any };\n      } = {};\n\n      translationsResult.forEach((translation) => {\n        if (!translationsByProduct[translation.productId]) {\n          translationsByProduct[translation.productId] = {};\n        }\n        translationsByProduct[translation.productId][translation.language] = {\n          name: translation.name,\n          description: translation.description,\n          highlights: translation.highlights,\n        };\n      });\n\n      // Combine products with their translations\n      const result = productsResult.map((product) => ({\n        ...product,\n        name:\n          translationsByProduct[product.id]?.[language]?.name ||\n          \"Untitled Product\",\n        translations: translationsByProduct[product.id] || {},\n      }));\n\n      // Fetch FAQs and specifications for each product\n      const productsWithDetails = await Promise.all(\n        result.map(async (product) => {\n          // Transform images array to extract URLs\n          const imageUrls = Array.isArray(product.images)\n            ? product.images.map((img: any) =>\n                typeof img === \"string\" ? img : img?.url || img,\n              )\n            : [];\n\n          // Get FAQs\n          const faqs = await db\n            .select({\n              question: productFaqs.question,\n              answer: productFaqs.answer,\n            })\n            .from(productFaqs)\n            .where(\n              and(\n                eq(productFaqs.productId, product.id),\n                eq(productFaqs.isActive, true),\n              ),\n            )\n            .orderBy(productFaqs.sortOrder);\n\n          // Get specifications\n          const specifications = await db\n            .select({\n              featureName: productSpecifications.featureName,\n              featureValue: productSpecifications.featureValue,\n              featureType: productSpecifications.featureType,\n            })\n            .from(productSpecifications)\n            .where(eq(productSpecifications.productId, product.id))\n            .orderBy(productSpecifications.sortOrder);\n\n          return {\n            ...product,\n            images: imageUrls, // Use transformed image URLs\n            status: product.isActive ? \"active\" : \"inactive\",\n            price: product.price.toString(),\n            originalPrice: product.originalPrice?.toString(),\n            rating: parseFloat(product.rating || \"0\"),\n            faqs: faqs || [],\n            specifications: specifications || [],\n          };\n        }),\n      );\n\n      return productsWithDetails;\n    } catch (error) {\n      console.error(\"Error fetching vendor products:\", error);\n      return [];\n    }\n  }\n\n  async getVendors(): Promise<any[]> {\n    try {\n      const result = await db\n        .select({\n          id: users.id,\n          name: sql<string>`${users.firstName} || ' ' || ${users.lastName}`.as(\n            \"name\",\n          ),\n          email: users.email,\n          avatar: users.avatar,\n          createdAt: users.createdAt,\n        })\n        .from(users)\n        .where(and(eq(users.role, \"seller\"), eq(users.isActive, true)))\n        .limit(10);\n\n      return result.map((vendor) => ({\n        ...vendor,\n        description: `Professional seller since ${new Date(vendor.createdAt).getFullYear()}`,\n        rating: 4.5 + Math.random() * 0.5, // Mock rating\n        productCount: Math.floor(Math.random() * 2000) + 100, // Mock product count\n      }));\n    } catch (error) {\n      console.error(\"Error fetching vendors:\", error);\n      return [];\n    }\n  }\n\n  async updateProductWithDetails(\n    productId: string,\n    vendorId: string,\n    productData: any,\n  ): Promise<any> {\n    try {\n      // Update the main product\n      await db\n        .update(products)\n        .set({\n          categoryId: productData.categoryId,\n          sku: productData.sku,\n          brand: productData.brand,\n          price: productData.price.toString(),\n          originalPrice: productData.originalPrice?.toString(),\n          stock: productData.stock || 0,\n          images: productData.images || [],\n          isActive: productData.status === \"active\",\n          updatedAt: new Date(),\n        })\n        .where(\n          and(eq(products.id, productId), eq(products.vendorId, vendorId)),\n        );\n\n      // Update translations\n      if (productData.translations) {\n        for (const [language, translation] of Object.entries(\n          productData.translations,\n        )) {\n          const translationData = translation as any;\n          if (translationData.name) {\n            await db\n              .update(productTranslations)\n              .set({\n                name: translationData.name,\n                description: translationData.description || \"\",\n                shortDescription: translationData.shortDescription || \"\",\n                highlights: translationData.highlights || \"\",\n              })\n              .where(\n                and(\n                  eq(productTranslations.productId, productId),\n                  eq(productTranslations.language, language),\n                ),\n              );\n          }\n        }\n      }\n\n      // Update specifications\n      if (productData.specifications) {\n        // Delete existing specifications\n        await db\n          .delete(productSpecifications)\n          .where(eq(productSpecifications.productId, productId));\n\n        // Insert new specifications\n        if (productData.specifications.length > 0) {\n          const specificationPromises = productData.specifications.map(\n            (spec: any, index: number) => {\n              if (spec.featureName && spec.featureValue) {\n                return db.insert(productSpecifications).values({\n                  productId,\n                  featureName: spec.featureName,\n                  featureValue: spec.featureValue,\n                  featureType: spec.featureType || \"text\",\n                  sortOrder: index,\n                });\n              }\n              return Promise.resolve();\n            },\n          );\n\n          await Promise.all(specificationPromises.filter((p: any) => p));\n        }\n      }\n\n      // Update FAQs\n      if (productData.faqs) {\n        // Delete existing FAQs\n        await db\n          .delete(productFaqs)\n          .where(eq(productFaqs.productId, productId));\n\n        // Insert new FAQs\n        if (productData.faqs.length > 0) {\n          const faqPromises = productData.faqs.map(\n            (faq: any, index: number) => {\n              if (faq.question && faq.answer) {\n                return db.insert(productFaqs).values({\n                  productId,\n                  question: faq.question,\n                  answer: faq.answer,\n                  sortOrder: index,\n                  isActive: true,\n                });\n              }\n              return Promise.resolve();\n            },\n          );\n\n          await Promise.all(faqPromises.filter((p: any) => p));\n        }\n      }\n\n      // Return success message\n      return { id: productId, message: \"Product updated successfully\" };\n    } catch (error) {\n      console.error(\"Error updating product with details:\", error);\n      throw error;\n    }\n  }\n\n  async getClientDashboardStats(userId: string): Promise<any> {\n    try {\n      // In a real implementation, these would be actual database queries\n      return {\n        totalOrders: 12,\n        wishlistItems: 24,\n        reviewsWritten: 8,\n        totalSpent: \"1,234\",\n      };\n    } catch (error) {\n      console.error(\"Error fetching client dashboard stats:\", error);\n      return {\n        totalOrders: 0,\n        wishlistItems: 0,\n        reviewsWritten: 0,\n        totalSpent: \"0\",\n      };\n    }\n  }\n\n  async getSellerDashboardStats(userId: string): Promise<any> {\n    try {\n      // In a real implementation, these would be actual database queries\n      const productCount = await db\n        .select({ count: sql<number>`COUNT(*)` })\n        .from(products)\n        .where(and(eq(products.vendorId, userId), eq(products.isActive, true)));\n\n      return {\n        totalProducts: productCount[0]?.count || 156,\n        totalSales: \"12,456\",\n        customers: 89,\n        monthlyGrowth: 23,\n      };\n    } catch (error) {\n      console.error(\"Error fetching seller dashboard stats:\", error);\n      return {\n        totalProducts: 0,\n        totalSales: \"0\",\n        customers: 0,\n        monthlyGrowth: 0,\n      };\n    }\n  }\n\n  async getAdminDashboardStats(): Promise<any> {\n    try {\n      // Get actual user counts\n      const userCounts = await db\n        .select({\n          role: users.role,\n          count: sql<number>`COUNT(*)`,\n        })\n        .from(users)\n        .where(eq(users.isActive, true))\n        .groupBy(users.role);\n\n      const totalUsers = userCounts.reduce((sum, row) => sum + row.count, 0);\n      const activeVendors =\n        userCounts.find((row) => row.role === \"seller\")?.count || 0;\n\n      return {\n        totalUsers: totalUsers.toString(),\n        activeVendors,\n        totalRevenue: \"45,678\",\n        platformGrowth: 15,\n      };\n    } catch (error) {\n      console.error(\"Error fetching admin dashboard stats:\", error);\n      return {\n        totalUsers: \"0\",\n        activeVendors: 0,\n        totalRevenue: \"0\",\n        platformGrowth: 0,\n      };\n    }\n  }\n\n  // async getOrdersByUserId(userId: string): Promise<any[]> {\n  //   try {\n  //     const result = await db\n  //       .select({\n  //         id: orders.id,\n  //         status: orders.status,\n  //         totalAmount: orders.totalAmount,\n  //         createdAt: orders.createdAt,\n  //         updatedAt: orders.updatedAt,\n  //       })\n  //       .from(orders)\n  //       .where(eq(orders.userId, userId))\n  //       .orderBy(desc(orders.createdAt));\n\n  //     return result;\n  //   } catch (error) {\n  //     console.error(\"Error fetching user orders:\", error);\n  //     return [];\n  //   }\n  // }\n\n  async getOrdersByUserId(userId: string): Promise<any[]> {\n    try {\n      // 1. Get all orders for the user\n      const userOrders = await db\n        .select()\n        .from(orders)\n        .where(eq(orders.userId, userId))\n        .orderBy(desc(orders.createdAt));\n\n      // 2. Attach items for each order\n      const ordersWithItems = await Promise.all(\n        userOrders.map(async (order) => {\n          const items = await db\n            .select({\n              id: orderItems.id,\n              productId: orderItems.productId,\n              quantity: orderItems.quantity,\n              unitPrice: orderItems.unitPrice,\n              totalPrice: orderItems.totalPrice,\n              name: productTranslations.name,\n              images: products.images, // adjust if images in another table\n            })\n            .from(orderItems)\n            .innerJoin(products, eq(orderItems.productId, products.id))\n            .where(eq(orderItems.orderId, order.id));\n\n          return {\n            id: order.id,\n            orderNumber: order.orderNumber,\n            status: order.status,\n            paymentStatus: order.paymentStatus,\n            paymentMethod: order.paymentMethod,\n            totalAmount: Number(order.totalAmount),\n            vendorName: order.vendorName,\n            itemCount: order.itemCount,\n            trackingNumber: order.trackingNumber,\n            deliveryDate: order.deliveryDate,\n            createdAt: order.createdAt,\n            items: items.map((item) => ({\n              id: item.id,\n              productId: item.productId,\n              quantity: item.quantity,\n              unitPrice: Number(item.unitPrice),\n              totalPrice: Number(item.totalPrice),\n              product: {\n                name: item.name,\n                images: item.images || [],\n              },\n            })),\n          };\n        }),\n      );\n\n      return ordersWithItems;\n    } catch (error) {\n      console.error(\"Error fetching user orders:\", error);\n      return [];\n    }\n  }\n\n  async getOrdersByVendorId(vendorId: string): Promise<any[]> {\n    try {\n      const result = await db\n        .select({\n          id: orders.id,\n          userId: orders.userId,\n          status: orders.status,\n          totalAmount: orders.totalAmount,\n          createdAt: orders.createdAt,\n          updatedAt: orders.updatedAt,\n          customerName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n          customerEmail: users.email,\n          customerAvatar: users.avatar,\n        })\n        .from(orders)\n        .innerJoin(orderItems, eq(orderItems.orderId, orders.id))\n        .innerJoin(products, eq(products.id, orderItems.productId))\n        .innerJoin(users, eq(users.id, orders.userId))\n        .where(eq(products.vendorId, vendorId))\n        .groupBy(orders.id, users.id)\n        .orderBy(desc(orders.createdAt));\n\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching vendor orders:\", error);\n      return [];\n    }\n  }\n\n  async getAllOrders(): Promise<any[]> {\n    try {\n      const result = await db\n        .select({\n          id: orders.id,\n          userId: orders.userId,\n          status: orders.status,\n          totalAmount: orders.totalAmount,\n          createdAt: orders.createdAt,\n          customerName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n          customerEmail: users.email,\n          customerAvatar: users.avatar,\n        })\n        .from(orders)\n        .innerJoin(users, eq(users.id, orders.userId))\n        .orderBy(desc(orders.createdAt));\n\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching all orders:\", error);\n      return [];\n    }\n  }\n\n  async getOrderWithItems(orderId: string): Promise<any> {\n    try {\n      // Get order details\n      const [orderDetails] = await db\n        .select({\n          id: orders.id,\n          userId: orders.userId,\n          status: orders.status,\n          totalAmount: orders.totalAmount,\n          shippingAddress: orders.shippingAddress,\n          createdAt: orders.createdAt,\n          customerName: sql<string>`${users.firstName} || ' ' || ${users.lastName}`,\n          customerEmail: users.email,\n          customerAvatar: users.avatar,\n        })\n        .from(orders)\n        .innerJoin(users, eq(users.id, orders.userId))\n        .where(eq(orders.id, orderId));\n\n      if (!orderDetails) return null;\n\n      // Get order items\n      const items = await db\n        .select({\n          id: orderItems.id,\n          quantity: orderItems.quantity,\n          unitPrice: orderItems.unitPrice,\n          totalPrice: orderItems.totalPrice,\n          productName: productTranslations.name,\n          productDescription: productTranslations.shortDescription,\n        })\n        .from(orderItems)\n        .innerJoin(products, eq(products.id, orderItems.productId))\n        .leftJoin(\n          productTranslations,\n          and(\n            eq(productTranslations.productId, products.id),\n            eq(productTranslations.language, \"en\"),\n          ),\n        )\n        .where(eq(orderItems.orderId, orderId));\n\n      return {\n        ...orderDetails,\n        items,\n      };\n    } catch (error) {\n      console.error(\"Error fetching order with items:\", error);\n      return null;\n    }\n  }\n\n  async seedDummyProducts(vendorId: string): Promise<void> {\n    try {\n      if (!db) throw new Error(\"Database not available\");\n\n      // Get categories first\n      const categories = await this.getCategoriesWithTranslations(\"en\");\n      if (categories.length === 0) return;\n\n      const dummyProducts = [\n        {\n          name: \"Athletic Sneakers\",\n          categoryId: categories[0]?.id,\n          sku: \"DUMMY-SNEAKERS\",\n          price: \"89.99\",\n          originalPrice: \"109.99\",\n          stock: 12,\n          images: [{ url: \"/api/placeholder/400/400\", uploadMethod: \"url\" }],\n          isFeatured: true,\n          translations: {\n            en: {\n              name: \"Athletic Sneakers\",\n              description:\n                \"<p>Experience ultimate comfort with these premium athletic sneakers. Featuring advanced cushioning technology and breathable mesh upper, these shoes are perfect for running, walking, or everyday wear.</p>\",\n              highlights:\n                \"<ul><li>Advanced cushioning technology</li><li>Breathable mesh upper</li><li>Non-slip rubber outsole</li><li>Lightweight design</li></ul>\",\n            },\n            fr: {\n              name: \"Baskets Athlétiques\",\n              description:\n                \"<p>Découvrez le confort ultime avec ces baskets athlétiques premium. Dotées d'une technologie d'amortissement avancée et d'une tige en mesh respirant, ces chaussures sont parfaites pour la course, la marche ou le port quotidien.</p>\",\n              highlights:\n                \"<ul><li>Technologie d'amortissement avancée</li><li>Tige en mesh respirant</li><li>Semelle extérieure antidérapante</li><li>Design léger</li></ul>\",\n            },\n            ar: {\n              name: \"أحذية رياضية\",\n              description:\n                \"<p>اختبر الراحة المطلقة مع هذه الأحذية الرياضية المتميزة. تتميز بتقنية توسيد متقدمة وجزء علوي من الشبك القابل للتنفس، هذه الأحذية مثالية للجري والمشي أو الارتداء اليومي.</p>\",\n              highlights:\n                \"<ul><li>تقنية توسيد متقدمة</li><li>جزء علوي من الشبك القابل للتنفس</li><li>نعل خارجي مقاوم للانزلاق</li><li>تصميم خفيف الوزن</li></ul>\",\n            },\n          },\n        },\n        {\n          name: \"Cotton T-Shirt\",\n          categoryId: categories[1]?.id || categories[0]?.id,\n          sku: \"DUMMY-TSHIRT\",\n          price: \"24.99\",\n          originalPrice: null,\n          stock: 25,\n          images: [{ url: \"/api/placeholder/400/400\", uploadMethod: \"url\" }],\n          isFeatured: false,\n          translations: {\n            en: {\n              name: \"Premium Cotton T-Shirt\",\n              description:\n                \"<p>A classic premium cotton t-shirt that combines comfort with style. Made from 100% organic cotton, this shirt offers exceptional softness and durability for everyday wear.</p>\",\n              highlights:\n                \"<ul><li>100% organic cotton</li><li>Pre-shrunk fabric</li><li>Reinforced seams</li><li>Machine washable</li></ul>\",\n            },\n            fr: {\n              name: \"T-Shirt en Coton Premium\",\n              description:\n                \"<p>Un t-shirt classique en coton premium qui allie confort et style. Fabriqué à partir de coton 100% biologique, ce t-shirt offre une douceur et une durabilité exceptionnelles pour un port quotidien.</p>\",\n              highlights:\n                \"<ul><li>Coton 100% biologique</li><li>Tissu pré-rétréci</li><li>Coutures renforcées</li><li>Lavable en machine</li></ul>\",\n            },\n            ar: {\n              name: \"تي شيرت قطني فاخر\",\n              description:\n                \"<p>تي شيرت كلاسيكي من القطن الفاخر يجمع بين الراحة والأناقة. مصنوع من القطن العضوي 100%، يوفر هذا القميص نعومة ومتانة استثنائية للارتداء اليومي.</p>\",\n              highlights:\n                \"<ul><li>قطن عضوي 100%</li><li>قماش مقلص مسبقاً</li><li>خياطة معززة</li><li>قابل للغسل في الغسالة</li></ul>\",\n            },\n          },\n        },\n        {\n          name: \"Wireless Headphones\",\n          categoryId: categories[0]?.id,\n          sku: \"DUMMY-HEADPHONES\",\n          price: \"149.99\",\n          originalPrice: \"199.99\",\n          stock: 8,\n          images: [{ url: \"/api/placeholder/400/400\", uploadMethod: \"url\" }],\n          isFeatured: true,\n          translations: {\n            en: {\n              name: \"Premium Wireless Headphones\",\n              description:\n                \"<p>Immerse yourself in crystal-clear audio with these premium wireless headphones. Featuring active noise cancellation, 30-hour battery life, and superior comfort for extended listening sessions.</p>\",\n              highlights:\n                \"<ul><li>Active noise cancellation</li><li>30-hour battery life</li><li>Premium leather cushions</li><li>Bluetooth 5.0 connectivity</li></ul>\",\n            },\n            fr: {\n              name: \"Casque Sans Fil Premium\",\n              description:\n                \"<p>Plongez-vous dans un audio cristallin avec ce casque sans fil premium. Doté d'une annulation active du bruit, d'une autonomie de 30 heures et d'un confort supérieur pour des sessions d'écoute prolongées.</p>\",\n              highlights:\n                \"<ul><li>Annulation active du bruit</li><li>Autonomie de 30 heures</li><li>Coussins en cuir premium</li><li>Connectivité Bluetooth 5.0</li></ul>\",\n            },\n            ar: {\n              name: \"سماعات لاسلكية فاخرة\",\n              description:\n                \"<p>انغمس في صوت واضح كالكريستال مع هذه السماعات اللاسلكية الفاخرة. تتميز بإلغاء الضوضاء النشط وعمر بطارية 30 ساعة وراحة فائقة لجلسات الاستماع الطويلة.</p>\",\n              highlights:\n                \"<ul><li>إلغاء الضوضاء النشط</li><li>عمر بطارية 30 ساعة</li><li>وسائد جلدية فاخرة</li><li>اتصال البلوتوث 5.0</li></ul>\",\n            },\n          },\n        },\n        {\n          name: \"Smart Watch\",\n          categoryId: categories[0]?.id,\n          sku: \"DUMMY-WATCH\",\n          price: \"299.99\",\n          originalPrice: null,\n          stock: 0,\n          images: [{ url: \"/api/placeholder/400/400\", uploadMethod: \"url\" }],\n          isFeatured: false,\n          translations: {\n            en: {\n              name: \"Advanced Smart Watch\",\n              description:\n                \"<p>Stay connected and track your fitness goals with this advanced smart watch. Features comprehensive health monitoring, GPS tracking, and seamless smartphone integration.</p>\",\n              highlights:\n                \"<ul><li>Heart rate monitoring</li><li>Built-in GPS</li><li>Sleep tracking</li><li>7-day battery life</li></ul>\",\n            },\n            fr: {\n              name: \"Montre Connectée Avancée\",\n              description:\n                \"<p>Restez connecté et suivez vos objectifs de fitness avec cette montre connectée avancée. Dispose d'un monitoring de santé complet, d'un suivi GPS et d'une intégration transparente avec les smartphones.</p>\",\n              highlights:\n                \"<ul><li>Surveillance du rythme cardiaque</li><li>GPS intégré</li><li>Suivi du sommeil</li><li>Autonomie de 7 jours</li></ul>\",\n            },\n            ar: {\n              name: \"ساعة ذكية متقدمة\",\n              description:\n                \"<p>ابق متصلاً وتتبع أهداف اللياقة البدنية مع هذه الساعة الذكية المتقدمة. تتميز بمراقبة صحية شاملة وتتبع نظام تحديد المواقع وتكامل سلس مع الهواتف الذكية.</p>\",\n              highlights:\n                \"<ul><li>مراقبة معدل ضربات القلب</li><li>نظام تحديد المواقع المدمج</li><li>تتبع النوم</li><li>عمر بطارية 7 أيام</li></ul>\",\n            },\n          },\n        },\n      ];\n\n      for (const productData of dummyProducts) {\n        // Check if product already exists\n        const existingProduct = await db\n          .select()\n          .from(products)\n          .where(eq(products.sku, productData.sku))\n          .limit(1);\n\n        if (existingProduct.length === 0) {\n          // Create the product\n          const [product] = await db\n            .insert(products)\n            .values({\n              vendorId: vendorId,\n              categoryId: productData.categoryId,\n              slug:\n                productData.name\n                  .toLowerCase()\n                  .replace(/\\s+/g, \"-\")\n                  .replace(/[^a-z0-9-]/g, \"\") +\n                \"-\" +\n                Date.now(),\n              sku: productData.sku,\n              price: productData.price,\n              originalPrice: productData.originalPrice,\n              stock: productData.stock,\n              images: productData.images,\n              isFeatured: productData.isFeatured,\n              isActive: true,\n              rating: \"4.5\",\n              reviewCount: Math.floor(Math.random() * 50) + 10,\n            })\n            .returning();\n\n          // Create product translations for all languages\n          const translationPromises = Object.entries(\n            productData.translations,\n          ).map(([language, translation]) =>\n            db.insert(productTranslations).values({\n              productId: product.id,\n              language,\n              name: translation.name,\n              description: translation.description,\n              highlights: translation.highlights,\n            }),\n          );\n\n          await Promise.all(translationPromises);\n        }\n      }\n    } catch (error) {\n      console.error(\"Error seeding dummy products:\", error);\n    }\n  }\n\n  async createOrder(orderData: InsertOrder): Promise<Order> {\n    // Generate unique order number\n    const orderNumber = await this.generateOrderNumber();\n    const enhancedOrderData = {\n      ...orderData,\n      orderNumber,\n    };\n    const [order] = await db\n      .insert(orders)\n      .values(enhancedOrderData)\n      .returning();\n    return order;\n  }\n\n  private async generateOrderNumber(): Promise<string> {\n    // Generate order number in format CMD-XXXX\n    const prefix = \"CMD\";\n    const randomNumber = Math.floor(Math.random() * 9000) + 1000; // 4-digit random number\n    return `${prefix}-${randomNumber}`;\n  }\n\n  async createOrderItem(orderItemData: InsertOrderItem): Promise<OrderItem> {\n    if (!db) throw new Error(\"Database not available\");\n    const [orderItem] = await db\n      .insert(orderItems)\n      .values(orderItemData)\n      .returning();\n    return orderItem;\n  }\n\n  async updateOrderStatus(orderId: string, status: string): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .update(orders)\n        .set({ status, updatedAt: new Date() })\n        .where(eq(orders.id, orderId));\n      return true;\n    }, false);\n  }\n\n  async deleteUser(userId: string): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      // Soft delete the user instead of permanent deletion\n      await db!\n        .update(users)\n        .set({\n          deletedAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .where(eq(users.id, userId));\n      return true;\n    }, false);\n  }\n\n  async updateUser(\n    userId: string,\n    updates: Partial<User>,\n  ): Promise<User | undefined> {\n    return this.executeWithFallback(async () => {\n      const [updatedUser] = await db!\n        .update(users)\n        .set({ ...updates, updatedAt: new Date() })\n        .where(eq(users.id, userId))\n        .returning();\n      return updatedUser;\n    }, undefined);\n  }\n\n  async getAllStores(): Promise<any[]> {\n    try {\n      const result = await db\n        .select({\n          id: stores.id,\n          ownerId: stores.ownerId,\n          name: stores.name,\n          codeStore: stores.codeStore,\n          categoryId: stores.categoryId,\n          description: stores.description,\n          status: stores.status,\n          createdAt: stores.createdAt,\n          updatedAt: stores.updatedAt,\n          subscriptionEnd: stores.subscriptionEnd,\n          lastActionAt: stores.lastActionAt,\n          messagesSent: stores.messagesSent,\n          totalRevenue: stores.totalRevenue,\n          productCount: stores.productCount,\n          orderCount: stores.orderCount,\n          ownerName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n          ownerEmail: users.email,\n          categoryName: sql<string>`COALESCE(category_trans.name, 'Uncategorized')`,\n        })\n        .from(stores)\n        .leftJoin(\n          users,\n          and(eq(stores.ownerId, users.id), isNull(users.deletedAt)),\n        )\n        .leftJoin(\n          categories,\n          and(\n            eq(stores.categoryId, categories.id),\n            isNull(categories.deletedAt),\n          ),\n        )\n        .leftJoin(\n          sql`(\n            SELECT DISTINCT ON (category_id) category_id, name \n            FROM category_translations \n            WHERE language = 'en'\n          ) AS category_trans`,\n          sql`category_trans.category_id = ${categories.id}`,\n        )\n        .where(isNull(stores.deletedAt))\n        .orderBy(desc(stores.createdAt));\n      return result;\n    } catch (error) {\n      console.error(\"Error fetching stores:\", error);\n      return [];\n    }\n  }\n\n  async getStoreById(id: string): Promise<Store | undefined> {\n    try {\n      const [store] = await db\n        .select({\n          id: stores.id,\n          ownerId: stores.ownerId,\n          name: stores.name,\n          codeStore: stores.codeStore,\n          categoryId: stores.categoryId,\n          description: stores.description,\n          status: stores.status,\n          createdAt: stores.createdAt,\n          updatedAt: stores.updatedAt,\n          subscriptionEnd: stores.subscriptionEnd,\n          lastActionAt: stores.lastActionAt,\n          messagesSent: stores.messagesSent,\n          totalRevenue: stores.totalRevenue,\n          productCount: stores.productCount,\n          orderCount: stores.orderCount,\n          ownerName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n          ownerEmail: users.email,\n          categoryName: sql<string>`COALESCE(category_trans.name, 'Uncategorized')`,\n        })\n        .from(stores)\n        .leftJoin(users, eq(stores.ownerId, users.id))\n        .leftJoin(categories, eq(stores.categoryId, categories.id))\n        .leftJoin(\n          sql`(\n            SELECT DISTINCT ON (category_id) category_id, name \n            FROM category_translations \n            WHERE language = 'en'\n          ) AS category_trans`,\n          sql`category_trans.category_id = ${categories.id}`,\n        )\n        .where(eq(stores.id, id));\n      return store as Store | undefined;\n    } catch (error) {\n      console.error(\"Error fetching store:\", error);\n      return undefined;\n    }\n  }\n\n  async getStoreByOwnerId(ownerId: string): Promise<Store | undefined> {\n    try {\n      const [store] = await db\n        .select({\n          id: stores.id,\n          ownerId: stores.ownerId,\n          name: stores.name,\n          codeStore: stores.codeStore,\n          categoryId: stores.categoryId,\n          description: stores.description,\n          status: stores.status,\n          suspensionReason: stores.suspensionReason,\n          createdAt: stores.createdAt,\n          updatedAt: stores.updatedAt,\n          subscriptionEnd: stores.subscriptionEnd,\n          lastActionAt: stores.lastActionAt,\n          messagesSent: stores.messagesSent,\n          totalRevenue: stores.totalRevenue,\n          productCount: stores.productCount,\n          orderCount: stores.orderCount,\n          ownerName: sql<string>`CONCAT(${users.firstName}, ' ', ${users.lastName})`,\n          ownerEmail: users.email,\n          categoryName: sql<string>`COALESCE(category_trans.name, 'Uncategorized')`,\n        })\n        .from(stores)\n        .leftJoin(users, eq(stores.ownerId, users.id))\n        .leftJoin(categories, eq(stores.categoryId, categories.id))\n        .leftJoin(\n          sql`(\n            SELECT DISTINCT ON (category_id) category_id, name \n            FROM category_translations \n            WHERE language = 'en'\n          ) AS category_trans`,\n          sql`category_trans.category_id = ${categories.id}`,\n        )\n        .where(eq(stores.ownerId, ownerId));\n      return store as Store | undefined;\n    } catch (error) {\n      console.error(\"Error fetching store by owner:\", error);\n      return undefined;\n    }\n  }\n\n  async createStore(storeData: InsertStore): Promise<Store> {\n    try {\n      const codeStore = `STORE-${Date.now()}-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;\n      const [store] = await db\n        .insert(stores)\n        .values({ ...storeData, codeStore })\n        .returning();\n      return store;\n    } catch (error) {\n      console.error(\"Error creating store:\", error);\n      throw error;\n    }\n  }\n\n  async updateStore(\n    id: string,\n    updates: Partial<Store>,\n  ): Promise<Store | undefined> {\n    return this.executeWithFallback(async () => {\n      const [updatedStore] = await db!\n        .update(stores)\n        .set({ ...updates, updatedAt: new Date(), lastActionAt: new Date() })\n        .where(eq(stores.id, id))\n        .returning();\n      return updatedStore;\n    }, undefined);\n  }\n\n  async deleteStore(id: string): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      // Soft delete the store instead of permanent deletion\n      await db!\n        .update(stores)\n        .set({\n          deletedAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .where(eq(stores.id, id));\n      return true;\n    }, false);\n  }\n\n  async getStoreStats(): Promise<{\n    totalStores: number;\n    activeStores: number;\n    onHoldStores: number;\n    totalRevenue: string;\n  }> {\n    return this.executeWithFallback(\n      async () => {\n        const stats = await db!\n          .select({\n            totalStores: sql<number>`COUNT(*)::int`,\n            activeStores: sql<number>`COUNT(CASE WHEN status = 'active' THEN 1 END)::int`,\n            onHoldStores: sql<number>`COUNT(CASE WHEN status IN ('pending_validation', 'suspended') THEN 1 END)::int`,\n            totalRevenue: sql<string>`COALESCE(SUM(total_revenue), 0)::text`,\n          })\n          .from(stores);\n        return (\n          stats[0] || {\n            totalStores: 0,\n            activeStores: 0,\n            onHoldStores: 0,\n            totalRevenue: \"0\",\n          }\n        );\n      },\n      { totalStores: 0, activeStores: 0, onHoldStores: 0, totalRevenue: \"0\" },\n    );\n  }\n\n  async deleteProduct(productId: string, vendorId: string): Promise<any> {\n    return this.executeWithFallback(async () => {\n      // First check if the product exists and belongs to the vendor\n      const existingProduct = await db!\n        .select()\n        .from(products)\n        .where(\n          and(\n            eq(products.id, productId),\n            eq(products.vendorId, vendorId),\n            isNull(products.deletedAt),\n          ),\n        )\n        .limit(1);\n\n      if (existingProduct.length === 0) {\n        return null; // Product not found or doesn't belong to vendor\n      }\n\n      // Check if the product has any associated order items\n      const orderItemsCount = await db!\n        .select({ count: sql<number>`COUNT(*)::int` })\n        .from(orderItems)\n        .where(eq(orderItems.productId, productId));\n\n      if (orderItemsCount[0].count > 0) {\n        // Soft delete the product (don't permanently delete if it has orders)\n        const softDeletedProduct = await db!\n          .update(products)\n          .set({\n            deletedAt: new Date(),\n            updatedAt: new Date(),\n          })\n          .where(\n            and(eq(products.id, productId), eq(products.vendorId, vendorId)),\n          )\n          .returning();\n\n        // Update store product count (decrement by 1)\n        if (softDeletedProduct.length > 0) {\n          await db!\n            .update(stores)\n            .set({\n              productCount: sql`GREATEST(${stores.productCount} - 1, 0)`,\n              updatedAt: new Date(),\n            })\n            .where(eq(stores.ownerId, vendorId));\n        }\n\n        return softDeletedProduct[0] || null;\n      }\n\n      // Soft delete the product (mark as deleted instead of permanent deletion)\n      const softDeletedProduct = await db!\n        .update(products)\n        .set({\n          deletedAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .where(and(eq(products.id, productId), eq(products.vendorId, vendorId)))\n        .returning();\n\n      // Update store product count (decrement by 1)\n      if (softDeletedProduct.length > 0) {\n        await db!\n          .update(stores)\n          .set({\n            productCount: sql`GREATEST(${stores.productCount} - 1, 0)`,\n            updatedAt: new Date(),\n          })\n          .where(eq(stores.ownerId, vendorId));\n      }\n\n      return softDeletedProduct[0] || null;\n    }, null);\n  }\n\n  async deleteProductAsAdmin(productId: string): Promise<any> {\n    return this.executeWithFallback(async () => {\n      // First check if the product exists (admin can delete any product)\n      const existingProduct = await db!\n        .select()\n        .from(products)\n        .where(and(eq(products.id, productId), isNull(products.deletedAt)))\n        .limit(1);\n\n      if (existingProduct.length === 0) {\n        return null; // Product not found\n      }\n\n      const product = existingProduct[0];\n\n      // Check if the product has any associated order items\n      const orderItemsCount = await db!\n        .select({ count: sql<number>`COUNT(*)::int` })\n        .from(orderItems)\n        .where(eq(orderItems.productId, productId));\n\n      if (orderItemsCount[0].count > 0) {\n        throw new Error(\"PRODUCT_HAS_ORDERS\");\n      }\n\n      // Soft delete the product (mark as deleted instead of permanent deletion)\n      const softDeletedProduct = await db!\n        .update(products)\n        .set({\n          deletedAt: new Date(),\n          updatedAt: new Date(),\n        })\n        .where(eq(products.id, productId))\n        .returning();\n\n      // Update store product count (decrement by 1)\n      if (softDeletedProduct.length > 0) {\n        await db!\n          .update(stores)\n          .set({\n            productCount: sql`GREATEST(${stores.productCount} - 1, 0)`,\n            updatedAt: new Date(),\n          })\n          .where(eq(stores.ownerId, product.vendorId));\n      }\n\n      return softDeletedProduct[0] || null;\n    }, null);\n  }\n\n  async updateProductStock(\n    productId: string,\n    newStock: number,\n    vendorId: string,\n  ): Promise<any> {\n    return this.executeWithFallback(async () => {\n      // Update the product stock\n      const [updatedProduct] = await db!\n        .update(products)\n        .set({\n          stock: newStock,\n          updatedAt: new Date(),\n        })\n        .where(and(eq(products.id, productId), eq(products.vendorId, vendorId)))\n        .returning();\n\n      return updatedProduct;\n    }, null);\n  }\n\n  async getSellersWithProducts(): Promise<any[]> {\n    return this.executeWithFallback(async () => {\n      if (!db) throw new Error(\"Database not available\");\n\n      // Get all sellers (users with role 'seller') with their store info and product counts\n      const sellersQuery = await db\n        .select({\n          id: users.id,\n          username: users.username,\n          email: users.email,\n          firstName: users.firstName,\n          lastName: users.lastName,\n          role: users.role,\n          status: users.status,\n          createdAt: users.createdAt,\n          storeName: stores.name,\n          storeStatus: stores.status,\n          storeId: stores.id,\n          productCount: sql<number>`COUNT(${products.id})::int`.as(\n            \"productCount\",\n          ),\n        })\n        .from(users)\n        .leftJoin(stores, eq(stores.ownerId, users.id))\n        .leftJoin(\n          products,\n          and(eq(products.vendorId, users.id), isNull(products.deletedAt)),\n        )\n        .where(and(eq(users.role, \"seller\"), isNull(users.deletedAt)))\n        .groupBy(\n          users.id,\n          users.username,\n          users.email,\n          users.firstName,\n          users.lastName,\n          users.role,\n          users.status,\n          users.createdAt,\n          stores.name,\n          stores.status,\n          stores.id,\n        )\n        .orderBy(desc(users.createdAt));\n\n      return sellersQuery.map((seller) => ({\n        ...seller,\n        name:\n          seller.storeName ||\n          `${seller.firstName} ${seller.lastName}`.trim() ||\n          seller.username,\n      }));\n    }, []);\n  }\n\n  // Wishlist management methods\n  async addToWishlist(userId: string, productId: string): Promise<Wishlist> {\n    return this.executeWithFallback(async () => {\n      // Check if item is already in wishlist\n      const existing = await db!\n        .select()\n        .from(wishlists)\n        .where(\n          and(eq(wishlists.userId, userId), eq(wishlists.productId, productId)),\n        )\n        .limit(1);\n\n      if (existing.length > 0) {\n        return existing[0];\n      }\n\n      // Add to wishlist\n      const [wishlistItem] = await db!\n        .insert(wishlists)\n        .values({ userId, productId })\n        .returning();\n\n      return wishlistItem;\n    }, {} as Wishlist);\n  }\n\n  async removeFromWishlist(\n    userId: string,\n    productId: string,\n  ): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .delete(wishlists)\n        .where(\n          and(eq(wishlists.userId, userId), eq(wishlists.productId, productId)),\n        );\n      return true;\n    }, false);\n  }\n\n  async getUserWishlist(userId: string): Promise<any[]> {\n    return this.executeWithFallback(async () => {\n      const wishlistItems = await db!\n        .select({\n          id: wishlists.id,\n          productId: products.id,\n          name: productTranslations.name,\n          description: productTranslations.shortDescription,\n          price: products.price,\n          originalPrice: products.originalPrice,\n          images: products.images,\n          rating: products.rating,\n          reviewCount: products.reviewCount,\n          createdAt: wishlists.createdAt,\n        })\n        .from(wishlists)\n        .innerJoin(products, eq(wishlists.productId, products.id))\n        .innerJoin(\n          productTranslations,\n          and(\n            eq(productTranslations.productId, products.id),\n            eq(productTranslations.language, \"en\"),\n          ),\n        )\n        .where(and(eq(wishlists.userId, userId), isNull(products.deletedAt)))\n        .orderBy(desc(wishlists.createdAt));\n\n      return wishlistItems;\n    }, []);\n  }\n\n  async isProductInWishlist(\n    userId: string,\n    productId: string,\n  ): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      const result = await db!\n        .select({ count: sql<number>`COUNT(*)::int` })\n        .from(wishlists)\n        .where(\n          and(eq(wishlists.userId, userId), eq(wishlists.productId, productId)),\n        );\n\n      return result[0].count > 0;\n    }, false);\n  }\n\n  // Cart management methods\n  async addToCart(\n    userId: string,\n    productId: string,\n    quantity: number,\n  ): Promise<Cart> {\n    return this.executeWithFallback(async () => {\n      // Check if item is already in cart\n      const existing = await db!\n        .select()\n        .from(carts)\n        .where(and(eq(carts.userId, userId), eq(carts.productId, productId)))\n        .limit(1);\n\n      if (existing.length > 0) {\n        // Update quantity\n        const [updatedCart] = await db!\n          .update(carts)\n          .set({\n            quantity: existing[0].quantity + quantity,\n            updatedAt: new Date(),\n          })\n          .where(eq(carts.id, existing[0].id))\n          .returning();\n        return updatedCart;\n      }\n\n      // Add new item to cart\n      const [cartItem] = await db!\n        .insert(carts)\n        .values({ userId, productId, quantity })\n        .returning();\n\n      return cartItem;\n    }, {} as Cart);\n  }\n\n  async updateCartQuantity(\n    userId: string,\n    productId: string,\n    quantity: number,\n  ): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      if (quantity <= 0) {\n        // Remove item if quantity is 0 or negative\n        await db!\n          .delete(carts)\n          .where(and(eq(carts.userId, userId), eq(carts.productId, productId)));\n      } else {\n        // Update quantity\n        await db!\n          .update(carts)\n          .set({ quantity, updatedAt: new Date() })\n          .where(and(eq(carts.userId, userId), eq(carts.productId, productId)));\n      }\n      return true;\n    }, false);\n  }\n\n  async removeFromCart(userId: string, productId: string): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!\n        .delete(carts)\n        .where(and(eq(carts.userId, userId), eq(carts.productId, productId)));\n      return true;\n    }, false);\n  }\n\n  async getUserCart(userId: string): Promise<any[]> {\n    return this.executeWithFallback(async () => {\n      const cartItems = await db!\n        .select({\n          id: carts.id,\n          productId: products.id,\n          name: productTranslations.name,\n          description: productTranslations.shortDescription,\n          price: products.price,\n          originalPrice: products.originalPrice,\n          images: products.images,\n          quantity: carts.quantity,\n          stock: products.stock,\n          createdAt: carts.createdAt,\n        })\n        .from(carts)\n        .innerJoin(products, eq(carts.productId, products.id))\n        .innerJoin(\n          productTranslations,\n          and(\n            eq(productTranslations.productId, products.id),\n            eq(productTranslations.language, \"en\"),\n          ),\n        )\n        .where(and(eq(carts.userId, userId), isNull(products.deletedAt)))\n        .orderBy(desc(carts.createdAt));\n\n      return cartItems;\n    }, []);\n  }\n\n  async getCartItemCount(userId: string): Promise<number> {\n    return this.executeWithFallback(async () => {\n      const result = await db!\n        .select({\n          total: sql<number>`COALESCE(SUM(quantity), 0)::int`,\n        })\n        .from(carts)\n        .where(eq(carts.userId, userId));\n\n      return result[0].total;\n    }, 0);\n  }\n\n  async clearCart(userId: string): Promise<boolean> {\n    return this.executeWithFallback(async () => {\n      await db!.delete(carts).where(eq(carts.userId, userId));\n      return true;\n    }, false);\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":77550},"server/vite.ts":{"content":"// import express, { type Express } from \"express\";\n// import fs from \"fs\";\n// import path from \"path\";\n// import { createServer as createViteServer, createLogger } from \"vite\";\n// import { type Server } from \"http\";\n// import viteConfig from \"../vite.config\";\n// import { nanoid } from \"nanoid\";\n\n// const viteLogger = createLogger();\n\n// export function log(message: string, source = \"express\") {\n//   const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n//     hour: \"numeric\",\n//     minute: \"2-digit\",\n//     second: \"2-digit\",\n//     hour12: true,\n//   });\n\n//   console.log(`${formattedTime} [${source}] ${message}`);\n// }\n\n// export async function setupVite(app: Express, server: Server) {\n//   const serverOptions = {\n//     middlewareMode: true,\n//     hmr: { server },\n//     allowedHosts: true as const,\n//   };\n\n//   const vite = await createViteServer({\n//     ...viteConfig,\n//     configFile: false,\n//     customLogger: {\n//       ...viteLogger,\n//       error: (msg, options) => {\n//         viteLogger.error(msg, options);\n//         process.exit(1);\n//       },\n//     },\n//     server: serverOptions,\n//     appType: \"custom\",\n//   });\n\n//   app.use(vite.middlewares);\n//   app.use(\"*\", async (req, res, next) => {\n//     const url = req.originalUrl;\n\n//     try {\n//       const clientTemplate = path.resolve(\n//         import.meta.dirname,\n//         \"..\",\n//         \"client\",\n//         \"index.html\",\n//       );\n\n//       // always reload the index.html file from disk incase it changes\n//       let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n//       template = template.replace(\n//         `src=\"/src/main.tsx\"`,\n//         `src=\"/src/main.tsx?v=${nanoid()}\"`,\n//       );\n//       const page = await vite.transformIndexHtml(url, template);\n//       res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n//     } catch (e) {\n//       vite.ssrFixStacktrace(e as Error);\n//       next(e);\n//     }\n//   });\n// }\n\n// export function serveStatic(app: Express) {\n//   const distPath = path.resolve(import.meta.dirname, \"public\");\n\n//   if (!fs.existsSync(distPath)) {\n//     throw new Error(\n//       `Could not find the build directory: ${distPath}, make sure to build the client first`,\n//     );\n//   }\n\n//   app.use(express.static(distPath));\n\n//   // fall through to index.html if the file doesn't exist\n//   app.use(\"*\", (_req, res) => {\n//     res.sendFile(path.resolve(distPath, \"index.html\"));\n//   });\n// }\nimport express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { type Server } from \"http\";\nimport { nanoid } from \"nanoid\";\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  // ⬇️ import vite only when setupVite is actually called (dev mode)\n  const { createServer: createViteServer, createLogger } = await import(\"vite\");\n  const viteConfig = (await import(\"../vite.config\")).default;\n  const viteLogger = createLogger();\n\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":4723},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport {\n  pgTable,\n  text,\n  varchar,\n  integer,\n  decimal,\n  timestamp,\n  boolean,\n  jsonb,\n} from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table with role-based access\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  email: text(\"email\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  firstName: text(\"first_name\").notNull(),\n  lastName: text(\"last_name\").notNull(),\n  role: text(\"role\").notNull().default(\"client\"), // client, seller, admin\n  avatar: text(\"avatar\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  status: text(\"status\").notNull().default(\"Active\"), // Active, Inactive, On Hold, Terminated\n  preferredLanguage: text(\"preferred_language\").notNull().default(\"en\"),\n  resetToken: text(\"reset_token\"),\n  resetTokenExpiry: timestamp(\"reset_token_expiry\"),\n  emailVerified: boolean(\"email_verified\").notNull().default(false),\n  emailVerificationToken: text(\"email_verification_token\"),\n  sellerStatus: text(\"seller_status\").default(\"pending\"), // pending, approved, rejected (only for sellers)\n  // Seller-specific fields\n  storeName: text(\"store_name\"),\n  storeDescription: text(\"store_description\"),\n  businessType: text(\"business_type\"), // individual, company, partnership\n  businessAddress: text(\"business_address\"),\n  businessPhone: text(\"business_phone\"),\n  businessWebsite: text(\"business_website\"),\n  taxId: text(\"tax_id\"),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete field\n});\n\n// Categories with multilingual support\nexport const categories = pgTable(\"categories\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  type: text(\"type\").notNull().default(\"standard\"), // standard, super\n  parentId: varchar(\"parent_id\"),\n  slug: text(\"slug\").notNull().unique(),\n  icon: text(\"icon\").notNull(),\n  imageUrl: text(\"image_url\"),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  isFeatured: boolean(\"is_featured\").notNull().default(false),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  metadata: jsonb(\"metadata\").$type<Record<string, any>>().default({}),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete field\n});\n\nexport const categoryTranslations = pgTable(\"category_translations\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  categoryId: varchar(\"category_id\")\n    .notNull()\n    .references(() => categories.id, { onDelete: \"cascade\" }),\n  language: text(\"language\").notNull(), // en, fr, ar\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  // SEO fields\n  seoTitle: text(\"seo_title\"),\n  seoDescription: text(\"seo_description\"),\n  seoKeywords: text(\"seo_keywords\"),\n});\n\n// Category features table for product attributes\nexport const categoryFeatures = pgTable(\"category_features\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  categoryId: varchar(\"category_id\")\n    .notNull()\n    .references(() => categories.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  type: text(\"type\").notNull(), // text, number, boolean, select, multiselect, color, url\n  value: text(\"value\"), // Default/example value for the feature\n  isRequired: boolean(\"is_required\").notNull().default(false),\n  options: jsonb(\"options\").$type<string[]>().default([]), // For select/multiselect types\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Products with multilingual support\nexport const products = pgTable(\"products\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  vendorId: varchar(\"vendor_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  categoryId: varchar(\"category_id\")\n    .notNull()\n    .references(() => categories.id),\n  slug: text(\"slug\").notNull().unique(),\n  sku: text(\"sku\").notNull().unique(),\n  brand: text(\"brand\").notNull().default(\"Unknown Brand\"),\n  price: decimal(\"price\", { precision: 10, scale: 2 }).notNull(),\n  originalPrice: decimal(\"original_price\", { precision: 10, scale: 2 }),\n  stock: integer(\"stock\").notNull().default(0),\n  images: jsonb(\"images\")\n    .$type<{ url: string; uploadMethod: \"upload\" | \"url\" | \"existing\" }[]>()\n    .notNull()\n    .default([]),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive\n  isActive: boolean(\"is_active\").notNull().default(true),\n  isFeatured: boolean(\"is_featured\").notNull().default(false),\n  rating: decimal(\"rating\", { precision: 2, scale: 1 }).default(\"0.0\"),\n  reviewCount: integer(\"review_count\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete field\n});\n\nexport const productTranslations = pgTable(\"product_translations\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\")\n    .notNull()\n    .references(() => products.id, { onDelete: \"cascade\" }),\n  language: text(\"language\").notNull(), // en, fr, ar\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  shortDescription: text(\"short_description\"),\n  highlights: text(\"highlights\"), // Product highlights/features\n});\n\n// Product specifications based on category features\nexport const productSpecifications = pgTable(\"product_specifications\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\")\n    .notNull()\n    .references(() => products.id, { onDelete: \"cascade\" }),\n  featureName: text(\"feature_name\").notNull(), // Weight, Color, Dimensions, etc.\n  featureValue: text(\"feature_value\").notNull(), // 2.5 kg, Red, 30x20x15 cm, etc.\n  featureType: text(\"feature_type\").notNull(), // text, number, boolean, select, color, url\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Product FAQs\nexport const productFaqs = pgTable(\"product_faqs\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\")\n    .notNull()\n    .references(() => products.id, { onDelete: \"cascade\" }),\n  question: text(\"question\").notNull(),\n  answer: text(\"answer\").notNull(),\n  sortOrder: integer(\"sort_order\").notNull().default(0),\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Orders\n// export const orders = pgTable(\"orders\", {\n//   id: varchar(\"id\")\n//     .primaryKey()\n//     .default(sql`gen_random_uuid()`),\n//   orderNumber: text(\"order_number\").notNull().unique(), // CMD-2845 format\n//   userId: varchar(\"user_id\")\n//     .notNull()\n//     .references(() => users.id),\n//   status: text(\"status\").notNull().default(\"pending\"), // pending, in_preparation, in_delivery, delivered, cancelled\n//   paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, failed, refunded\n//   paymentMethod: text(\"payment_method\"), // Bank card, PayPal, etc.\n//   totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n//   shippingAddress: jsonb(\"shipping_address\")\n//     .$type<{\n//       street: string;\n//       city: string;\n//       state: string;\n//       zipCode: string;\n//       country: string;\n//     }>()\n//     .notNull(),\n//   trackingNumber: text(\"tracking_number\"), // TRK-12345678\n//   vendorName: text(\"vendor_name\"), // Store name for quick reference\n//   itemCount: integer(\"item_count\").notNull().default(1),\n//   deliveryDate: timestamp(\"delivery_date\"),\n//   createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n//   updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n//   deletedAt: timestamp(\"deleted_at\"), // Soft delete field\n// });\n\nexport const orders = pgTable(\"orders\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  orderNumber: text(\"order_number\")\n    .notNull()\n    .unique()\n    .default(sql`gen_random_uuid()`), // CMD-2845 format\n  userId: varchar(\"user_id\")\n    .notNull()\n    .references(() => users.id),\n\n  // Customer snapshot at the time of order\n  customerName: text(\"customer_name\").notNull(),\n  customerEmail: text(\"customer_email\").notNull(),\n  customerPhone: text(\"customer_phone\").notNull(),\n\n  status: text(\"status\").notNull().default(\"pending\"), // pending, in_preparation, in_delivery, delivered, cancelled\n  paymentStatus: text(\"payment_status\").notNull().default(\"pending\"), // pending, paid, failed, refunded\n  paymentMethod: text(\"payment_method\"), // card, PayPal, etc.\n  paymentIntentId: text(\"payment_intent_id\"), // Stripe PaymentIntent ID\n  currency: text(\"currency\").notNull().default(\"usd\"),\n\n  totalAmount: decimal(\"total_amount\", { precision: 10, scale: 2 }).notNull(),\n  itemCount: integer(\"item_count\").notNull().default(1),\n\n  shippingAddress: jsonb(\"shipping_address\")\n    .$type<{\n      street: string;\n      city: string;\n      state: string;\n      zipCode: string;\n      country: string;\n    }>()\n    .notNull(),\n\n  trackingNumber: text(\"tracking_number\"), // TRK-12345678\n  vendorName: text(\"vendor_name\"), // Store name for quick reference\n  deliveryDate: timestamp(\"delivery_date\"),\n\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete field\n});\n\n// export const orderItems = pgTable(\"order_items\", {\n//   id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n//   orderId: varchar(\"order_id\").notNull().references(() => orders.id, { onDelete: \"cascade\" }),\n//   productId: varchar(\"product_id\").notNull().references(() => products.id),\n//   quantity: integer(\"quantity\").notNull(),\n//   unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n//   totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n// });\n\nexport const orderItems = pgTable(\"order_items\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  orderId: varchar(\"order_id\")\n    .notNull()\n    .references(() => orders.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\")\n    .notNull()\n    .references(() => products.id),\n  quantity: integer(\"quantity\").notNull(),\n  unitPrice: decimal(\"unit_price\", { precision: 10, scale: 2 }).notNull(),\n  totalPrice: decimal(\"total_price\", { precision: 10, scale: 2 }).notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  products: many(products),\n  orders: many(orders),\n}));\n\nexport const categoriesRelations = relations(categories, ({ one, many }) => ({\n  parent: one(categories, {\n    fields: [categories.parentId],\n    references: [categories.id],\n    relationName: \"categoryParent\",\n  }),\n  children: many(categories, {\n    relationName: \"categoryParent\",\n  }),\n  translations: many(categoryTranslations),\n  features: many(categoryFeatures),\n  products: many(products),\n}));\n\nexport const categoryTranslationsRelations = relations(\n  categoryTranslations,\n  ({ one }) => ({\n    category: one(categories, {\n      fields: [categoryTranslations.categoryId],\n      references: [categories.id],\n    }),\n  }),\n);\n\nexport const categoryFeaturesRelations = relations(\n  categoryFeatures,\n  ({ one }) => ({\n    category: one(categories, {\n      fields: [categoryFeatures.categoryId],\n      references: [categories.id],\n    }),\n  }),\n);\n\nexport const productsRelations = relations(products, ({ one, many }) => ({\n  vendor: one(users, {\n    fields: [products.vendorId],\n    references: [users.id],\n  }),\n  category: one(categories, {\n    fields: [products.categoryId],\n    references: [categories.id],\n  }),\n  translations: many(productTranslations),\n  specifications: many(productSpecifications),\n  faqs: many(productFaqs),\n  orderItems: many(orderItems),\n}));\n\nexport const productTranslationsRelations = relations(\n  productTranslations,\n  ({ one }) => ({\n    product: one(products, {\n      fields: [productTranslations.productId],\n      references: [products.id],\n    }),\n  }),\n);\n\nexport const productSpecificationsRelations = relations(\n  productSpecifications,\n  ({ one }) => ({\n    product: one(products, {\n      fields: [productSpecifications.productId],\n      references: [products.id],\n    }),\n  }),\n);\n\nexport const productFaqsRelations = relations(productFaqs, ({ one }) => ({\n  product: one(products, {\n    fields: [productFaqs.productId],\n    references: [products.id],\n  }),\n}));\n\nexport const ordersRelations = relations(orders, ({ one, many }) => ({\n  user: one(users, {\n    fields: [orders.userId],\n    references: [users.id],\n  }),\n  items: many(orderItems),\n}));\n\nexport const orderItemsRelations = relations(orderItems, ({ one }) => ({\n  order: one(orders, {\n    fields: [orderItems.orderId],\n    references: [orders.id],\n  }),\n  product: one(products, {\n    fields: [orderItems.productId],\n    references: [products.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCategorySchema = createInsertSchema(categories).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCategoryTranslationSchema = createInsertSchema(\n  categoryTranslations,\n).omit({\n  id: true,\n});\n\nexport const insertCategoryFeatureSchema = createInsertSchema(\n  categoryFeatures,\n).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductSchema = createInsertSchema(products).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertProductTranslationSchema = createInsertSchema(\n  productTranslations,\n).omit({\n  id: true,\n});\n\nexport const insertProductSpecificationSchema = createInsertSchema(\n  productSpecifications,\n).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertProductFaqSchema = createInsertSchema(productFaqs).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertOrderSchema = createInsertSchema(orders).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertOrderItemSchema = createInsertSchema(orderItems).omit({\n  id: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Category = typeof categories.$inferSelect;\nexport type InsertCategory = z.infer<typeof insertCategorySchema>;\n\nexport type CategoryTranslation = typeof categoryTranslations.$inferSelect;\nexport type InsertCategoryTranslation = z.infer<\n  typeof insertCategoryTranslationSchema\n>;\n\nexport type CategoryFeature = typeof categoryFeatures.$inferSelect;\nexport type InsertCategoryFeature = z.infer<typeof insertCategoryFeatureSchema>;\n\nexport type Product = typeof products.$inferSelect;\nexport type InsertProduct = z.infer<typeof insertProductSchema>;\n\nexport type ProductTranslation = typeof productTranslations.$inferSelect;\nexport type InsertProductTranslation = z.infer<\n  typeof insertProductTranslationSchema\n>;\n\nexport type Order = typeof orders.$inferSelect;\nexport type InsertOrder = z.infer<typeof insertOrderSchema>;\n\nexport type OrderItem = typeof orderItems.$inferSelect;\nexport type InsertOrderItem = z.infer<typeof insertOrderItemSchema>;\n\n// Stores table for managing seller stores\nexport const stores = pgTable(\"stores\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  ownerId: varchar(\"owner_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  name: text(\"name\").notNull(),\n  codeStore: text(\"code_store\").unique(), // Generated store code\n  categoryId: varchar(\"category_id\").references(() => categories.id),\n  description: text(\"description\"),\n  status: text(\"status\").notNull().default(\"pending_validation\"), // pending_validation, active, dismissed, suspended, etc.\n  suspensionReason: text(\"suspension_reason\"), // Reason for suspension when status is suspended\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n  subscriptionEnd: timestamp(\"subscription_end\"),\n  lastActionAt: timestamp(\"last_action_at\").defaultNow(),\n  messagesSent: integer(\"messages_sent\").notNull().default(0),\n  totalRevenue: decimal(\"total_revenue\", { precision: 12, scale: 2 })\n    .notNull()\n    .default(\"0\"),\n  productCount: integer(\"product_count\").notNull().default(0),\n  orderCount: integer(\"order_count\").notNull().default(0),\n  deletedAt: timestamp(\"deleted_at\"), // Soft delete field\n});\n\n// Notifications table for real-time updates\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id, {\n    onDelete: \"cascade\",\n  }), // null for global notifications\n  type: text(\"type\").notNull(), // user_registration, seller_registration, seller_approval, seller_rejection, etc.\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  data: jsonb(\"data\").$type<Record<string, any>>().default({}), // Additional notification data\n  isRead: boolean(\"is_read\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\nexport const insertStoreSchema = createInsertSchema(stores).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type Store = typeof stores.$inferSelect;\nexport type InsertStore = z.infer<typeof insertStoreSchema>;\n\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\n// Wishlist table\nexport const wishlists = pgTable(\"wishlists\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\")\n    .notNull()\n    .references(() => products.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n});\n\n// Cart table\nexport const carts = pgTable(\"carts\", {\n  id: varchar(\"id\")\n    .primaryKey()\n    .default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\")\n    .notNull()\n    .references(() => users.id, { onDelete: \"cascade\" }),\n  productId: varchar(\"product_id\")\n    .notNull()\n    .references(() => products.id, { onDelete: \"cascade\" }),\n  quantity: integer(\"quantity\").notNull().default(1),\n  createdAt: timestamp(\"created_at\").notNull().defaultNow(),\n  updatedAt: timestamp(\"updated_at\").notNull().defaultNow(),\n});\n\n// Wishlist relations\nexport const wishlistsRelations = relations(wishlists, ({ one }) => ({\n  user: one(users, {\n    fields: [wishlists.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [wishlists.productId],\n    references: [products.id],\n  }),\n}));\n\n// Cart relations\nexport const cartsRelations = relations(carts, ({ one }) => ({\n  user: one(users, {\n    fields: [carts.userId],\n    references: [users.id],\n  }),\n  product: one(products, {\n    fields: [carts.productId],\n    references: [products.id],\n  }),\n}));\n\n// Update user relations to include wishlist and cart\nexport const usersRelationsUpdated = relations(users, ({ many }) => ({\n  products: many(products),\n  orders: many(orders),\n  wishlists: many(wishlists),\n  carts: many(carts),\n}));\n\n// Insert schemas\nexport const insertWishlistSchema = createInsertSchema(wishlists).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertCartSchema = createInsertSchema(carts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Types\nexport type Wishlist = typeof wishlists.$inferSelect;\nexport type InsertWishlist = z.infer<typeof insertWishlistSchema>;\n\nexport type Cart = typeof carts.$inferSelect;\nexport type InsertCart = z.infer<typeof insertCartSchema>;\n","size_bytes":20402},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"./lib/protected-route\";\nimport HomePage from \"@/pages/shared/home\";\nimport AuthPage from \"@/pages/shared/auth\";\nimport ResetPasswordPage from \"@/pages/shared/auth/reset-password\";\nimport VerifyEmailPage from \"@/pages/shared/auth/verify-email\";\nimport ClientDashboard from \"@/pages/client/profile\";\nimport WishlistPage from \"@/pages/client/wishlist\";\nimport CheckoutPage from \"@/pages/checkout\";\nimport OrdersPage from \"@/pages/client/orders\";\nimport SellerDashboard from \"@/pages/seller/dashboard\";\nimport SellerProducts from \"@/pages/seller/products\";\nimport EditProduct from \"@/pages/seller/products/edit\";\nimport InventoryOverview from \"@/pages/seller/inventory/overview\";\nimport ReplenishmentPage from \"@/pages/seller/replenishment\";\nimport StockAlertsPage from \"@/pages/seller/stock-alerts\";\nimport SellerOrdersPage from \"@/pages/seller/orders\";\nimport SellerCustomersPage from \"@/pages/seller/customers\";\nimport ProductDetails from \"@/pages/client/products/details\";\nimport ProductsPage from \"@/pages/client/products\";\nimport ClientProductsDashboard from \"@/pages/client/products/dashboard\";\nimport AdminDashboard from \"@/pages/admin/dashboard\";\nimport UserManagement from \"@/pages/admin/users/user-management\";\nimport StoreManagement from \"@/pages/admin/settings/store-management\";\nimport CategoriesManagement from \"@/pages/admin/products/categories-management\";\nimport ProductsManagement from \"@/pages/admin/products-management\";\nimport OrderManagement from \"@/pages/admin/order-management\";\nimport NotFound from \"@/pages/not-found\";\nimport \"./lib/i18n\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={HomePage} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/reset-password\" component={ResetPasswordPage} />\n      <Route path=\"/verify-email\" component={VerifyEmailPage} />\n      <Route path=\"/products\" component={ProductsPage} />\n      <Route path=\"/products/:id\" component={ProductDetails} />\n      <ProtectedRoute path=\"/checkout\" component={CheckoutPage} />\n      <ProtectedRoute path=\"/orders\" component={OrdersPage} />\n      <ProtectedRoute path=\"/wishlist\" component={WishlistPage} />\n      <ProtectedRoute\n        path=\"/dashboard/client/products\"\n        component={ClientProductsDashboard}\n      />\n      <ProtectedRoute path=\"/dashboard/client\" component={ClientDashboard} />\n      <ProtectedRoute\n        path=\"/dashboard/seller/products/edit/:id\"\n        component={EditProduct}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/seller/products\"\n        component={SellerProducts}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/seller/inventory/overview\"\n        component={InventoryOverview}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/seller/replenishment\"\n        component={ReplenishmentPage}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/seller/stock-alerts\"\n        component={StockAlertsPage}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/seller/orders\"\n        component={SellerOrdersPage}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/seller/customers\"\n        component={SellerCustomersPage}\n      />\n      <ProtectedRoute path=\"/dashboard/seller\" component={SellerDashboard} />\n      <ProtectedRoute\n        path=\"/dashboard/admin/users\"\n        component={UserManagement}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/admin/stores\"\n        component={StoreManagement}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/admin/products\"\n        component={ProductsManagement}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/admin/categories\"\n        component={CategoriesManagement}\n      />\n      <ProtectedRoute\n        path=\"/dashboard/admin/orders\"\n        component={OrderManagement}\n      />\n      <ProtectedRoute path=\"/dashboard/admin\" component={AdminDashboard} />\n      {/* <Route component={NotFound} /> */}\n      <Route>\n        <DashboardLayout title=\"Page Not Found\">\n          <NotFound />\n        </DashboardLayout>\n      </Route>\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <AuthProvider>\n          <Toaster />\n          <Router />\n        </AuthProvider>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4719},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(220, 8.9%, 46.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(220, 8.9%, 46.1%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(220, 8.9%, 46.1%);\n  --primary: hsl(262.1, 83.3%, 57.8%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 14.3%, 95.9%);\n  --secondary-foreground: hsl(220.9, 39.3%, 11%);\n  --muted: hsl(220, 14.3%, 95.9%);\n  --muted-foreground: hsl(220, 8.9%, 46.1%);\n  --accent: hsl(220, 14.3%, 95.9%);\n  --accent-foreground: hsl(220.9, 39.3%, 11%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(262.1, 83.3%, 57.8%);\n  --chart-1: hsl(262.1, 83.3%, 57.8%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar-background: hsl(0, 0%, 98%);\n  --sidebar-foreground: hsl(220, 8.9%, 46.1%);\n  --sidebar-primary: hsl(262.1, 83.3%, 57.8%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(220, 14.3%, 95.9%);\n  --sidebar-accent-foreground: hsl(220.9, 39.3%, 11%);\n  --sidebar-border: hsl(220, 13%, 91%);\n  --sidebar-ring: hsl(262.1, 83.3%, 57.8%);\n  --font-sans: 'Inter', sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --radius: 0.5rem;\n  \n  /* Purple theme colors from design reference */\n  --primary-50: hsl(250, 100%, 98%);\n  --primary-100: hsl(246, 100%, 95%);\n  --primary-200: hsl(248, 95%, 90%);\n  --primary-300: hsl(249, 95%, 83%);\n  --primary-400: hsl(252, 95%, 76%);\n  --primary-500: hsl(262.1, 83.3%, 57.8%);\n  --primary-600: hsl(262, 83%, 58%);\n  --primary-700: hsl(263, 70%, 50%);\n  --primary-800: hsl(263, 69%, 42%);\n  --primary-900: hsl(264, 69%, 36%);\n}\n\n.dark {\n  --background: hsl(220.9, 39.3%, 11%);\n  --foreground: hsl(220, 14.3%, 95.9%);\n  --card: hsl(220.9, 39.3%, 11%);\n  --card-foreground: hsl(220, 14.3%, 95.9%);\n  --popover: hsl(220.9, 39.3%, 11%);\n  --popover-foreground: hsl(220, 14.3%, 95.9%);\n  --primary: hsl(262.1, 83.3%, 57.8%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(215, 27.9%, 16.9%);\n  --secondary-foreground: hsl(220, 14.3%, 95.9%);\n  --muted: hsl(215, 27.9%, 16.9%);\n  --muted-foreground: hsl(220, 8.9%, 46.1%);\n  --accent: hsl(215, 27.9%, 16.9%);\n  --accent-foreground: hsl(220, 14.3%, 95.9%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(220, 14.3%, 95.9%);\n  --border: hsl(215, 27.9%, 16.9%);\n  --input: hsl(215, 27.9%, 16.9%);\n  --ring: hsl(262.1, 83.3%, 57.8%);\n  --chart-1: hsl(262.1, 83.3%, 57.8%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --sidebar-background: hsl(224, 71.4%, 4.1%);\n  --sidebar-foreground: hsl(220, 14.3%, 95.9%);\n  --sidebar-primary: hsl(262.1, 83.3%, 57.8%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(215, 27.9%, 16.9%);\n  --sidebar-accent-foreground: hsl(220, 14.3%, 95.9%);\n  --sidebar-border: hsl(215, 27.9%, 16.9%);\n  --sidebar-ring: hsl(262.1, 83.3%, 57.8%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground font-sans antialiased;\n  }\n  \n  /* RTL support for Arabic */\n  [dir=\"rtl\"] {\n    direction: rtl;\n  }\n  \n  [dir=\"rtl\"] .rtl\\:text-right {\n    text-align: right;\n  }\n  \n  [dir=\"rtl\"] .rtl\\:flex-row-reverse {\n    flex-direction: row-reverse;\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 8px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 4px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n\n/* Animation classes */\n@keyframes fadeIn {\n  from {\n    opacity: 0;\n    transform: translateY(20px);\n  }\n  to {\n    opacity: 1;\n    transform: translateY(0);\n  }\n}\n\n.animate-fade-in {\n  animation: fadeIn 0.6s ease-out;\n}\n\n/* Product card hover effects */\n.product-card {\n  transition: all 0.3s ease;\n}\n\n.product-card:hover {\n  transform: translateY(-8px);\n  box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n}\n\n.product-image {\n  transition: transform 0.3s ease;\n}\n\n.product-card:hover .product-image {\n  transform: scale(1.05);\n}\n\n/* Hero section gradient overlay */\n.hero-overlay {\n  background: linear-gradient(135deg, \n    hsl(var(--primary-600)) 0%, \n    hsl(var(--primary-800)) 100%\n  );\n}\n\n/* Category hover effects */\n.category-card {\n  transition: all 0.2s ease;\n}\n\n.category-card:hover {\n  transform: translateY(-2px);\n}\n\n.category-icon {\n  transition: all 0.2s ease;\n}\n\n.category-card:hover .category-icon {\n  background-color: hsl(var(--primary-200));\n  color: hsl(var(--primary-700));\n}\n\n/* Button styles for the purple theme */\n.btn-primary {\n  background: hsl(var(--primary-600));\n  color: white;\n  border: none;\n  padding: 0.75rem 2rem;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n}\n\n.btn-primary:hover {\n  background: hsl(var(--primary-700));\n  transform: translateY(-1px);\n}\n\n.btn-secondary {\n  background: transparent;\n  color: hsl(var(--primary-600));\n  border: 2px solid hsl(var(--primary-600));\n  padding: 0.75rem 2rem;\n  border-radius: 0.5rem;\n  font-weight: 600;\n  transition: all 0.2s ease;\n}\n\n.btn-secondary:hover {\n  background: hsl(var(--primary-50));\n  transform: translateY(-1px);\n}\n","size_bytes":5676},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/data/dummy-data.ts":{"content":"// Dummy data to supplement database data when needed\nexport const dummyOrders = [\n  {\n    id: \"dummy-ord-001\",\n    customerName: \"Sarah Johnson\",\n    customerEmail: \"sarah.johnson@email.com\",\n    customerAvatar: \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\",\n    status: \"pending\",\n    totalAmount: \"299.99\",\n    createdAt: \"2024-08-19T10:30:00Z\",\n    items: [\n      {\n        id: \"item-1\",\n        productName: \"Wireless Bluetooth Earbuds\",\n        productDescription: \"Premium noise-cancelling earbuds\",\n        quantity: 1,\n        unitPrice: \"149.99\",\n        totalPrice: \"149.99\"\n      },\n      {\n        id: \"item-2\", \n        productName: \"Phone Case\",\n        productDescription: \"Protective silicone case\",\n        quantity: 1,\n        unitPrice: \"29.99\",\n        totalPrice: \"29.99\"\n      }\n    ]\n  },\n  {\n    id: \"dummy-ord-002\",\n    customerName: \"Michael Chen\",\n    customerEmail: \"michael.chen@email.com\", \n    customerAvatar: \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=40&h=40\",\n    status: \"processing\",\n    totalAmount: \"599.98\",\n    createdAt: \"2024-08-18T14:15:00Z\",\n    items: [\n      {\n        id: \"item-3\",\n        productName: \"Gaming Headset\",\n        productDescription: \"Professional gaming headset with RGB\",\n        quantity: 2,\n        unitPrice: \"299.99\",\n        totalPrice: \"599.98\"\n      }\n    ]\n  },\n  {\n    id: \"dummy-ord-003\",\n    customerName: \"Emily Rodriguez\",\n    customerEmail: \"emily.rodriguez@email.com\",\n    customerAvatar: \"https://images.unsplash.com/photo-1438761681033-6461ffad8d80?ixlib=rb-4.0.3&w=40&h=40\",\n    status: \"shipped\",\n    totalAmount: \"89.97\",\n    createdAt: \"2024-08-17T09:45:00Z\",\n    items: [\n      {\n        id: \"item-4\",\n        productName: \"USB-C Cable\",\n        productDescription: \"Fast charging cable 6ft\",\n        quantity: 3,\n        unitPrice: \"29.99\",\n        totalPrice: \"89.97\"\n      }\n    ]\n  },\n  {\n    id: \"dummy-ord-004\",\n    customerName: \"David Thompson\",\n    customerEmail: \"david.thompson@email.com\",\n    customerAvatar: \"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&w=40&h=40\",\n    status: \"cancelled\",\n    totalAmount: \"199.99\",\n    createdAt: \"2024-08-16T16:20:00Z\",\n    items: [\n      {\n        id: \"item-5\",\n        productName: \"Portable Speaker\",\n        productDescription: \"Waterproof Bluetooth speaker\",\n        quantity: 1,\n        unitPrice: \"199.99\",\n        totalPrice: \"199.99\"\n      }\n    ]\n  },\n  {\n    id: \"dummy-ord-005\",\n    customerName: \"Lisa Wang\",\n    customerEmail: \"lisa.wang@email.com\",\n    customerAvatar: \"https://images.unsplash.com/photo-1544005313-94ddf0286df2?ixlib=rb-4.0.3&w=40&h=40\",\n    status: \"completed\",\n    totalAmount: \"449.99\",\n    createdAt: \"2024-08-15T11:30:00Z\",\n    items: [\n      {\n        id: \"item-6\",\n        productName: \"Smart Watch\",\n        productDescription: \"Fitness tracking smartwatch\",\n        quantity: 1,\n        unitPrice: \"449.99\",\n        totalPrice: \"449.99\"\n      }\n    ]\n  }\n];\n\nexport const dummyProducts = [\n  {\n    id: \"dummy-prod-001\",\n    name: \"Laptop Stand\",\n    price: \"79.99\",\n    rating: \"4.5\",\n    sales: \"45 of 100 sold\",\n    image: \"https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?ixlib=rb-4.0.3&w=100&h=100\"\n  },\n  {\n    id: \"dummy-prod-002\", \n    name: \"Mechanical Keyboard\",\n    price: \"149.99\",\n    rating: \"4.8\",\n    sales: \"32 of 75 sold\",\n    image: \"https://images.unsplash.com/photo-1541140532154-b024d705b90a?ixlib=rb-4.0.3&w=100&h=100\"\n  },\n  {\n    id: \"dummy-prod-003\",\n    name: \"Wireless Mouse\",\n    price: \"59.99\", \n    rating: \"4.3\",\n    sales: \"28 of 60 sold\",\n    image: \"https://images.unsplash.com/photo-1527864550417-7fd91fc51a46?ixlib=rb-4.0.3&w=100&h=100\"\n  },\n  {\n    id: \"dummy-prod-004\",\n    name: \"Monitor Stand\",\n    price: \"39.99\",\n    rating: \"4.2\",\n    sales: \"15 of 40 sold\", \n    image: \"https://images.unsplash.com/photo-1547036967-23d11aacaee0?ixlib=rb-4.0.3&w=100&h=100\"\n  },\n  {\n    id: \"dummy-prod-005\",\n    name: \"Desk Organizer\",\n    price: \"24.99\",\n    rating: \"4.6\",\n    sales: \"22 of 50 sold\",\n    image: \"https://images.unsplash.com/photo-1586953208448-b95a79798f07?ixlib=rb-4.0.3&w=100&h=100\"\n  }\n];\n\nexport const dummyStats = {\n  totalRevenue: \"12,450.00\",\n  totalOrders: 28,\n  totalProducts: 15,\n  totalPromotions: 3,\n  growthMetrics: {\n    revenue: \"+15.2%\",\n    orders: \"+8.5%\", \n    products: \"+12.1%\",\n    promotions: \"+33.3%\"\n  }\n};\n\n// Enhanced dummy data for dashboard charts and graphs\nexport const dummyChartData = {\n  // Sales data for line/area charts (last 30 days)\n  salesData: [\n    { date: \"2024-01-01\", sales: 2400, orders: 12, revenue: 4800 },\n    { date: \"2024-01-02\", sales: 1398, orders: 8, revenue: 3200 },\n    { date: \"2024-01-03\", sales: 9800, orders: 24, revenue: 12400 },\n    { date: \"2024-01-04\", sales: 3908, orders: 18, revenue: 7600 },\n    { date: \"2024-01-05\", sales: 4800, orders: 22, revenue: 9800 },\n    { date: \"2024-01-06\", sales: 3800, orders: 16, revenue: 6400 },\n    { date: \"2024-01-07\", sales: 4300, orders: 19, revenue: 8200 },\n    { date: \"2024-01-08\", sales: 2400, orders: 11, revenue: 4600 },\n    { date: \"2024-01-09\", sales: 7200, orders: 28, revenue: 14200 },\n    { date: \"2024-01-10\", sales: 5400, orders: 21, revenue: 9800 },\n    { date: \"2024-01-11\", sales: 3200, orders: 14, revenue: 6200 },\n    { date: \"2024-01-12\", sales: 6800, orders: 25, revenue: 11800 },\n    { date: \"2024-01-13\", sales: 4200, orders: 17, revenue: 7400 },\n    { date: \"2024-01-14\", sales: 5600, orders: 23, revenue: 10200 },\n    { date: \"2024-01-15\", sales: 8200, orders: 32, revenue: 16400 },\n    { date: \"2024-01-16\", sales: 3600, orders: 15, revenue: 6800 },\n    { date: \"2024-01-17\", sales: 4800, orders: 20, revenue: 8600 },\n    { date: \"2024-01-18\", sales: 6200, orders: 24, revenue: 11200 },\n    { date: \"2024-01-19\", sales: 3800, orders: 16, revenue: 7200 },\n    { date: \"2024-01-20\", sales: 7400, orders: 29, revenue: 13800 },\n    { date: \"2024-01-21\", sales: 5200, orders: 22, revenue: 9400 },\n    { date: \"2024-01-22\", sales: 4600, orders: 18, revenue: 8200 },\n    { date: \"2024-01-23\", sales: 8600, orders: 34, revenue: 17200 },\n    { date: \"2024-01-24\", sales: 6400, orders: 26, revenue: 12400 },\n    { date: \"2024-01-25\", sales: 3400, orders: 14, revenue: 6400 },\n    { date: \"2024-01-26\", sales: 5800, orders: 23, revenue: 10800 },\n    { date: \"2024-01-27\", sales: 7200, orders: 28, revenue: 13600 },\n    { date: \"2024-01-28\", sales: 4200, orders: 17, revenue: 7800 },\n    { date: \"2024-01-29\", sales: 6800, orders: 27, revenue: 12800 },\n    { date: \"2024-01-30\", sales: 9200, orders: 36, revenue: 18400 }\n  ],\n\n  // Product categories performance for pie/donut charts\n  categoriesData: [\n    { name: \"Electronics\", value: 35, sales: 18500, color: \"#3B82F6\" },\n    { name: \"Fashion\", value: 25, sales: 12800, color: \"#EF4444\" },\n    { name: \"Home & Garden\", value: 20, sales: 9600, color: \"#10B981\" },\n    { name: \"Sports\", value: 12, sales: 6200, color: \"#F59E0B\" },\n    { name: \"Books\", value: 8, sales: 3400, color: \"#8B5CF6\" }\n  ],\n\n  // Top products for bar charts\n  topProductsData: [\n    { name: \"Gaming Laptop\", sales: 1250, revenue: 87500 },\n    { name: \"Wireless Headphones\", sales: 980, revenue: 49000 },\n    { name: \"Smart Watch\", sales: 850, revenue: 42500 },\n    { name: \"Smartphone\", sales: 720, revenue: 64800 },\n    { name: \"Tablet\", sales: 650, revenue: 32500 },\n    { name: \"Camera\", sales: 420, revenue: 29400 },\n    { name: \"Speaker\", sales: 380, revenue: 15200 },\n    { name: \"Monitor\", sales: 320, revenue: 19200 }\n  ],\n\n  // User activity data\n  userActivityData: [\n    { time: \"00:00\", active: 120 },\n    { time: \"01:00\", active: 89 },\n    { time: \"02:00\", active: 64 },\n    { time: \"03:00\", active: 42 },\n    { time: \"04:00\", active: 28 },\n    { time: \"05:00\", active: 35 },\n    { time: \"06:00\", active: 78 },\n    { time: \"07:00\", active: 145 },\n    { time: \"08:00\", active: 220 },\n    { time: \"09:00\", active: 280 },\n    { time: \"10:00\", active: 340 },\n    { time: \"11:00\", active: 380 },\n    { time: \"12:00\", active: 420 },\n    { time: \"13:00\", active: 380 },\n    { time: \"14:00\", active: 340 },\n    { time: \"15:00\", active: 310 },\n    { time: \"16:00\", active: 290 },\n    { time: \"17:00\", active: 270 },\n    { time: \"18:00\", active: 250 },\n    { time: \"19:00\", active: 230 },\n    { time: \"20:00\", active: 210 },\n    { time: \"21:00\", active: 180 },\n    { time: \"22:00\", active: 150 },\n    { time: \"23:00\", active: 135 }\n  ],\n\n  // Monthly comparison data\n  monthlyComparisonData: [\n    { month: \"Jan\", thisYear: 15400, lastYear: 12300 },\n    { month: \"Feb\", thisYear: 18200, lastYear: 14100 },\n    { month: \"Mar\", thisYear: 22100, lastYear: 18600 },\n    { month: \"Apr\", thisYear: 19800, lastYear: 16200 },\n    { month: \"May\", thisYear: 24300, lastYear: 20100 },\n    { month: \"Jun\", thisYear: 28700, lastYear: 23400 },\n    { month: \"Jul\", thisYear: 31200, lastYear: 25800 },\n    { month: \"Aug\", thisYear: 29600, lastYear: 24200 },\n    { month: \"Sep\", thisYear: 26800, lastYear: 22100 },\n    { month: \"Oct\", thisYear: 23400, lastYear: 19800 },\n    { month: \"Nov\", thisYear: 27600, lastYear: 21200 },\n    { month: \"Dec\", thisYear: 32800, lastYear: 26400 }\n  ]\n};","size_bytes":9264},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { insertUserSchema, User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (data: any) => {\n      // Registration now returns a message instead of user data\n      // User will need to verify email before logging in\n      toast({\n        title: \"Registration successful\",\n        description: \"Please check your email to verify your account\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3032},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-socket.tsx":{"content":"import { useEffect, useRef } from \"react\";\nimport { io, Socket } from \"socket.io-client\";\nimport { useAuth } from \"./use-auth\";\nimport { useToast } from \"./use-toast\";\nimport { type Notification } from \"@shared/schema\";\nimport { queryClient } from \"@/lib/queryClient\";\n\nexport function useSocket() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const socketRef = useRef<Socket | null>(null);\n\n  useEffect(() => {\n    if (!user) return;\n\n    // Create socket connection\n    const socket = io({\n      path: \"/socket.io\",\n      autoConnect: true,\n    });\n\n    socketRef.current = socket;\n\n    socket.on(\"connect\", () => {\n      console.log(\"Connected to server\");\n      \n      // Join user-specific room\n      socket.emit(\"join-user-room\", user.id);\n      \n      // Join admin room if user is admin\n      if (user.role === \"admin\") {\n        socket.emit(\"join-admin-room\");\n      }\n    });\n\n    socket.on(\"notification\", (notification: Notification) => {\n      console.log(\"Received notification:\", notification);\n      \n      // Show toast notification\n      toast({\n        title: notification.title,\n        description: notification.message,\n        duration: 5000,\n      });\n      \n      // Invalidate notifications query to refresh the UI\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    });\n\n    socket.on(\"disconnect\", () => {\n      console.log(\"Disconnected from server\");\n    });\n\n    // Cleanup on unmount\n    return () => {\n      socket.disconnect();\n    };\n  }, [user, toast]);\n\n  return socketRef.current;\n}","size_bytes":1567},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/i18n.ts":{"content":"// import i18n from \"i18next\";\n// import { initReactI18next } from \"react-i18next\";\n\n// const resources = {\n//   en: {\n//     common: {\n//       // Header\n//       \"search.placeholder\": \"Search products, categories, vendors...\",\n//       \"nav.cart\": \"Cart\",\n//       \"nav.profile\": \"Profile\",\n//       \"nav.logout\": \"Logout\",\n//       \"nav.login\": \"Login\",\n//       title: \"MultiMarket\",\n\n//       // Language switcher\n//       \"language.english\": \"English\",\n//       \"language.french\": \"Français\",\n//       \"language.arabic\": \"العربية\",\n\n//       // Hero section\n//       \"hero.title\": \"Discover Amazing Products from Global Vendors\",\n//       \"hero.subtitle\":\n//         \"Shop from thousands of trusted sellers worldwide. Multi-language support, secure payments, and fast shipping.\",\n//       \"hero.startShopping\": \"Start Shopping\",\n//       \"hero.becomeSeller\": \"Become a Seller\",\n\n//       // Categories\n//       \"categories.title\": \"Shop by Category\",\n//       \"categories.viewAll\": \"View All Categories\",\n//       \"category.electronics\": \"Electronics\",\n//       \"category.fashion\": \"Fashion\",\n//       \"category.home\": \"Home & Garden\",\n//       \"category.gaming\": \"Gaming\",\n//       \"category.books\": \"Books\",\n//       \"category.sports\": \"Sports\",\n//       \"category.automotive\": \"Automotive\",\n//       \"category.more\": \"More\",\n\n//       // Products\n//       \"products.title\": \"Featured Products\",\n//       \"products.subtitle\": \"Discover the best deals from our trusted vendors\",\n//       \"products.sortBy\": \"Sort by:\",\n//       \"products.featured\": \"Featured\",\n//       \"products.priceLowHigh\": \"Price: Low to High\",\n//       \"products.priceHighLow\": \"Price: High to Low\",\n//       \"products.newest\": \"Newest\",\n//       \"products.bestRating\": \"Best Rating\",\n//       \"products.addToCart\": \"Add to Cart\",\n//       \"products.loadMore\": \"Load More Products\",\n//       \"products.fastShipping\": \"Fast Shipping\",\n//       \"products.freeShipping\": \"Free Shipping\",\n//       \"products.warranty\": \"2Y Warranty\",\n//       \"products.bestSeller\": \"Best Seller\",\n\n//       // Vendors\n//       \"vendors.title\": \"Featured Vendors\",\n//       \"vendors.subtitle\":\n//         \"Discover amazing products from our trusted seller community worldwide\",\n//       \"vendors.rating\": \"Rating\",\n//       \"vendors.products\": \"Products\",\n//       \"vendors.visitStore\": \"Visit Store\",\n\n//       // Dashboards\n//       \"dashboard.customer.title\": \"Customer Dashboard\",\n//       \"dashboard.customer.subtitle\": \"Shop, track orders, manage wishlist\",\n//       \"dashboard.customer.orders\": \"Orders\",\n//       \"dashboard.customer.wishlist\": \"Wishlist\",\n//       \"dashboard.customer.reviews\": \"Reviews\",\n//       \"dashboard.customer.demo\": \"View Customer Demo\",\n\n//       \"dashboard.seller.title\": \"Seller Dashboard\",\n//       \"dashboard.seller.subtitle\": \"Manage products, track sales, analytics\",\n//       \"dashboard.seller.products\": \"Products\",\n//       \"dashboard.seller.sales\": \"Sales\",\n//       \"dashboard.seller.customers\": \"Customers\",\n//       \"dashboard.seller.demo\": \"View Seller Demo\",\n\n//       \"dashboard.admin.title\": \"Admin Dashboard\",\n//       \"dashboard.admin.subtitle\": \"Full platform control & analytics\",\n//       \"dashboard.admin.totalUsers\": \"Total Users\",\n//       \"dashboard.admin.vendors\": \"Vendors\",\n//       \"dashboard.admin.revenue\": \"Revenue\",\n//       \"dashboard.admin.demo\": \"View Admin Demo\",\n\n//       // Dashboard section\n//       \"dashboards.title\": \"Powerful Dashboards for Every Role\",\n//       \"dashboards.subtitle\":\n//         \"Whether you're a customer, seller, or admin, our platform provides intuitive tools to manage your marketplace experience\",\n\n//       // Authentication\n//       \"auth.login\": \"Login\",\n//       \"auth.register\": \"Register\",\n//       \"auth.welcome\": \"Welcome Back\",\n//       \"auth.createAccount\": \"Create Account\",\n//       \"auth.email\": \"Email\",\n//       \"auth.username\": \"Username\",\n//       \"auth.password\": \"Password\",\n//       \"auth.firstName\": \"First Name\",\n//       \"auth.lastName\": \"Last Name\",\n//       \"auth.role\": \"Role\",\n//       \"auth.client\": \"Customer\",\n//       \"auth.seller\": \"Seller\",\n//       \"auth.admin\": \"Admin\",\n//       \"auth.loginButton\": \"Sign In\",\n//       \"auth.registerButton\": \"Create Account\",\n//       \"auth.switchToRegister\": \"Don't have an account? Sign up\",\n//       \"auth.switchToLogin\": \"Already have an account? Sign in\",\n//       \"auth.forgotPassword\": \"Forgot Password?\",\n\n//       // Footer\n//       \"footer.description\":\n//         \"The world's leading multi-vendor marketplace connecting buyers and sellers globally. Shop from thousands of trusted vendors with multi-language support.\",\n//       \"footer.quickLinks\": \"Quick Links\",\n//       \"footer.aboutUs\": \"About Us\",\n//       \"footer.howItWorks\": \"How It Works\",\n//       \"footer.becomeSeller\": \"Become a Seller\",\n//       \"footer.careers\": \"Careers\",\n//       \"footer.blog\": \"Blog\",\n//       \"footer.customerService\": \"Customer Service\",\n//       \"footer.helpCenter\": \"Help Center\",\n//       \"footer.contactUs\": \"Contact Us\",\n//       \"footer.shippingInfo\": \"Shipping Info\",\n//       \"footer.returns\": \"Returns\",\n//       \"footer.trackOrder\": \"Track Order\",\n//       \"footer.legal\": \"Legal\",\n//       \"footer.privacyPolicy\": \"Privacy Policy\",\n//       \"footer.termsOfService\": \"Terms of Service\",\n//       \"footer.cookiePolicy\": \"Cookie Policy\",\n//       \"footer.gdpr\": \"GDPR\",\n//       \"footer.compliance\": \"Compliance\",\n//       \"footer.copyright\": \"© 2024 CEBLEU. All rights reserved.\",\n//       \"footer.languages\": \"Available in 3+ languages\",\n//       \"footer.secure\": \"Secure & Trusted\",\n\n//       // Common\n//       \"common.loading\": \"Loading...\",\n//       \"common.error\": \"Error\",\n//       \"common.success\": \"Success\",\n//       \"common.cancel\": \"Cancel\",\n//       \"common.save\": \"Save\",\n//       \"common.edit\": \"Edit\",\n//       \"common.delete\": \"Delete\",\n//       \"common.view\": \"View\",\n//       \"common.close\": \"Close\",\n//       \"common.search\": \"Search\",\n//       \"common.filter\": \"Filter\",\n//       \"common.sort\": \"Sort\",\n//       \"common.more\": \"More\",\n//       \"common.less\": \"Less\",\n//       \"common.all\": \"All\",\n//       \"common.none\": \"None\",\n//       \"common.back\": \"Back\",\n//       \"common.next\": \"Next\",\n//       \"common.previous\": \"Previous\",\n//       \"common.confirm\": \"Confirm\",\n//       \"common.clear\": \"Clear search\",\n//       \"common.resetFilters\": \"Reset filters\",\n\n//       // Order details\n//       \"order.customerInformation\": \"Customer Information\",\n//       \"order.productsOrdered\": \"Products ordered\",\n//       \"order.delivery\": \"Delivery\",\n//       \"order.financialSummary\": \"Financial Summary\",\n//       \"order.clientId\": \"Client #\",\n//       \"order.orderPlacedOn\": \"Order placed on:\",\n//       \"order.deliveryAddress\": \"Delivery address\",\n//       \"order.method\": \"Method:\",\n//       \"order.estimatedTime\": \"Estimated time:\",\n//       \"order.status\": \"Status:\",\n//       \"order.shipped\": \"Shipped\",\n//       \"order.freeDelivery\": \"Free delivery\",\n//       \"order.workingDays\": \"working days\",\n//       \"order.subtotal\": \"Subtotal\",\n//       \"order.items\": \"items\",\n//       \"order.deliveryCosts\": \"Delivery costs:\",\n//       \"order.vat\": \"VAT\",\n//       \"order.free\": \"Free\",\n//       \"order.total\": \"Total:\",\n//       \"order.payment\": \"Payment:\",\n//       \"order.paid\": \"Paid\",\n//       \"order.viewDetails\": \"View Details\",\n//       \"order.approve\": \"Approve\",\n//       \"order.reject\": \"Reject\",\n//       \"order.seeAllOrders\": \"See all orders\",\n//       \"order.articles\": \"articles\",\n//     },\n//   },\n//   fr: {\n//     common: {\n//       // Header\n//       \"search.placeholder\": \"Rechercher des produits, catégories, vendeurs...\",\n//       \"nav.cart\": \"Panier\",\n//       \"nav.profile\": \"Profil\",\n//       \"nav.logout\": \"Déconnexion\",\n//       \"nav.login\": \"Connexion\",\n//       title: \"Multimarché\",\n\n//       // Language switcher\n//       \"language.english\": \"English\",\n//       \"language.french\": \"Français\",\n//       \"language.arabic\": \"العربية\",\n\n//       // Hero section\n//       \"hero.title\": \"Découvrez des Produits Incroyables de Vendeurs Mondiaux\",\n//       \"hero.subtitle\":\n//         \"Achetez auprès de milliers de vendeurs de confiance dans le monde entier. Support multilingue, paiements sécurisés et expédition rapide.\",\n//       \"hero.startShopping\": \"Commencer les Achats\",\n//       \"hero.becomeSeller\": \"Devenir Vendeur\",\n\n//       // Categories\n//       \"categories.title\": \"Acheter par Catégorie\",\n//       \"categories.viewAll\": \"Voir Toutes les Catégories\",\n//       \"category.electronics\": \"Électronique\",\n//       \"category.fashion\": \"Mode\",\n//       \"category.home\": \"Maison & Jardin\",\n//       \"category.gaming\": \"Jeux\",\n//       \"category.books\": \"Livres\",\n//       \"category.sports\": \"Sports\",\n//       \"category.automotive\": \"Automobile\",\n//       \"category.more\": \"Plus\",\n\n//       // Products\n//       \"products.title\": \"Produits en Vedette\",\n//       \"products.subtitle\":\n//         \"Découvrez les meilleures offres de nos vendeurs de confiance\",\n//       \"products.sortBy\": \"Trier par:\",\n//       \"products.featured\": \"En vedette\",\n//       \"products.priceLowHigh\": \"Prix: Bas vers Haut\",\n//       \"products.priceHighLow\": \"Prix: Haut vers Bas\",\n//       \"products.newest\": \"Plus récent\",\n//       \"products.bestRating\": \"Meilleure note\",\n//       \"products.addToCart\": \"Ajouter au Panier\",\n//       \"products.loadMore\": \"Charger Plus de Produits\",\n//       \"products.fastShipping\": \"Expédition Rapide\",\n//       \"products.freeShipping\": \"Livraison Gratuite\",\n//       \"products.warranty\": \"Garantie 2 ans\",\n//       \"products.bestSeller\": \"Meilleure Vente\",\n\n//       // Vendors\n//       \"vendors.title\": \"Vendeurs en Vedette\",\n//       \"vendors.subtitle\":\n//         \"Découvrez des produits incroyables de notre communauté de vendeurs de confiance dans le monde entier\",\n//       \"vendors.rating\": \"Note\",\n//       \"vendors.products\": \"Produits\",\n//       \"vendors.visitStore\": \"Visiter la Boutique\",\n\n//       // Dashboards\n//       \"dashboard.customer.title\": \"Tableau de Bord Client\",\n//       \"dashboard.customer.subtitle\":\n//         \"Achetez, suivez les commandes, gérez la liste de souhaits\",\n//       \"dashboard.customer.orders\": \"Commandes\",\n//       \"dashboard.customer.wishlist\": \"Liste de Souhaits\",\n//       \"dashboard.customer.reviews\": \"Avis\",\n//       \"dashboard.customer.demo\": \"Voir Démo Client\",\n\n//       \"dashboard.seller.title\": \"Tableau de Bord Vendeur\",\n//       \"dashboard.seller.subtitle\":\n//         \"Gérez les produits, suivez les ventes, analyses\",\n//       \"dashboard.seller.products\": \"Produits\",\n//       \"dashboard.seller.sales\": \"Ventes\",\n//       \"dashboard.seller.customers\": \"Clients\",\n//       \"dashboard.seller.demo\": \"Voir Démo Vendeur\",\n\n//       \"dashboard.admin.title\": \"Tableau de Bord Admin\",\n//       \"dashboard.admin.subtitle\":\n//         \"Contrôle complet de la plateforme et analyses\",\n//       \"dashboard.admin.totalUsers\": \"Total Utilisateurs\",\n//       \"dashboard.admin.vendors\": \"Vendeurs\",\n//       \"dashboard.admin.revenue\": \"Revenus\",\n//       \"dashboard.admin.demo\": \"Voir Démo Admin\",\n\n//       // Dashboard section\n//       \"dashboards.title\": \"Tableaux de Bord Puissants pour Chaque Rôle\",\n//       \"dashboards.subtitle\":\n//         \"Que vous soyez client, vendeur ou administrateur, notre plateforme fournit des outils intuitifs pour gérer votre expérience marketplace\",\n\n//       // Authentication\n//       \"auth.login\": \"Connexion\",\n//       \"auth.register\": \"S'inscrire\",\n//       \"auth.welcome\": \"Bon Retour\",\n//       \"auth.createAccount\": \"Créer un Compte\",\n//       \"auth.email\": \"Email\",\n//       \"auth.username\": \"Nom d'utilisateur\",\n//       \"auth.password\": \"Mot de passe\",\n//       \"auth.firstName\": \"Prénom\",\n//       \"auth.lastName\": \"Nom\",\n//       \"auth.role\": \"Rôle\",\n//       \"auth.client\": \"Client\",\n//       \"auth.seller\": \"Vendeur\",\n//       \"auth.admin\": \"Admin\",\n//       \"auth.loginButton\": \"Se Connecter\",\n//       \"auth.registerButton\": \"Créer un Compte\",\n//       \"auth.switchToRegister\": \"Pas de compte? S'inscrire\",\n//       \"auth.switchToLogin\": \"Déjà un compte? Se connecter\",\n//       \"auth.forgotPassword\": \"Mot de passe oublié?\",\n\n//       // Footer\n//       \"footer.description\":\n//         \"La marketplace multi-vendeur leader mondial connectant acheteurs et vendeurs globalement. Achetez auprès de milliers de vendeurs de confiance avec support multilingue.\",\n//       \"footer.quickLinks\": \"Liens Rapides\",\n//       \"footer.aboutUs\": \"À Propos\",\n//       \"footer.howItWorks\": \"Comment Ça Marche\",\n//       \"footer.becomeSeller\": \"Devenir Vendeur\",\n//       \"footer.careers\": \"Carrières\",\n//       \"footer.blog\": \"Blog\",\n//       \"footer.customerService\": \"Service Client\",\n//       \"footer.helpCenter\": \"Centre d'Aide\",\n//       \"footer.contactUs\": \"Nous Contacter\",\n//       \"footer.shippingInfo\": \"Info Expédition\",\n//       \"footer.returns\": \"Retours\",\n//       \"footer.trackOrder\": \"Suivre Commande\",\n//       \"footer.legal\": \"Légal\",\n//       \"footer.privacyPolicy\": \"Politique de Confidentialité\",\n//       \"footer.termsOfService\": \"Conditions de Service\",\n//       \"footer.cookiePolicy\": \"Politique des Cookies\",\n//       \"footer.gdpr\": \"RGPD\",\n//       \"footer.compliance\": \"Conformité\",\n//       \"footer.copyright\": \"© 2024 MultiMarket. Tous droits réservés.\",\n//       \"footer.languages\": \"Disponible en 15+ langues\",\n//       \"footer.secure\": \"Sécurisé et de Confiance\",\n\n//       // Common\n//       \"common.loading\": \"Chargement...\",\n//       \"common.error\": \"Erreur\",\n//       \"common.success\": \"Succès\",\n//       \"common.cancel\": \"Annuler\",\n//       \"common.save\": \"Sauvegarder\",\n//       \"common.edit\": \"Modifier\",\n//       \"common.delete\": \"Supprimer\",\n//       \"common.view\": \"Voir\",\n//       \"common.close\": \"Fermer\",\n//       \"common.search\": \"Rechercher\",\n//       \"common.filter\": \"Filtrer\",\n//       \"common.sort\": \"Trier\",\n//       \"common.more\": \"Plus\",\n//       \"common.less\": \"Moins\",\n//       \"common.all\": \"Tous\",\n//       \"common.none\": \"Aucun\",\n//       \"common.back\": \"Retour\",\n//       \"common.next\": \"Suivant\",\n//       \"common.previous\": \"Précédent\",\n//       \"common.confirm\": \"Confirmer\",\n//       \"common.clear\": \"Effacer la recherche\",\n//       \"common.resetFilters\": \"Réinitialiser les filtres\",\n\n//       // Order details\n//       \"order.customerInformation\": \"Informations client\",\n//       \"order.productsOrdered\": \"Produits commandés\",\n//       \"order.delivery\": \"Livraison\",\n//       \"order.financialSummary\": \"Résumé financier\",\n//       \"order.clientId\": \"Client n°\",\n//       \"order.orderPlacedOn\": \"Commande passée le:\",\n//       \"order.deliveryAddress\": \"Adresse de livraison\",\n//       \"order.method\": \"Méthode:\",\n//       \"order.estimatedTime\": \"Temps estimé:\",\n//       \"order.status\": \"Statut:\",\n//       \"order.shipped\": \"Expédié\",\n//       \"order.freeDelivery\": \"Livraison gratuite\",\n//       \"order.workingDays\": \"jours ouvrés\",\n//       \"order.subtotal\": \"Sous-total\",\n//       \"order.items\": \"articles\",\n//       \"order.deliveryCosts\": \"Frais de livraison:\",\n//       \"order.vat\": \"TVA\",\n//       \"order.free\": \"Gratuit\",\n//       \"order.total\": \"Total:\",\n//       \"order.payment\": \"Paiement:\",\n//       \"order.paid\": \"Payé\",\n//       \"order.viewDetails\": \"Voir les détails\",\n//       \"order.approve\": \"Approuver\",\n//       \"order.reject\": \"Rejeter\",\n//       \"order.seeAllOrders\": \"Voir toutes les commandes\",\n//       \"order.articles\": \"articles\",\n//     },\n//   },\n//   ar: {\n//     common: {\n//       // Header\n//       \"search.placeholder\": \"ابحث عن المنتجات والفئات والبائعين...\",\n//       \"nav.cart\": \"عربة التسوق\",\n//       \"nav.profile\": \"الملف الشخصي\",\n//       \"nav.logout\": \"تسجيل الخروج\",\n//       \"nav.login\": \"تسجيل الدخول\",\n//       title: \"مولتيماركيت\",\n\n//       // Language switcher\n//       \"language.english\": \"English\",\n//       \"language.french\": \"Français\",\n//       \"language.arabic\": \"العربية\",\n\n//       // Hero section\n//       \"hero.title\": \"اكتشف منتجات مذهلة من بائعين عالميين\",\n//       \"hero.subtitle\":\n//         \"تسوق من آلاف البائعين الموثوقين حول العال/�. دعم متعدد اللغات، مدفوعات آمنة، وشحن سريع.\",\n//       \"hero.startShopping\": \"ابدأ التسوق\",\n//       \"hero.becomeSeller\": \"كن بائعاً\",\n\n//       // Categories\n//       \"categories.title\": \"تسوق حسب الفئة\",\n//       \"categories.viewAll\": \"عرض جميع الفئات\",\n//       \"category.electronics\": \"الإلكترونيات\",\n//       \"category.fashion\": \"الموضة\",\n//       \"category.home\": \"المنزل والحديقة\",\n//       \"category.gaming\": \"الألعاب\",\n//       \"category.books\": \"الكتب\",\n//       \"category.sports\": \"الرياضة\",\n//       \"category.automotive\": \"السيارات\",\n//       \"category.more\": \"المزيد\",\n\n//       // Products\n//       \"products.title\": \"المنتجات المميزة\",\n//       \"products.subtitle\": \"اكتشف أفضل الصفقات من بائعينا الموثوقين\",\n//       \"products.sortBy\": \"ترتيب حسب:\",\n//       \"products.featured\": \"مميز\",\n//       \"products.priceLowHigh\": \"السعر: من الأقل للأعلى\",\n//       \"products.priceHighLow\": \"السعر: من الأعلى للأقل\",\n//       \"products.newest\": \"الأحدث\",\n//       \"products.bestRating\": \"أفضل تقييم\",\n//       \"products.addToCart\": \"إضافة للسلة\",\n//       \"products.loadMore\": \"تحميل المزيد من المنتجات\",\n//       \"products.fastShipping\": \"شحن سريع\",\n//       \"products.freeShipping\": \"شحن مجاني\",\n//       \"products.warranty\": \"ضمان سنتين\",\n//       \"products.bestSeller\": \"الأكثر مبيعاً\",\n\n//       // Vendors\n//       \"vendors.title\": \"البائعون المميزون\",\n//       \"vendors.subtitle\":\n//         \"اكتشف منتجات مذهلة من مجتمع البائعين الموثوقين لدينا حول العالم\",\n//       \"vendors.rating\": \"التقييم\",\n//       \"vendors.products\": \"المنتجات\",\n//       \"vendors.visitStore\": \"زيارة المتجر\",\n\n//       // Dashboards\n//       \"dashboard.customer.title\": \"لوحة تحكم العميل\",\n//       \"dashboard.customer.subtitle\": \"تسوق، تتبع الطلبات، إدارة قائمة الأمنيات\",\n//       \"dashboard.customer.orders\": \"الطلبات\",\n//       \"dashboard.customer.wishlist\": \"قائمة الأمنيات\",\n//       \"dashboard.customer.reviews\": \"المراجعات\",\n//       \"dashboard.customer.demo\": \"عرض تجريبي للعميل\",\n\n//       \"dashboard.seller.title\": \"لوحة تحكم البائع\",\n//       \"dashboard.seller.subtitle\": \"إدارة المنتجات، تتبع المبيعات، التحليلات\",\n//       \"dashboard.seller.products\": \"المنتجات\",\n//       \"dashboard.seller.sales\": \"المبيعات\",\n//       \"dashboard.seller.customers\": \"العملاء\",\n//       \"dashboard.seller.demo\": \"عرض تجريبي للبائع\",\n\n//       \"dashboard.admin.title\": \"لوحة تحكم الإدارة\",\n//       \"dashboard.admin.subtitle\": \"التحكم الكامل في المنصة والتحليلات\",\n//       \"dashboard.admin.totalUsers\": \"إجمالي المستخدمين\",\n//       \"dashboard.admin.vendors\": \"البائعين\",\n//       \"dashboard.admin.revenue\": \"الإيرادات\",\n//       \"dashboard.admin.demo\": \"عرض تجريبي للإدارة\",\n\n//       // Dashboard section\n//       \"dashboards.title\": \"لوحات تحكم قوية لكل دور\",\n//       \"dashboards.subtitle\":\n//         \"سواء كنت عميلاً أو بائعاً أو مديراً، توفر منصتنا أدوات سهلة لإدارة تجربة السوق الخاصة بك\",\n\n//       // Authentication\n//       \"auth.login\": \"تسجيل الدخول\",\n//       \"auth.register\": \"التسجيل\",\n//       \"auth.welcome\": \"أهلاً بعودتك\",\n//       \"auth.createAccount\": \"إنشاء حساب\",\n//       \"auth.email\": \"البريد الإلكتروني\",\n//       \"auth.username\": \"اسم المستخدم\",\n//       \"auth.password\": \"كلمة المرور\",\n//       \"auth.firstName\": \"الاسم الأول\",\n//       \"auth.lastName\": \"اسم العائلة\",\n//       \"auth.role\": \"الدور\",\n//       \"auth.client\": \"عميل\",\n//       \"auth.seller\": \"بائع\",\n//       \"auth.admin\": \"مدير\",\n//       \"auth.loginButton\": \"تسجيل الدخول\",\n//       \"auth.registerButton\": \"إنشاء حساب\",\n//       \"auth.switchToRegister\": \"ليس لديك حساب؟ سجل\",\n//       \"auth.switchToLogin\": \"لديك حساب بالفعل؟ سجل دخولك\",\n//       \"auth.forgotPassword\": \"نسيت كلمة المرور؟\",\n\n//       // Footer\n//       \"footer.description\":\n//         \"السوق الرائد عالمياً متعدد البائعين الذي يربط المشترين والبائعين عالمياً. تسوق من آلاف البائعين الموثوقين مع دعم متعدد اللغات.\",\n//       \"footer.quickLinks\": \"روابط سريعة\",\n//       \"footer.aboutUs\": \"من نحن\",\n//       \"footer.howItWorks\": \"كيف يعمل\",\n//       \"footer.becomeSeller\": \"كن بائعاً\",\n//       \"footer.careers\": \"الوظائف\",\n//       \"footer.blog\": \"المدونة\",\n//       \"footer.customerService\": \"خدمة العملاء\",\n//       \"footer.helpCenter\": \"مركز المساعدة\",\n//       \"footer.contactUs\": \"اتصل بنا\",\n//       \"footer.shippingInfo\": \"معلومات الشحن\",\n//       \"footer.returns\": \"الإرجاع\",\n//       \"footer.trackOrder\": \"تتبع الطلب\",\n//       \"footer.legal\": \"قانوني\",\n//       \"footer.privacyPolicy\": \"سياسة الخصوصية\",\n//       \"footer.termsOfService\": \"شروط الخدمة\",\n//       \"footer.cookiePolicy\": \"سياسة ملفات تعريف الارتباط\",\n//       \"footer.gdpr\": \"اللائحة العامة لحماية البيانات\",\n//       \"footer.compliance\": \"الامتثال\",\n//       \"footer.copyright\": \"© 2024 MultiMarket. جميع الحقوق محفوظة.\",\n//       \"footer.languages\": \"متوفر بأكثر من 15 لغة\",\n//       \"footer.secure\": \"آمن وموثوق\",\n\n//       // Common\n//       \"common.loading\": \"جاري التحميل...\",\n//       \"common.error\": \"خطأ\",\n//       \"common.success\": \"نجح\",\n//       \"common.cancel\": \"إلغاء\",\n//       \"common.save\": \"حفظ\",\n//       \"common.edit\": \"تعديل\",\n//       \"common.delete\": \"حذف\",\n//       \"common.view\": \"عرض\",\n//       \"common.close\": \"إغلاق\",\n//       \"common.search\": \"بحث\",\n//       \"common.filter\": \"تصفية\",\n//       \"common.sort\": \"فرز\",\n//       \"common.more\": \"المزيد\",\n//       \"common.less\": \"أقل\",\n//       \"common.all\": \"الكل\",\n//       \"common.none\": \"لا شيء\",\n//       \"common.back\": \"عودة\",\n//       \"common.next\": \"التالي\",\n//       \"common.previous\": \"السابق\",\n//       \"common.confirm\": \"تأكيد\",\n//       \"common.clear\": \"مسح البحث\",\n//       \"common.resetFilters\": \"إعادة ضبط الفلاتر\",\n\n//       // Order details\n//       \"order.customerInformation\": \"معلومات العميل\",\n//       \"order.productsOrdered\": \"المنتجات المطلوبة\",\n//       \"order.delivery\": \"التسليم\",\n//       \"order.financialSummary\": \"الملخص المالي\",\n//       \"order.clientId\": \"رقم العميل\",\n//       \"order.orderPlacedOn\": \"تم تقديم الطلب في:\",\n//       \"order.deliveryAddress\": \"عنوان التسليم\",\n//       \"order.method\": \"الطريقة:\",\n//       \"order.estimatedTime\": \"الوقت المقدر:\",\n//       \"order.status\": \"الحالة:\",\n//       \"order.shipped\": \"تم الشحن\",\n//       \"order.freeDelivery\": \"توصيل مجاني\",\n//       \"order.workingDays\": \"أيام العمل\",\n//       \"order.subtotal\": \"المجموع الفرعي\",\n//       \"order.items\": \"عناصر\",\n//       \"order.deliveryCosts\": \"تكاليف التوصيل:\",\n//       \"order.vat\": \"ضريبة القيمة المضافة\",\n//       \"order.free\": \"مجاني\",\n//       \"order.total\": \"المجموع:\",\n//       \"order.payment\": \"الدفع:\",\n//       \"order.paid\": \"مدفوع\",\n//       \"order.viewDetails\": \"عرض التفاصيل\",\n//       \"order.approve\": \"الموافقة\",\n//       \"order.reject\": \"الرفض\",\n//       \"order.seeAllOrders\": \"عرض جميع الطلبات\",\n//       \"order.articles\": \"مقالات\",\n//     },\n//   },\n// };\n\n// i18n.use(initReactI18next).init({\n//   resources,\n//   lng: \"en\",\n//   fallbackLng: \"en\",\n//   interpolation: {\n//     escapeValue: false,\n//   },\n//   ns: [\"common\"],\n//   defaultNS: \"common\",\n// });\n\n// export default i18n;\n\nimport i18n from \"i18next\";\nimport { title } from \"process\";\nimport { initReactI18next } from \"react-i18next\";\n\nconst resources = {\n  en: {\n    common: {\n      // Header\n      \"search.placeholder\": \"Search products, categories, vendors...\",\n      \"nav.cart\": \"Cart\",\n      \"nav.profile\": \"Profile\",\n      \"nav.logout\": \"Logout\",\n      \"nav.deals\": \"Deals & Offers\",\n      \"nav.searchPlaceholder\": \"Search for products, brands and more\",\n      \"nav.login\": \"Login\",\n      title: \"MultiMarket\",\n      \"admin.heading.sub\": \"Monitor and manage your marketplace platform\",\n      \"header.heading\": \"Boutique Space\",\n      \"client.header.heading\": \"Customer Area\",\n\n      //Admin Dashboard Body\n      \"admin.heading\": \"Administrator Dashboard\",\n      \"admin.subheading\": \"Monitor and manage your marketplace platform\",\n      \"admin.card.Revenue\": \"Revenue\",\n      \"admin.card.Orders\": \"Orders\",\n      \"admin.card.Shops\": \"Shops\",\n      \"admin.card.Customers\": \"Customers\",\n      \"admin.card.dic\": \"vs previous period\",\n      \"admin.sales.heading\": \"Platform Overview\",\n      \"admin.sales.subheading\": \"Sales Trend\",\n      \"admin.active.heading\": \"Active Stores\",\n      \"admin.active.link\": \"Manage the shop\",\n      \"admin.papul.heading\": \"Popular Products\",\n      \"admin.papul.tag\": \"Products\",\n      \"admin.recent.heading\": \"Recent Users\",\n      \"admin.recent.today\": \"today\",\n      \"admin.recent.link\": \"Manage Users\",\n      \"admin.recent.orders\": \"Recent Orders (All Stores)\",\n      \"admin.recent.orders.link\": \"See all orders\",\n      \"admin.orders.header.order\": \"Order\",\n      \"admin.orders.header.client\": \"Client\",\n      \"admin.orders.header.store\": \"Store\",\n      \"admin.orders.header.status\": \"Status\",\n      \"admin.orders.header.payment\": \"Payment\",\n      \"admin.orders.header.articles\": \"Articles\",\n      \"admin.orders.header.amount\": \"Amount\",\n      \"admin.orders.header.actions\": \"Actions\",\n      \"admin.notifications\": \"Notifications\",\n      \"admin.allnotifications\": \"View all notifications\",\n\n      //Seller Dashboard Body\n      \"seller.dashboard.title\": \"Dashboard Shop Dashboard\",\n      \"seller.dashboard.subtitle\": \"Manage your storefront and performance\",\n      \"seller.dashboard.turnover\": \"Turnover\",\n      \"seller.dashboard.orders\": \"Orders\",\n      \"seller.dashboard.products\": \"Products\",\n      \"seller.dashboard.promotions\": \"Promotions\",\n      \"seller.dashboard.total\": \"Total\",\n      \"seller.dashboard.assets\": \"Assets\",\n      \"seller.dashboard.breakup\": \"Breakup\",\n      \"seller.dashboard.lowstock\": \"Low stock\",\n      \"seller.dashboard.featured\": \"Featured\",\n      \"seller.dashboard.productmanagement\": \"Product Management\",\n      \"seller.dashboard.noproducts\": \"No products found\",\n      \"seller.dashboard.addproduct\": \"Add Product\",\n      \"seller.dashboard.searchproduct\": \"Search for a product\",\n      \"seller.dashboard.addfirstproduct\": \"Add your first product\",\n      \"seller.dashboard.export\": \"Export\",\n      \"seller.dashboard.salestrend\": \"Sales Trend\",\n      \"seller.dashboard.salestrend.place\": \"Sales chart placeholder\",\n      \"seller.dashboard.distributioncategory\": \"Distribution by Category\",\n      \"seller.dashboard.distributioncategory.place\":\n        \"Category distribution chart placeholder\",\n      \"seller.popular.products\": \"Popular Products\",\n      \"seller.popular.results\": \"Results\",\n      \"seller.CurrentDisputes\": \"Recent Customers\",\n      \"seller.CurrentDisputes.cases\": \"cases\",\n      \"seller.CurrentDisputes.history\": \"Dispute History\",\n      \"seller.recent.orders\": \"Recent Orders\",\n      \"seller.recent.orders.view\": \"See All Orders\",\n      \"seller.recent.table.order\": \"Order\",\n      \"seller.recent.table.actions\": \"Actions\",\n      \"seller.recent.table.date\": \"Date\",\n      \"seller.recent.table.status\": \"Status\",\n      \"seller.recent.table.amount\": \"Amount\",\n      \"seller.recent.table.product\": \"Product\",\n\n      \"seller.productManagment.table.actions\": \"Actions\",\n      \"seller.productManagment.table.status\": \"Status\",\n      \"seller.productManagment.table.sku\": \"SKU\",\n      \"seller.productManagment.table.stock\": \"Stock\",\n      \"seller.productManagment.table.price\": \"Price\",\n      \"seller.productManagment.table.productName\": \"Product Name\",\n      \"seller.productManagment.table.image\": \"Image\",\n\n      // Client Dashboard Body\n      \"client.dashboard.title\": \"Customer Dashboard\",\n      \"client.dashboard.subtitle\": \"Manage your orders and purchases\",\n      \"client.dashboard.orders\": \"Orders\",\n      \"client.dashboard.wishlist\": \"Wishlist\",\n      \"client.dashboard.reviews\": \"Reviews\",\n      \"client.dashboard.Loyaltypoints\": \"Loyalty points\",\n      \"client.dashboard.recentorders\": \"Recent Orders\",\n      \"client.dashboard.viewall\": \"View All\",\n      \"client.dashboard.notifications\": \"Notifications\",\n      \"client.dashboard.notifications.item\": \"New Items\",\n      \"client.dashboard.notifications.view\": \"View All\",\n      \"client.dashboard.recommendations\": \"Recommendations\",\n      \"client.dashboard.recommendations.view\": \"See more products\",\n      \"client.dashboard.QuickActions\": \"Quick Actions\",\n      \"client.dashboard.QuickActions.orders\": \"Track My Orders\",\n      \"client.dashboard.QuickActions.wishlist\": \"My Wishlist\",\n      \"client.dashboard.QuickActions.packages\": \"Track my packages\",\n      \"client.dashboard.QuickActions.profile\": \"My Profile\",\n\n      //Admin Sidbar\n\n      \"sidebar.heading\": \"Administration\",\n      \"sidebar.dashboard\": \"Dashboard\",\n\n      \"sidebar.management\": \"Management\",\n      \"sidebar.user\": \"User Management\",\n      \"sidebar.store\": \"Store Management\",\n      \"sidebar.products\": \"Products\",\n      \"sidebar.category\": \"Category Management\",\n      \"sidebar.order\": \"Order Management\",\n      \"sidebar.blacklist\": \"Blacklisted Products\",\n\n      \"sidebar.moderation\": \"Moderation\",\n      \"sidebar.dispute\": \"Dispute Management\",\n      \"sidebar.productReports\": \"Product Reports\",\n      \"sidebar.reportedReviews\": \"Reported Reviews\",\n      \"sidebar.moderationReviews\": \"Moderation Reviews\",\n\n      \"sidebar.transactions\": \"Transactions\",\n      \"sidebar.withdrawal\": \"Withdrawal Management\",\n      \"sidebar.promotions\": \"Promotions Management\",\n      \"sidebar.parcel\": \"Parcel Tracking\",\n      \"sidebar.invoices\": \"Invoices\",\n      \"sidebar.income\": \"Income\",\n      \"sidebar.revenueStore\": \"Revenue by store\",\n\n      \"sidebar.finance\": \"Finance\",\n      \"sidebar.package\": \"Package Management\",\n      \"sidebar.subscription\": \"Subscription Management\",\n\n      \"sidebar.support\": \"Support\",\n      \"sidebar.customerSupport\": \"Customer Support\",\n      \"sidebar.messages\": \"Messages\",\n\n      \"sidebar.configuration\": \"Configuration\",\n      \"sidebar.systemSettings\": \"System Settings\",\n      \"sidebar.shipping\": \"Shipping Management\",\n\n      //Client Sidbar\n\n      \"client.heading\": \"My Space\",\n      \"client.subheading\": \"Client Premium\",\n\n      \"client.points\": \"CebPoints\",\n      \"client.pointsEquivalent\": \"Equivalent to\",\n\n      \"client.dashboard\": \"Dashboard\",\n      \"client.products\": \"Products\",\n      \"client.cart\": \"Shopping Cart\",\n      \"client.orders\": \"Orders\",\n      \"client.wishlist\": \"Wishlist\",\n      \"client.messages\": \"Messages\",\n      \"client.orderTracking\": \"Order Tracking\",\n      \"client.pointsMenu\": \"Points\",\n      \"client.orderHistory\": \"Order History\",\n      \"client.reviews\": \"My Reviews\",\n      \"client.notifications\": \"Notifications\",\n      \"client.statistics\": \"Statistics\",\n      \"client.profile\": \"My Profile\",\n      \"client.support\": \"Customer Support\",\n      \"client.settings\": \"Settings\",\n\n      //Seller Sidbar\n      \"seller.sidebar.dashboard.heading\": \"Seller Dashboard\",\n      \"seller.sidebar.dashboard.subheading\": \"Manage your business\",\n      \"seller.sidebar.dashboard\": \"Dashboard\",\n      \"seller.sidebar.products\": \"Products\",\n      \"seller.sidebar.products.inventory\": \"Inventory\",\n      \"seller.sidebar.products.overview\": \"Overview\",\n      \"seller.sidebar.products.replenishment\": \"Replenishment\",\n      \"seller.sidebar.products.stockalerts\": \"Stock alerts\",\n      \"seller.sidebar.orders\": \"Orders\",\n      \"seller.sidebar.customers\": \"Customers\",\n      \"seller.sidebar.messages\": \"Messages\",\n      \"seller.sidebar.transactions\": \"Transactions\",\n      \"seller.sidebar.revenue\": \"Revenue\",\n      \"seller.sidebar.withdrawals\": \"Withdrawals\",\n      \"seller.sidebar.disputes\": \"Disputes\",\n      \"seller.sidebar.reports\": \"Reports\",\n      \"seller.sidebar.reviews\": \"Reviews\",\n      \"seller.sidebar.shipping\": \"Shipping\",\n      \"seller.sidebar.configuration\": \"Configuration\",\n      \"seller.sidebar.configuration.carriers\": \"Carriers\",\n      \"seller.sidebar.configuration.rates\": \"Rates\",\n      \"seller.sidebar.configuration.areas\": \"Areas\",\n      \"seller.sidebar.promotions\": \"Promotions\",\n      \"seller.sidebar.settings\": \"Settings\",\n      \"seller.sidebar.helpsupport\": \"Help & Support\",\n\n      //Product Management\n      // Product Management Body\n      \"product.heading\": \"Product Management\",\n      \"product.subheading\": \"Manage your product catalog\",\n      \"product.stats.total\": \"Total Products\",\n      \"product.stats.instock\": \"A Stock\",\n      \"product.stats.rupture\": \"Rupture\",\n      \"product.stats.lowstock\": \"Low Stock\",\n      \"product.stats.variants\": \"A Vedette\",\n      \"product.stats.promotions\": \"A Promotions\",\n      \"product.resume\": \"Résumé\",\n      \"product.resume.rating\": \"Average Rating\",\n      \"product.resume.value\": \"Stock Value\",\n      \"product.resume.rate\": \"Stock Rate\",\n      \"product.resume.featured\": \"Featured Products\",\n      \"product.filter.heading\": \"Filters and Search\",\n      \"product.search.placeholder\": \"Search by name, description or SKU...\",\n      \"product.filters.category\": \"All categories\",\n      \"product.filters.status\": \"All statuses\",\n      \"product.filters.foundproduct\": \" product(s) found \",\n      \"product.filters.sort\": \"Most recent\",\n      \"product.actions.add\": \"Add product\",\n      \"product.actions.modify\": \"Modify\",\n      \"product.actions.details\": \"Details\",\n      \"product.filters.image\": \"Image\",\n      \"product.filters.name\": \"Name\",\n      \"product.filters.price\": \"Price\",\n      \"product.filters.stock\": \"Stock\",\n      \"product.filters.sku\": \"SKU\",\n      \"product.filters.Status\": \"Status\",\n      \"product.filters.actions\": \"Actions\",\n      \"product.stock.label\": \"Stock:\",\n      \"product.brand\": \"Brand\",\n      \"product.sort.price.asc\": \"Price: Low to High\",\n      \"product.sort.price.desc\": \"Price: High to Low\",\n      \"product.sort.name\": \"Name\",\n      \"product.sort.recent\": \"Most recent\",\n      \"product.status.active\": \"Active\",\n      \"product.status.inactive\": \"Inactive\",\n      \"product.status.all\": \"All Statuses\",\n\n      //Add Product\n      \"seller.product.add.title\": \"Add a New Product\",\n      \"seller.product.edit.title\": \"Edit Product\",\n      \"seller.product.add.progress\": \"Progression\",\n      \"seller.product.add.note\":\n        \"Complete all required fields to publish your product\",\n      \"seller.product.add.error.productName\": \"Product name is required\",\n      \"seller.product.add.error.description\": \"Description is required\",\n      \"seller.product.add.error.price\": \"Price is required\",\n      \"seller.product.add.error.brand\": \"Brand is required\",\n      \"seller.product.add.tab.information\": \"Information\",\n      \"seller.product.add.tab.specifications\": \"Specifications\",\n      \"seller.product.add.tab.faq\": \"FAQ\",\n      \"seller.product.add.basicInfo\": \"Basic Information\",\n      \"seller.product.add.basicInfo.desc\":\n        \"Essential information about your product\",\n      \"seller.product.add.productName\": \"Product Name\",\n      \"seller.product.add.brand\": \"Brand\",\n      \"seller.product.add.sku\": \"SKU\",\n      \"seller.product.add.price\": \"Price (€)\",\n      \"seller.product.add.originalPrice\": \"Original Price (€)\",\n      \"seller.product.add.stockQuantity\": \"Stock Quantity\",\n      \"seller.product.add.status\": \"Status\",\n      \"seller.product.add.category\": \"Category\",\n      \"seller.product.add.description\": \"Product Description\",\n      \"seller.product.images.title\": \"Product Images\",\n      \"seller.product.images.note\":\n        \"The first image is considered the main image of your product.\",\n      \"seller.product.images.upload\": \"Click to upload\",\n      \"seller.product.images.addUrl\": \"Add Image by URL\",\n      \"seller.product.images.urlPlaceholder\": \"https://example.com/image.jpg\",\n      \"seller.product.images.recommendations.title\":\n        \"Recommendations for images:\",\n      \"seller.product.images.recommendations.format\": \"Image format: PNG, JPG\",\n      \"seller.product.images.recommendations.size\":\n        \"Size: between 500 × 500 and 2000 × 2000 pixels\",\n      \"seller.product.images.recommendations.background\":\n        \"Background: preferably white or neutral\",\n      \"seller.product.images.recommendations.watermark\":\n        \"No watermarks or promotional text\",\n      \"seller.product.images.recommendations.maxSize\": \"Maximum size: 2 MB\",\n      \"seller.product.images.publish\": \"Publish the Product\",\n      \"seller.product.images.cancel\": \"Cancel\",\n      \"seller.product.active\": \"Active\",\n      \"seller.product.inactive\": \"Inactive\",\n\n      //User Management\n      // User Management Body\n      \"user.heading\": \"User Management\",\n      \"user.subheading\": \"Manage user accounts and their permissions\",\n      \"user.stats.total\": \"Total Users\",\n      \"user.stats.pending\": \"Pending Sellers\",\n      \"user.stats.pending.click\": \"Click to view\",\n      \"user.stats.active\": \"Active Users\",\n      \"user.stats.sellers\": \"Sellers\",\n      \"user.stats.hold\": \"On Hold\",\n      \"user.search.placeholder\": \"Search by name or email...\",\n      \"user.filters.status\": \"All statuses\",\n      \"user.filters.roles\": \"All roles\",\n      \"user.list.heading\": \"List of Users\",\n      \"user.list.online\": \"Online - Synchronized Data\",\n      \"user.table.user\": \"User\",\n      \"user.table.role\": \"Role\",\n      \"user.table.status\": \"Status\",\n      \"user.table.sellerstatus\": \"Seller Status\",\n      \"user.table.registration\": \"Registration\",\n      \"user.table.lastlogin\": \"Last login\",\n      \"user.table.actions\": \"Actions\",\n      \"user.actions.createTest\": \"Create test users\",\n      \"user.actions.add\": \"Add a user\",\n      \"user.allstatus\": \"All statuses\",\n      \"user.allroles\": \"All roles\",\n      \"user.allactive\": \"All active\",\n      \"user.allinactive\": \" Inactive\",\n      \"user.allonhold\": \"On Hold\",\n      \"user.allterminated\": \"Terminated\",\n      \"user.allcustomer\": \"Customers\",\n      \"user.allseller\": \"Sellers\",\n      \"user.alladmin\": \"Admins\",\n\n      //Stor Management\n      \"store.heading\": \"Store Management\",\n      \"store.subheading\": \"Manage and monitor all marketplace stores\",\n      \"store.stats.total\": \"Total Stores\",\n      \"store.stats.active\": \"Active Stores\",\n      \"store.stats.hold\": \"On Hold\",\n      \"store.stats.revenue\": \"Revenue\",\n      \"store.actions.add\": \"Add New Store\",\n      \"store.list.heading\": \"Stores List\",\n      \"store.list.code\": \"Store Code\",\n      \"store.list.name\": \"Store\",\n      \"store.list.status\": \"Status\",\n      \"store.list.creation\": \"Creation Date\",\n      \"store.list.subscription\": \"Subscription\",\n      \"store.list.endsubscription\": \"End of Subscription\",\n      \"store.list.messages\": \"Messages Sent\",\n      \"store.list.lastaction\": \"Last Action\",\n      \"store.list.Action\": \"Action\",\n\n      \"store.table.details\": \"Details\",\n      \"store.table.actions\": \"Actions\",\n      \"store.table.sendMessage\": \"Send Message\",\n\n      // Inventory Management\n      \"inventory.title\": \"Inventory Overview\",\n      \"inventory.subtitle\": \"Manage your product inventory\",\n      \"inventory.totalProducts\": \"Total Products\",\n      \"inventory.outOfStock\": \"Out of Stock\",\n      \"inventory.lowStock\": \"Low Stock\",\n      \"inventory.toBeRestocked\": \"To Be Restocked\",\n      \"inventory.stockValue\": \"Stock Value\",\n      \"inventory.export\": \"Export\",\n      \"inventory.search\": \"Search products...\",\n      \"inventory.filter.all\": \"All\",\n      \"inventory.filter.breakup\": \"Breakup\",\n      \"inventory.filter.lowStock\": \"Low stock\",\n      \"inventory.filter.restock\": \"Restock\",\n      \"inventory.table.product\": \"Product\",\n      \"inventory.table.sku\": \"SKU\",\n      \"inventory.table.totalStock\": \"Total Stock\",\n      \"inventory.table.available\": \"Available\",\n      \"inventory.table.status\": \"Status\",\n      \"inventory.table.price\": \"Price\",\n      \"inventory.table.actions\": \"Actions\",\n      \"inventory.table.adjustment\": \"adjustment\",\n      \"inventory.table.noProducts\": \"No products found\",\n\n        \"adjustment.title\": \"Adjust Stock\",\n        \"adjustment.available\": \"Available\",\n        \"adjustment.currentStock\": \"Current stock\",\n        \"adjustment.threshold\": \"Replenishment threshold\",\n\n        \"adjustment.type\": \"Adjustment Type\",\n        \"adjustment.increase\": \"Increase Stock\",\n        \"adjustment.decrease\": \"Decrease Stock\",\n\n        \"adjustment.quantity\": \"Quantity\",\n        \"adjustment.newStock\": \"New Stock\",\n\n        \"adjustment.reason\": \"Reason *\",\n        \"adjustment.selectReason\": \"Select reason\",\n        \"adjustment.purchase\": \"Purchase\",\n        \"adjustment.sale\": \"Sale\",\n        \"adjustment.return\": \"Return\",\n        \"adjustment.damage\": \"Damage\",\n        \"adjustment.loss\": \"Loss\",\n        \"adjustment.correction\": \"Stock Correction\",\n        \"adjustment.other\": \"Other\",\n\n        \"adjustment.notes\": \"Notes (Optional)\",\n        \"adjustment.notesPlaceholder\": \"Additional notes...\",\n\n        \"adjustment.cancel\": \"Cancel\",\n        \"adjustment.confirm\": \"Confirm Adjustment\",\n        \"adjustment.confirm.loading\": \"Adjusting...\",\n      \n\n\n      //Category Management\n      \"categories.heading\": \"Categories\",\n      \"categories.subheading\": \"Manage product categories and their structure\",\n      \"categories.add\": \"Add category\",\n      \"categories.addSuper\": \"Add a supercategory\",\n      \"categories.search\": \"Search categories...\",\n      \"categories.all\": \"All categories\",\n      \"categories.featured\": \"Featured\",\n      \"categories.structure\": \"Structure of Categories\",\n      \"categories.name\": \"Category Name\",\n      \"categories.description\": \"Description\",\n      \"categories.products\": \"Products\",\n      \"categories.subcategories\": \"Subcategories\",\n      \"categories.actions\": \"Actions\",\n      \"categories.noSuperFound\": \"No supercategories found\",\n      \"categories.createFirst\": \"Create your first supercategory to get started\",\n      \"categories.createBtn\": \"Create your first supercategory\",\n      \"categories.features\": \"Features\",\n      \"categories.notfound\": \"No categories found\",\n        \"categories.createfirstcate\": \"Create your first category\",\n        \"categories.craetedesc\": \"Get started by creating your first category\",\n        \"categories.noMach\": \"No categories match your search criteria\",\n      \"categories.addCategory\": \"Add a category\",\n      \"categories.editCategory\": \"Edit category\",\n      \"categories.type\": \"Category Type\",\n      \"categories.type.standard\": \"Standard category\",\n      \"categories.type.standardDesc\": \"A normal category to organize your products\",\n      \"categories.type.super\": \"Super-category\",\n      \"categories.type.superDesc\": \"A top-level category that can group together several standard categories\",\n      \"categories.type.superNote\": \"Supercategories allow you to organize your categories into thematic groups\",\n      \"categories.parent\": \"Parent category\",\n      \"categories.noparent\": \"No parent category\",\n      \"categories.parent.select\": \"Select a parent category to create a hierarchy (optional)\",\n      \"categories.tabs.general\": \"General information\",\n      \"categories.tabs.features\": \"Features\",\n      \"categories.tabs.seo\": \"SEO\",\n      \n      \"categories.slug\": \"Slug\",\n      \"categories.slug.placeholder\": \"category-slug\",\n      \"categories.icon\": \"Icon\",\n      \"categories.image\": \"Image URL\",\n      \"categories.image.placeholder\": \"https://example.com/image.jpg\",\n      \"categories.featuredCategory\": \"Featured Category\",\n      \"categories.active\": \"Active Category\",\n      \"categories.cancel\": \"Cancel\",\n      \"categories.create\": \"Create the category\",\n      \"categories.updating\": \"Updating...\",\n      \"categories.creating\": \"Creating...\",\n      \"categories.update\": \"Update Category\",\n      \"categories.created\": \"Create the category\",\n\n\n      \"categories.features.title\": \"Product Features\",\n      \"categories.features.add\": \"Add a feature\",\n      \"categories.features.emptyTitle\": \"No features added yet\",\n      \"categories.features.emptyDesc\": \"Click \\\"Add a feature\\\" to start\",\n      \"categories.features.feature\": \"Feature\",\n      \"categories.features.name\": \"Name\",\n      \"categories.features.type\": \"Type\",\n      \"categories.features.value\": \"Value\",\n      \"categories.features.mandatory\": \"Mandatory\",\n      \"categories.features.selectType\": \"Select type\",\n      \"categories.features.types.text\": \"Text\",\n      \"categories.features.types.number\": \"Number\",\n      \"categories.features.types.boolean\": \"Boolean\",\n      \"categories.features.types.select\": \"Select\",\n      \"categories.features.types.multiselect\": \"Multi-select\",\n      \"categories.features.types.color\": \"Color\",\n      \"categories.features.types.url\": \"URL\",\n      \"categories.features.types.true\": \"True\",\n      \"categories.features.types.false\": \"False\",\n\n\n      //Add Super Category\n      \"categories.addSuperCategory\": \"Add a supercategory\",\n      \"categories.editSuperCategory\": \"Edit Supercategory\",\n        \"categories.generalInfo\": \"General information\",\n        \"categories.metadata\": \"Metadata\",\n        \"categories.seo\": \"SEO Configuration\",\n      \"categories.tabs.seotitle\": \"SEO Title\",\n      \"categories.tabs.seodesc\": \"SEO Description\",\n      \"categories.tabs.seokeywords\": \"SEO Keywords\",\n        \"categories.preview\": \"Preview\",\n\n        \"categories.superPreview\": \"Supercategory Preview\",\n        \"categories.previewMode\": \"Preview Mode\",\n        \"categories.previewNote\": \"Configure the general information to see the preview\",\n        \"categories.previewRequirement\": \"Fill in at least the French or English name to get started\",\n\n        \"categories.superMetadata\": \"Supercategory Metadata\",\n        \"categories.selectMerge\": \"Select categories to merge\",\n        \"categories.seeTemplates\": \"See all templates\",\n        \"categories.listProperties\": \"List of properties\",\n        \"categories.byGroups\": \"By groups\",\n        \"categories.addMetadata\": \"Add metadata\",\n        \"categories.metadataNote\": \"Metadata allows you to add custom properties to your supercategory to configure its specific display or behavior.\",\n        \"categories.directionsUse\": \"Directions for use\",\n        \"categories.featuredCategoryNote\": \"This super-category will be highlighted on the homepage\",\n        \"categories.visibleCategory\": \"Visible category\",\n        \"categories.visibleCategoryNote\": \"This supercategory will be visible to users\",\n\n        \"categories.nameFR\": \"Name in French\",\n        \"categories.nameEN\": \"Name in English\",\n        \"categories.nameAR\": \"Name in Arabic\",\n        \"categories.descFR\": \"Description in French\",\n        \"categories.descEN\": \"Description in English\",\n        \"categories.descAR\": \"Description in Arabic\",\n        \"categories.supericon\": \"Icon name (eg: car, home, etc.)\",\n        \"categories.mainImage\": \"Main image\",\n        \"categories.mainImageNote\": \"Main image URL for this supercategory\",\n        \"categories.superadd\": \"Add\",\n      \"categories.superupdate\": \"Update\",\n      \"categories.noTemp\": \"No templates applied yet\",\n      \"categories.choosTemp\": \"Choose templates to see grouped features\",\n      \"categories.apply\": \"Apply\",\n      \"categories.selected\": \"{{count}} categories selected\",\n      \"categories.iconNot\": \"Enter the name of a Lucid icon (see documentation)\",\n\n      \"categories.displayStyle\": \"Use display_style to set the display ('grid', 'list', 'mosaic')\",\n      \"categories.bannerUrl\": \"Add banner_url for a custom banner\",\n      \"categories.featuredBrands\": \"Set featured_brands to highlight specific brands\",\n      \"categories.enableCompare\": \"Use enable_compare (true/false) for product comparison\",\n      \"categories.customFilters\": \"Add custom_filters for filters specific to this supercategory\",\n      \"categories.layoutType\": \"Use layout_type to change the arrangement of products\",\n      \"categories.searchBoostTerms\": \"Add search_boost_terms to improve SEO\",\n\n      // home TrendingCategories\n      \"index.popularCategories\": \"Popular Categories\",\n       \"categories.medical\": \"Medical\",\n        \"categories.beauty\": \"Beauty\",\n        \"categories.wellness\": \"Wellness\",\n        \"categories.plumber\": \"Plumber\",\n        \"categories.electrical\": \"Electrical\",\n        \"categories.tradesmen\": \"Tradesmen\",\n        \"categories.cleaning\": \"Cleaning\",\n        \"categories.tutors\": \"Tutors\",\n        \"categories.auto\": \"Auto\",\n        \"categories.insurance\": \"Insurance\",\n        \"categories.mortgage\": \"Mortgage\",\n        \"categories.kitchen\": \"Kitchen\",\n        \"categories.bathroom\": \"Bathroom\",\n\n      // AdvertisementBanner\n      \"index.discoverNewTech\": \"Discover the new technology\",\n      \"index.titanium\": \"Titanium\",\n      \"index.newCamera\": \"A new camera system\",\n      \"index.allDayBattery\": \"All-day battery life\",\n      \"index.buyNow\": \"Buy Now\",\n      \"index.learnMore\": \"Learn More\",\n\n      //Home BestSellers\n      \"common.seeAll\": \"See All\",\n      \"common.flashSale\": \"Flash Sale\",\n      \"common.endsSoon\": \"Ends Soon\",\n      \"common.wirelessHeadset\": \"Wireless Headset\",\n      \"common.claimed\": \"claimed\",\n      \"bestSellers.monthlyTitle\": \"Best Seller of the Month\",\n      \"bestSellers.weeklySellers\": \"Best Seller of the Week\",\n      \"bestSellers.weeklyProducts\": \"Top Selling Products of the Week\",\n      \"bestSellers.customerFavorites\": \"Customer Favorites\",\n\n      // HomeCarAdvertisement\n      \"index.luxuryAutomobiles\": \"Luxury Automobiles\",\n      \"index.electricLuxurySedanDesc\": \"Electric luxury sedan with cutting-edge design and performance.\",\n      \"index.discoverVehicle\": \"Discover this vehicle\",\n      \"index.similarVehicles\": \"Similar Vehicles\",\n      \"index.electricSedanBMW\": \"Electric sedan from BMW with premium comfort.\",\n      \"index.sportbackElectric\": \"Sportback electric performance car\",\n      \"index.electricSedanTesla\": \"Electric sedan from Tesla with unmatched range.\",\n      \"index.sportElectric\": \"High-performance electric sports car\",\n      \"index.viewAllModels\": \"View All Models\",\n\n      //home FeaturesGrid\n      \"index.maximizeSales\": \"Maximize Your Sales\",\n      \"index.leverageTools\": \"Leverage powerful tools to grow your business.\",\n      \"index.exploreTools\": \"Explore Tools\",\n      \"index.discoverUniqueProducts\": \"Discover Unique Products\",\n      \"index.browseThousands\": \"Browse thousands of categories and items.\",\n      \"index.startBuying\": \"Start Buying\",\n\n      // home InfoBanner\n      \"footer.fastDelivery\": \"Fast Delivery\",\n        \"footer.onOrdersOver\": \"On orders over a certain amount\",\n        \"footer.securePayments\": \"Secure Payments\",\n        \"footer.protectedPayments\": \"Protected and encrypted transactions\",\n        \"footer.moneyBackGuarantee\": \"Money Back Guarantee\",\n        \"footer.returnPolicy\": \"Easy return policy\",\n\n      //home RealEstateAd\n      \"realEstate.title\": \"Featured Real Estate\",\n\n      //SellerBuyerTabs\n      \"index.becomeSeller\": \"Become a Seller\",\n      \"index.buyOnCebleu\": \"Buy on Cebleu\",\n      \"index.developBusiness\": \"Develop Your Business\",\n      \"index.expandReach\": \"Expand your reach and grow your sales.\",\n      \"index.createShop\": \"Create Your Shop\",\n      \"index.buildOnlinePresence\": \"Build your online presence quickly.\",\n      \"index.showcaseProducts\": \"Showcase Your Products\",\n      \"index.uploadPrice\": \"Upload products and set prices easily.\",\n      \"index.analyzePerformance\": \"Analyze Performance\",\n      \"index.optimizeSelling\": \"Optimize your selling strategy.\",\n      \"index.startSelling\": \"Start Selling\",\n      \"index.ultimateShopping\": \"The Ultimate Shopping Experience\",\n      \"index.discoverQuality\": \"Discover quality products from trusted sellers.\",\n      \"index.totalProtection\": \"Total Buyer Protection\",\n      \"index.secureTransactions\": \"Secure and reliable transactions.\",\n      \"index.fastShipping\": \"Fast Shipping\",\n      \"index.rapidDelivery\": \"Rapid delivery to your doorstep.\",\n      \"index.hassleReturns\": \"Hassle-free Returns\",\n      \"index.simpleReturns\": \"Simple return process with full support.\",\n      \"index.shopNow\": \"Shop Now\",\n\n      //home TechAdvertisement\n      \"common.flightBooking\": \"Flight Booking\",\n        \"common.topDestinations\": \"Top Destinations\",\n        \"common.limitedTimeOffer\": \"Limited Time Offer\",\n        \"common.bookNow\": \"Book Now\",\n\n      // home HeroContent copy\n\n      \"popSearches.shopConfidence\": \"Shop with confidence\",\n      \"popSearches.secureTransactions\": \"Enjoy secure and reliable transactions\",\n      \"common.startShopping\": \"Start Shopping\",\n      \"common.secureTransactions\": \"Secure Transactions\",\n\n      \"popSearches.exclusiveDeals\": \"Exclusive Deals\",\n      \"popSearches.accessSpecial\": \"Access special discounts and offers  available only to our members\",\n      \"common.viewDeals\": \"View Deals\",\n\n      \"popSearches.goldLevel\": \"Gold Level\",\n      \"popSearches.premiumServices\": \"Premium services for top customers\",\n      \"popSearches.fastDelivery\": \"Priority fast delivery\",\n      \"popSearches.vipSupport\": \"VIP customer support\",\n      \"popSearches.toolsServices\": \"Tools & Services\",\n      \"popSearches.promoCreation\": \"Promotion creation tools\",\n      \"popSearches.advancedAnalytics\": \"Advanced analytics dashboard\",\n      \"popSearches.internalAdvertising\": \"Internal advertising solutions\",\n      \"popSearches.exclusiveTraining\": \"Exclusive training programs\",\n\n      \"popSearches.helpCenter\": \"Help Center\",\n      \"popSearches.customerCare\": \"24/7 Customer care and assistance\",\n      \"popSearches.easyReturn\": \"Easy Returns\",\n      \"popSearches.quickRefund\": \"Quick refunds on returned items\",\n      \"popSearches.learnMore\": \"Learn More\",\n      \"popSearches.sellOnCebleu\": \"Sell on Cebleu\",\n      \"popSearches.millionsVisitors\": \"Millions of visitors every month\",\n\n\n      //home ImageBanner\n       \"common.findEverything\": \"Find everything you need\",\n        \"common.shopDescription\": \"From electronics to fashion, discover a wide range of products tailored to your lifestyle.\",\n        \"common.exploreMarketplace\": \"Explore Marketplace\",\n\n\n      // home ProductCard\n      \"products.addedToCart\": \"Added to Cart\",\n      \"products.addedToWishlist\": \"Added to Wishlist\",\n      \"products.shareOnInstagram\": \"Share on Instagram\",\n      \"products.instagramShareDescription\": \"Instagram does not support direct sharing.\",\n      \"products.shared\": \"Shared\",\n      \"products.sharedOn\": \"Shared on\",\n      \"products.reviews\": \"Reviews\",\n      \"products.addToCart\": \"Add to Cart\",\n      \"products.viewingShop\": \"Viewing Shop\",\n      \"products.viewShopBtn\": \"View Shop\",\n\n      //home ProductDetails\n      \"products.color\": \"Color\",\n      \"products.quantity\": \"Quantity\",\n      \"products.deliveryNote\": \"Delivery details may vary.\",\n      \"products.inStock\": \"In Stock\",\n      \"products.viewShop\": \"View Shop\",\n      \"products.description\": \"Description\",\n      \"products.specifications\": \"Specifications\",\n      \"products.questionsAnswers\": \"Questions & Answers\",\n      \"products.productDescription\": \"Product Description\",\n      \"products.technicalDetails\": \"Technical Details\",\n      \"products.brand\": \"Brand\",\n      \"products.category\": \"Category\",\n      \"products.model\": \"Model\",\n      \"products.warranty\": \"Warranty\",\n      \"products.months\": \"Months\",\n      \"products.weight\": \"Weight\",\n\n      //  home ProductFilter\n      \"products.rating\": \"Rating\",\n      \"products.sortBy\": \"Sort By\",\n      \"products.availability\": \"Availability\",\n      \"products.freeShipping\": \"Free Shipping\",\n      \"products.deliveryDay\": \"Delivery Day\",\n      \"products.refreshRate\": \"Refresh Rate\",\n      \"products.price\": \"Price\",\n      \"products.promotions\": \"Promotions\",\n      \"products.screenSize\": \"Screen Size\",\n      \"products.resolution\": \"Resolution\",\n      \"products.apply\": \"Apply\",\n\n      //home ProductQA\n      \"products.questions\": \"Questions\",\n      \"products.postedBy\": \"posted by\",\n      \"products.community\": \"community\",\n      \"products.with\": \"with\",\n      \"products.havingResponse\": \"having a response\",\n      \"products.sortQuestions\": \"Sort Questions\",\n      \"products.mostUseful\": \"Most Useful\",\n      \"products.mostRecent\": \"Most Recent\",\n      \"products.withAnswers\": \"With Answers\",\n      \"products.withoutAnswers\": \"Without Answers\",\n      \"products.askQuestion\": \"Ask a Question\",\n      \"products.searchQuestion\": \"Search a question...\",\n      \"products.mostUsefulQuestion\": \"Most Useful Question\",\n      \"products.answers\": \"Answers\",\n      \"products.questionPostedBy\": \"Question posted by\",\n      \"products.on\": \"on\",\n      \"products.report\": \"Report\",\n      \"products.mostUsefulAnswer\": \"Most Useful Answer\",\n      \"products.answerPostedBy\": \"Answer posted by\",\n      \"products.viewAllAnswers\": \"View All Answers\",\n      \"products.viewLessInfo\": \"View Less Information\",\n      \"products.answerQuestion\": \"Answer this Question\",\n      //home ProductShowcase\n      \"products.featuredProducts\": \"Featured Products\",\n      \"products.discoverUnique\": \"Discover unique items from our collection.\",\n      \"products.filters\": \"Filters\",\n      \"products.filtersApplied\": \"filters applied\",\n      \"products.exploreMore\": \"Explore More\",\n       \"categories.electronics\": \"Electronics\",\n        \"categories.smartphones\": \"Smartphones\",\n        \"categories.homeGarden\": \"Home & Garden\",\n        \"categories.fashion\": \"Fashion\",\n        \"categories.groceries\": \"Groceries\",\n        \"categories.allProducts\": \"All Products\",\n      // home CodingPromotion\n      \"products.learnCoding\": \"Learn Coding\",\n      \"products.freeCodingCourse\": \"Get a free coding course today!\",\n      \"products.learnMore\": \"Learn More\",\n      \"products.createdForTaste\": \"Created for taste\",\n      \"products.sponsored\": \"Sponsored\",\n\n      //home ContinueShopping\n      \"products.continueShoppingTitle\": \"Continue Shopping\",\n      \"products.viewMore\": \"View More\",\n\n      //home FeaturedPromotionsSection\n      \"products.featuredPromotions\": \"Featured Promotions\",\n      \"products.specialOffers\": \"Special Offers just for you\",\n\n      //home products.learnMore\n      \"products.featuredSports\": \"Featured Sports\",\n\n      // home GiftIdeas\n      \"products.giftIdeas\": \"Gift Ideas\",  \n      // home ProductGroupCard\n      \"products.seeAllButton\": \"See All\",\n      //home ProductGroupsSection\n      \"products.shopByCategory\": \"Shop by Category\",\n      // home ProductSuggestions\n      \"products.youMayAlsoLike\": \"You may also like\",\n      //home ShoppingGridSection\n      \"products.resumeShoppingWhere\": \"Resume where you left off\",\n      //home TrendingItems\n      \"products.sale\": \"Sale\",\n      //home filters\n      \"products.receiveTomorrow\": \"Receive by Tomorrow\",\n      \"products.expressDelivery\": \"Express Delivery\",\n      \"products.andMore\": \"and more\",\n      \"products.freeShippingFilter\": \"Free Shipping\",\n      \"products.freeShippingDestination\": \"Available to selected destinations\",\n      \"products.sortByPopularity\": \"Sort by Popularity\",\n      \"products.sortNewest\": \"Newest First\",\n      \"products.sortHighToLow\": \"Price: High to Low\",\n      \"products.sortLowToHigh\": \"Price: Low to High\",\n      //productGroupsData\n      \"products.resumeShopping\": \"Resume Shopping\",\n        \"products.miniRefrigerators\": \"Mini Refrigerators\",\n        \"products.miniRefrigerator\": \"Mini Refrigerator\",\n        \"products.smartphones\": \"Smartphones\",\n        \"products.officeChairs\": \"Office Chairs\",\n        \"products.books\": \"Books\",\n        \"products.flashSales\": \"Flash Sales\",\n        \"products.gamingMonitor\": \"Gaming Monitor\",\n        \"products.gamingDesk\": \"Gaming Desk\",\n        \"products.gamingMouse\": \"Gaming Mouse\",\n        \"products.gamingHeadphones\": \"Gaming Headphones\",\n        \"products.categoriesToExplore\": \"Categories to Explore\",\n        \"products.motherboards\": \"Motherboards\",\n        \"products.ram\": \"RAM\",\n        \"products.internalStorage\": \"Internal Storage\",\n        \"products.offersFor\": \"offers for\",\n        \"products.clients\": \"clients\",\n        \"products.viewConditions\": \"View Conditions\",\n        \"products.anniversary\": \"Anniversary\",\n        \"products.frenchShowcase\": \"French Showcase\",\n        \"products.blackLeggings\": \"Black Leggings\",\n        \"products.blackBackpack\": \"Black Backpack\",\n        \"products.mathsBook\": \"Maths Book\",\n        \"products.bluetoothSpeaker\": \"Bluetooth Speaker\",\n        \"products.childrenBook\": \"Children's Book\",\n        \"products.cordlessVacuum\": \"Cordless Vacuum\",\n        \"products.smartWatch\": \"Smart Watch\",\n        \"products.wirelessEarbuds\": \"Wireless Earbuds\",\n        \"products.yogaMat\": \"Yoga Mat\",\n      // home categoryData\n      \"categories.phoneTablets\": \"Phones & Tablets\",\n        \"categories.tvTech\": \"TV & Tech\",\n        \"categories.computers\": \"Computers\",\n        \"categories.homeKitchenOffice\": \"Home, Kitchen & Office\",\n        \"categories.appliances\": \"Appliances\",\n        \"categories.clothingShoes\": \"Clothing & Shoes\",\n        \"categories.healthBeauty\": \"Health & Beauty\",\n        \"categories.videoGamesConsoles\": \"Video Games & Consoles\",\n        \"categories.diy\": \"DIY\",\n        \"categories.sportsLeisure\": \"Sports & Leisure\",\n        \"categories.babyToys\": \"Baby & Toys\",\n        \"categories.bricolage\": \"Bricolage\",\n        \"categories.hardware\": \"Hardware\",\n        \"categories.office\": \"Office\",\n        \"categories.furniture\": \"Furniture\",\n        \"categories.stationery\": \"Stationery\",\n        \"categories.housekeeping\": \"Housekeeping\",\n        \"categories.pool\": \"Pool\",\n        \"categories.heating\": \"Heating\",\n        \"categories.luggage\": \"Luggage\",\n        \"categories.otherCategories.short\": \"Other Categories\",\n        \"categories.items\": \"items\",\n\n        \"common.categories.books\": \"Books\",\n        \"common.categories.music\": \"Music\",\n        \"common.categories.automotive\": \"Automotive\",\n        \"common.categories.gifts\": \"Gifts\",\n        \"common.categories.travel\": \"Travel\",\n        \"common.categories.coffee\": \"Coffee\",\n        \"common.categories.kitchenware\": \"Kitchenware\",\n        \"common.categories.movies\": \"Movies\",\n        \"common.categories.outdoors\": \"Outdoors\",\n        \"common.categories.jewelry\": \"Jewelry\",\n        \"common.categories.business\": \"Business\",\n        \"common.categories.art\": \"Art\",\n        \"common.categories.photography\": \"Photography\",\n        \"common.categories.finance.short\": \"Finance\",\n        \"common.categories.printing.short\": \"Printing\",\n        \"common.categories.bakery.short\": \"Bakery\",\n        \"common.categories.science.short\": \"Science\",\n        \"common.categories.accessories.short\": \"Accessories\",\n        \"common.categories.events.short\": \"Events\",\n        \"common.categories.watches.short\": \"Watches\",\n      // home VendorCard\n       \"vendors.rating\": \"Rating\",\n        \"vendors.products\": \"Products\",\n        \"vendors.visitStore\": \"Visit Store\",\n\n      //shopping cart\n      \"cart.title\": \"Shopping Cart\",\n        \"cart.description\": \"Review your items and proceed to checkout\",\n        \"cart.empty.title\": \"Your cart is empty\",\n        \"cart.empty.subtitle\": \"Add some products to get started!\",\n        \"cart.empty.button\": \"Continue Shopping\",\n        \"cart.subtotal\": \"Subtotal\",\n        \"cart.subtotal.items\": \"Subtotal ({count} items)\",\n        \"cart.shipping\": \"Shipping\",\n        \"cart.shipping.free\": \"Free\",\n        \"cart.total\": \"Total\",\n        \"cart.onlyLeft\": \"Only {count} left\",\n        \"cart.checkout\": \"Proceed to Checkout\",\n\n      //Wishlist\n      \"common.success\": \"Success\",\n        \"common.error\": \"Error\",\n\n        \"auth.signInRequired\": \"Please Sign In\",\n        \"wishlist.signInMessage\": \"You need to sign in to view your wishlist.\",\n\n        \"wishlist.title\": \"My wish list\",\n        \"wishlist.productsInList\": \"{{count}} product(s) in your list\",\n        \"wishlist.emptyTitle\": \"Your wishlist is empty\",\n        \"wishlist.emptyMessage\": \"Start adding products you love to your wishlist!\",\n        \"wishlist.browseProducts\": \"Browse Products\",\n        \"wishlist.messages.removed\": \"Product removed from wishlist\",\n        \"wishlist.messages.addedToCart\": \"Product added to cart\",\n        \"wishlist.errors.fetch\": \"Failed to fetch wishlist\",\n        \"wishlist.errors.remove\": \"Failed to remove product from wishlist\",\n        \"wishlist.errors.addToCart\": \"Failed to add product to cart\",\n\n        \"product.description\": \"Description\",\n        \"product.reviews\": \"Reviews\",\n        \"product.questions\": \"Questions/Answers\",\n        \"product.noDescription\": \"No description available.\",\n        \"product.askQuestion\": \"Ask a question\",\n        \"product.askPlaceholder\": \"Ask your question about this product...\",\n        \"product.submitQuestion\": \"Submit Question\",\n\n        \n      \n\n      // Language switcher\n      \"language.english\": \"English\",\n      \"language.french\": \"Français\",\n      \"language.arabic\": \"العربية\",\n\n      // Hero section\n      \"hero.title\": \"Discover Amazing Products from Global Vendors\",\n      \"hero.subtitle\":\n        \"Shop from thousands of trusted sellers worldwide. Multi-language support, secure payments, and fast shipping.\",\n      \"hero.startShopping\": \"Start Shopping\",\n      \"hero.becomeSeller\": \"Become a Seller\",\n\n      // Categories\n      \"categories.title\": \"Shop by Category\",\n      \"categories.viewAll\": \"View All Categories\",\n      \"category.electronics\": \"Electronics\",\n      \"category.fashion\": \"Fashion\",\n      \"category.home\": \"Home & Garden\",\n      \"category.gaming\": \"Gaming\",\n      \"category.books\": \"Books\",\n      \"category.sports\": \"Sports\",\n      \"category.automotive\": \"Automotive\",\n      \"category.more\": \"More\",\n\n      // Products\n      \"products.title\": \"Featured Products\",\n      \"products.subtitle\": \"Discover the best deals from our trusted vendors\",\n      \"products.sortBy\": \"Sort by:\",\n      \"products.featured\": \"Featured\",\n      \"products.priceLowHigh\": \"Price: Low to High\",\n      \"products.priceHighLow\": \"Price: High to Low\",\n      \"products.newest\": \"Newest\",\n      \"products.bestRating\": \"Best Rating\",\n      \"products.addToCart\": \"Add to Cart\",\n      \"products.loadMore\": \"Load More Products\",\n      \"products.fastShipping\": \"Fast Shipping\",\n      \"products.freeShipping\": \"Free Shipping\",\n      \"products.warranty\": \"2Y Warranty\",\n      \"products.bestSeller\": \"Best Seller\",\n\n      // Vendors\n      \"vendors.title\": \"Featured Vendors\",\n      \"vendors.subtitle\":\n        \"Discover amazing products from our trusted seller community worldwide\",\n      \"vendors.rating\": \"Rating\",\n      \"vendors.products\": \"Products\",\n      \"vendors.visitStore\": \"Visit Store\",\n\n      // Dashboards\n      \"dashboard.customer.title\": \"Customer Dashboard\",\n      \"dashboard.customer.subtitle\": \"Shop, track orders, manage wishlist\",\n      \"dashboard.customer.orders\": \"Orders\",\n      \"dashboard.customer.wishlist\": \"Wishlist\",\n      \"dashboard.customer.reviews\": \"Reviews\",\n      \"dashboard.customer.demo\": \"View Customer Demo\",\n\n      \"dashboard.seller.title\": \"Seller Dashboard\",\n      \"dashboard.seller.subtitle\": \"Manage products, track sales, analytics\",\n      \"dashboard.seller.products\": \"Products\",\n      \"dashboard.seller.sales\": \"Sales\",\n      \"dashboard.seller.customers\": \"Customers\",\n      \"dashboard.seller.demo\": \"View Seller Demo\",\n\n      \"dashboard.admin.title\": \"Admin Dashboard\",\n      \"dashboard.admin.subtitle\": \"Full platform control & analytics\",\n      \"dashboard.admin.totalUsers\": \"Total Users\",\n      \"dashboard.admin.vendors\": \"Vendors\",\n      \"dashboard.admin.revenue\": \"Revenue\",\n      \"dashboard.admin.demo\": \"View Admin Demo\",\n\n      // Dashboard section\n      \"dashboards.title\": \"Powerful Dashboards for Every Role\",\n      \"dashboards.subtitle\":\n        \"Whether you're a customer, seller, or admin, our platform provides intuitive tools to manage your marketplace experience\",\n\n      // Authentication\n      \"auth.login\": \"Login\",\n      \"auth.register\": \"Register\",\n      \"auth.welcome\": \"Welcome Back\",\n      \"auth.createAccount\": \"Create Account\",\n      \"auth.email\": \"Email\",\n      \"auth.username\": \"Username\",\n      \"auth.password\": \"Password\",\n      \"auth.firstName\": \"First Name\",\n      \"auth.lastName\": \"Last Name\",\n      \"auth.role\": \"Role\",\n      \"auth.client\": \"Customer\",\n      \"auth.seller\": \"Seller\",\n      \"auth.admin\": \"Admin\",\n      \"auth.loginButton\": \"Sign In\",\n      \"auth.registerButton\": \"Create Account\",\n      \"auth.switchToRegister\": \"Don't have an account? Sign up\",\n      \"auth.switchToLogin\": \"Already have an account? Sign in\",\n      \"auth.forgotPassword\": \"Forgot Password?\",\n\n      // Footer\n      \"footer.description\":\n        \"The world's leading multi-vendor marketplace connecting buyers and sellers globally. Shop from thousands of trusted vendors with multi-language support.\",\n      \"footer.quickLinks\": \"Quick Links\",\n      \"footer.aboutUs\": \"About Us\",\n      \"footer.howItWorks\": \"How It Works\",\n      \"footer.becomeSeller\": \"Become a Seller\",\n      \"footer.careers\": \"Careers\",\n      \"footer.blog\": \"Blog\",\n      \"footer.customerService\": \"Customer Service\",\n      \"footer.helpCenter\": \"Help Center\",\n      \"footer.contactUs\": \"Contact Us\",\n      \"footer.shippingInfo\": \"Shipping Info\",\n      \"footer.returns\": \"Returns\",\n      \"footer.trackOrder\": \"Track Order\",\n      \"footer.legal\": \"Legal\",\n      \"footer.privacyPolicy\": \"Privacy Policy\",\n      \"footer.termsOfService\": \"Terms of Service\",\n      \"footer.cookiePolicy\": \"Cookie Policy\",\n      \"footer.gdpr\": \"GDPR\",\n      \"footer.compliance\": \"Compliance\",\n      \"footer.copyright\": \"© 2024 CEBLEU. All rights reserved.\",\n      \"footer.languages\": \"Available in 3+ languages\",\n      \"footer.secure\": \"Secure & Trusted\",\n\n      // Common\n      \"common.loading\": \"Loading...\",\n      \"common.error\": \"Error\",\n      \"common.success\": \"Success\",\n      \"common.cancel\": \"Cancel\",\n      \"common.save\": \"Save\",\n      \"common.edit\": \"Edit\",\n      \"common.delete\": \"Delete\",\n      \"common.view\": \"View\",\n      \"common.close\": \"Close\",\n      \"common.search\": \"Search\",\n      \"common.filter\": \"Filter\",\n      \"common.sort\": \"Sort\",\n      \"common.more\": \"More\",\n      \"common.less\": \"Less\",\n      \"common.all\": \"All\",\n      \"common.none\": \"None\",\n      \"common.back\": \"Back\",\n      \"common.next\": \"Next\",\n      \"common.previous\": \"Previous\",\n      \"common.confirm\": \"Confirm\",\n      \"common.clear\": \"Clear search\",\n      \"common.resetFilters\": \"Reset filters\",\n\n      // Order details\n      \"order.customerInformation\": \"Customer Information\",\n      \"order.productsOrdered\": \"Products ordered\",\n      \"order.delivery\": \"Delivery\",\n      \"order.financialSummary\": \"Financial Summary\",\n      \"order.clientId\": \"Client #\",\n      \"order.orderPlacedOn\": \"Order placed on:\",\n      \"order.deliveryAddress\": \"Delivery address\",\n      \"order.method\": \"Method:\",\n      \"order.estimatedTime\": \"Estimated time:\",\n      \"order.status\": \"Status:\",\n      \"order.shipped\": \"Shipped\",\n      \"order.freeDelivery\": \"Free delivery\",\n      \"order.workingDays\": \"working days\",\n      \"order.subtotal\": \"Subtotal\",\n      \"order.items\": \"items\",\n      \"order.deliveryCosts\": \"Delivery costs:\",\n      \"order.vat\": \"VAT\",\n      \"order.free\": \"Free\",\n      \"order.total\": \"Total:\",\n      \"order.payment\": \"Payment:\",\n      \"order.paid\": \"Paid\",\n      \"order.viewDetails\": \"View Details\",\n      \"order.approve\": \"Approve\",\n      \"order.reject\": \"Reject\",\n      \"order.seeAllOrders\": \"See all orders\",\n      \"order.articles\": \"articles\",\n    },\n\n    inventory: {\n      heading: \"Inventory\",\n      title: \"Inventory management\",\n      subheading: \"Manage and track your stock items\",\n\n      filters: {\n        status: \"Status\",\n        category: \"Category\",\n        availability: \"Availability\",\n      },\n\n      table: {\n        product: \"Product\",\n        sku: \"SKU\",\n        stock: \"Stock\",\n        price: \"Price\",\n        category: \"Category\",\n        status: \"Status\",\n        lastUpdated: \"Last Updated\",\n        actions: \"Actions\",\n      },\n\n      actions: {\n        add: \"Add Product\",\n        edit: \"Edit\",\n        delete: \"Delete\",\n        view: \"View Details\",\n      },\n\n      messages: {\n        noData: \"No inventory items found\",\n        loading: \"Loading inventory...\",\n        error: \"Failed to load inventory\",\n      },\n    },\n  },\n  fr: {\n    common: {\n      // Header\n      \"search.placeholder\": \"Rechercher des produits, catégories, vendeurs...\",\n      \"nav.cart\": \"Panier\",\n      \"nav.profile\": \"Profil\",\n      \"nav.searchPlaceholder\": \"Rechercher des produits, des marques et plus\",\n      \"nav.deals\": \"Offres et promotions\",\n      \"nav.logout\": \"Déconnexion\",\n      \"nav.login\": \"Connexion\",\n      title: \"Multimarché\",\n      \"admin.heading.sub\":\n        \"Gérez la plateforme et supervisez toutes les opérations\",\n      \"header.heading\": \"Espace Boutique\",\n      \"client.header.heading\": \"Espace Client\",\n\n      //Admin Dashboard Body\n      \"admin.heading\": \"Tableau de Bord Administrateur\",\n      \"admin.subheading\":\n        \"Gérez la plateforme et supervisez toutes les opérations\",\n      \"admin.card.Revenue\": \"Chiffre d'affaires\",\n      \"admin.card.Orders\": \"Commandes\",\n      \"admin.card.Shops\": \"Boutiques\",\n      \"admin.card.Customers\": \"Clients\",\n      \"admin.card.dic\": \"vs période précédente\",\n      \"admin.sales.heading\": \"Aperçu de la plateforme\",\n      \"admin.sales.subheading\": \"Tendance des Ventes\",\n      \"admin.active.heading\": \"Boutiques Actives\",\n      \"admin.active.link\": \"Gérer les boutiques\",\n      \"admin.papul.heading\": \"Produits populaires\",\n      \"admin.papul.tag\": \"Produits\",\n      \"admin.recent.heading\": \"Utilisateurs Récents\",\n      \"admin.recent.link\": \"Gérer les utilisateurs\",\n      \"admin.recent.orders\": \"Commandes récentes (toutes les boutiques)\",\n      \"admin.recent.today\": \"aujourd'hui\",\n      \"admin.recent.orders.link\": \"Voir toutes les commandes\",\n      \"admin.orders.header.order\": \"Commande\",\n      \"admin.orders.header.client\": \"Client\",\n      \"admin.orders.header.store\": \"Boutique\",\n      \"admin.orders.header.status\": \"Statut\",\n      \"admin.orders.header.payment\": \"Paiement\",\n      \"admin.orders.header.articles\": \"Articles\",\n      \"admin.orders.header.amount\": \"Montant\",\n      \"admin.orders.header.actions\": \"Actions\",\n\n      //Seller Dashboard Body\n      \"seller.dashboard.title\": \"Tableau de bord de la boutique\",\n      \"seller.dashboard.subtitle\": \"Gérez votre vitrine et vos performances\",\n      \"seller.dashboard.turnover\": \"Chiffre d'affaires\",\n      \"seller.dashboard.orders\": \"Commandes\",\n      \"seller.dashboard.products\": \"Produits\",\n      \"seller.dashboard.promotions\": \"Promotions\",\n      \"seller.dashboard.total\": \"Total\",\n      \"seller.dashboard.assets\": \"Actifs\",\n      \"seller.dashboard.breakup\": \"Répartition\",\n      \"seller.dashboard.lowstock\": \"Stock faible\",\n      \"seller.dashboard.featured\": \"En vedette\",\n      \"seller.dashboard.productmanagement\": \"Gestion des produits\",\n      \"seller.dashboard.noproducts\": \"Aucun produit trouvé\",\n      \"seller.dashboard.addproduct\": \"Ajouter un produit\",\n      \"seller.dashboard.searchproduct\": \"Rechercher un produit\",\n      \"seller.dashboard.addfirstproduct\": \"Ajoutez votre premier produit\",\n      \"seller.dashboard.export\": \"Exporter\",\n      \"seller.dashboard.salestrend\": \"Tendance des ventes\",\n      \"seller.dashboard.salestrend.place\":\n        \"Emplacement du graphique des ventes\",\n      \"seller.dashboard.distributioncategory\": \"Répartition par catégorie\",\n      \"seller.dashboard.distributioncategory.place\":\n        \"Emplacement du graphique de répartition par catégorie\",\n      \"seller.popular.products\": \"Produits populaires\",\n      \"seller.popular.results\": \"Résultats\",\n      \"seller.CurrentDisputes\": \"Clients récents\",\n      \"seller.CurrentDisputes.cases\": \"cas\",\n      \"seller.CurrentDisputes.history\": \"Historique des litiges\",\n      \"seller.recent.orders\": \"Commandes récentes\",\n      \"seller.recent.orders.view\": \"Voir toutes les commandes\",\n      \"seller.recent.table.order\": \"Commande\",\n      \"seller.recent.table.actions\": \"Actions\",\n      \"seller.recent.table.date\": \"Date\",\n      \"seller.recent.table.status\": \"Statut\",\n      \"seller.recent.table.amount\": \"Montant\",\n      \"seller.recent.table.product\": \"Produit\",\n\n      \"seller.productManagment.table.actions\": \"Actions\",\n      \"seller.productManagment.table.status\": \"Statut\",\n      \"seller.productManagment.table.sku\": \"SKU\",\n      \"seller.productManagment.table.stock\": \"Stock\",\n      \"seller.productManagment.table.price\": \"Prix\",\n      \"seller.productManagment.table.productName\": \"Nom du produit\",\n      \"seller.productManagment.table.image\": \"Image\",\n\n      // Client Dashboard Body\n      \"client.dashboard.title\": \"Tableau de bord client\",\n      \"client.dashboard.subtitle\": \"Gérez vos commandes et achats\",\n      \"client.dashboard.orders\": \"Commandes\",\n      \"client.dashboard.wishlist\": \"Liste de souhaits\",\n      \"client.dashboard.reviews\": \"Avis\",\n      \"client.dashboard.Loyaltypoints\": \"Points de fidélité\",\n      \"client.dashboard.recentorders\": \"Commandes récentes\",\n      \"client.dashboard.viewall\": \"Voir tout\",\n      \"client.dashboard.notifications\": \"Notifications\",\n      \"client.dashboard.notifications.item\": \"Nouveaux articles\",\n      \"client.dashboard.notifications.view\": \"Voir tout\",\n      \"client.dashboard.recommendations\": \"Recommandations\",\n      \"client.dashboard.recommendations.view\": \"Voir plus de produits\",\n      \"client.dashboard.QuickActions\": \"Actions rapides\",\n      \"client.dashboard.QuickActions.orders\": \"Suivre mes commandes\",\n      \"client.dashboard.QuickActions.wishlist\": \"Ma liste de souhaits\",\n      \"client.dashboard.QuickActions.packages\": \"Suivre mes colis\",\n      \"client.dashboard.QuickActions.profile\": \"Mon profil\",\n\n      //Admin Sidbar\n      \"sidebar.heading\": \"Administration\",\n      \"sidebar.dashboard\": \"Tableau de bord\",\n\n      \"sidebar.management\": \"Gestion\",\n      \"sidebar.user\": \"Gestion des utilisateurs\",\n      \"sidebar.store\": \"Gestion des magasins\",\n      \"sidebar.products\": \"Produits\",\n      \"sidebar.category\": \"Gestion des catégories\",\n      \"sidebar.order\": \"Gestion des commandes\",\n      \"sidebar.blacklist\": \"Produits blacklistés\",\n\n      \"sidebar.moderation\": \"Modération\",\n      \"sidebar.dispute\": \"Gestion des litiges\",\n      \"sidebar.productReports\": \"Rapports de produits\",\n      \"sidebar.reportedReviews\": \"Avis signalés\",\n      \"sidebar.moderationReviews\": \"Avis de modération\",\n\n      \"sidebar.transactions\": \"Transactions\",\n      \"sidebar.withdrawal\": \"Gestion des retraits\",\n      \"sidebar.promotions\": \"Gestion des promotions\",\n      \"sidebar.parcel\": \"Suivi des colis\",\n      \"sidebar.invoices\": \"Factures\",\n      \"sidebar.income\": \"Revenus\",\n      \"sidebar.revenueStore\": \"Revenus par magasin\",\n\n      \"sidebar.finance\": \"Finance\",\n      \"sidebar.package\": \"Gestion des forfaits\",\n      \"sidebar.subscription\": \"Gestion des abonnements\",\n\n      \"sidebar.support\": \"Support\",\n      \"sidebar.customerSupport\": \"Service client\",\n      \"sidebar.messages\": \"Messages\",\n\n      \"sidebar.configuration\": \"Configuration\",\n      \"sidebar.systemSettings\": \"Paramètres système\",\n      \"sidebar.shipping\": \"Gestion des expéditions\",\n\n      //Client Sidbar\n\n      \"client.heading\": \"Mon Espace\",\n      \"client.subheading\": \"Client Premium\",\n\n      \"client.points\": \"CebPoints\",\n      \"client.pointsEquivalent\": \"Équivalent à\",\n\n      \"client.dashboard\": \"Tableau de bord\",\n      \"client.products\": \"Produits\",\n      \"client.cart\": \"Panier\",\n      \"client.orders\": \"Commandes\",\n      \"client.wishlist\": \"Liste de souhaits\",\n      \"client.messages\": \"Messages\",\n      \"client.orderTracking\": \"Suivi de commande\",\n      \"client.pointsMenu\": \"Points\",\n      \"client.orderHistory\": \"Historique des commandes\",\n      \"client.reviews\": \"Mes Avis\",\n      \"client.notifications\": \"Notifications\",\n      \"client.statistics\": \"Statistiques\",\n      \"client.profile\": \"Mon Profil\",\n      \"client.support\": \"Service client\",\n      \"client.settings\": \"Paramètres\",\n\n      //Seller Sidbar\n      \"seller.sidebar.dashboard.heading\": \"Tableau de bord Vendeur\",\n      \"seller.sidebar.dashboard.subheading\": \"Gérez votre entreprise\",\n      \"seller.sidebar.dashboard\": \"Tableau de bord\",\n      \"seller.sidebar.products\": \"Produits\",\n      \"seller.sidebar.products.inventory\": \"Inventaire\",\n      \"seller.sidebar.products.overview\": \"Aperçu\",\n      \"seller.sidebar.products.replenishment\": \"Réapprovisionnement\",\n      \"seller.sidebar.products.stockalerts\": \"Alertes de stock\",\n      \"seller.sidebar.orders\": \"Commandes\",\n      \"seller.sidebar.customers\": \"Clients\",\n      \"seller.sidebar.messages\": \"Messages\",\n      \"seller.sidebar.transactions\": \"Transactions\",\n      \"seller.sidebar.revenue\": \"Revenu\",\n      \"seller.sidebar.withdrawals\": \"Retraits\",\n      \"seller.sidebar.disputes\": \"Litiges\",\n      \"seller.sidebar.reports\": \"Rapports\",\n      \"seller.sidebar.reviews\": \"Avis\",\n      \"seller.sidebar.shipping\": \"Expédition\",\n      \"seller.sidebar.configuration\": \"Configuration\",\n      \"seller.sidebar.configuration.carriers\": \"Transporteurs\",\n      \"seller.sidebar.configuration.rates\": \"Tarifs\",\n      \"seller.sidebar.configuration.areas\": \"Zones\",\n      \"seller.sidebar.promotions\": \"Promotions\",\n      \"seller.sidebar.settings\": \"Paramètres\",\n      \"seller.sidebar.helpsupport\": \"Aide & Support\",\n\n      //Product Management\n      // Product Management Body\n      \"product.heading\": \"Gestion des produits\",\n      \"product.subheading\": \"Gérez votre catalogue de produits\",\n      \"product.stats.total\": \"Total des produits\",\n      \"product.stats.instock\": \"En stock\",\n      \"product.stats.rupture\": \"Rupture\",\n      \"product.stats.lowstock\": \"Stock faible\",\n      \"product.stats.variants\": \"En vedette\",\n      \"product.stats.promotions\": \"En promotions\",\n      \"product.resume\": \"Résumé\",\n      \"product.resume.rating\": \"Note moyenne\",\n      \"product.resume.value\": \"Valeur du stock\",\n      \"product.resume.rate\": \"Taux de stock\",\n      \"product.resume.featured\": \"Produits en vedette\",\n      \"product.filter.heading\": \"Filtres et recherche\",\n      \"product.search.placeholder\": \"Rechercher par nom, description ou SKU...\",\n      \"product.filters.category\": \"Toutes les catégories\",\n      \"product.filters.status\": \"Tous les statuts\",\n      \"product.filters.foundproduct\": \" produit(s) trouvé(s) \",\n      \"product.filters.sort\": \"Les plus récents\",\n      \"product.actions.add\": \"Ajouter un produit\",\n      \"product.actions.modify\": \"Modifier\",\n      \"product.actions.details\": \"Détails\",\n      \"product.filters.image\": \"Image\",\n      \"product.filters.name\": \"Nom\",\n      \"product.filters.price\": \"Prix\",\n      \"product.filters.stock\": \"Stock\",\n      \"product.filters.sku\": \"SKU\",\n      \"product.filters.Status\": \"Statut\",\n      \"product.filters.actions\": \"Actions\",\n      \"product.stock.label\": \"Stock:\",\n      \"product.brand\": \"Marque\",\n      \"product.sort.price.asc\": \"Prix : du plus bas au plus élevé\",\n      \"product.sort.price.desc\": \"Prix : du plus élevé au plus bas\",\n      \"product.sort.name\": \"Nom\",\n      \"product.sort.recent\": \"Les plus récents\",\n      \"product.status.active\": \"Actif\",\n      \"product.status.inactive\": \"Inactif\",\n      \"product.status.all\": \"Tous les statuts\",\n\n      //Add Product\n      \"seller.product.add.title\": \"Ajouter un nouveau produit\",\n      \"seller.product.edit.title\": \"Modifier le produit\",\n      \"seller.product.add.progress\": \"Progression\",\n      \"seller.product.add.note\":\n        \"Complétez tous les champs requis pour publier votre produit\",\n      \"seller.product.add.error.productName\": \"Le nom du produit est requis\",\n      \"seller.product.add.error.description\": \"La description est requise\",\n      \"seller.product.add.error.price\": \"Le prix est requis\",\n      \"seller.product.add.error.brand\": \"La marque est requise\",\n      \"seller.product.add.tab.information\": \"Informations\",\n      \"seller.product.add.tab.specifications\": \"Spécifications\",\n      \"seller.product.add.tab.faq\": \"FAQ\",\n      \"seller.product.add.basicInfo\": \"Informations de base\",\n      \"seller.product.add.basicInfo.desc\":\n        \"Informations essentielles sur votre produit\",\n      \"seller.product.add.productName\": \"Nom du produit\",\n      \"seller.product.add.brand\": \"Marque\",\n      \"seller.product.add.sku\": \"SKU\",\n      \"seller.product.add.price\": \"Prix (€)\",\n      \"seller.product.add.originalPrice\": \"Prix original (€)\",\n      \"seller.product.add.stockQuantity\": \"Quantité en stock\",\n      \"seller.product.add.status\": \"Statut\",\n      \"seller.product.add.category\": \"Catégorie\",\n      \"seller.product.add.description\": \"Description du produit\",\n      \"seller.product.images.title\": \"Images du produit\",\n      \"seller.product.images.note\":\n        \"La première image est considérée comme l'image principale de votre produit.\",\n      \"seller.product.images.upload\": \"Cliquez pour télécharger\",\n      \"seller.product.images.addUrl\": \"Ajouter une image par URL\",\n      \"seller.product.images.urlPlaceholder\": \"https://exemple.com/image.jpg\",\n      \"seller.product.images.recommendations.title\":\n        \"Recommandations pour les images :\",\n      \"seller.product.images.recommendations.format\":\n        \"Format d'image : PNG, JPG\",\n      \"seller.product.images.recommendations.size\":\n        \"Taille : entre 500 × 500 et 2000 × 2000 pixels\",\n      \"seller.product.images.recommendations.background\":\n        \"Arrière-plan : de préférence blanc ou neutre\",\n      \"seller.product.images.recommendations.watermark\":\n        \"Pas de filigranes ou de texte promotionnel\",\n      \"seller.product.images.recommendations.maxSize\": \"Taille maximale : 2 Mo\",\n      \"seller.product.images.publish\": \"Publier le produit\",\n      \"seller.product.images.cancel\": \"Annuler\",\n      \"seller.product.active\": \"Actif\",\n      \"seller.product.inactive\": \"Inactif\",\n\n      //User Management\n      // User Management Body\n\n      \"user.heading\": \"Gestion des utilisateurs\",\n      \"user.subheading\": \"Gérez les comptes utilisateurs et leurs permissions\",\n      \"user.stats.total\": \"Total des utilisateurs\",\n      \"user.stats.pending\": \"Vendeurs en attente\",  \n      \"user.stats.pending.click\": \"Cliquez pour voir\"  ,\n      \"user.stats.active\": \"Utilisateurs actifs\",\n      \"user.stats.sellers\": \"Vendeurs\",\n      \"user.stats.hold\": \"En attente\",\n      \"user.search.placeholder\": \"Rechercher par nom ou email...\",\n      \"user.filters.status\": \"Tous les statuts\",\n      \"user.filters.roles\": \"Tous les rôles\",\n      \"user.list.heading\": \"Liste des utilisateurs\",\n      \"user.list.online\": \"En ligne - Données synchronisées\",\n      \"user.table.user\": \"Utilisateur\",\n      \"user.table.role\": \"Rôle\",\n      \"user.table.status\": \"Statut\",\n      \"user.table.sellerstatus\": \"Statut du vendeur\",\n      \"user.table.registration\": \"Inscription\",\n      \"user.table.lastlogin\": \"Dernière connexion\",\n      \"user.table.actions\": \"Actions\",\n      \"user.actions.createTest\": \"Créer des utilisateurs de test\",\n      \"user.actions.add\": \"Ajouter un utilisateur\",\n      \"user.allstatus\": \"Tous les statuts\",\n      \"user.allroles\": \"Tous les rôles\",\n      \"user.allactive\": \"Tous actifs\",\n      \"user.allinactive\": \"Inactifs\",\n      \"user.allonhold\": \"En attente\",\n      \"user.allterminated\": \"Résiliés\",\n      \"user.allcustomer\": \"Clients\",\n      \"user.allseller\": \"Vendeurs\",\n      \"user.alladmin\": \"Admins\",\n\n      //Stor Management\n      \"store.heading\": \"Gestion des magasins\",\n      \"store.subheading\": \"Gérez et supervisez tous les magasins du marché\",\n      \"store.stats.total\": \"Total des magasins\",\n      \"store.stats.active\": \"Magasins actifs\",\n      \"store.stats.hold\": \"En attente\",\n      \"store.stats.revenue\": \"Revenu\",\n      \"store.actions.add\": \"Ajouter un nouveau magasin\",\n      \"store.list.heading\": \"Liste des magasins\",\n      \"store.list.code\": \"Code du magasin\",\n      \"store.list.name\": \"Magasin\",\n      \"store.list.status\": \"Statut\",\n      \"store.list.creation\": \"Date de création\",\n      \"store.list.subscription\": \"Abonnement\",\n      \"store.list.endsubscription\": \"Fin d'abonnement\",\n      \"store.list.messages\": \"Messages envoyés\",\n      \"store.list.lastaction\": \"Dernière action\",\n      \"store.list.Action\": \"Action\",\n      \"store.table.details\": \"Détails\",\n      \"store.table.actions\": \"Actions\",\n      \"store.table.sendMessage\": \"Envoyer un message\",\n\n      //Inventory Management\n      \"inventory.title\": \"Aperçu de l'inventaire\",\n      \"inventory.subtitle\": \"Gérez votre inventaire de produits\",\n      \"inventory.totalProducts\": \"Total des produits\",\n      \"inventory.outOfStock\": \"En rupture de stock\",\n      \"inventory.lowStock\": \"Stock faible\",\n      \"inventory.toBeRestocked\": \"À réapprovisionner\",\n      \"inventory.stockValue\": \"Valeur du stock\",\n      \"inventory.export\": \"Exporter\",\n      \"inventory.search\": \"Rechercher des produits...\",\n      \"inventory.filter.all\": \"Tout\",\n      \"inventory.filter.breakup\": \"Rupture\",\n      \"inventory.filter.lowStock\": \"Stock faible\",\n      \"inventory.filter.restock\": \"Réapprovisionner\",\n      \"inventory.table.product\": \"Produit\",\n      \"inventory.table.sku\": \"SKU\",\n      \"inventory.table.totalStock\": \"Stock total\",\n      \"inventory.table.available\": \"Disponible\",\n      \"inventory.table.status\": \"Statut\",\n      \"inventory.table.price\": \"Prix\",\n      \"inventory.table.actions\": \"Actions\",\n      \"inventory.table.adjustment\": \"Ajustement\",\n      \"inventory.table.noProducts\": \"Aucun produit trouvé\",\n\n\n      \"adjustment.title\": \"Ajuster le stock\",\n      \"adjustment.available\": \"Disponible\",\n      \"adjustment.currentStock\": \"Stock actuel\",\n      \"adjustment.threshold\": \"Seuil de réapprovisionnement\",\n\n      \"adjustment.type\": \"Type d’ajustement\",\n      \"adjustment.increase\": \"Augmenter le stock\",\n      \"adjustment.decrease\": \"Diminuer le stock\",\n\n      \"adjustment.quantity\": \"Quantité\",\n      \"adjustment.newStock\": \"Nouveau stock\",\n\n      \"adjustment.reason\": \"Raison *\",\n      \"adjustment.selectReason\": \"Sélectionner une raison\",\n      \"adjustment.purchase\": \"Achat\",\n      \"adjustment.sale\": \"Vente\",\n      \"adjustment.return\": \"Retour\",\n      \"adjustment.damage\": \"Dommage\",\n      \"adjustment.loss\": \"Perte\",\n      \"adjustment.correction\": \"Correction de stock\",\n      \"adjustment.other\": \"Autre\",\n\n      \"adjustment.notes\": \"Notes (Optionnel)\",\n      \"adjustment.notesPlaceholder\": \"Notes supplémentaires...\",\n\n      \"adjustment.cancel\": \"Annuler\",\n      \"adjustment.confirm\": \"Confirmer l’ajustement\",\n      \"adjustment.confirm.loading\": \"Ajustement...\",\n\n      //Category Management\n      \"categories.heading\": \"Catégories\",\n      \"categories.subheading\": \"Gérez les catégories de produits et leur structure\",\n      \"categories.add\": \"Ajouter une catégorie\",\n      \"categories.addSuper\": \"Ajouter une supercatégorie\",\n      \"categories.search\": \"Rechercher des catégories...\",\n      \"categories.all\": \"Toutes les catégories\",\n      \"categories.featured\": \"En vedette\",\n      \"categories.structure\": \"Structure des catégories\",\n      \"categories.name\": \"Nom de la catégorie\",\n      \"categories.description\": \"Description\",\n      \"categories.products\": \"Produits\",\n      \"categories.subcategories\": \"Sous-catégories\",\n      \"categories.actions\": \"Actions\",\n      \"categories.noSuperFound\": \"Aucune supercatégorie trouvée\",\n      \"categories.createFirst\": \"Créez votre première supercatégorie pour commencer\",\n      \"categories.createBtn\": \"Créer votre première supercatégorie\",\n      \"categories.features\": \"Caractéristiques\",\n      \"categories.notfound\": \"Aucune catégorie trouvée\",\n      \"categories.createfirstcate\": \"Créer votre première catégorie\",\n      \"categories.craetedesc\": \"Commencez par créer votre première catégorie\",\n      \"categories.noMach\": \"Aucune catégorie ne correspond à vos critères de recherche\",\n\n      \"categories.addCategory\": \"Ajouter une catégorie\",\n      \"categories.editCategory\": \"Modifier la catégorie\",\n        \"categories.type\": \"Type de catégorie\",\n        \"categories.type.standard\": \"Catégorie standard\",\n        \"categories.type.standardDesc\": \"Une catégorie normale pour organiser vos produits\",\n        \"categories.type.super\": \"Super-catégorie\",\n        \"categories.type.superDesc\": \"Une catégorie de niveau supérieur qui peut regrouper plusieurs catégories standards\",\n        \"categories.type.superNote\": \"Les supercatégories vous permettent d’organiser vos catégories en groupes thématiques\",\n        \"categories.parent\": \"Catégorie parente\",\n        \"categories.noparent\": \"Aucune catégorie parente\",\n        \"categories.parent.select\": \"Sélectionnez une catégorie parente pour créer une hiérarchie (optionnel)\",\n        \"categories.tabs.general\": \"Informations générales\",\n        \"categories.tabs.features\": \"Fonctionnalités\",\n        \"categories.tabs.seo\": \"SEO\",\n        \"categories.slug\": \"Slug\",\n        \"categories.slug.placeholder\": \"slug-catégorie\",\n        \"categories.icon\": \"Icône\",\n        \"categories.image\": \"URL de l’image\",\n        \"categories.image.placeholder\": \"https://exemple.com/image.jpg\",\n        \"categories.featuredCategory\": \"Catégorie mise en avant\",\n        \"categories.active\": \"Catégorie active\",\n        \"categories.cancel\": \"Annuler\",\n        \"categories.create\": \"Créer la catégorie\",\n      \"categories.updating\": \"Mise à jour...\",\n      \"categories.creating\": \"Création...\",\n      \"categories.update\": \"Mettre à jour la catégorie\",\n      \"categories.created\": \"Créer la catégorie\",\n\n       \"categories.features.title\": \"Caractéristiques du produit\",\n        \"categories.features.add\": \"Ajouter une caractéristique\",\n        \"categories.features.emptyTitle\": \"Aucune caractéristique ajoutée\",\n        \"categories.features.emptyDesc\": \"Cliquez sur \\\"Ajouter une caractéristique\\\" pour commencer\",\n        \"categories.features.feature\": \"Caractéristique\",\n        \"categories.features.name\": \"Nom\",\n        \"categories.features.type\": \"Type\",\n        \"categories.features.value\": \"Valeur\",\n        \"categories.features.mandatory\": \"Obligatoire\",\n        \"categories.features.selectType\": \"Sélectionner un type\",\n        \"categories.features.types.text\": \"Texte\",\n        \"categories.features.types.number\": \"Nombre\",\n        \"categories.features.types.boolean\": \"Booléen\",\n        \"categories.features.types.select\": \"Sélection\",\n        \"categories.features.types.multiselect\": \"Multi-sélection\",\n        \"categories.features.types.color\": \"Couleur\",\n        \"categories.features.types.url\": \"URL\",\n        \"categories.features.types.true\": \"Vrai\",\n        \"categories.features.types.false\": \"Faux\",\n\n      //Add Super Category\n      \"categories.addSuperCategory\": \"Ajouter une supercatégorie\",\n      \"categories.editSuperCategory\": \"Modifier la supercatégorie\",\n        \"categories.generalInfo\": \"Informations générales\",\n        \"categories.metadata\": \"Métadonnées\",\n        \"categories.seo\": \"Configuration SEO\",\n        \"categories.tabs.seotitle\": \"Titre SEO\",\n        \"categories.tabs.seodesc\": \"Description SEO\",\n        \"categories.tabs.seokeywords\": \"Mots-clés SEO\",\n        \"categories.preview\": \"Aperçu\",\n            \"categories.superPreview\": \"Aperçu de la supercatégorie\",\n        \"categories.previewMode\": \"Mode aperçu\",\n        \"categories.previewNote\": \"Configurez les informations générales pour voir l’aperçu\",\n        \"categories.previewRequirement\": \"Remplissez au moins le nom en français ou en anglais pour commencer\",\n        \"categories.superMetadata\": \"Métadonnées de la supercatégorie\",\n        \"categories.selectMerge\": \"Sélectionner les catégories à fusionner\",\n        \"categories.seeTemplates\": \"Voir tous les modèles\",\n        \"categories.listProperties\": \"Liste des propriétés\",\n        \"categories.byGroups\": \"Par groupes\",\n        \"categories.addMetadata\": \"Ajouter des métadonnées\",\n        \"categories.metadataNote\": \"Les métadonnées vous permettent d’ajouter des propriétés personnalisées à votre supercat égorie pour configurer son affichage ou son comportement spécifique.\",\n        \"categories.directionsUse\": \"Instructions d’utilisation\",\n        \"categories.featuredCategoryNote\": \"Cette supercatégorie sera mise en avant sur la page d’accueil\",\n        \"categories.visibleCategory\": \"Catégorie visible\",\n        \"categories.visibleCategoryNote\": \"Cette supercatégorie sera visible pour les utilisateurs\",\n        \"categories.nameFR\": \"Nom en français\",\n        \"categories.nameEN\": \"Nom en anglais\",\n        \"categories.nameAR\": \"Nom en arabe\",\n        \"categories.descFR\": \"Description en français\",\n        \"categories.descEN\": \"Description en anglais\",\n        \"categories.descAR\": \"Description en arabe\",\n        \"categories.supericon\": \"Nom de l’icône (ex : voiture, maison, etc.)\",\n        \"categories.mainImage\": \"Image principale\",\n        \"categories.mainImageNote\": \"URL de l’image principale pour cette supercatégorie\",\n        \"categories.superadd\": \"Ajouter\",\n        \"categories.superupdate\": \"Mettre à jour\",\n        \"categories.noTemp\": \"Aucun modèle appliqué\",\n        \"categories.choosTemp\": \"Choisissez des modèles pour voir les caractéristiques groupées\",\n        \"categories.apply\": \"Appliquer\",\n        \"categories.selected\": \"{{count}} catégories sélectionnées\",\n        \"categories.iconNot\": \"Entrez le nom d’une icône Lucid (voir la documentation)\",\n\n      \"categories.displayStyle\": \"Utilisez display_style pour définir l’affichage (« grid », « list », « mosaic »)\",\n      \"categories.bannerUrl\": \"Ajoutez banner_url pour une bannière personnalisée\",\n      \"categories.featuredBrands\": \"Définissez featured_brands pour mettre en avant certaines marques\",\n      \"categories.enableCompare\": \"Utilisez enable_compare (true/false) pour la comparaison de produits\",\n      \"categories.customFilters\": \"Ajoutez custom_filters pour des filtres spécifiques à cette supercatégorie\",\n      \"categories.layoutType\": \"Utilisez layout_type pour changer la disposition des produits\",\n      \"categories.searchBoostTerms\": \"Ajoutez search_boost_terms pour améliorer le SEO\",\n\n      // home TrendingCategories\n      \"index.popularCategories\": \"Catégories populaires\",\n       \"categories.medical\": \"Médical\",\n        \"categories.beauty\": \"Beauté\",\n        \"categories.wellness\": \"Bien-être\",\n        \"categories.plumber\": \"Plombier\",\n        \"categories.electrical\": \"Électrique\",\n        \"categories.tradesmen\": \"Artisans\",\n        \"categories.cleaning\": \"Nettoyage\",\n        \"categories.tutors\": \"Tuteurs\",\n        \"categories.auto\": \"Auto\",\n        \"categories.insurance\": \"Assurance\",\n        \"categories.mortgage\": \"Hypothèque\",\n        \"categories.kitchen\": \"Cuisine\",\n        \"categories.bathroom\": \"Salle de bain\",\n\n\n      //AdvertisementBanner\n      \"index.discoverNewTech\": \"Découvrez la nouvelle technologie\",\n      \"index.titanium\": \"Titane\",\n      \"index.newCamera\": \"Un nouveau système de caméra\",\n      \"index.allDayBattery\": \"Autonomie d'une journée entière\",\n      \"index.buyNow\": \"Acheter maintenant\",\n      \"index.learnMore\": \"En savoir plus\",\n\n      //Home BestSellers\n      \"bestSellers.monthlyTitle\": \"Meilleur vente du mois\",\n      \"bestSellers.weeklySellers\": \"Meilleur vente de la semaine\",\n      \"bestSellers.weeklyProducts\": \"Meilleur vente de la semaine\",\n      \"bestSellers.customerFavorites\": \"Vente coup de coeur\",\n       \"common.seeAll\": \"Voir tout\",\n        \"common.flashSale\": \"Vente flash\",\n        \"common.endsSoon\": \"Se termine bientôt\",\n        \"common.wirelessHeadset\": \"Casque sans fil\",\n        \"common.claimed\": \"réclamé\",\n\n      // home FeaturesGrid\n      \"index.maximizeSales\": \"Maximisez vos ventes\",\n      \"index.leverageTools\": \"Exploitez des outils puissants pour développer votre entreprise.\",\n      \"index.exploreTools\": \"Explorer les outils\",\n      \"index.discoverUniqueProducts\": \"Découvrez des produits uniques\",\n      \"index.browseThousands\": \"Parcourez des milliers de catégories et d’articles.\",\n      \"index.startBuying\": \"Commencer vos achats\",\n\n\n      //home CarAdvertisement\n       \"index.luxuryAutomobiles\": \"Automobiles de luxe\",\n        \"index.electricLuxurySedanDesc\": \"Berline électrique de luxe avec design et performance de pointe.\",\n        \"index.discoverVehicle\": \"Découvrir ce véhicule\",\n        \"index.similarVehicles\": \"Véhicules similaires\",\n        \"index.electricSedanBMW\": \"Berline électrique BMW avec confort premium.\",\n        \"index.sportbackElectric\": \"Voiture électrique Sportback haute performance\",\n        \"index.electricSedanTesla\": \"Berline électrique Tesla avec autonomie inégalée.\",\n        \"index.sportElectric\": \"Voiture de sport électrique haute performance\",\n        \"index.viewAllModels\": \"Voir tous les modèles\",\n\n      // home InfoBanner\n      \"footer.fastDelivery\": \"Livraison rapide\",\n      \"footer.onOrdersOver\": \"Sur les commandes au-dessus d’un certain montant\",\n      \"footer.securePayments\": \"Paiements sécurisés\",\n      \"footer.protectedPayments\": \"Transactions protégées et cryptées\",\n      \"footer.moneyBackGuarantee\": \"Garantie de remboursement\",\n      \"footer.returnPolicy\": \"Politique de retour facile\",\n\n      //home RealEstateAd\n      \"realEstate.title\": \"Immobilier en vedette\",\n\n      //SellerBuyerTabs\n      \"index.becomeSeller\": \"Devenez vendeur\",\n      \"index.buyOnCebleu\": \"Acheter sur Cebleu\",\n      \"index.developBusiness\": \"Développez votre entreprise\",\n      \"index.expandReach\": \"Élargissez votre portée et augmentez vos ventes.\",\n      \"index.createShop\": \"Créez votre boutique\",\n      \"index.buildOnlinePresence\": \"Créez rapidement votre présence en ligne.\",\n      \"index.showcaseProducts\": \"Présentez vos produits\",\n      \"index.uploadPrice\": \"Ajoutez vos produits et fixez vos prix facilement.\",\n      \"index.analyzePerformance\": \"Analysez les performances\",\n      \"index.optimizeSelling\": \"Optimisez votre stratégie de vente.\",\n      \"index.startSelling\": \"Commencer à vendre\",\n      \"index.ultimateShopping\": \"L’expérience d’achat ultime\",\n      \"index.discoverQuality\": \"Découvrez des produits de qualité auprès de vendeurs de confiance.\",\n      \"index.totalProtection\": \"Protection totale de l’acheteur\",\n      \"index.secureTransactions\": \"Transactions sécurisées et fiables.\",\n      \"index.fastShipping\": \"Livraison rapide\",\n      \"index.rapidDelivery\": \"Livraison rapide à votre porte.\",\n      \"index.hassleReturns\": \"Retours sans tracas\",\n      \"index.simpleReturns\": \"Procédure de retour simple avec assistance complète.\",\n      \"index.shopNow\": \"Acheter maintenant\",\n\n      //home TechAdvertisement\n       \"common.flightBooking\": \"Réservation de vol\",\n        \"common.topDestinations\": \"Destinations populaires\",\n        \"common.limitedTimeOffer\": \"Offre à durée limitée\",\n        \"common.bookNow\": \"Réserver maintenant\",\n\n      //home HeroContent copy\n       \"popSearches.shopConfidence\": \"Achetez en toute confiance\",\n        \"popSearches.secureTransactions\": \"Profitez de transactions sûres et fiables\",\n        \"common.startShopping\": \"Commencer vos achats\",\n      \"common.secureTransactions\": \"Transactions sécurisées\",\n\n        \"popSearches.exclusiveDeals\": \"Offres exclusives\",\n        \"popSearches.accessSpecial\": \"Accédez à des réductions et offres spéciales\",\n        \"common.viewDeals\": \"Voir les offres\",\n\n        \"popSearches.goldLevel\": \"Niveau Or\",\n        \"popSearches.premiumServices\": \"Services premium pour les meilleurs clients\",\n        \"popSearches.fastDelivery\": \"Livraison rapide prioritaire\",\n        \"popSearches.vipSupport\": \"Support client VIP\",\n        \"popSearches.toolsServices\": \"Outils et services\",\n        \"popSearches.promoCreation\": \"Outils de création de promotions\",\n        \"popSearches.advancedAnalytics\": \"Tableau de bord analytique avancé\",\n        \"popSearches.internalAdvertising\": \"Solutions publicitaires internes\",\n        \"popSearches.exclusiveTraining\": \"Programmes de formation exclusifs\",\n\n        \"popSearches.helpCenter\": \"Centre d’aide\",\n        \"popSearches.customerCare\": \"Service client disponible 24h/24 et 7j/7\",\n        \"popSearches.easyReturn\": \"Retours faciles\",\n        \"popSearches.quickRefund\": \"Remboursements rapides pour les retours\",\n        \"popSearches.learnMore\": \"En savoir plus\",\n        \"popSearches.sellOnCebleu\": \"Vendre sur Cebleu\",\n        \"popSearches.millionsVisitors\": \"Des millions de visiteurs chaque mois\",\n\n      //home ImageBanner\n      \"common.findEverything\": \"Trouvez tout ce dont vous avez besoin\",\n        \"common.shopDescription\": \"De l’électronique à la mode, découvrez une large gamme de produits adaptés à votre style de vie.\",\n        \"common.exploreMarketplace\": \"Explorer le marché\",\n\n      // home ProductCard\n      \"products.addedToCart\": \"Added to Cart\",\n      \"products.addedToWishlist\": \"Added to Wishlist\",\n      \"products.shareOnInstagram\": \"Share on Instagram\",\n      \"products.instagramShareDescription\": \"Instagram does not support direct sharing.\",\n      \"products.shared\": \"Shared\",\n      \"products.sharedOn\": \"Shared on\",\n      \"products.reviews\": \"Reviews\",\n      \"products.addToCart\": \"Add to Cart\",\n      \"products.viewingShop\": \"Viewing Shop\",\n      \"products.viewShopBtn\": \"View Shop\",\n\n      // home products.reviews\n      \"products.color\": \"Couleur\",\n      \"products.quantity\": \"Quantité\",\n      \"products.deliveryNote\": \"Les détails de livraison peuvent varier.\",\n      \"products.inStock\": \"En stock\",\n      \"products.viewShop\": \"Voir la boutique\",\n      \"products.description\": \"Description\",\n      \"products.specifications\": \"Spécifications\",\n      \"products.questionsAnswers\": \"Questions & Réponses\",\n      \"products.productDescription\": \"Description du produit\",\n      \"products.technicalDetails\": \"Détails techniques\",\n      \"products.brand\": \"Marque\",\n      \"products.category\": \"Catégorie\",\n      \"products.model\": \"Modèle\",\n      \"products.warranty\": \"Garantie\",\n      \"products.months\": \"Mois\",\n      \"products.weight\": \"Poids\",\n\n      // home ProductFilter\n      \"products.rating\": \"Évaluation\",\n      \"products.sortBy\": \"Trier par\",\n      \"products.availability\": \"Disponibilité\",\n      \"products.freeShipping\": \"Livraison gratuite\",\n      \"products.deliveryDay\": \"Jour de livraison\",\n      \"products.refreshRate\": \"Taux de rafraîchissement\",\n      \"products.price\": \"Prix\",\n      \"products.promotions\": \"Promotions\",\n      \"products.screenSize\": \"Taille de l'écran\",\n      \"products.resolution\": \"Résolution\",\n      \"products.apply\": \"Appliquer\",\n\n      // home ProductQA\n      \"products.questions\": \"Questions\",\n      \"products.postedBy\": \"publié par\",\n      \"products.community\": \"communauté\",\n      \"products.with\": \"avec\",\n      \"products.havingResponse\": \"ayant une réponse\",\n      \"products.sortQuestions\": \"Trier les questions\",\n      \"products.mostUseful\": \"Les plus utiles\",\n      \"products.mostRecent\": \"Les plus récentes\",\n      \"products.withAnswers\": \"Avec réponses\",\n      \"products.withoutAnswers\": \"Sans réponses\",\n      \"products.askQuestion\": \"Poser une question\",\n      \"products.searchQuestion\": \"Rechercher une question...\",\n      \"products.mostUsefulQuestion\": \"Question la plus utile\",\n      \"products.answers\": \"Réponses\",\n      \"products.questionPostedBy\": \"Question publiée par\",\n      \"products.on\": \"le\",\n      \"products.report\": \"Signaler\",\n      \"products.mostUsefulAnswer\": \"Réponse la plus utile\",\n      \"products.answerPostedBy\": \"Réponse publiée par\",\n      \"products.viewAllAnswers\": \"Voir toutes les réponses\",\n      \"products.viewLessInfo\": \"Voir moins d'informations\",\n      \"products.answerQuestion\": \"Répondre à cette question\",\n\n      //home ProductShowcase\n      \"products.featuredProducts\": \"Produits en vedette\",\n      \"products.discoverUnique\": \"Découvrez des articles uniques de notre collection.\",\n      \"products.filters\": \"Filtres\",\n      \"products.filtersApplied\": \"filtres appliqués\",\n      \"products.exploreMore\": \"Voir plus\",\n       \"categories.electronics\": \"Électronique\",\n        \"categories.smartphones\": \"Smartphones\",\n        \"categories.homeGarden\": \"Maison & Jardin\",\n        \"categories.fashion\": \"Mode\",\n        \"categories.groceries\": \"Épicerie\",\n        \"categories.allProducts\": \"Tous les produits\",\n      // home CodingPromotion\n      \"products.learnCoding\": \"Apprendre le codage\",\n      \"products.freeCodingCourse\": \"Obtenez un cours de codage gratuit dès aujourd'hui !\",\n      \"products.learnMore\": \"En savoir plus\",\n      \"products.createdForTaste\": \"Créé pour le goût\",\n      \"products.sponsored\": \"Sponsorisé\",\n\n      //home ContinueShopping\n      \"products.continueShoppingTitle\": \"Continuer vos achats\",\n      \"products.viewMore\": \"Voir plus\",\n\n      //home FeaturedPromotionsSection\n      \"products.featuredPromotions\": \"Promotions en vedette\",\n      \"products.specialOffers\": \"Offres spéciales rien que pour vous\",\n\n      //home products.learnMore\n      \"products.featuredSports\": \"Articles de sport en vedette\",\n\n      // home GiftIdeas\n      \"products.giftIdeasTitle\": \"Idées cadeaux\",\n\n      // home ProductGroupCard\n      \"products.seeAllButton\": \"Voir tout\",\n\n      //home ProductGroupsSection\n      \"products.shopByCategory\": \"Acheter par catégorie\",\n      // home ProductSuggestions\n      \"products.youMayAlsoLike\": \"Vous pourriez aussi aimer\",\n\n      //home ShoppingGridSection\n      \"products.resumeShoppingWhere\": \"Reprenez là où vous vous êtes arrêté\",\n      //home TrendingItems\n      \"products.sale\": \"Vente\",\n      //home filters\n        \"products.receiveTomorrow\": \"Recevez demain\",\n        \"products.expressDelivery\": \"Livraison express\",\n        \"products.andMore\": \"et plus\",\n        \"products.freeShippingFilter\": \"Livraison gratuite\",\n        \"products.freeShippingDestination\": \"Disponible pour certaines destinations\",\n        \"products.sortByPopularity\": \"Trier par popularité\",\n        \"products.sortNewest\": \"Le plus récent\",\n        \"products.sortHighToLow\": \"Prix : du plus élevé au plus bas\",\n        \"products.sortLowToHigh\": \"Prix : du plus bas au plus élevé\",\n      //productGroupsData\n       \"products.resumeShopping\": \"Reprendre les achats\",\n        \"products.miniRefrigerators\": \"Mini réfrigérateurs\",\n        \"products.miniRefrigerator\": \"Mini réfrigérateur\",\n        \"products.smartphones\": \"Smartphones\",\n        \"products.officeChairs\": \"Chaises de bureau\",\n        \"products.books\": \"Livres\",\n        \"products.flashSales\": \"Ventes flash\",\n        \"products.gamingMonitor\": \"Écran de jeu\",\n        \"products.gamingDesk\": \"Bureau de jeu\",\n        \"products.gamingMouse\": \"Souris de jeu\",\n        \"products.gamingHeadphones\": \"Casque de jeu\",\n        \"products.categoriesToExplore\": \"Catégories à explorer\",\n        \"products.motherboards\": \"Cartes mères\",\n        \"products.ram\": \"Mémoire RAM\",\n        \"products.internalStorage\": \"Stockage interne\",\n        \"products.offersFor\": \"offres pour\",\n        \"products.clients\": \"clients\",\n        \"products.viewConditions\": \"Voir les conditions\",\n        \"products.anniversary\": \"Anniversaire\",\n        \"products.frenchShowcase\": \"Vitrine française\",\n        \"products.blackLeggings\": \"Leggings noirs\",\n        \"products.blackBackpack\": \"Sac à dos noir\",\n        \"products.mathsBook\": \"Livre de mathématiques\",\n        \"products.bluetoothSpeaker\": \"Haut-parleur Bluetooth\",\n        \"products.childrenBook\": \"Livre pour enfants\",\n        \"products.cordlessVacuum\": \"Aspirateur sans fil\",\n        \"products.smartWatch\": \"Montre intelligente\",\n        \"products.wirelessEarbuds\": \"Écouteurs sans fil\",\n        \"products.yogaMat\": \"Tapis de yoga\",\n      // home categoryData\n\n      \"categories.phoneTablets\": \"Téléphones et tablettes\",\n      \"categories.tvTech\": \"TV et technologie\",\n      \"categories.computers\": \"Ordinateurs\",\n      \"categories.homeKitchenOffice\": \"Maison, cuisine et bureau\",\n      \"categories.appliances\": \"Appareils électroménagers\",\n      \"categories.clothingShoes\": \"Vêtements et chaussures\",\n      \"categories.healthBeauty\": \"Santé et beauté\",\n      \"categories.videoGamesConsoles\": \"Jeux vidéo et consoles\",\n      \"categories.diy\": \"Bricolage\",\n      \"categories.sportsLeisure\": \"Sports et loisirs\",\n      \"categories.babyToys\": \"Bébés et jouets\",\n      \"categories.bricolage\": \"Bricolage\",\n      \"categories.hardware\": \"Quincaillerie\",\n      \"categories.office\": \"Bureau\",\n      \"categories.furniture\": \"Meubles\",\n      \"categories.stationery\": \"Papeterie\",\n      \"categories.housekeeping\": \"Entretien ménager\",\n      \"categories.pool\": \"Piscine\",\n      \"categories.heating\": \"Chauffage\",\n      \"categories.luggage\": \"Bagages\",\n      \"categories.otherCategories.short\": \"Autres catégories\",\n      \"categories.items\": \"articles\",\n\n      \"common.categories.books\": \"Livres\",\n      \"common.categories.music\": \"Musique\",\n      \"common.categories.automotive\": \"Automobile\",\n      \"common.categories.gifts\": \"Cadeaux\",\n      \"common.categories.travel\": \"Voyage\",\n      \"common.categories.coffee\": \"Café\",\n      \"common.categories.kitchenware\": \"Ustensiles de cuisine\",\n      \"common.categories.movies\": \"Films\",\n      \"common.categories.outdoors\": \"Plein air\",\n      \"common.categories.jewelry\": \"Bijoux\",\n      \"common.categories.business\": \"Affaires\",\n      \"common.categories.art\": \"Art\",\n      \"common.categories.photography\": \"Photographie\",\n      \"common.categories.finance.short\": \"Finance\",\n      \"common.categories.printing.short\": \"Impression\",\n      \"common.categories.bakery.short\": \"Boulangerie\",\n      \"common.categories.science.short\": \"Science\",\n      \"common.categories.accessories.short\": \"Accessoires\",\n      \"common.categories.events.short\": \"Événements\",\n      \"common.categories.watches.short\": \"Montres\",\n      //home VendorCard\n       \"vendors.rating\": \"Évaluation\",\n        \"vendors.products\": \"Produits\",\n        \"vendors.visitStore\": \"Visiter la boutique\",\n\n      //Shopping cart\n      \"cart.title\": \"Panier\",\n      \"cart.description\": \"Vérifiez vos articles et passez à la caisse\",\n      \"cart.empty.title\": \"Votre panier est vide\",\n      \"cart.empty.subtitle\": \"Ajoutez des produits pour commencer !\",\n      \"cart.empty.button\": \"Continuer vos achats\",\n      \"cart.subtotal\": \"Sous-total\",\n      \"cart.subtotal.items\": \"Sous-total ({count} articles)\",\n      \"cart.shipping\": \"Livraison\",\n      \"cart.shipping.free\": \"Gratuite\",\n      \"cart.total\": \"Total\",\n      \"cart.onlyLeft\": \"Il ne reste que {count}\",\n      \"cart.checkout\": \"Passer à la caisse\",\n\n      // Wishlist  \n      \"common.success\": \"Succès\",\n      \"common.error\": \"Erreur\",\n      \"auth.signInRequired\": \"Veuillez vous connecter\",\n      \"wishlist.signInMessage\": \"Vous devez vous connecter pour voir votre liste de souhaits.\",\n\n      \"wishlist.title\": \"Ma liste de souhaits\",\n      \"wishlist.productsInList\": \"{{count}} produit(s) dans votre liste\",\n      \"wishlist.emptyTitle\": \"Votre liste de souhaits est vide\",\n      \"wishlist.emptyMessage\": \"Commencez à ajouter les produits que vous aimez à votre liste de souhaits !\",\n      \"wishlist.browseProducts\": \"Parcourir les produits\",\n      \"wishlist.messages.removed\": \"Produit supprimé de la liste de souhaits\",\n      \"wishlist.messages.addedToCart\": \"Produit ajouté au panier\",\n      \"wishlist.errors.fetch\": \"Échec du chargement de la liste de souhaits\",\n      \"wishlist.errors.remove\": \"Échec de la suppression du produit de la liste de souhaits\",\n      \"wishlist.errors.addToCart\": \"Échec de l’ajout du produit au panier\",\n\n      \"product.description\": \"Description\",\n      \"product.reviews\": \"Avis\",\n      \"product.questions\": \"Questions/Réponses\",\n      \"product.noDescription\": \"Aucune description disponible.\",\n      \"product.askQuestion\": \"Poser une question\",\n      \"product.askPlaceholder\": \"Posez votre question sur ce produit...\",\n      \"product.submitQuestion\": \"Envoyer la question\",\n      \n\n      // Language switcher\n      \"language.english\": \"English\",\n      \"language.french\": \"Français\",\n      \"language.arabic\": \"العربية\",\n\n      // Hero section\n      \"hero.title\": \"Découvrez des Produits Incroyables de Vendeurs Mondiaux\",\n      \"hero.subtitle\":\n        \"Achetez auprès de milliers de vendeurs de confiance dans le monde entier. Support multilingue, paiements sécurisés et expédition rapide.\",\n      \"hero.startShopping\": \"Commencer les Achats\",\n      \"hero.becomeSeller\": \"Devenir Vendeur\",\n\n      // Categories\n      \"categories.title\": \"Acheter par Catégorie\",\n      \"categories.viewAll\": \"Voir Toutes les Catégories\",\n      \"category.electronics\": \"Électronique\",\n      \"category.fashion\": \"Mode\",\n      \"category.home\": \"Maison & Jardin\",\n      \"category.gaming\": \"Jeux\",\n      \"category.books\": \"Livres\",\n      \"category.sports\": \"Sports\",\n      \"category.automotive\": \"Automobile\",\n      \"category.more\": \"Plus\",\n\n      // Products\n      \"products.title\": \"Produits en Vedette\",\n      \"products.subtitle\":\n        \"Découvrez les meilleures offres de nos vendeurs de confiance\",\n      \"products.sortBy\": \"Trier par:\",\n      \"products.featured\": \"En vedette\",\n      \"products.priceLowHigh\": \"Prix: Bas vers Haut\",\n      \"products.priceHighLow\": \"Prix: Haut vers Bas\",\n      \"products.newest\": \"Plus récent\",\n      \"products.bestRating\": \"Meilleure note\",\n      \"products.addToCart\": \"Ajouter au Panier\",\n      \"products.loadMore\": \"Charger Plus de Produits\",\n      \"products.fastShipping\": \"Expédition Rapide\",\n      \"products.freeShipping\": \"Livraison Gratuite\",\n      \"products.warranty\": \"Garantie 2 ans\",\n      \"products.bestSeller\": \"Meilleure Vente\",\n\n      // Vendors\n      \"vendors.title\": \"Vendeurs en Vedette\",\n      \"vendors.subtitle\":\n        \"Découvrez des produits incroyables de notre communauté de vendeurs de confiance dans le monde entier\",\n      \"vendors.rating\": \"Note\",\n      \"vendors.products\": \"Produits\",\n      \"vendors.visitStore\": \"Visiter la Boutique\",\n\n      // Dashboards\n      \"dashboard.customer.title\": \"Tableau de Bord Client\",\n      \"dashboard.customer.subtitle\":\n        \"Achetez, suivez les commandes, gérez la liste de souhaits\",\n      \"dashboard.customer.orders\": \"Commandes\",\n      \"dashboard.customer.wishlist\": \"Liste de Souhaits\",\n      \"dashboard.customer.reviews\": \"Avis\",\n      \"dashboard.customer.demo\": \"Voir Démo Client\",\n\n      \"dashboard.seller.title\": \"Tableau de Bord Vendeur\",\n      \"dashboard.seller.subtitle\":\n        \"Gérez les produits, suivez les ventes, analyses\",\n      \"dashboard.seller.products\": \"Produits\",\n      \"dashboard.seller.sales\": \"Ventes\",\n      \"dashboard.seller.customers\": \"Clients\",\n      \"dashboard.seller.demo\": \"Voir Démo Vendeur\",\n\n      \"dashboard.admin.title\": \"Tableau de Bord Admin\",\n      \"dashboard.admin.subtitle\":\n        \"Contrôle complet de la plateforme et analyses\",\n      \"dashboard.admin.totalUsers\": \"Total Utilisateurs\",\n      \"dashboard.admin.vendors\": \"Vendeurs\",\n      \"dashboard.admin.revenue\": \"Revenus\",\n      \"dashboard.admin.demo\": \"Voir Démo Admin\",\n\n      // Dashboard section\n      \"dashboards.title\": \"Tableaux de Bord Puissants pour Chaque Rôle\",\n      \"dashboards.subtitle\":\n        \"Que vous soyez client, vendeur ou administrateur, notre plateforme fournit des outils intuitifs pour gérer votre expérience marketplace\",\n\n      // Authentication\n      \"auth.login\": \"Connexion\",\n      \"auth.register\": \"S'inscrire\",\n      \"auth.welcome\": \"Bon Retour\",\n      \"auth.createAccount\": \"Créer un Compte\",\n      \"auth.email\": \"Email\",\n      \"auth.username\": \"Nom d'utilisateur\",\n      \"auth.password\": \"Mot de passe\",\n      \"auth.firstName\": \"Prénom\",\n      \"auth.lastName\": \"Nom\",\n      \"auth.role\": \"Rôle\",\n      \"auth.client\": \"Client\",\n      \"auth.seller\": \"Vendeur\",\n      \"auth.admin\": \"Admin\",\n      \"auth.loginButton\": \"Se Connecter\",\n      \"auth.registerButton\": \"Créer un Compte\",\n      \"auth.switchToRegister\": \"Pas de compte? S'inscrire\",\n      \"auth.switchToLogin\": \"Déjà un compte? Se connecter\",\n      \"auth.forgotPassword\": \"Mot de passe oublié?\",\n\n      // Footer\n      \"footer.description\":\n        \"La marketplace multi-vendeur leader mondial connectant acheteurs et vendeurs globalement. Achetez auprès de milliers de vendeurs de confiance avec support multilingue.\",\n      \"footer.quickLinks\": \"Liens Rapides\",\n      \"footer.aboutUs\": \"À Propos\",\n      \"footer.howItWorks\": \"Comment Ça Marche\",\n      \"footer.becomeSeller\": \"Devenir Vendeur\",\n      \"footer.careers\": \"Carrières\",\n      \"footer.blog\": \"Blog\",\n      \"footer.customerService\": \"Service Client\",\n      \"footer.helpCenter\": \"Centre d'Aide\",\n      \"footer.contactUs\": \"Nous Contacter\",\n      \"footer.shippingInfo\": \"Info Expédition\",\n      \"footer.returns\": \"Retours\",\n      \"footer.trackOrder\": \"Suivre Commande\",\n      \"footer.legal\": \"Légal\",\n      \"footer.privacyPolicy\": \"Politique de Confidentialité\",\n      \"footer.termsOfService\": \"Conditions de Service\",\n      \"footer.cookiePolicy\": \"Politique des Cookies\",\n      \"footer.gdpr\": \"RGPD\",\n      \"footer.compliance\": \"Conformité\",\n      \"footer.copyright\": \"© 2024 MultiMarket. Tous droits réservés.\",\n      \"footer.languages\": \"Disponible en 15+ langues\",\n      \"footer.secure\": \"Sécurisé et de Confiance\",\n\n      // Common\n      \"common.loading\": \"Chargement...\",\n      \"common.error\": \"Erreur\",\n      \"common.success\": \"Succès\",\n      \"common.cancel\": \"Annuler\",\n      \"common.save\": \"Sauvegarder\",\n      \"common.edit\": \"Modifier\",\n      \"common.delete\": \"Supprimer\",\n      \"common.view\": \"Voir\",\n      \"common.close\": \"Fermer\",\n      \"common.search\": \"Rechercher\",\n      \"common.filter\": \"Filtrer\",\n      \"common.sort\": \"Trier\",\n      \"common.more\": \"Plus\",\n      \"common.less\": \"Moins\",\n      \"common.all\": \"Tous\",\n      \"common.none\": \"Aucun\",\n      \"common.back\": \"Retour\",\n      \"common.next\": \"Suivant\",\n      \"common.previous\": \"Précédent\",\n      \"common.confirm\": \"Confirmer\",\n      \"common.clear\": \"Effacer la recherche\",\n      \"common.resetFilters\": \"Réinitialiser les filtres\",\n\n      // Order details\n      \"order.customerInformation\": \"Informations client\",\n      \"order.productsOrdered\": \"Produits commandés\",\n      \"order.delivery\": \"Livraison\",\n      \"order.financialSummary\": \"Résumé financier\",\n      \"order.clientId\": \"Client n°\",\n      \"order.orderPlacedOn\": \"Commande passée le:\",\n      \"order.deliveryAddress\": \"Adresse de livraison\",\n      \"order.method\": \"Méthode:\",\n      \"order.estimatedTime\": \"Temps estimé:\",\n      \"order.status\": \"Statut:\",\n      \"order.shipped\": \"Expédié\",\n      \"order.freeDelivery\": \"Livraison gratuite\",\n      \"order.workingDays\": \"jours ouvrés\",\n      \"order.subtotal\": \"Sous-total\",\n      \"order.items\": \"articles\",\n      \"order.deliveryCosts\": \"Frais de livraison:\",\n      \"order.vat\": \"TVA\",\n      \"order.free\": \"Gratuit\",\n      \"order.total\": \"Total:\",\n      \"order.payment\": \"Paiement:\",\n      \"order.paid\": \"Payé\",\n      \"order.viewDetails\": \"Voir les détails\",\n      \"order.approve\": \"Approuver\",\n      \"order.reject\": \"Rejeter\",\n      \"order.seeAllOrders\": \"Voir toutes les commandes\",\n      \"order.articles\": \"articles\",\n    },\n  },\n  ar: {\n    common: {\n      // Header\n      \"search.placeholder\": \"ابحث عن المنتجات والفئات والبائعين...\",\n      \"nav.cart\": \"عربة التسوق\",\n      \"nav.profile\": \"الملف الشخصي\",\n      \"nav.searchPlaceholder\": \"ابحث عن المنتجات والعلامات التجارية والمزيد\",\n      \"nav.deals\": \"العروض والتخفيضات\",\n      \"nav.logout\": \"تسجيل الخروج\",\n      \"nav.login\": \"تسجيل الدخول\",\n      title: \"مولتيماركيت\",\n      \"admin.heading.sub\": \"إدارة المنصة والإشراف على جميع العمليات\",\n      \"header.heading\": \"مساحة المتجر\",\n      \"client.header.heading\": \"مساحة العميل\",\n\n      //Admin Dashboard Body\n      \"admin.heading\": \"لوحة تحكم الإدارة\",\n      \"admin.subheading\": \"إدارة المنصة والإشراف على جميع العمليات\",\n      \"admin.card.Revenue\": \"الإيرادات\",\n      \"admin.card.Orders\": \"الطلبات\",\n      \"admin.card.Shops\": \"المتاجر\",\n      \"admin.card.Customers\": \"العملاء\",\n      \"admin.card.dic\": \"مقابل الفترة السابقة\",\n      \"admin.sales.heading\": \"نظرة عامة على المنصة\",\n      \"admin.sales.subheading\": \"اتجاهات المبيعات\",\n      \"admin.active.heading\": \"المتاجر النشطة\",\n      \"admin.active.link\": \"إدارة المتجر\",\n      \"admin.papul.heading\": \"المنتجات الشائعة\",\n      \"admin.papul.tag\": \"المنتجات\",\n      \"admin.recent.heading\": \"المستخدمون الجدد\",\n      \"admin.recent.link\": \"إدارة المستخدمين\",\n      \"admin.recent.orders\": \"الطلبات الحديثة (جميع المتاجر)\",\n      \"admin.recent.today\": \"اليوم\",\n      \"admin.recent.orders.link\": \"عرض جميع الطلبات\",\n      \"admin.orders.header.order\": \"الطلب\",\n      \"admin.orders.header.client\": \"العميل\",\n      \"admin.orders.header.store\": \"المتجر\",\n      \"admin.orders.header.status\": \"الحالة\",\n      \"admin.orders.header.payment\": \"الدفع\",\n      \"admin.orders.header.articles\": \"المقالات\",\n      \"admin.orders.header.amount\": \"المبلغ\",\n      \"admin.orders.header.actions\": \"الإجراءات\",\n\n      //Seller Dashboard Body\n      \"seller.dashboard.title\": \"لوحة تحكم المتجر\",\n      \"seller.dashboard.subtitle\": \"إدارة متجرك وأدائك\",\n      \"seller.dashboard.turnover\": \"المبيعات\",\n      \"seller.dashboard.orders\": \"الطلبات\",\n      \"seller.dashboard.products\": \"المنتجات\",\n      \"seller.dashboard.promotions\": \"العروض\",\n      \"seller.dashboard.total\": \"الإجمالي\",\n      \"seller.dashboard.assets\": \"الأصول\",\n      \"seller.dashboard.breakup\": \"التقسيم\",\n      \"seller.dashboard.lowstock\": \"مخزون منخفض\",\n      \"seller.dashboard.featured\": \"مميز\",\n      \"seller.dashboard.productmanagement\": \"إدارة المنتجات\",\n      \"seller.dashboard.noproducts\": \"لا توجد منتجات\",\n      \"seller.dashboard.addproduct\": \"إضافة منتج\",\n      \"seller.dashboard.searchproduct\": \"ابحث عن منتج\",\n      \"seller.dashboard.addfirstproduct\": \"أضف منتجك الأول\",\n      \"seller.dashboard.export\": \"تصدير\",\n      \"seller.dashboard.salestrend\": \"اتجاه المبيعات\",\n      \"seller.dashboard.salestrend.place\": \"مكان مخطط اتجاه المبيعات\",\n      \"seller.dashboard.distributioncategory\": \"التوزيع حسب الفئة\",\n      \"seller.dashboard.distributioncategory.place\":\n        \"مكان مخطط التوزيع حسب الفئة\",\n      \"seller.popular.products\": \"المنتجات الشائعة\",\n      \"seller.popular.results\": \"النتائج\",\n      \"seller.CurrentDisputes\": \"العملاء الجدد\",\n      \"seller.CurrentDisputes.cases\": \"حالات\",\n      \"seller.CurrentDisputes.history\": \"تاريخ النزاعات\",\n      \"seller.recent.orders\": \"الطلبات الحديثة\",\n      \"seller.recent.orders.view\": \"عرض جميع الطلبات\",\n      \"seller.recent.table.order\": \"الطلب\",\n      \"seller.recent.table.actions\": \"إجراءات\",\n      \"seller.recent.table.date\": \"التاريخ\",\n      \"seller.recent.table.status\": \"الحالة\",\n      \"seller.recent.table.amount\": \"المبلغ\",\n      \"seller.recent.table.product\": \"المنتج\",\n\n      \"seller.productManagment.table.actions\": \"إجراءات\",\n      \"seller.productManagment.table.status\": \"الحالة\",\n      \"seller.productManagment.table.sku\": \"رمز المنتج (SKU)\",\n      \"seller.productManagment.table.stock\": \"المخزون\",\n      \"seller.productManagment.table.price\": \"السعر\",\n      \"seller.productManagment.table.productName\": \"اسم المنتج\",\n      \"seller.productManagment.table.image\": \"صورة\",\n\n      // Client Dashboard Body\n      \"client.dashboard.title\": \"لوحة تحكم العميل\",\n      \"client.dashboard.subtitle\": \"إدارة طلباتك ومشترياتك\",\n      \"client.dashboard.orders\": \"الطلبات\",\n      \"client.dashboard.wishlist\": \"قائمة الأمنيات\",\n      \"client.dashboard.reviews\": \"المراجعات\",\n      \"client.dashboard.Loyaltypoints\": \"نقاط الولاء\",\n      \"client.dashboard.recentorders\": \"الطلبات الحديثة\",\n      \"client.dashboard.viewall\": \"عرض الكل\",\n      \"client.dashboard.notifications\": \"الإشعارات\",\n      \"client.dashboard.notifications.item\": \"عناصر جديدة\",\n      \"client.dashboard.notifications.view\": \"عرض الكل\",\n      \"client.dashboard.recommendations\": \"التوصيات\",\n      \"client.dashboard.recommendations.view\": \"عرض المزيد من المنتجات\",\n      \"client.dashboard.QuickActions\": \"إجراءات سريعة\",\n      \"client.dashboard.QuickActions.orders\": \"تتبع طلباتي\",\n      \"client.dashboard.QuickActions.wishlist\": \"قائمة الأمنيات الخاصة بي\",\n      \"client.dashboard.QuickActions.packages\": \"تتبع طرودي\",\n      \"client.dashboard.QuickActions.profile\": \"ملفي الشخصي\",\n\n      //Admin Sidbar\n      \"sidebar.heading\": \"الإدارة\",\n      \"sidebar.dashboard\": \"لوحة التحكم\",\n\n      \"sidebar.management\": \"الإدارة\",\n      \"sidebar.user\": \"إدارة المستخدمين\",\n      \"sidebar.store\": \"إدارة المتاجر\",\n      \"sidebar.products\": \"المنتجات\",\n      \"sidebar.category\": \"إدارة الفئات\",\n      \"sidebar.order\": \"إدارة الطلبات\",\n      \"sidebar.blacklist\": \"المنتجات المحظورة\",\n\n      \"sidebar.moderation\": \"الإشراف\",\n      \"sidebar.dispute\": \"إدارة النزاعات\",\n      \"sidebar.productReports\": \"تقارير المنتجات\",\n      \"sidebar.reportedReviews\": \"المراجعات المبلغ عنها\",\n      \"sidebar.moderationReviews\": \"مراجعات الإشراف\",\n\n      \"sidebar.transactions\": \"المعاملات\",\n      \"sidebar.withdrawal\": \"إدارة السحوبات\",\n      \"sidebar.promotions\": \"إدارة العروض الترويجية\",\n      \"sidebar.parcel\": \"تتبع الطرود\",\n      \"sidebar.invoices\": \"الفواتير\",\n      \"sidebar.income\": \"الدخل\",\n      \"sidebar.revenueStore\": \"الإيرادات حسب المتجر\",\n\n      \"sidebar.finance\": \"المالية\",\n      \"sidebar.package\": \"إدارة الباقات\",\n      \"sidebar.subscription\": \"إدارة الاشتراكات\",\n\n      \"sidebar.support\": \"الدعم\",\n      \"sidebar.customerSupport\": \"دعم العملاء\",\n      \"sidebar.messages\": \"الرسائل\",\n\n      \"sidebar.configuration\": \"الإعدادات\",\n      \"sidebar.systemSettings\": \"إعدادات النظام\",\n      \"sidebar.shipping\": \"إدارة الشحن\",\n\n      //Client Sidbar\n      \"client.heading\": \"مساحتي\",\n      \"client.subheading\": \"عميل مميز\",\n      \"client.points\": \"نقاط Ceb\",\n      \"client.pointsEquivalent\": \"ما يعادل\",\n      \"client.dashboard\": \"لوحة التحكم\",\n      \"client.products\": \"المنتجات\",\n      \"client.cart\": \"عربة التسوق\",\n      \"client.orders\": \"الطلبات\",\n      \"client.wishlist\": \"قائمة الأمنيات\",\n      \"client.messages\": \"الرسائل\",\n      \"client.orderTracking\": \"تتبع الطلب\",\n      \"client.pointsMenu\": \"النقاط\",\n      \"client.orderHistory\": \"تاريخ الطلبات\",\n      \"client.reviews\": \"مراجعاتي\",\n      \"client.notifications\": \"الإشعارات\",\n      \"client.statistics\": \"الإحصائيات\",\n      \"client.profile\": \"ملفي الشخصي\",\n      \"client.support\": \"دعم العملاء\",\n      \"client.settings\": \"الإعدادات\",\n\n      //Seller Sidbar\n      \"seller.sidebar.dashboard.heading\": \"لوحة تحكم البائع\",\n      \"seller.sidebar.dashboard.subheading\": \"إدارة عملك\",\n      \"seller.sidebar.dashboard\": \"لوحة التحكم\",\n      \"seller.sidebar.products\": \"المنتجات\",\n      \"seller.sidebar.products.inventory\": \"المخزون\",\n      \"seller.sidebar.products.overview\": \"نظرة عامة\",\n      \"seller.sidebar.products.replenishment\": \"إعادة التوريد\",\n      \"seller.sidebar.products.stockalerts\": \"تنبيهات المخزون\",\n      \"seller.sidebar.orders\": \"الطلبات\",\n      \"seller.sidebar.customers\": \"العملاء\",\n      \"seller.sidebar.messages\": \"الرسائل\",\n      \"seller.sidebar.transactions\": \"المعاملات\",\n      \"seller.sidebar.revenue\": \"الإيرادات\",\n      \"seller.sidebar.withdrawals\": \"السحوبات\",\n      \"seller.sidebar.disputes\": \"النزاعات\",\n      \"seller.sidebar.reports\": \"التقارير\",\n      \"seller.sidebar.reviews\": \"المراجعات\",\n      \"seller.sidebar.shipping\": \"الشحن\",\n      \"seller.sidebar.configuration\": \"الإعدادات\",\n      \"seller.sidebar.configuration.carriers\": \"شركات النقل\",\n      \"seller.sidebar.configuration.rates\": \"التعريفات\",\n      \"seller.sidebar.configuration.areas\": \"المناطق\",\n      \"seller.sidebar.promotions\": \"العروض الترويجية\",\n      \"seller.sidebar.settings\": \"الإعدادات\",\n      \"seller.sidebar.helpsupport\": \"المساعدة والدعم\",\n\n      //Product Management\n      // Product Management Body\n      \"product.heading\": \"إدارة المنتجات\",\n      \"product.subheading\": \"إدارة كتالوج المنتجات الخاص بك\",\n      \"product.stats.total\": \"إجمالي المنتجات\",\n      \"product.stats.instock\": \"في المخزون\",\n      \"product.stats.rupture\": \"نفد من المخزون\",\n      \"product.stats.lowstock\": \"مخزون منخفض\",\n      \"product.stats.variants\": \"مميز\",\n      \"product.stats.promotions\": \"في العروض\",\n      \"product.resume\": \"الملخص\",\n      \"product.resume.rating\": \"متوسط التقييم\",\n      \"product.resume.value\": \"قيمة المخزون\",\n      \"product.resume.rate\": \"معدل المخزون\",\n      \"product.resume.featured\": \"المنتجات المميزة\",\n      \"product.filter.heading\": \"الفلاتر والبحث\",\n      \"product.search.placeholder\": \"ابحث بالاسم أو الوصف أو SKU...\",\n      \"product.filters.category\": \"جميع الفئات\",\n      \"product.filters.status\": \"جميع الحالات\",\n      \"product.filters.foundproduct\": \" منتج(ات) تم العثور عليها \",\n      \"product.filters.sort\": \"الأحدث\",\n      \"product.actions.add\": \"إضافة منتج\",\n      \"product.actions.modify\": \"تعديل\",\n      \"product.actions.details\": \"التفاصيل\",\n      \"product.filters.image\": \"الصورة\",\n      \"product.filters.name\": \"الاسم\",\n      \"product.filters.price\": \"السعر\",\n      \"product.filters.stock\": \"المخزون\",\n      \"product.filters.sku\": \"SKU\",\n      \"product.filters.Status\": \"الحالة\",\n      \"product.filters.actions\": \"الإجراءات\",\n      \"product.stock.label\": \"المخزون:\",\n      \"product.brand\": \"الماركة\",\n      \"product.sort.price.asc\": \"السعر: من الأقل للأعلى\",\n      \"product.sort.price.desc\": \"السعر: من الأعلى للأقل\",\n      \"product.sort.name\": \"الاسم\",\n      \"product.sort.recent\": \"الأحدث\",\n      \"product.status.active\": \"نشط\",\n      \"product.status.inactive\": \"غير نشط\",\n      \"product.status.all\": \"جميع الحالات\",\n\n      //Add Product\n      \"seller.product.add.title\": \"إضافة منتج جديد\",\n      \"seller.product.edit.title\": \"تعديل المنتج\",\n      \"seller.product.add.progress\": \"التقدم\",\n      \"seller.product.add.note\": \"أكمل جميع الحقول المطلوبة لنشر منتجك\",\n      \"seller.product.add.error.productName\": \"اسم المنتج مطلوب\",\n      \"seller.product.add.error.description\": \"الوصف مطلوب\",\n      \"seller.product.add.error.price\": \"السعر مطلوب\",\n      \"seller.product.add.error.brand\": \"الماركة مطلوبة\",\n      \"seller.product.add.tab.information\": \"المعلومات\",\n      \"seller.product.add.tab.specifications\": \"المواصفات\",\n      \"seller.product.add.tab.faq\": \"الأسئلة الشائعة\",\n      \"seller.product.add.basicInfo\": \"المعلومات الأساسية\",\n      \"seller.product.add.basicInfo.desc\": \"المعلومات الأساسية حول منتجك\",\n      \"seller.product.add.productName\": \"اسم المنتج\",\n      \"seller.product.add.brand\": \"الماركة\",\n      \"seller.product.add.sku\": \"SKU\",\n      \"seller.product.add.price\": \"السعر (€)\",\n      \"seller.product.add.originalPrice\": \"السعر الأصلي (€)\",\n      \"seller.product.add.stockQuantity\": \"كمية المخزون\",\n      \"seller.product.add.status\": \"الحالة\",\n      \"seller.product.add.category\": \"الفئة\",\n      \"seller.product.add.description\": \"وصف المنتج\",\n      \"seller.product.images.title\": \"صور المنتج\",\n      \"seller.product.images.note\":\n        \"تُعتبر الصورة الأولى هي الصورة الرئيسية لمنتجك.\",\n      \"seller.product.images.upload\": \"انقر للتحميل\",\n      \"seller.product.images.addUrl\": \"أضف صورة عبر الرابط\",\n      \"seller.product.images.urlPlaceholder\": \"https://example.com/image.jpg\",\n      \"seller.product.images.recommendations.title\": \"توصيات للصور:\",\n      \"seller.product.images.recommendations.format\": \"صيغة الصورة: PNG, JPG\",\n      \"seller.product.images.recommendations.size\":\n        \"الحجم: بين 500 × 500 و2000 × 2000 بكسل\",\n      \"seller.product.images.recommendations.background\":\n        \"الخلفية: يفضل أن تكون بيضاء أو محايدة\",\n      \"seller.product.images.recommendations.watermark\":\n        \"بدون علامات مائية أو نص ترويجي\",\n      \"seller.product.images.recommendations.maxSize\":\n        \"الحجم الأقصى: 2 ميغابايت\",\n      \"seller.product.images.publish\": \"انشر المنتج\",\n      \"seller.product.images.cancel\": \"إلغاء\",\n      \"seller.product.active\": \"نشط\",\n      \"seller.product.inactive\": \"غير نشط\",\n\n      // User Management Body\n      \"user.heading\": \"إدارة المستخدمين\",\n      \"user.subheading\": \"إدارة حسابات المستخدمين وأذوناتهم\",\n      \"user.stats.total\": \"إجمالي المستخدمين\",\n      \"user.stats.pending\": \"البائعون قيد الانتظار\",\n      \"user.stats.pending.click\": \"انقر لعرض\",\n      \"user.stats.active\": \"المستخدمون النشطون\",\n      \"user.stats.sellers\": \"البائعون\",\n      \"user.stats.hold\": \"قيد الانتظار\",\n      \"user.search.placeholder\": \"ابحث بالاسم أو البريد الإلكتروني...\",\n      \"user.filters.status\": \"جميع الحالات\",\n      \"user.filters.roles\": \"جميع الأدوار\",\n      \"user.list.heading\": \"قائمة المستخدمين\",\n      \"user.list.online\": \"متصل - بيانات متزامنة\",\n      \"user.table.user\": \"المستخدم\",\n      \"user.table.role\": \"الدور\",\n      \"user.table.status\": \"الحالة\",\n      \"user.table.sellerstatus\": \"حالة البائع\",\n      \"user.table.registration\": \"التسجيل\",\n      \"user.table.lastlogin\": \"آخر تسجيل دخول\",\n      \"user.table.actions\": \"الإجراءات\",\n      \"user.actions.createTest\": \"إنشاء مستخدمين تجريبيين\",\n      \"user.actions.add\": \"إضافة مستخدم\",\n      \"user.allactive\": \"جميع النشطين\",\n      \"user.allstatus\": \"جميع الحالات\",\n      \"user.allroles\": \"جميع الأدوار\",\n      \"user.allinactive\": \"جميع غير النشطين\",\n      \"user.allonhold\": \"جميع قيد الانتظار\",\n      \"user.allterminated\": \"جميع المنتهين\",\n      \"user.allcustomer\": \"جميع العملاء\",\n      \"user.allseller\": \"جميع البائعين\",\n      \"user.alladmin\": \"جميع المسؤولين\",\n\n      //Stor Management\n      \"store.heading\": \"إدارة المتاجر\",\n      \"store.subheading\": \"إدارة والإشراف على جميع متاجر السوق\",\n      \"store.stats.total\": \"إجمالي المتاجر\",\n      \"store.stats.active\": \"المتاجر النشطة\",\n      \"store.stats.hold\": \"قيد الانتظار\",\n      \"store.stats.revenue\": \"الإيرادات\",\n      \"store.actions.add\": \"إضافة متجر جديد\",\n      \"store.list.heading\": \"قائمة المتاجر\",\n      \"store.list.code\": \"رمز المتجر\",\n      \"store.list.name\": \"المتجر\",\n      \"store.list.status\": \"الحالة\",\n      \"store.list.creation\": \"تاريخ الإنشاء\",\n      \"store.list.subscription\": \"الاشتراك\",\n      \"store.list.endsubscription\": \"نهاية الاشتراك\",\n      \"store.list.messages\": \"الرسائل المرسلة\",\n      \"store.list.lastaction\": \"آخر إجراء\",\n      \"store.list.Action\": \"الإجراء\",\n      \"store.table.details\": \"التفاصيل\",\n      \"store.table.actions\": \"الإجراءات\",\n      \"store.table.sendMessage\": \"إرسال رسالة\",\n\n      //Inventory Management\n      \"inventory.title\": \"نظرة عامة على المخزون\",\n      \"inventory.subtitle\": \"إدارة مخزون المنتجات الخاص بك\",\n      \"inventory.totalProducts\": \"إجمالي المنتجات\",\n      \"inventory.outOfStock\": \"نفد من المخزون\",\n      \"inventory.lowStock\": \"مخزون منخفض\",\n      \"inventory.toBeRestocked\": \"يجب إعادة التوريد\",\n      \"inventory.stockValue\": \"قيمة المخزون\",\n      \"inventory.export\": \"تصدير\",\n      \"inventory.search\": \"ابحث عن منتجات...\",\n      \"inventory.filter.all\": \"الكل\",\n      \"inventory.filter.breakup\": \"نفد من المخزون\",\n      \"inventory.filter.lowStock\": \"مخزون منخفض\",\n      \"inventory.filter.restock\": \"إعادة التوريد\",\n      \"inventory.table.product\": \"المنتج\",\n      \"inventory.table.sku\": \"SKU\",\n      \"inventory.table.totalStock\": \"إجمالي المخزون\",\n      \"inventory.table.available\": \"متاح\",\n      \"inventory.table.status\": \"الحالة\",\n      \"inventory.table.price\": \"السعر\",\n      \"inventory.table.actions\": \"الإجراءات\",\n      \"inventory.table.adjustment\": \"التعديل\",\n      \"inventory.table.noProducts\": \"لم يتم العثور على منتجات\",\n\n\n      \"adjustment.title\": \"تعديل المخزون\",\n      \"adjustment.available\": \"متوفر\",\n      \"adjustment.currentStock\": \"المخزون الحالي\",\n      \"adjustment.threshold\": \"حد إعادة التوريد\",\n\n      \"adjustment.type\": \"نوع التعديل\",\n      \"adjustment.increase\": \"زيادة المخزون\",\n      \"adjustment.decrease\": \"خفض المخزون\",\n\n      \"adjustment.quantity\": \"الكمية\",\n      \"adjustment.newStock\": \"المخزون الجديد\",\n\n      \"adjustment.reason\": \"السبب *\",\n      \"adjustment.selectReason\": \"اختر السبب\",\n      \"adjustment.purchase\": \"شراء\",\n      \"adjustment.sale\": \"بيع\",\n      \"adjustment.return\": \"إرجاع\",\n      \"adjustment.damage\": \"تلف\",\n      \"adjustment.loss\": \"خسارة\",\n      \"adjustment.correction\": \"تصحيح المخزون\",\n      \"adjustment.other\": \"أخرى\",\n\n      \"adjustment.notes\": \"ملاحظات (اختياري)\",\n      \"adjustment.notesPlaceholder\": \"ملاحظات إضافية...\",\n\n      \"adjustment.cancel\": \"إلغاء\",\n      \"adjustment.confirm\": \"تأكيد التعديل\",\n      \"adjustment.confirm.loading\": \"جاري التعديل...\",\n\n\n      //Category Management\n      \"categories.heading\": \"الفئات\",\n        \"categories.subheading\": \"إدارة فئات المنتجات وهيكلها\",\n        \"categories.add\": \"إضافة فئة\",\n        \"categories.addSuper\": \"إضافة فئة رئيسية\",\n        \"categories.search\": \"ابحث عن فئات...\",\n        \"categories.all\": \"جميع الفئات\",\n        \"categories.featured\": \"في المقدمة\",\n        \"categories.structure\": \"هيكل الفئات\",\n        \"categories.name\": \"اسم الفئة\",\n        \"categories.description\": \"الوصف\",\n        \"categories.products\": \"المنتجات\",\n        \"categories.subcategories\": \"الفئات الفرعية\",\n        \"categories.actions\": \"الإجراءات\",\n        \"categories.noSuperFound\": \"لم يتم العثور على فئات رئيسية\",\n        \"categories.createFirst\": \"أنشئ فئتك الرئيسية الأولى للبدء\",\n        \"categories.createBtn\": \"أنشئ فئتك الرئيسية الأولى\",\n        \"categories.features\": \"الميزات\",\n        \"categories.notfound\": \"لم يتم العثور على فئات\",\n        \"categories.createfirstcate\": \"أنشئ فئتك الأولى\",\n        \"categories.craetedesc\": \"ابدأ بإنشاء فئتك الأولى\",\n        \"categories.noMach\": \"لا تتطابق أي فئة مع معايير البحث الخاصة بك\",\n\n       \"categories.addCategory\": \"إضافة فئة\",\n        \"categories.editCategory\": \"تعديل الفئة\",\n        \"categories.type\": \"نوع الفئة\",\n        \"categories.type.standard\": \"فئة عادية\",\n        \"categories.type.standardDesc\": \"فئة عادية لتنظيم منتجاتك\",\n        \"categories.type.super\": \"فئة عليا\",\n        \"categories.type.superDesc\": \"فئة عليا يمكنها تجميع عدة فئات عادية\",\n        \"categories.type.superNote\": \"الفئات العليا تتيح لك تنظيم الفئات في مجموعات موضوعية\",\n        \"categories.parent\": \"الفئة الأصلية\",\n        \"categories.noparent\": \"لا توجد فئة أصلية\",\n        \"categories.parent.select\": \"اختر فئة أصلية لإنشاء تسلسل هرمي (اختياري)\",\n        \"categories.tabs.general\": \"معلومات عامة\",\n        \"categories.tabs.features\": \"الميزات\",\n        \"categories.tabs.seo\": \"تحسين محركات البحث\",\n        \"categories.slug\": \"المعرف (Slug)\",\n        \"categories.slug.placeholder\": \"معرف-الفئة\",\n        \"categories.icon\": \"الأيقونة\",\n        \"categories.image\": \"رابط الصورة\",\n        \"categories.image.placeholder\": \"https://example.com/image.jpg\",\n        \"categories.featuredCategory\": \"فئة مميزة\",\n        \"categories.active\": \"فئة نشطة\",\n        \"categories.cancel\": \"إلغاء\",\n        \"categories.create\": \"إنشاء الفئة\",\n      \"categories.updating\": \"جاري التحديث...\",\n      \"categories.creating\": \"جاري الإنشاء...\",\n      \"categories.update\": \"تحديث الفئة\",\n      \"categories.created\": \"إنشاء الفئة\",\n\n      \"categories.features.title\": \"ميزات المنتج\",\n        \"categories.features.add\": \"إضافة ميزة\",\n        \"categories.features.emptyTitle\": \"لم تتم إضافة أي ميزات بعد\",\n        \"categories.features.emptyDesc\": \"اضغط على \\\"إضافة ميزة\\\" للبدء\",\n        \"categories.features.feature\": \"الميزة\",\n        \"categories.features.name\": \"الاسم\",\n        \"categories.features.type\": \"النوع\",\n        \"categories.features.value\": \"القيمة\",\n        \"categories.features.mandatory\": \"إلزامي\",\n        \"categories.features.selectType\": \"اختر النوع\",\n        \"categories.features.types.text\": \"نص\",\n        \"categories.features.types.number\": \"رقم\",\n        \"categories.features.types.boolean\": \"قيمة منطقية\",\n        \"categories.features.types.select\": \"اختيار\",\n        \"categories.features.types.multiselect\": \"اختيار متعدد\",\n        \"categories.features.types.color\": \"لون\",\n        \"categories.features.types.url\": \"رابط\",\n        \"categories.features.types.true\": \"صحيح\",\n        \"categories.features.types.false\": \"خطأ\",\n\n\n      //Add Super Category\n      \"categories.addSuperCategory\": \"إضافة فئة رئيسية\", \n      \"categories.editSuperCategory\": \"تعديل الفئة الرئيسية\",\n        \"categories.generalInfo\": \"معلومات عامة\",\n        \"categories.metadata\": \"البيانات الوصفية\",\n        \"categories.seo\": \"تكوين تحسين محركات البحث\",\n        \"categories.tabs.seotitle\": \"عنوان تحسين محركات البحث\",\n        \"categories.tabs.seodesc\": \"وصف تحسين محركات البحث\",\n        \"categories.tabs.seokeywords\": \"كلمات مفتاحية تحسين محركات البحث\",\n        \"categories.preview\": \"معاينة\",\n        \"categories.superPreview\": \"معاينة الفئة الرئيسية\",\n        \"categories.previewMode\": \"وضع المعاينة\",\n        \"categories.previewNote\": \"قم بتكوين المعلومات العامة لرؤية المعاينة\",\n        \"categories.previewRequirement\": \"املأ على الأقل الاسم باللغة الفرنسية أو الإنجليزية للبدء\",\n        \"categories.superMetadata\": \"بيانات الفئة الرئيسية الوصفية\",\n        \"categories.selectMerge\": \"اختر الفئات للدمج\",\n        \"categories.seeTemplates\": \"عرض جميع القوالب\",\n        \"categories.listProperties\": \"قائمة الخصائص\",\n        \"categories.byGroups\": \"حسب المجموعات\",\n        \"categories.addMetadata\": \"إضافة بيانات وصفية\",\n        \"categories.metadataNote\": \"تتيح لك البيانات الوصفية إضافة خصائص مخصصة إلى فئة رئيسية لتكوين عرضها أو سلوكها المخصص.\",\n        \"categories.directionsUse\": \"إرشادات الاستخدام\",\n        \"categories.featuredCategoryNote\": \"ستتميز هذه الفئة الرئيسية على الصفحة الرئيسية\",\n        \"categories.visibleCategory\": \"فئة مرئية\",\n        \"categories.visibleCategoryNote\": \"ستكون هذه الفئة الرئيسية مرئية للمستخدمين\",\n        \"categories.nameFR\": \"الاسم باللغة الفرنسية\",\n        \"categories.nameEN\": \"الاسم باللغة الإنجليزية\",\n        \"categories.nameAR\": \"الاسم باللغة العربية\",\n        \"categories.descFR\": \"الوصف باللغة الفرنسية\",\n        \"categories.descEN\": \"الوصف باللغة الإنجليزية\",  \n        \"categories.descAR\": \"الوصف باللغة العربية\",\n        \"categories.supericon\": \"اسم الأيقونة (مثال: سيارة، منزل، إلخ)\",\n        \"categories.mainImage\": \"الصورة الرئيسية\",\n        \"categories.mainImageNote\": \"رابط الصورة الرئيسية لهذه الفئة الرئيسية\",\n        \"categories.superadd\": \"إضافة\",\n        \"categories.superupdate\": \"تحديث\",\n        \"categories.noTemp\": \"لم يتم تطبيق أي قوالب بعد\",\n        \"categories.choosTemp\": \"اختر القوالب لرؤية الميزات المجمعة\",\n        \"categories.apply\": \"تطبيق\",\n        \"categories.selected\": \"{{count}} فئات مختارة\",\n        \"categories.iconNot\": \"أدخل اسم أيقونة Lucid (انظر الوثائق)\",\n      \"categories.displayStyle\": \"استخدم display_style لتعيين طريقة العرض ('شبكة'، 'قائمة'، 'فسيفساء')\",\n      \"categories.bannerUrl\": \"أضف banner_url لافتة مخصصة\",\n      \"categories.featuredBrands\": \"عيّن featured_brands لتمييز علامات تجارية محددة\",\n      \"categories.enableCompare\": \"استخدم enable_compare (صحيح/خطأ) لمقارنة المنتجات\",\n      \"categories.customFilters\": \"أضف custom_filters لمرشحات خاصة بهذه الفئة العليا\",\n      \"categories.layoutType\": \"استخدم layout_type لتغيير ترتيب المنتجات\",\n      \"categories.searchBoostTerms\": \"أضف search_boost_terms لتحسين محركات البحث (SEO)\",\n\n      \n\n      // home TrendingCategories\n      \"index.popularCategories\": \"الفئات الشائعة\",\n      \"categories.medical\": \"طبي\",\n      \"categories.beauty\": \"جمال\",\n      \"categories.wellness\": \"عافية\",\n      \"categories.plumber\": \"سباك\",\n      \"categories.electrical\": \"كهربائي\",\n      \"categories.tradesmen\": \"حرفيون\",\n      \"categories.cleaning\": \"تنظيف\",\n      \"categories.tutors\": \"مدرسون\",\n      \"categories.auto\": \"سيارات\",\n      \"categories.insurance\": \"تأمين\",\n      \"categories.mortgage\": \"رهن عقاري\",\n      \"categories.kitchen\": \"مطبخ\",\n      \"categories.bathroom\": \"حمام\",\n      \n\n     // AdvertisementBanner\n      \"index.discoverNewTech\": \"اكتشف التكنولوجيا الجديدة\",\n      \"index.titanium\": \"تيتانيوم\",\n      \"index.newCamera\": \"نظام كاميرا جديد\",\n      \"index.allDayBattery\": \"بطارية تدوم طوال اليوم\",\n      \"index.buyNow\": \"اشترِ الآن\",\n      \"index.learnMore\": \"اعرف المزيد\",\n\n      // Home BestSellers\n      \"bestSellers.monthlyTitle\": \"أفضل مبيعات الشهر\",\n      \"bestSellers.weeklySellers\": \"أفضل مبيعات الأسبوع\",\n      \"bestSellers.weeklyProducts\": \"أفضل منتجات الأسبوع\",\n      \"bestSellers.customerFavorites\": \"المفضلات لدى العملاء\",\n      \"common.seeAll\": \"عرض الكل\",\n        \"common.flashSale\": \"تخفيضات فلاش\",\n        \"common.endsSoon\": \"سينتهي قريباً\",\n        \"common.wirelessHeadset\": \"سماعة رأس لاسلكية\",\n        \"common.claimed\": \"تم الحجز\",\n      \n      // HomeCarAdvertisement\n      \"index.luxuryAutomobiles\": \"سيارات فاخرة\",\n      \"index.electricLuxurySedanDesc\": \"سيدان كهربائية فاخرة بتصميم وأداء متطور.\",\n      \"index.discoverVehicle\": \"اكتشف هذه السيارة\",\n      \"index.similarVehicles\": \"سيارات مشابهة\",\n      \"index.electricSedanBMW\": \"سيدان كهربائية من بي إم دبليو بوسائل راحة فاخرة.\",\n      \"index.sportbackElectric\": \"سيارة كهربائية عالية الأداء من نوع Sportback\",\n      \"index.electricSedanTesla\": \"سيدان كهربائية من تسلا بمدى لا مثيل له.\",\n      \"index.sportElectric\": \"سيارة رياضية كهربائية عالية الأداء\",\n      \"index.viewAllModels\": \"عرض جميع الطرازات\",\n\n\n      // home FeaturesGrid\n      \"index.maximizeSales\": \"ضاعف مبيعاتك\",\n      \"index.leverageTools\": \"استفد من أدوات قوية لتنمية عملك.\",\n      \"index.exploreTools\": \"اكتشف الأدوات\",\n      \"index.discoverUniqueProducts\": \"اكتشف منتجات فريدة\",\n      \"index.browseThousands\": \"تصفح آلاف الفئات والمنتجات.\",\n      \"index.startBuying\": \"ابدأ الشراء\",\n\n      //home infoBanner\n      \"footer.fastDelivery\": \"توصيل سريع\",\n      \"footer.onOrdersOver\": \"على الطلبات التي تتجاوز مبلغًا معينًا\",\n      \"footer.securePayments\": \"مدفوعات آمنة\",\n      \"footer.protectedPayments\": \"معاملات محمية ومشفرة\",\n      \"footer.moneyBackGuarantee\": \"ضمان استعادة الأموال\",\n      \"footer.returnPolicy\": \"سياسة إرجاع سهلة\",\n\n      //home RealEstateAd\n      \"realEstate.title\": \"عقارات مميزة\",\n\n      //SellerBuyerTabs\n      \"index.becomeSeller\": \"كن بائعًا\",\n        \"index.buyOnCebleu\": \"اشترِ من Cebleu\",\n        \"index.developBusiness\": \"طور عملك\",\n        \"index.expandReach\": \"وسع نطاقك وزد مبيعاتك.\",\n        \"index.createShop\": \"أنشئ متجرك\",\n        \"index.buildOnlinePresence\": \"ابنِ حضورك على الإنترنت بسرعة.\",\n        \"index.showcaseProducts\": \"اعرض منتجاتك\",\n        \"index.uploadPrice\": \"حمّل منتجاتك وحدد الأسعار بسهولة.\",\n        \"index.analyzePerformance\": \"حلل الأداء\",\n        \"index.optimizeSelling\": \"حسّن استراتيجيتك في البيع.\",\n        \"index.startSelling\": \"ابدأ البيع\",\n        \"index.ultimateShopping\": \"تجربة التسوق المثالية\",\n        \"index.discoverQuality\": \"اكتشف منتجات عالية الجودة من بائعين موثوقين.\",\n        \"index.totalProtection\": \"حماية كاملة للمشتري\",\n        \"index.secureTransactions\": \"معاملات آمنة وموثوقة.\",\n        \"index.fastShipping\": \"شحن سريع\",\n        \"index.rapidDelivery\": \"توصيل سريع إلى بابك.\",\n        \"index.hassleReturns\": \"إرجاع بلا متاعب\",\n        \"index.simpleReturns\": \"عملية إرجاع بسيطة مع دعم كامل.\",\n        \"index.shopNow\": \"تسوق الآن\",\n\n      //home TechAdvertisement\n      \"common.flightBooking\": \"حجز رحلات\",\n      \"common.topDestinations\": \"أفضل الوجهات\",\n      \"common.limitedTimeOffer\": \"عرض لفترة محدودة\",\n      \"common.bookNow\": \"احجز الآن\",\n\n      //home HeroContent copy\n      \"popSearches.shopConfidence\": \"تسوق بثقة\",\n      \"popSearches.secureTransactions\": \"استمتع بمعاملات آمنة وموثوقة\",\n      \"common.startShopping\": \"ابدأ التسوق\",\n      \"common.secureTransactions\": \"المعاملات الآمنة\",\n\n      \"popSearches.exclusiveDeals\": \"عروض حصرية\",\n      \"popSearches.accessSpecial\": \"احصل على خصومات وعروض خاصة\",\n      \"common.viewDeals\": \"عرض العروض\",\n\n      \"popSearches.goldLevel\": \"المستوى الذهبي\",\n      \"popSearches.premiumServices\": \"خدمات مميزة للعملاء المميزين\",\n      \"popSearches.fastDelivery\": \"توصيل سريع وأولوية\",\n      \"popSearches.vipSupport\": \"دعم عملاء VIP\",\n      \"popSearches.toolsServices\": \"الأدوات والخدمات\",\n      \"popSearches.promoCreation\": \"أدوات إنشاء العروض الترويجية\",\n      \"popSearches.advancedAnalytics\": \"لوحة تحليلات متقدمة\",\n      \"popSearches.internalAdvertising\": \"حلول الإعلانات الداخلية\",\n      \"popSearches.exclusiveTraining\": \"برامج تدريب حصرية\",\n\n      \"popSearches.helpCenter\": \"مركز المساعدة\",\n      \"popSearches.customerCare\": \"دعم العملاء على مدار الساعة\",\n      \"popSearches.easyReturn\": \"إرجاع سهل\",\n      \"popSearches.quickRefund\": \"استرداد سريع للمبالغ\",\n      \"popSearches.learnMore\": \"اعرف المزيد\",\n      \"popSearches.sellOnCebleu\": \"بيع على Cebleu\",\n      \"popSearches.millionsVisitors\": \"ملايين الزوار كل شهر\",\n\n      //home ImageBanner\n      \"common.findEverything\": \"ابحث عن كل ما تحتاجه\",\n      \"common.shopDescription\": \"من الإلكترونيات إلى الأزياء، اكتشف مجموعة واسعة من المنتجات التي تناسب أسلوب حياتك.\",\n      \"common.exploreMarketplace\": \"استكشف السوق\",\n\n      //home PopularSearches\n\n\n      //home ProductCard\n      \"products.addedToCart\": \"تمت الإضافة إلى السلة\",\n      \"products.addedToWishlist\": \"تمت الإضافة إلى قائمة الرغبات\",\n      \"products.shareOnInstagram\": \"مشاركة على إنستجرام\",\n      \"products.instagramShareDescription\": \"إنستجرام لا يدعم المشاركة المباشرة.\",\n      \"products.shared\": \"تمت المشاركة\",\n      \"products.sharedOn\": \"تمت المشاركة على\",\n      \"products.reviews\": \"المراجعات\",\n      \"products.addToCart\": \"أضف إلى السلة\",\n      \"products.viewingShop\": \"عرض المتجر\",\n      \"products.viewShopBtn\": \"عرض المتجر\",\n\n      //home ProductDetails\n      \"products.color\": \"اللون\",\n      \"products.quantity\": \"الكمية\",\n      \"products.deliveryNote\": \"قد تختلف تفاصيل التسليم.\",\n      \"products.inStock\": \"متوفر في المخزون\",\n      \"products.viewShop\": \"عرض المتجر\",\n      \"products.description\": \"الوصف\",\n      \"products.specifications\": \"المواصفات\",\n      \"products.questionsAnswers\": \"الأسئلة والأجوبة\",\n      \"products.productDescription\": \"وصف المنتج\",\n      \"products.technicalDetails\": \"التفاصيل التقنية\",\n      \"products.brand\": \"العلامة التجارية\",\n      \"products.category\": \"الفئة\",\n      \"products.model\": \"الموديل\",\n      \"products.warranty\": \"الضمان\",\n      \"products.months\": \"أشهر\",\n      \"products.weight\": \"الوزن\",\n\n      // home ProductFilter\n      \"products.rating\": \"التقييم\",\n      \"products.sortBy\": \"ترتيب حسب\",\n      \"products.availability\": \"التوفر\",\n      \"products.freeShipping\": \"شحن مجاني\",\n      \"products.deliveryDay\": \"يوم التسليم\",\n      \"products.refreshRate\": \"معدل التحديث\",\n      \"products.price\": \"السعر\",\n      \"products.promotions\": \"العروض الترويجية\",\n      \"products.screenSize\": \"حجم الشاشة\",\n      \"products.resolution\": \"الدقة\",\n      \"products.apply\": \"تطبيق\",\n\n      //home ProductQA\n      \"products.questions\": \"الأسئلة\",\n      \"products.postedBy\": \"تم النشر بواسطة\",\n      \"products.community\": \"المجتمع\",\n      \"products.with\": \"مع\",\n      \"products.havingResponse\": \"يحتوي على إجابة\",\n      \"products.sortQuestions\": \"فرز الأسئلة\",\n      \"products.mostUseful\": \"الأكثر فائدة\",\n      \"products.mostRecent\": \"الأحدث\",\n      \"products.withAnswers\": \"مع إجابات\",\n      \"products.withoutAnswers\": \"بدون إجابات\",\n      \"products.askQuestion\": \"اطرح سؤالاً\",\n      \"products.searchQuestion\": \"ابحث عن سؤال...\",\n      \"products.mostUsefulQuestion\": \"السؤال الأكثر فائدة\",\n      \"products.answers\": \"الإجابات\",\n      \"products.questionPostedBy\": \"تم طرح السؤال بواسطة\",\n      \"products.on\": \"في\",\n      \"products.report\": \"إبلاغ\",\n      \"products.mostUsefulAnswer\": \"الإجابة الأكثر فائدة\",\n      \"products.answerPostedBy\": \"تمت الإجابة بواسطة\",\n      \"products.viewAllAnswers\": \"عرض كل الإجابات\",\n      \"products.viewLessInfo\": \"عرض معلومات أقل\",\n      \"products.answerQuestion\": \"أجب على هذا السؤال\",\n\n      //home ProductShowcase\n      \"products.featuredProducts\": \"المنتجات المميزة\",\n      \"products.discoverUnique\": \"اكتشف عناصر فريدة من مجموعتنا.\",\n      \"products.filters\": \"الفلاتر\",\n      \"products.filtersApplied\": \"تم تطبيق الفلاتر\",\n      \"products.exploreMore\": \"استكشاف المزيد\",\n      \"categories.electronics\": \"إلكترونيات\",\n        \"categories.smartphones\": \"الهواتف الذكية\",\n        \"categories.homeGarden\": \"المنزل والحديقة\",\n        \"categories.fashion\": \"الأزياء\",\n        \"categories.groceries\": \"البقالة\",\n        \"categories.allProducts\": \"جميع المنتجات\",\n\n      //home CodingPromotion\n      \"products.learnCoding\": \"تعلم البرمجة\",\n      \"products.freeCodingCourse\": \"احصل على دورة برمجة مجانية اليوم!\",\n      \"products.learnMore\": \"اعرف المزيد\",\n      \"products.createdForTaste\": \"مصمم من أجل المذاق\",\n      \"products.sponsored\": \"برعاية\",\n\n      //home ContinueShopping\n      \"products.continueShoppingTitle\": \"متابعة التسوق\",\n      \"products.viewMore\": \"عرض المزيد\",\n\n      //home FeaturedPromotionsSection\n      \"products.featuredPromotions\": \"العروض الترويجية المميزة\",\n      \"products.specialOffers\": \"عروض خاصة لك فقط\",\n\n      // home FeaturedSportsItem\n      \"products.featuredSports\": \"الرياضات المميزة\",\n\n      // home GiftIdeas\n      \"products.giftIdeasTitle\": \"أفكار للهدايا\",\n\n      // home ProductGroupCard\n      \"products.seeAllButton\": \"عرض الكل\",\n      // home ProductGroupsSection\n      \"products.shopByCategory\": \"تسوق حسب الفئة\",\n      // home ProductSuggestions\n      \"products.youMayAlsoLike\": \"قد يعجبك أيضاً\",\n      // home ShoppingGridSection\n      \"products.resumeShoppingWhere\": \"تابع التسوق من حيث توقفت\",\n      // home TrendingItems\n      \"products.sale\": \"بيع\",\n\n      //home filter\n        \"products.receiveTomorrow\": \"استلام غداً\",\n        \"products.expressDelivery\": \"توصيل سريع\",\n        \"products.andMore\": \"والمزيد\",\n        \"products.freeShippingFilter\": \"شحن مجاني\",\n        \"products.freeShippingDestination\": \"متاح لوجهات محددة\",\n        \"products.sortByPopularity\": \"ترتيب حسب الشعبية\",\n        \"products.sortNewest\": \"الأحدث أولاً\",\n        \"products.sortHighToLow\": \"السعر: من الأعلى إلى الأقل\",\n        \"products.sortLowToHigh\": \"السعر: من الأقل إلى الأعلى\",\n      // home productGroupsData\n       \"products.resumeShopping\": \"تابع التسوق\",\n        \"products.miniRefrigerators\": \"ثلاجات صغيرة\",\n        \"products.miniRefrigerator\": \"ثلاجة صغيرة\",\n        \"products.smartphones\": \"الهواتف الذكية\",\n        \"products.officeChairs\": \"كراسي مكتبية\",\n        \"products.books\": \"كتب\",\n        \"products.flashSales\": \"تخفيضات فلاش\",\n        \"products.gamingMonitor\": \"شاشة ألعاب\",\n        \"products.gamingDesk\": \"مكتب ألعاب\",\n        \"products.gamingMouse\": \"فأرة ألعاب\",\n        \"products.gamingHeadphones\": \"سماعات ألعاب\",\n        \"products.categoriesToExplore\": \"فئات للاستكشاف\",\n        \"products.motherboards\": \"لوحات أم\",\n        \"products.ram\": \"ذاكرة RAM\",\n        \"products.internalStorage\": \"التخزين الداخلي\",\n        \"products.offersFor\": \"عروض لـ\",\n        \"products.clients\": \"عملاء\",\n        \"products.viewConditions\": \"عرض الشروط\",\n        \"products.anniversary\": \"الذكرى السنوية\",\n        \"products.frenchShowcase\": \"المعرض الفرنسي\",\n        \"products.blackLeggings\": \"بنطال ضيق أسود\",\n        \"products.blackBackpack\": \"حقيبة ظهر سوداء\",\n        \"products.mathsBook\": \"كتاب رياضيات\",\n        \"products.bluetoothSpeaker\": \"مكبر صوت بلوتوث\",\n        \"products.childrenBook\": \"كتاب للأطفال\",\n        \"products.cordlessVacuum\": \"مكنسة كهربائية لاسلكية\",\n        \"products.smartWatch\": \"ساعة ذكية\",\n        \"products.wirelessEarbuds\": \"سماعات أذن لاسلكية\",\n        \"products.yogaMat\": \"حصيرة يوغا\",\n      // home categoryData\n\n      \"categories.phoneTablets\": \"الهواتف والأجهزة اللوحية\",\n      \"categories.tvTech\": \"التلفزيون والتقنية\",\n      \"categories.computers\": \"أجهزة الكمبيوتر\",\n      \"categories.homeKitchenOffice\": \"المنزل والمطبخ والمكتب\",\n      \"categories.appliances\": \"الأجهزة\",\n      \"categories.clothingShoes\": \"الملابس والأحذية\",\n      \"categories.healthBeauty\": \"الصحة والجمال\",\n      \"categories.videoGamesConsoles\": \"ألعاب الفيديو وأجهزة التحكم\",\n      \"categories.diy\": \"اصنعها بنفسك\",\n      \"categories.sportsLeisure\": \"الرياضة والترفيه\",\n      \"categories.babyToys\": \"الرضع والألعاب\",\n      \"categories.bricolage\": \"أعمال يدوية\",\n      \"categories.hardware\": \"الأدوات\",\n      \"categories.office\": \"المكتب\",\n      \"categories.furniture\": \"الأثاث\",\n      \"categories.stationery\": \"القرطاسية\",\n      \"categories.housekeeping\": \"التنظيف المنزلي\",\n      \"categories.pool\": \"المسابح\",\n      \"categories.heating\": \"التدفئة\",\n      \"categories.luggage\": \"الحقائب\",\n      \"categories.otherCategories.short\": \"فئات أخرى\",\n      \"categories.items\": \"عناصر\",\n\n      \"common.categories.books\": \"كتب\",\n      \"common.categories.music\": \"موسيقى\",\n      \"common.categories.automotive\": \"السيارات\",\n      \"common.categories.gifts\": \"هدايا\",\n      \"common.categories.travel\": \"السفر\",\n      \"common.categories.coffee\": \"قهوة\",\n      \"common.categories.kitchenware\": \"أدوات المطبخ\",\n      \"common.categories.movies\": \"أفلام\",\n      \"common.categories.outdoors\": \"الأنشطة الخارجية\",\n      \"common.categories.jewelry\": \"مجوهرات\",\n      \"common.categories.business\": \"الأعمال\",\n      \"common.categories.art\": \"فن\",\n      \"common.categories.photography\": \"تصوير\",\n      \"common.categories.finance.short\": \"تمويل\",\n      \"common.categories.printing.short\": \"طباعة\",\n      \"common.categories.bakery.short\": \"مخبوزات\",\n      \"common.categories.science.short\": \"علوم\",\n      \"common.categories.accessories.short\": \"إكسسوارات\",\n      \"common.categories.events.short\": \"فعاليات\",\n      \"common.categories.watches.short\": \"ساعات\",\n\n      //home VendorCard\n       \"vendors.rating\": \"تقييم\",\n        \"vendors.products\": \"منتجات\",\n        \"vendors.visitStore\": \"زيارة المتجر\",\n\n      //Shopping cart\n      \"cart.title\": \"سلة التسوق\",\n      \"cart.description\": \"راجع العناصر الخاصة بك وتابع لإتمام الطلب\",\n      \"cart.empty.title\": \"سلة التسوق فارغة\",\n      \"cart.empty.subtitle\": \"أضف بعض المنتجات للبدء!\",\n      \"cart.empty.button\": \"متابعة التسوق\",\n      \"cart.subtotal\": \"المجموع الفرعي\",\n      \"cart.subtotal.items\": \"المجموع الفرعي ({count} عناصر)\",\n      \"cart.shipping\": \"الشحن\",\n      \"cart.shipping.free\": \"مجاني\",\n      \"cart.total\": \"الإجمالي\",\n      \"cart.onlyLeft\": \"بقي فقط {count}\",\n      \"cart.checkout\": \"المتابعة لإتمام الطلب\",\n\n      // Wishlist\n\n      \"common.success\": \"نجاح\",\n        \"common.error\": \"خطأ\",\n\n        \"auth.signInRequired\": \"الرجاء تسجيل الدخول\",\n        \"wishlist.signInMessage\": \"يجب عليك تسجيل الدخول لعرض قائمة الرغبات الخاصة بك.\",\n\n        \"wishlist.title\": \"قائمة رغباتي\",\n        \"wishlist.productsInList\": \"{{count}} منتج(ات) في قائمتك\",\n        \"wishlist.emptyTitle\": \"قائمة الرغبات الخاصة بك فارغة\",\n        \"wishlist.emptyMessage\": \"ابدأ بإضافة المنتجات التي تحبها إلى قائمة رغباتك!\",\n        \"wishlist.browseProducts\": \"تصفح المنتجات\",\n        \"wishlist.messages.removed\": \"تمت إزالة المنتج من قائمة الرغبات\",\n        \"wishlist.messages.addedToCart\": \"تمت إضافة المنتج إلى سلة التسوق\",\n        \"wishlist.errors.fetch\": \"فشل في جلب قائمة الرغبات\",\n        \"wishlist.errors.remove\": \"فشل في إزالة المنتج من قائمة الرغبات\",\n        \"wishlist.errors.addToCart\": \"فشل في إضافة المنتج إلى سلة التسوق\",\n\n        \"product.description\": \"الوصف\",\n        \"product.reviews\": \"المراجعات\",\n        \"product.questions\": \"الأسئلة/الأجوبة\",\n        \"product.noDescription\": \"لا يوجد وصف متاح.\",\n        \"product.askQuestion\": \"اطرح سؤالاً\",\n        \"product.askPlaceholder\": \"اطرح سؤالك حول هذا المنتج...\",\n        \"product.submitQuestion\": \"إرسال السؤال\",\n\n      // Language switcher\n      \"language.english\": \"English\",\n      \"language.french\": \"Français\",\n      \"language.arabic\": \"العربية\",\n\n      // Hero section\n      \"hero.title\": \"اكتشف منتجات مذهلة من بائعين عالميين\",\n      \"hero.subtitle\":\n        \"تسوق من آلاف البائعين الموثوقين حول العالم. دعم متعدد اللغات، مدفوعات آمنة، وشحن سريع.\",\n      \"hero.startShopping\": \"ابدأ التسوق\",\n      \"hero.becomeSeller\": \"كن بائعاً\",\n\n      // Categories\n      \"categories.title\": \"تسوق حسب الفئة\",\n      \"categories.viewAll\": \"عرض جميع الفئات\",\n      \"category.electronics\": \"الإلكترونيات\",\n      \"category.fashion\": \"الموضة\",\n      \"category.home\": \"المنزل والحديقة\",\n      \"category.gaming\": \"الألعاب\",\n      \"category.books\": \"الكتب\",\n      \"category.sports\": \"الرياضة\",\n      \"category.automotive\": \"السيارات\",\n      \"category.more\": \"المزيد\",\n\n      // Products\n      \"products.title\": \"المنتجات المميزة\",\n      \"products.subtitle\": \"اكتشف أفضل الصفقات من بائعينا الموثوقين\",\n      \"products.sortBy\": \"ترتيب حسب:\",\n      \"products.featured\": \"مميز\",\n      \"products.priceLowHigh\": \"السعر: من الأقل للأعلى\",\n      \"products.priceHighLow\": \"السعر: من الأعلى للأقل\",\n      \"products.newest\": \"الأحدث\",\n      \"products.bestRating\": \"أفضل تقييم\",\n      \"products.addToCart\": \"إضافة للسلة\",\n      \"products.loadMore\": \"تحميل المزيد من المنتجات\",\n      \"products.fastShipping\": \"شحن سريع\",\n      \"products.freeShipping\": \"شحن مجاني\",\n      \"products.warranty\": \"ضمان سنتين\",\n      \"products.bestSeller\": \"الأكثر مبيعاً\",\n\n      // Vendors\n      \"vendors.title\": \"البائعون المميزون\",\n      \"vendors.subtitle\":\n        \"اكتشف منتجات مذهلة من مجتمع البائعين الموثوقين لدينا حول العالم\",\n      \"vendors.rating\": \"التقييم\",\n      \"vendors.products\": \"المنتجات\",\n      \"vendors.visitStore\": \"زيارة المتجر\",\n\n      // Dashboards\n      \"dashboard.customer.title\": \"لوحة تحكم العميل\",\n      \"dashboard.customer.subtitle\": \"تسوق، تتبع الطلبات، إدارة قائمة الأمنيات\",\n      \"dashboard.customer.orders\": \"الطلبات\",\n      \"dashboard.customer.wishlist\": \"قائمة الأمنيات\",\n      \"dashboard.customer.reviews\": \"المراجعات\",\n      \"dashboard.customer.demo\": \"عرض تجريبي للعميل\",\n\n      \"dashboard.seller.title\": \"لوحة تحكم البائع\",\n      \"dashboard.seller.subtitle\": \"إدارة المنتجات، تتبع المبيعات، التحليلات\",\n      \"dashboard.seller.products\": \"المنتجات\",\n      \"dashboard.seller.sales\": \"المبيعات\",\n      \"dashboard.seller.customers\": \"العملاء\",\n      \"dashboard.seller.demo\": \"عرض تجريبي للبائع\",\n\n      \"dashboard.admin.title\": \"لوحة تحكم الإدارة\",\n      \"dashboard.admin.subtitle\": \"التحكم الكامل في المنصة والتحليلات\",\n      \"dashboard.admin.totalUsers\": \"إجمالي المستخدمين\",\n      \"dashboard.admin.vendors\": \"البائعين\",\n      \"dashboard.admin.revenue\": \"الإيرادات\",\n      \"dashboard.admin.demo\": \"عرض تجريبي للإدارة\",\n\n      // Dashboard section\n      \"dashboards.title\": \"لوحات تحكم قوية لكل دور\",\n      \"dashboards.subtitle\":\n        \"سواء كنت عميلاً أو بائعاً أو مديراً، توفر منصتنا أدوات سهلة لإدارة تجربة السوق الخاصة بك\",\n\n      // Authentication\n      \"auth.login\": \"تسجيل الدخول\",\n      \"auth.register\": \"التسجيل\",\n      \"auth.welcome\": \"أهلاً بعودتك\",\n      \"auth.createAccount\": \"إنشاء حساب\",\n      \"auth.email\": \"البريد الإلكتروني\",\n      \"auth.username\": \"اسم المستخدم\",\n      \"auth.password\": \"كلمة المرور\",\n      \"auth.firstName\": \"الاسم الأول\",\n      \"auth.lastName\": \"اسم العائلة\",\n      \"auth.role\": \"الدور\",\n      \"auth.client\": \"عميل\",\n      \"auth.seller\": \"بائع\",\n      \"auth.admin\": \"مدير\",\n      \"auth.loginButton\": \"تسجيل الدخول\",\n      \"auth.registerButton\": \"إنشاء حساب\",\n      \"auth.switchToRegister\": \"ليس لديك حساب؟ سجل\",\n      \"auth.switchToLogin\": \"لديك حساب بالفعل؟ سجل دخولك\",\n      \"auth.forgotPassword\": \"نسيت كلمة المرور؟\",\n\n      // Footer\n      \"footer.description\":\n        \"السوق الرائد عالمياً متعدد البائعين الذي يربط المشترين والبائعين عالمياً. تسوق من آلاف البائعين الموثوقين مع دعم متعدد اللغات.\",\n      \"footer.quickLinks\": \"روابط سريعة\",\n      \"footer.aboutUs\": \"من نحن\",\n      \"footer.howItWorks\": \"كيف يعمل\",\n      \"footer.becomeSeller\": \"كن بائعاً\",\n      \"footer.careers\": \"الوظائف\",\n      \"footer.blog\": \"المدونة\",\n      \"footer.customerService\": \"خدمة العملاء\",\n      \"footer.helpCenter\": \"مركز المساعدة\",\n      \"footer.contactUs\": \"اتصل بنا\",\n      \"footer.shippingInfo\": \"معلومات الشحن\",\n      \"footer.returns\": \"الإرجاع\",\n      \"footer.trackOrder\": \"تتبع الطلب\",\n      \"footer.legal\": \"قانوني\",\n      \"footer.privacyPolicy\": \"سياسة الخصوصية\",\n      \"footer.termsOfService\": \"شروط الخدمة\",\n      \"footer.cookiePolicy\": \"سياسة ملفات تعريف الارتباط\",\n      \"footer.gdpr\": \"اللائحة العامة لحماية البيانات\",\n      \"footer.compliance\": \"الامتثال\",\n      \"footer.copyright\": \"© 2024 MultiMarket. جميع الحقوق محفوظة.\",\n      \"footer.languages\": \"متوفر بأكثر من 15 لغة\",\n      \"footer.secure\": \"آمن وموثوق\",\n\n      // Common\n      \"common.loading\": \"جاري التحميل...\",\n      \"common.error\": \"خطأ\",\n      \"common.success\": \"نجح\",\n      \"common.cancel\": \"إلغاء\",\n      \"common.save\": \"حفظ\",\n      \"common.edit\": \"تعديل\",\n      \"common.delete\": \"حذف\",\n      \"common.view\": \"عرض\",\n      \"common.close\": \"إغلاق\",\n      \"common.search\": \"بحث\",\n      \"common.filter\": \"تصفية\",\n      \"common.sort\": \"فرز\",\n      \"common.more\": \"المزيد\",\n      \"common.less\": \"أقل\",\n      \"common.all\": \"الكل\",\n      \"common.none\": \"لا شيء\",\n      \"common.back\": \"عودة\",\n      \"common.next\": \"التالي\",\n      \"common.previous\": \"السابق\",\n      \"common.confirm\": \"تأكيد\",\n      \"common.clear\": \"مسح البحث\",\n      \"common.resetFilters\": \"إعادة ضبط الفلاتر\",\n\n      // Order details\n      \"order.customerInformation\": \"معلومات العميل\",\n      \"order.productsOrdered\": \"المنتجات المطلوبة\",\n      \"order.delivery\": \"التسليم\",\n      \"order.financialSummary\": \"الملخص المالي\",\n      \"order.clientId\": \"رقم العميل\",\n      \"order.orderPlacedOn\": \"تم تقديم الطلب في:\",\n      \"order.deliveryAddress\": \"عنوان التسليم\",\n      \"order.method\": \"الطريقة:\",\n      \"order.estimatedTime\": \"الوقت المقدر:\",\n      \"order.status\": \"الحالة:\",\n      \"order.shipped\": \"تم الشحن\",\n      \"order.freeDelivery\": \"توصيل مجاني\",\n      \"order.workingDays\": \"أيام العمل\",\n      \"order.subtotal\": \"المجموع الفرعي\",\n      \"order.items\": \"عناصر\",\n      \"order.deliveryCosts\": \"تكاليف التوصيل:\",\n      \"order.vat\": \"ضريبة القيمة المضافة\",\n      \"order.free\": \"مجاني\",\n      \"order.total\": \"المجموع:\",\n      \"order.payment\": \"الدفع:\",\n      \"order.paid\": \"مدفوع\",\n      \"order.viewDetails\": \"عرض التفاصيل\",\n      \"order.approve\": \"الموافقة\",\n      \"order.reject\": \"الرفض\",\n      \"order.seeAllOrders\": \"عرض جميع الطلبات\",\n      \"order.articles\": \"مقالات\",\n    },\n  },\n};\n\ni18n.use(initReactI18next).init({\n  resources,\n  lng: \"en\",\n  fallbackLng: \"en\",\n  interpolation: {\n    escapeValue: false,\n  },\n  ns: [\"common\"],\n  defaultNS: \"common\",\n});\n\nexport default i18n;\n","size_bytes":182039},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2, Mail, Clock } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  // Check email verification for all users\n  if (!user.emailVerified) {\n    return (\n      <Route path={path}>\n        <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-8\">\n          <Card className=\"w-full max-w-md\">\n            <CardHeader>\n              <CardTitle className=\"text-center flex items-center justify-center\">\n                <Mail className=\"mr-2 h-5 w-5 text-blue-600\" />\n                Email Verification Required\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Alert>\n                <Mail className=\"h-4 w-4\" />\n                <AlertDescription>\n                  Please verify your email address to access your account. Check your inbox for a verification link.\n                </AlertDescription>\n              </Alert>\n              <div className=\"text-center space-y-2\">\n                <p className=\"text-sm text-gray-600\">\n                  Didn't receive the email? Check your spam folder or request a new verification email.\n                </p>\n                <Button \n                  onClick={() => window.location.href = \"/auth\"}\n                  variant=\"outline\" \n                  className=\"w-full\"\n                  data-testid=\"button-back-to-auth\"\n                >\n                  Back to Login\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </Route>\n    );\n  }\n\n  // Check seller approval status for seller routes\n  if (user.role === \"seller\" && path.includes(\"/dashboard/seller\")) {\n    if (user.sellerStatus !== \"approved\") {\n      return (\n        <Route path={path}>\n          <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-8\">\n            <Card className=\"w-full max-w-md\">\n              <CardHeader>\n                <CardTitle className=\"text-center flex items-center justify-center\">\n                  <Clock className=\"mr-2 h-5 w-5 text-orange-600\" />\n                  {user.sellerStatus === \"pending\" ? \"Approval Pending\" : \"Application Rejected\"}\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Alert variant={user.sellerStatus === \"rejected\" ? \"destructive\" : \"default\"}>\n                  <Clock className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    {user.sellerStatus === \"pending\" \n                      ? \"Your seller application is under review by our admin team. You'll receive an email notification once approved.\"\n                      : \"Your seller application has been rejected. Please contact support for more information.\"\n                    }\n                  </AlertDescription>\n                </Alert>\n                <div className=\"text-center\">\n                  <Button \n                    onClick={() => window.location.href = \"/\"}\n                    className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                    data-testid=\"button-go-home\"\n                  >\n                    Go to Homepage\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </Route>\n      );\n    }\n  }\n\n  return <Route path={path}><Component /></Route>\n}\n","size_bytes":4152},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = res.statusText;\n    try {\n      const text = await res.text();\n      if (text) {\n        try {\n          const jsonError = JSON.parse(text);\n          errorMessage = jsonError.error || text;\n        } catch {\n          errorMessage = text;\n        }\n      }\n    } catch {\n      // If reading response fails, use statusText\n    }\n    throw new Error(errorMessage);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1668},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/admin/pending-sellers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, CheckCircle, XCircle, Clock, Store } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { queryClient } from \"@/lib/queryClient\";\n\ninterface PendingSeller {\n  id: number;\n  username: string;\n  email: string;\n  firstName: string;\n  lastName: string;\n  sellerStatus: \"pending\" | \"approved\" | \"rejected\";\n  createdAt: string;\n}\n\nexport function PendingSellers() {\n  const { toast } = useToast();\n  const [processingUsers, setProcessingUsers] = useState<Set<number>>(new Set());\n\n  const { data: pendingSellers, isLoading, error } = useQuery<PendingSeller[]>({\n    queryKey: [\"/api/admin/pending-sellers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/pending-sellers\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch pending sellers\");\n      }\n      return response.json();\n    },\n  });\n\n  const approveSellerMutation = useMutation({\n    mutationFn: async ({ userId, approved }: { userId: number; approved: boolean }) => {\n      const response = await fetch(\"/api/admin/approve-seller\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ userId, approved }),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to update seller status\");\n      }\n      \n      return response.json();\n    },\n    onMutate: ({ userId }) => {\n      setProcessingUsers(prev => new Set(prev).add(userId));\n    },\n    onSuccess: (data, { userId, approved }) => {\n      toast({\n        title: \"Success\",\n        description: `Seller ${approved ? \"approved\" : \"rejected\"} successfully`,\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-sellers\"] });\n    },\n    onError: (error: Error, { userId }) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n    onSettled: (data, error, { userId }) => {\n      setProcessingUsers(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(userId);\n        return newSet;\n      });\n    },\n  });\n\n  const handleApprove = (userId: number) => {\n    approveSellerMutation.mutate({ userId, approved: true });\n  };\n\n  const handleReject = (userId: number) => {\n    approveSellerMutation.mutate({ userId, approved: false });\n  };\n\n  if (isLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Store className=\"mr-2 h-5 w-5\" />\n            Pending Seller Applications\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex items-center justify-center py-8\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary-600\" />\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  if (error) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Store className=\"mr-2 h-5 w-5\" />\n            Pending Seller Applications\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert variant=\"destructive\">\n            <XCircle className=\"h-4 w-4\" />\n            <AlertDescription>\n              Failed to load pending sellers. Please try again.\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  const pendingApplications = pendingSellers?.filter(seller => seller.sellerStatus === \"pending\") || [];\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <Store className=\"mr-2 h-5 w-5\" />\n            Pending Seller Applications\n          </div>\n          <Badge variant=\"secondary\" data-testid=\"badge-pending-count\">\n            {pendingApplications.length} Pending\n          </Badge>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        {pendingApplications.length === 0 ? (\n          <div className=\"text-center py-8\">\n            <Clock className=\"h-12 w-12 mx-auto text-gray-400 mb-4\" />\n            <p className=\"text-gray-600\" data-testid=\"text-no-pending\">\n              No pending seller applications\n            </p>\n          </div>\n        ) : (\n          <div className=\"space-y-4\">\n            {pendingApplications.map((seller) => (\n              <div\n                key={seller.id}\n                className=\"border rounded-lg p-4 bg-white shadow-sm\"\n                data-testid={`card-seller-${seller.id}`}\n              >\n                <div className=\"flex items-center justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center space-x-2 mb-2\">\n                      <h3 className=\"font-medium text-gray-900\" data-testid={`text-seller-name-${seller.id}`}>\n                        {seller.firstName} {seller.lastName}\n                      </h3>\n                      <Badge variant=\"outline\" data-testid={`badge-status-${seller.id}`}>\n                        {seller.sellerStatus}\n                      </Badge>\n                    </div>\n                    <div className=\"text-sm text-gray-600 space-y-1\">\n                      <p data-testid={`text-username-${seller.id}`}>\n                        <span className=\"font-medium\">Username:</span> {seller.username}\n                      </p>\n                      <p data-testid={`text-email-${seller.id}`}>\n                        <span className=\"font-medium\">Email:</span> {seller.email}\n                      </p>\n                      <p data-testid={`text-applied-${seller.id}`}>\n                        <span className=\"font-medium\">Applied:</span>{\" \"}\n                        {new Date(seller.createdAt).toLocaleDateString()}\n                      </p>\n                    </div>\n                  </div>\n                  <div className=\"flex space-x-2 ml-4\">\n                    <Button\n                      onClick={() => handleApprove(seller.id)}\n                      disabled={processingUsers.has(seller.id)}\n                      className=\"bg-green-600 hover:bg-green-700 text-white\"\n                      size=\"sm\"\n                      data-testid={`button-approve-${seller.id}`}\n                    >\n                      {processingUsers.has(seller.id) ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <>\n                          <CheckCircle className=\"h-4 w-4 mr-1\" />\n                          Approve\n                        </>\n                      )}\n                    </Button>\n                    <Button\n                      onClick={() => handleReject(seller.id)}\n                      disabled={processingUsers.has(seller.id)}\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      data-testid={`button-reject-${seller.id}`}\n                    >\n                      {processingUsers.has(seller.id) ? (\n                        <Loader2 className=\"h-4 w-4 animate-spin\" />\n                      ) : (\n                        <>\n                          <XCircle className=\"h-4 w-4 mr-1\" />\n                          Reject\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":7906},"client/src/components/categories/category-grid.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { \n  Laptop, \n  Shirt, \n  Home, \n  Gamepad2, \n  Book, \n  Dumbbell, \n  Car, \n  Plus \n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface Category {\n  id: string;\n  name: string;\n  slug: string;\n  icon: string;\n}\n\ninterface CategoryGridProps {\n  categories?: Category[];\n}\n\nexport function CategoryGrid({ categories }: CategoryGridProps) {\n  const { t } = useTranslation();\n\n  // Default categories with icons\n  const defaultCategories = [\n    { id: \"1\", name: t(\"category.electronics\"), slug: \"electronics\", icon: \"laptop\" },\n    { id: \"2\", name: t(\"category.fashion\"), slug: \"fashion\", icon: \"shirt\" },\n    { id: \"3\", name: t(\"category.home\"), slug: \"home-garden\", icon: \"home\" },\n    { id: \"4\", name: t(\"category.gaming\"), slug: \"gaming\", icon: \"gamepad\" },\n    { id: \"5\", name: t(\"category.books\"), slug: \"books\", icon: \"book\" },\n    { id: \"6\", name: t(\"category.sports\"), slug: \"sports\", icon: \"dumbbell\" },\n    { id: \"7\", name: t(\"category.automotive\"), slug: \"automotive\", icon: \"car\" },\n    { id: \"8\", name: t(\"category.more\"), slug: \"more\", icon: \"plus\" },\n  ];\n\n  // Transform API categories to match the expected format\n  const transformedCategories = categories?.map((category: any) => ({\n    id: category.id,\n    name: category.translations?.en?.name || category.name || \"Unnamed Category\",\n    slug: category.slug || category.name?.toLowerCase().replace(/\\s+/g, '-') || 'category',\n    icon: category.icon || 'laptop' // Default to laptop icon if no icon specified\n  }));\n\n  const categoriesToShow = transformedCategories?.length ? transformedCategories : defaultCategories;\n\n  const getIcon = (iconName: string) => {\n    const iconClass = \"text-primary-600\";\n    switch (iconName) {\n      case \"laptop\":\n        return <Laptop className={iconClass} />;\n      case \"shirt\":\n        return <Shirt className={iconClass} />;\n      case \"home\":\n        return <Home className={iconClass} />;\n      case \"gamepad\":\n        return <Gamepad2 className={iconClass} />;\n      case \"book\":\n        return <Book className={iconClass} />;\n      case \"dumbbell\":\n        return <Dumbbell className={iconClass} />;\n      case \"car\":\n        return <Car className={iconClass} />;\n      case \"plus\":\n        return <Plus className={iconClass} />;\n      default:\n        return <Laptop className={iconClass} />;\n    }\n  };\n\n  const handleCategoryClick = (category: Category) => {\n    // TODO: Navigate to category page or filter products\n    console.log(\"Category clicked:\", category.slug);\n  };\n\n  return (\n    <section className=\"py-8 border-b\">\n      <div className=\"flex items-center justify-between mb-6\">\n        <h2 className=\"text-2xl font-bold text-gray-900\" data-testid=\"text-categories-title\">\n          {t(\"categories.title\")}\n        </h2>\n        <Button \n          variant=\"ghost\"\n          className=\"text-primary-600 hover:text-primary-700 font-medium\"\n          data-testid=\"button-view-all-categories\"\n        >\n          {t(\"categories.viewAll\")}\n        </Button>\n      </div>\n      \n      <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-8 gap-4\">\n        {categoriesToShow.map((category) => (\n          <div\n            key={category.id}\n            onClick={() => handleCategoryClick(category)}\n            className=\"category-card flex flex-col items-center p-4 bg-white rounded-lg hover:shadow-md transition-all duration-200 cursor-pointer group\"\n            data-testid={`card-category-${category.slug}`}\n          >\n            <div className=\"category-icon w-12 h-12 bg-primary-100 rounded-lg flex items-center justify-center mb-3 group-hover:bg-primary-200 transition-colors\">\n              {getIcon(category.icon)}\n            </div>\n            <span \n              className=\"text-sm font-medium text-gray-700 text-center\"\n              data-testid={`text-category-name-${category.slug}`}\n            >\n              {category.name}\n            </span>\n          </div>\n        ))}\n      </div>\n    </section>\n  );\n}\n","size_bytes":4043},"client/src/components/forms/add-product-form.tsx":{"content":"import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Upload,\n  Check,\n  Package,\n  Image as ImageIcon,\n  FileText,\n  Star,\n  X,\n  Plus,\n  Save,\n  Eye,\n} from \"lucide-react\";\n\nconst SUPPORTED_LANGS = [\"en\", \"fr\", \"ar\"] as const;\n\nconst addProductSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  price: z.number().min(0, \"Price must be positive\"),\n  stockQuantity: z.number().min(0, \"Stock must be positive\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  referenceUrl: z.string().url().optional().or(z.literal(\"\")),\n  productNumber: z.string().optional(),\n  color: z.string().optional(),\n  colorFamily: z.string().optional(),\n  displaySize: z.string().optional(),\n  dimensions: z.string().optional(),\n  highlights: z.string().optional(),\n  images: z.array(z.string()).max(8, \"Maximum 8 images allowed\"),\n});\n\ntype AddProductFormData = z.infer<typeof addProductSchema>;\n\ninterface AddProductFormProps {\n  onSubmit: (data: AddProductFormData) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n}\n\nexport function AddProductForm({\n  onSubmit,\n  onCancel,\n  isLoading = false,\n}: AddProductFormProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [currentTab, setCurrentTab] = useState(\"general\");\n  const [uploadedImages, setUploadedImages] = useState<string[]>([]);\n\n  const form = useForm<AddProductFormData>({\n    resolver: zodResolver(addProductSchema),\n    defaultValues: {\n      name: \"\",\n      price: \"\" as any,\n      stockQuantity: \"\" as any,\n      description: \"\",\n      categoryId: \"\",\n      referenceUrl: \"\",\n      productNumber: \"\",\n      color: \"\",\n      colorFamily: \"\",\n      displaySize: \"\",\n      dimensions: \"\",\n      highlights: \"\",\n      images: [],\n    },\n  });\n\n  const handleSubmit = (data: AddProductFormData) => {\n    onSubmit({ ...data, images: uploadedImages });\n  };\n\n  const calculateProgress = () => {\n    const values = form.getValues();\n    let completed = 0;\n    const total = 4;\n\n    // General info\n    if (values.name && values.price > 0 && values.categoryId) completed++;\n    // Description\n    if (values.description && values.description.length >= 10) completed++;\n    // Images\n    if (uploadedImages.length > 0) completed++;\n    // Reviews (optional, so count as completed)\n    completed++;\n\n    return (completed / total) * 100;\n  };\n\n  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(event.target.files || []);\n    if (uploadedImages.length + files.length > 8) {\n      alert(\"Maximum 8 images allowed\");\n      return;\n    }\n\n    // Show loading state\n    const loadingToast = toast({\n      title: \"Uploading images...\",\n      description: \"Please wait while we upload your images.\",\n    });\n\n    try {\n      const formData = new FormData();\n      files.forEach((file) => {\n        formData.append('images', file);\n      });\n\n      const response = await fetch('/api/upload/images', {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error('Failed to upload images');\n      }\n\n      const result = await response.json();\n      \n      // Update state with uploaded file paths\n      const newImagePaths = result.files.map((file: any) => file.path);\n      setUploadedImages((prev) => [...prev, ...newImagePaths]);\n\n      loadingToast.dismiss();\n      toast({\n        title: \"Success\",\n        description: `${files.length} image(s) uploaded successfully.`,\n      });\n    } catch (error) {\n      loadingToast.dismiss();\n      console.error(\"Error uploading images:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload images. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n\n    // Reset file input\n    event.target.value = '';\n  };\n\n  const removeImage = (index: number) => {\n    setUploadedImages((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  const renderImageSlots = () => {\n    const slots = Array.from({ length: 8 }, (_, index) => {\n      const hasImage = uploadedImages[index];\n\n      return (\n        <div key={index} className=\"relative\">\n          <div className=\"w-24 h-24 border-2 border-dashed border-gray-300 rounded-lg flex items-center justify-center bg-gray-50 hover:bg-gray-100 transition-colors\">\n            {hasImage ? (\n              <>\n                <img\n                  src={uploadedImages[index]}\n                  alt={`Product ${index + 1}`}\n                  className=\"w-full h-full object-cover rounded-lg\"\n                />\n                <button\n                  type=\"button\"\n                  onClick={() => removeImage(index)}\n                  className=\"absolute -top-2 -right-2 bg-red-500 text-white rounded-full w-5 h-5 flex items-center justify-center text-xs hover:bg-red-600\"\n                >\n                  <X className=\"h-3 w-3\" />\n                </button>\n              </>\n            ) : index === 0 || uploadedImages[index - 1] ? (\n              <label className=\"cursor-pointer flex flex-col items-center justify-center w-full h-full\">\n                <input\n                  type=\"file\"\n                  accept=\"image/*\"\n                  multiple\n                  onChange={handleImageUpload}\n                  className=\"hidden\"\n                />\n                <Plus className=\"h-6 w-6 text-gray-400 mb-1\" />\n                <span className=\"text-xs text-gray-500 text-center\">\n                  {index === 0 ? \"Main Image\" : `Image ${index + 1}`}\n                </span>\n              </label>\n            ) : (\n              <div className=\"flex flex-col items-center justify-center\">\n                <ImageIcon className=\"h-6 w-6 text-gray-300 mb-1\" />\n                <span className=\"text-xs text-gray-400 text-center\">\n                  Image {index + 1}\n                </span>\n              </div>\n            )}\n          </div>\n        </div>\n      );\n    });\n\n    return slots;\n  };\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <div>\n          <h1 className=\"text-2xl font-bold text-gray-900\">\n            Add a New Product\n          </h1>\n          <p className=\"text-gray-600 mt-1\">\n            Fill in the product details below\n          </p>\n        </div>\n      </div>\n\n      {/* Progress Section */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-lg\">\n            <Package className=\"h-5 w-5 mr-2\" />\n            Progress\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <Progress value={calculateProgress()} className=\"w-full\" />\n            <div className=\"grid grid-cols-4 gap-4\">\n              <div className=\"flex items-center space-x-2\">\n                <div\n                  className={`w-4 h-4 rounded-full flex items-center justify-center ${\n                    form.watch(\"name\") &&\n                    form.watch(\"price\") > 0 &&\n                    form.watch(\"categoryId\")\n                      ? \"bg-green-500\"\n                      : \"bg-gray-300\"\n                  }`}\n                >\n                  {form.watch(\"name\") &&\n                    form.watch(\"price\") > 0 &&\n                    form.watch(\"categoryId\") && (\n                      <Check className=\"h-3 w-3 text-white\" />\n                    )}\n                </div>\n                <span className=\"text-sm text-gray-600\">General info</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div\n                  className={`w-4 h-4 rounded-full flex items-center justify-center ${\n                    form.watch(\"description\") &&\n                    form.watch(\"description\").length >= 10\n                      ? \"bg-green-500\"\n                      : \"bg-gray-300\"\n                  }`}\n                >\n                  {form.watch(\"description\") &&\n                    form.watch(\"description\").length >= 10 && (\n                      <Check className=\"h-3 w-3 text-white\" />\n                    )}\n                </div>\n                <span className=\"text-sm text-gray-600\">Description</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div\n                  className={`w-4 h-4 rounded-full flex items-center justify-center ${\n                    uploadedImages.length > 0 ? \"bg-green-500\" : \"bg-gray-300\"\n                  }`}\n                >\n                  {uploadedImages.length > 0 && (\n                    <Check className=\"h-3 w-3 text-white\" />\n                  )}\n                </div>\n                <span className=\"text-sm text-gray-600\">Images</span>\n              </div>\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-4 h-4 rounded-full bg-green-500 flex items-center justify-center\">\n                  <Check className=\"h-3 w-3 text-white\" />\n                </div>\n                <span className=\"text-sm text-gray-600\">Reviews</span>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\n          <Tabs value={currentTab} onValueChange={setCurrentTab}>\n            <TabsList className=\"grid w-full grid-cols-4\">\n              <TabsTrigger value=\"general\">General</TabsTrigger>\n              <TabsTrigger value=\"images\">Images</TabsTrigger>\n              <TabsTrigger value=\"details\">Details</TabsTrigger>\n              <TabsTrigger value=\"description\">Description</TabsTrigger>\n            </TabsList>\n\n            <TabsContent value=\"general\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Basic Information</CardTitle>\n                  <p className=\"text-sm text-gray-600\">\n                    Enter the basic product information and details\n                  </p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"name\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Product Name *</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Ex: Sneakers Nike Air Max - Red\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"price\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Price (USD) *</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              step=\"0.01\"\n                              placeholder=\"0.00\"\n                              {...field}\n                              onChange={(e) => {\n                                const value = e.target.value;\n                                field.onChange(value === \"\" ? \"\" : parseFloat(value) || 0);\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"stockQuantity\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Stock available</FormLabel>\n                          <FormControl>\n                            <Input\n                              type=\"number\"\n                              placeholder=\"100\"\n                              {...field}\n                              onChange={(e) => {\n                                const value = e.target.value;\n                                field.onChange(value === \"\" ? \"\" : parseInt(value) || 0);\n                              }}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"referenceUrl\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Reference URL</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"https://example.com/product\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"categoryId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Category *</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a category\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"electronics\">\n                                Electronics\n                              </SelectItem>\n                              <SelectItem value=\"clothing\">Clothing</SelectItem>\n                              <SelectItem value=\"home\">\n                                Home & Garden\n                              </SelectItem>\n                              <SelectItem value=\"sports\">\n                                Sports & Outdoors\n                              </SelectItem>\n                              <SelectItem value=\"books\">Books</SelectItem>\n                              <SelectItem value=\"health\">\n                                Health & Beauty\n                              </SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"productNumber\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Product number for the supplier</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"SKU or product code\"\n                              {...field}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"images\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Images</CardTitle>\n                  <p className=\"text-sm text-gray-600\">\n                    Add product images (maximum 8 images)\n                  </p>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    <div className=\"grid grid-cols-4 gap-4\">\n                      {renderImageSlots()}\n                    </div>\n\n                    <div className=\"bg-blue-50 p-4 rounded-lg\">\n                      <h4 className=\"font-medium text-blue-900 mb-2\">\n                        Recommendations for images\n                      </h4>\n                      <ul className=\"text-sm text-blue-800 space-y-1\">\n                        <li>• Format: JPG, PNG</li>\n                        <li>• Resolution: minimum 500x500px</li>\n                        <li>• Light and clear background</li>\n                        <li>• Background preferable white or neutral</li>\n                        <li>• Quality: high (&gt;50 pixels/centimeter)</li>\n                        <li>• Focus product without any margin</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"details\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Appearance and dimensions</CardTitle>\n                  <p className=\"text-sm text-gray-600\">\n                    Specify product physical characteristics\n                  </p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"color\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Color</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Ex: Red\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"colorFamily\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Color Family</FormLabel>\n                          <Select\n                            onValueChange={field.onChange}\n                            defaultValue={field.value}\n                          >\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Ex: Red\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              <SelectItem value=\"red\">Red</SelectItem>\n                              <SelectItem value=\"blue\">Blue</SelectItem>\n                              <SelectItem value=\"green\">Green</SelectItem>\n                              <SelectItem value=\"yellow\">Yellow</SelectItem>\n                              <SelectItem value=\"black\">Black</SelectItem>\n                              <SelectItem value=\"white\">White</SelectItem>\n                              <SelectItem value=\"gray\">Gray</SelectItem>\n                              <SelectItem value=\"brown\">Brown</SelectItem>\n                              <SelectItem value=\"orange\">Orange</SelectItem>\n                              <SelectItem value=\"purple\">Purple</SelectItem>\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n\n                  <div className=\"grid grid-cols-2 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"displaySize\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Display Size</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Ex: 15.6 inches\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"dimensions\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Size in W x H format</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"Ex: 30 cm x 20 cm\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            <TabsContent value=\"description\" className=\"space-y-6\">\n              <Card>\n                <CardHeader>\n                  <CardTitle>Description and highlights</CardTitle>\n                  <p className=\"text-sm text-gray-600\">\n                    Provide detailed product description and key features\n                  </p>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Description *</FormLabel>\n                        <FormControl>\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={field.value || \"\"}\n                            onChange={field.onChange}\n                            placeholder=\"Describe your product in detail...\"\n                            modules={{\n                              toolbar: [\n                                [{ header: [1, 2, 3, false] }],\n                                [\"bold\", \"italic\", \"underline\"],\n                                [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                [\"link\", \"clean\"],\n                              ],\n                            }}\n                            style={{ height: \"200px\", marginBottom: \"50px\" }}\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"highlights\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Highlights</FormLabel>\n                        <FormControl>\n                          <ReactQuill\n                            theme=\"snow\"\n                            value={field.value || \"\"}\n                            onChange={field.onChange}\n                            placeholder=\"Key features and highlights...\"\n                            modules={{\n                              toolbar: [\n                                [{ header: [1, 2, 3, false] }],\n                                [\"bold\", \"italic\", \"underline\"],\n                                [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                [\"link\", \"clean\"],\n                              ],\n                            }}\n                            style={{ height: \"150px\" }}\n                            className=\"mb-12\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n\n          <div className=\"flex justify-between items-center pt-6 border-t\">\n            <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <div className=\"flex space-x-3\">\n              <Button type=\"button\" variant=\"outline\">\n                <Eye className=\"h-4 w-4 mr-2\" />\n                Preview\n              </Button>\n              <Button type=\"submit\" disabled={isLoading}>\n                <Save className=\"h-4 w-4 mr-2\" />\n                {isLoading ? \"Saving...\" : \"Save Product\"}\n              </Button>\n            </div>\n          </div>\n        </form>\n      </Form>\n    </div>\n  );\n}\n","size_bytes":25996},"client/src/components/layout/dashboard-layout.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useSocket } from \"@/hooks/use-socket\";\nimport { DashboardSidebar } from \"./dashboard-sidebar\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { NotificationPanel } from \"@/components/ui/notification-panel\";\nimport { LanguageSwitcher } from \"@/components/ui/language-switcher\";\nimport { Search, Settings, User, LogOut, ChevronDown } from \"lucide-react\";\nimport { Input } from \"@/components/ui/input\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface DashboardLayoutProps {\n  children: React.ReactNode;\n  title?: string;\n  subtitle?: string;\n}\n\nexport function DashboardLayout({\n  children,\n  title,\n  subtitle,\n}: DashboardLayoutProps) {\n  const { user, logoutMutation } = useAuth();\n  const { t } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  // Initialize Socket.IO connection\n  useSocket();\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  return (\n    <div className=\"flex h-screen bg-gray-50\">\n      {/* Sidebar */}\n      <DashboardSidebar />\n\n      {/* Main Content */}\n      <div className=\"flex-1 flex flex-col min-w-0\">\n        {/* Top Header */}\n        <header className=\"bg-white border-b border-gray-200 px-6 py-4\">\n          <div className=\"flex items-center justify-between\">\n            {/* Left side - Title and breadcrumb */}\n            <div className=\"flex-1\">\n              {title && (\n                <div>\n                  <h1 className=\"text-2xl font-bold text-gray-900\">{title}</h1>\n                  {subtitle && (\n                    <p className=\"text-sm text-gray-600 mt-1\">{subtitle}</p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            {/* Right side - Search, Notifications, Profile */}\n            <div className=\"flex items-center space-x-4\">\n              {/* Search Bar */}\n              {/* <div className=\"relative\">\n                <Search className=\"h-4 w-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\n                <Input\n                  type=\"text\"\n                  placeholder=\"Search...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 w-64\"\n                />\n              </div> */}\n\n              {/* Language Switcher */}\n              <LanguageSwitcher />\n\n              {/* Notifications */}\n              <NotificationPanel />\n\n              {/* User Profile Dropdown */}\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"flex items-center space-x-2 px-2\"\n                  >\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage src={user?.avatar} />\n                      <AvatarFallback>\n                        {user?.firstName?.[0]}\n                        {user?.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"text-left hidden md:block\">\n                      <p className=\"text-sm font-medium\">\n                        {user?.firstName} {user?.lastName}\n                      </p>\n                      <p className=\"text-xs text-gray-500 capitalize\">\n                        {user?.role}\n                      </p>\n                    </div>\n                    <ChevronDown className=\"h-4 w-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <DropdownMenuLabel>My Account</DropdownMenuLabel>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem>\n                    <User className=\"h-4 w-4 mr-2\" />\n                    Profile Settings\n                  </DropdownMenuItem>\n                  <DropdownMenuItem>\n                    <Settings className=\"h-4 w-4 mr-2\" />\n                    Preferences\n                  </DropdownMenuItem>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem onClick={handleLogout}>\n                    <LogOut className=\"h-4 w-4 mr-2\" />\n                    Sign Out\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            </div>\n          </div>\n        </header>\n\n        {/* Main Content Area */}\n        <main className=\"flex-1 overflow-y-auto\">\n          <div className=\"p-6\">{children}</div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4865},"client/src/components/layout/dashboard-sidebar.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link, useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { cn } from \"@/lib/utils\";\nimport {\n  LayoutDashboard,\n  Package,\n  ShoppingBag,\n  Heart,\n  Clock,\n  User,\n  Settings,\n  Users,\n  BarChart3,\n  Bell,\n  Menu,\n  X,\n  MessageSquare,\n  HelpCircle,\n  Store,\n  ChevronLeft,\n  ChevronRight,\n  Truck,\n  Star,\n  BookmarkX,\n  TriangleAlert,\n  Flag,\n  Eye,\n  Wallet,\n  CreditCard,\n  TrendingUp,\n  Banknote,\n  Gift,\n  FileText,\n  Layers,\n  ShoppingCart,\n  DollarSign,\n  ChevronDown,\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  className?: string;\n}\n\ninterface NavigationItem {\n  name: string;\n  href?: string;\n  icon: any;\n  active: boolean;\n  children?: { name: string; href: string }[];\n}\n\nexport function DashboardSidebar({ className }: SidebarProps) {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const [location] = useLocation();\n  const [isCollapsed, setIsCollapsed] = useState(false);\n\n  // Navigation items based on user role\n  const getNavigationItems = (): NavigationItem[] => {\n    const baseItems: NavigationItem[] = [\n      {\n        name: t(\"sidebar.dashboard\"),\n        href: `/dashboard/${user?.role || \"client\"}`,\n        icon: LayoutDashboard,\n        active: location === `/dashboard/${user?.role || \"client\"}`,\n      },\n    ];\n\n    switch (user?.role) {\n      case \"admin\":\n        return [\n          ...baseItems,\n          {\n            name: t(\"sidebar.user\"),\n            href: \"/dashboard/admin/users\",\n            icon: Users,\n            active: location.startsWith(\"/dashboard/admin/users\"),\n          },\n          {\n            name: t(\"sidebar.store\"),\n            href: \"/dashboard/admin/stores\",\n            icon: Store,\n            active: location.startsWith(\"/dashboard/admin/stores\"),\n          },\n          {\n            name: t(\"sidebar.products\"),\n            href: \"/dashboard/admin/products\",\n            icon: Package,\n            active: location.startsWith(\"/dashboard/admin/products\"),\n          },\n          {\n            name: t(\"sidebar.category\"),\n            href: \"/dashboard/admin/categories\",\n            icon: Layers,\n            active: location.startsWith(\"/dashboard/admin/categories\"),\n          },\n          {\n            name: t(\"sidebar.order\"),\n            icon: ShoppingCart,\n            href: \"/dashboard/admin/orders\",\n            active: location.startsWith(\"/dashboard/admin/orders\"),\n          },\n          {\n            name: t(\"sidebar.blacklist\"),\n            icon: BookmarkX,\n            href: \"/dashboard/admin/blacklisted\",\n            active: location.startsWith(\"/dashboard/admin/blacklisted\"),\n          },\n          {\n            name: t(\"sidebar.dispute\"),\n            icon: TriangleAlert,\n            href: \"/dashboard/admin/disputes\",\n            active: location.startsWith(\"/dashboard/admin/disputes\"),\n          },\n          {\n            name: t(\"sidebar.productReports\"),\n            icon: Flag,\n            href: \"/dashboard/admin/report\",\n            active: location.startsWith(\"/dashboard/admin/report\"),\n          },\n          {\n            name: t(\"sidebar.reportedReviews\"),\n            icon: Flag,\n            href: \"/dashboard/admin/reviews\",\n            active: location.startsWith(\"/dashboard/admin/reviews\"),\n          },\n          {\n            name: t(\"sidebar.moderationReviews\"),\n            icon: Eye,\n            href: \"/dashboard/admin/moderation\",\n            active: location.startsWith(\"/dashboard/admin/moderation\"),\n          },\n          {\n            name: t(\"sidebar.withdrawal\"),\n            icon: Wallet,\n            href: \"/dashboard/admin/withdrawals\",\n            active: location.startsWith(\"/dashboard/admin/withdrawals\"),\n          },\n          {\n            name: t(\"sidebar.promotions\"),\n            icon: Gift,\n            href: \"/dashboard/admin/promotions\",\n            active: location.startsWith(\"/dashboard/admin/promotions\"),\n          },\n          {\n            name: t(\"sidebar.parcel\"),\n            icon: Truck,\n            href: \"/dashboard/admin/tracking\",\n            active: location.startsWith(\"/dashboard/admin/tracking\"),\n          },\n          {\n            name: t(\"sidebar.invoices\"),\n            icon: FileText,\n            href: \"/dashboard/admin/invoices\",\n            active: location.startsWith(\"/dashboard/admin/invoices\"),\n          },\n          {\n            name: t(\"sidebar.income\"),\n            icon: DollarSign,\n            href: \"/dashboard/admin/income\",\n            active: location.startsWith(\"/dashboard/admin/income\"),\n          },\n          {\n            name: t(\"sidebar.revenueStore\"),\n            icon: Store,\n            href: \"/dashboard/admin/revenues\",\n            active: location.startsWith(\"/dashboard/admin/revenues\"),\n          },\n          {\n            name: t(\"sidebar.package\"),\n            icon: Package,\n            href: \"/dashboard/admin/management\",\n            active: location.startsWith(\"/dashboard/admin/management\"),\n          },\n          {\n            name: t(\"sidebar.subscription\"),\n            icon: CreditCard,\n            href: \"/dashboard/admin/subscription\",\n            active: location.startsWith(\"/dashboard/admin/subscription\"),\n          },\n          {\n            name: t(\"sidebar.messages\"),\n            icon: MessageSquare,\n            href: \"/dashboard/admin/messages\",\n            active: location.startsWith(\"/dashboard/admin/messages\"),\n          },\n          {\n            name: t(\"sidebar.systemSettings\"),\n            icon: Settings,\n            href: \"/dashboard/admin/settings\",\n            active: location.startsWith(\"/dashboard/admin/settings\"),\n          },\n          {\n            name: t(\"sidebar.shipping\"),\n            icon: Truck,\n            href: \"/dashboard/admin/shipping\",\n            active: location.startsWith(\"/dashboard/admin/shipping\"),\n          },\n        ];\n\n      case \"seller\":\n        return [\n          ...baseItems,\n          {\n            name: t(\"seller.sidebar.products\"),\n            href: \"/dashboard/seller/products\",\n            icon: Package,\n            active: location.startsWith(\"/dashboard/seller/products\"),\n          },\n          {\n            name: t(\"seller.sidebar.products.inventory\"),\n            icon: Package,\n            children: [\n              {\n                name: t(\"seller.sidebar.products.overview\"),\n                href: \"/dashboard/seller/inventory/overview\",\n              },\n              {\n                name: t(\"seller.sidebar.products.replenishment\"),\n                href: \"/dashboard/seller/replenishment\",\n              },\n              {\n                name: t(\"seller.sidebar.products.stockalerts\"),\n                href: \"/dashboard/seller/stock-alerts\",\n              },\n            ],\n            active: false,\n            //  location.startsWith(\"/dashboard/seller/inventory\") ||\n            // location.startsWith(\"/dashboard/seller/replenishment\") ||\n            // location.startsWith(\"/dashboard/seller/stock-alerts\"),\n          },\n          {\n            name: t(\"seller.sidebar.orders\"),\n            href: \"/dashboard/seller/orders\",\n            icon: ShoppingCart,\n            active: location.startsWith(\"/dashboard/seller/orders\"),\n          },\n          {\n            name: t(\"seller.sidebar.customers\"),\n            href: \"/dashboard/seller/customers\",\n            icon: Users,\n            active: location.startsWith(\"/dashboard/seller/customers\"),\n          },\n          {\n            name: t(\"seller.sidebar.messages\"),\n            href: \"/dashboard/seller/messages\",\n            icon: MessageSquare,\n            active: location.startsWith(\"/dashboard/seller/messages\"),\n          },\n          {\n            name: t(\"seller.sidebar.transactions\"),\n            href: \"/dashboard/seller/transactions\",\n            icon: CreditCard,\n            active: location.startsWith(\"/dashboard/seller/transactions\"),\n          },\n          {\n            name: t(\"seller.sidebar.revenue\"),\n            href: \"/dashboard/seller/revenue\",\n            icon: TrendingUp,\n            active: location.startsWith(\"/dashboard/seller/revenue\"),\n          },\n          {\n            name: t(\"seller.sidebar.withdrawals\"),\n            href: \"/dashboard/seller/withdrawals\",\n            icon: Banknote,\n            active: location.startsWith(\"/dashboard/seller/withdrawals\"),\n          },\n          {\n            name: t(\"seller.sidebar.disputes\"),\n            href: \"/dashboard/seller/disputes\",\n            icon: TriangleAlert,\n            active: location.startsWith(\"/dashboard/seller/disputes\"),\n          },\n          {\n            name: t(\"seller.sidebar.reports\"),\n            href: \"/dashboard/seller/reports\",\n            icon: BarChart3,\n            active: location.startsWith(\"/dashboard/seller/reports\"),\n          },\n          {\n            name: t(\"seller.sidebar.reviews\"),\n            href: \"/dashboard/seller/reviews\",\n            icon: Star,\n            active: location.startsWith(\"/dashboard/seller/reviews\"),\n          },\n          {\n            name: t(\"seller.sidebar.shipping\"),\n            icon: Truck,\n            children: [\n              {\n                name: t(\"seller.sidebar.configuration\"),\n                href: \"/dashboard/admin/inventory/configuration\",\n              },\n              {\n                name: t(\"seller.sidebar.configuration.carriers\"),\n                href: \"/dashboard/admin/inventory/carriers\",\n              },\n              {\n                name: t(\"seller.sidebar.configuration.rates\"),\n                href: \"/dashboard/admin/inventory/rates\",\n              },\n              {\n                name: t(\"seller.sidebar.configuration.areas\"),\n                href: \"/dashboard/admin/inventory/areas\",\n              },\n            ],\n            active: false,\n            // active: location.startsWith(\"/dashboard/admin/inventory\"),\n          },\n          {\n            name: t(\"seller.sidebar.promotions\"),\n            href: \"/dashboard/seller/promotions\",\n            icon: Gift,\n            active: location.startsWith(\"/dashboard/seller/promotions\"),\n          },\n          {\n            name: t(\"seller.sidebar.settings\"),\n            href: \"/dashboard/seller/settings\",\n            icon: Settings,\n            active: location.startsWith(\"/dashboard/seller/settings\"),\n          },\n        ];\n\n      default: // client\n        return [\n          ...baseItems,\n          {\n            name: t(\"client.products\"),\n            href: \"/dashboard/client/products\",\n            icon: ShoppingBag,\n            active: location.startsWith(\"/dashboard/client/products\"),\n          },\n          {\n            name: t(\"client.cart\"),\n            href: \"/dashboard/client/shoppingcart\",\n            icon: Package,\n            active: location.startsWith(\"/dashboard/client/shoppingcart\"),\n          },\n          {\n            name: t(\"client.orders\"),\n            href: \"/dashboard/client/orders\",\n            icon: Package,\n            active: location.startsWith(\"/dashboard/client/orders\"),\n          },\n          {\n            name: t(\"client.wishlist\"),\n            href: \"/dashboard/client/wishlist\",\n            icon: Heart,\n            active: location.startsWith(\"/dashboard/client/wishlist\"),\n          },\n          {\n            name: t(\"client.messages\"),\n            href: \"/dashboard/client/messages\",\n            icon: MessageSquare,\n            active: location.startsWith(\"/dashboard/client/messages\"),\n          },\n          {\n            name: t(\"client.orderTracking\"),\n            href: \"/dashboard/client/tracking\",\n            icon: Truck,\n            active: location.startsWith(\"/dashboard/client/tracking\"),\n          },\n          {\n            name: t(\"client.pointsMenu\"),\n            href: \"/dashboard/client/points\",\n            icon: Clock,\n            active: location.startsWith(\"/dashboard/client/points\"),\n          },\n          {\n            name: t(\"client.orderHistory\"),\n            href: \"/dashboard/client/history\",\n            icon: Clock,\n            active: location.startsWith(\"/dashboard/client/history\"),\n          },\n          {\n            name: t(\"client.reviews\"),\n            href: \"/dashboard/client/reviews\",\n            icon: Star,\n            active: location.startsWith(\"/dashboard/client/reviews\"),\n          },\n          {\n            name: t(\"client.notifications\"),\n            href: \"/dashboard/client/notifications\",\n            icon: Bell,\n            active: location.startsWith(\"/dashboard/client/notifications\"),\n          },\n          {\n            name: t(\"client.statistics\"),\n            href: \"/dashboard/client/statistics\",\n            icon: BarChart3,\n            active: location.startsWith(\"/dashboard/client/statistics\"),\n          },\n          {\n            name: t(\"client.profile\"),\n            href: \"/dashboard/client/profile\",\n            icon: User,\n            active: location.startsWith(\"/dashboard/client/profile\"),\n          },\n          {\n            name: t(\"client.settings\"),\n            href: \"/dashboard/client/settings\",\n            icon: Settings,\n            active: location.startsWith(\"/dashboard/client/settings\"),\n          },\n        ];\n    }\n  };\n\n  const navigationItems = getNavigationItems();\n  const [expandedItems, setExpandedItems] = useState<string[]>([]);\n\n  const toggleDropdown = (name: string) => {\n    setExpandedItems((prev) =>\n      prev.includes(name) ? prev.filter((i) => i !== name) : [...prev, name],\n    );\n  };\n\n  return (\n    <div\n      className={cn(\n        \"flex flex-col h-full bg-white border-r border-gray-200 transition-all duration-300\",\n        isCollapsed ? \"w-16\" : \"w-64\",\n        className,\n      )}\n    >\n      {/* Header */}\n      <div className=\"flex items-center justify-between p-4 border-b border-gray-200\">\n        {!isCollapsed && (\n          <div className=\"flex items-center space-x-2\">\n            <div className=\"h-8 w-8 bg-gradient-to-br from-primary-500 to-primary-700 rounded-lg flex items-center justify-center\">\n              <Store className=\"text-white text-sm\" />\n            </div>\n            <div>\n              <h2 className=\"text-sm font-semibold text-gray-900\">\n                {user?.role === \"admin\"\n                  ? t(\"sidebar.heading\")\n                  : user?.role === \"seller\"\n                    ? t(\"seller.sidebar.dashboard.heading\")\n                    : t(\"client.heading\")}\n              </h2>\n              <p className=\"text-xs text-gray-500\">\n                {user?.role === \"admin\"\n                  ? t(\"sidebar.management\")\n                  : user?.role === \"seller\"\n                    ? t(\"seller.sidebar.dashboard.subheading\")\n                    : t(\"client.subheading\")}\n              </p>\n            </div>\n          </div>\n        )}\n\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={() => setIsCollapsed(!isCollapsed)}\n          className=\"h-8 w-8 p-0 hover:bg-gray-100\"\n        >\n          {isCollapsed ? (\n            <ChevronRight className=\"h-4 w-4\" />\n          ) : (\n            <ChevronLeft className=\"h-4 w-4\" />\n          )}\n        </Button>\n      </div>\n\n      {/* Navigation */}\n      <nav className=\"flex-1 px-2 py-4 space-y-1 overflow-y-auto\">\n        {navigationItems.map((item) => {\n          const Icon = item.icon;\n          const hasChildren = item.children && item.children.length > 0;\n          // const isExpanded = expandedItems.includes(item.name);\n          const isExpanded =\n            expandedItems.includes(item.name) ||\n            item.children?.some((child) => location === child.href);\n\n          return (\n            <div key={item.name}>\n              {hasChildren ? (\n                <Button\n                  variant=\"ghost\"\n                  className={cn(\n                    \"w-full justify-start text-left font-normal transition-colors\",\n                    isCollapsed ? \"px-2\" : \"px-3\",\n                    item.active\n                      ? \"bg-primary-50 text-primary-700 border-r-2 border-primary-500\"\n                      : \"text-gray-700 hover:bg-gray-50 hover:text-gray-900\",\n                  )}\n                  onClick={() => toggleDropdown(item.name)}\n                >\n                  {Icon && (\n                    <Icon\n                      className={cn(\n                        \"h-5 w-5 flex-shrink-0\",\n                        isCollapsed ? \"\" : \"mr-3\",\n                      )}\n                    />\n                  )}\n                  {!isCollapsed && <span>{item.name}</span>}\n                  {!isCollapsed && (\n                    <span className=\"ml-auto\">\n                      {isExpanded ? <ChevronDown /> : <ChevronRight />}\n                    </span>\n                  )}\n                </Button>\n              ) : (\n                <Link href={item.href || \"#\"}>\n                  <Button\n                    variant=\"ghost\"\n                    className={cn(\n                      \"w-full justify-start text-left font-normal transition-colors\",\n                      isCollapsed ? \"px-2\" : \"px-3\",\n                      item.active\n                        ? \"bg-primary-50 text-primary-700 border-r-2 border-primary-500\"\n                        : \"text-gray-700 hover:bg-gray-50 hover:text-gray-900\",\n                    )}\n                    onClick={(e) => {\n                      // Prevent click event from bubbling when collapsed to avoid unwanted expansion\n                      if (isCollapsed) {\n                        e.stopPropagation();\n                      }\n                    }}\n                  >\n                    {Icon && (\n                      <Icon\n                        className={cn(\n                          \"h-5 w-5 flex-shrink-0\",\n                          isCollapsed ? \"\" : \"mr-3\",\n                        )}\n                      />\n                    )}\n                    {!isCollapsed && <span>{item.name}</span>}\n                  </Button>\n                </Link>\n              )}\n              {hasChildren && isExpanded && !isCollapsed && (\n                <div className=\"ml-6 mt-1 space-y-1\">\n                  {item.children!.map((child) => {\n                    const childActive = location === child.href;\n\n                    return (\n                      <Link key={child.href} href={child.href}>\n                        <Button\n                          variant=\"ghost\"\n                          className={cn(\n                            \"w-full justify-start text-left transition-colors\",\n                            childActive\n                              ? \"bg-primary-50 text-primary-700 border-r-2 border-primary-500 font-medium\"\n                              : \"text-gray-600 hover:bg-gray-50 hover:text-gray-900\",\n                          )}\n                        >\n                          <span>{child.name}</span>\n                        </Button>\n                      </Link>\n                    );\n                  })}\n                </div>\n              )}\n              {/* {hasChildren && isExpanded && !isCollapsed && (\n                <div className=\"ml-6 mt-1 space-y-1\">\n                  {item.children!.map((child) => (\n                    <Link key={child.href} href={child.href}>\n                      <Button\n                        variant=\"ghost\"\n                        className=\"w-full justify-start text-left text-gray-600 hover:bg-gray-50\"\n                      >\n                        <span>{child.name}</span>\n                      </Button>\n                    </Link>\n                  ))}\n                </div>\n              )} */}\n            </div>\n          );\n        })}\n      </nav>\n\n      {/* Help Section */}\n      <div className=\"p-2 border-t border-gray-200\">\n        <Link href=\"/help\">\n          <Button\n            variant=\"ghost\"\n            className={cn(\n              \"w-full justify-start text-left font-normal text-gray-600 hover:bg-gray-50\",\n              isCollapsed ? \"px-2\" : \"px-3\",\n            )}\n          >\n            <HelpCircle\n              className={cn(\"h-5 w-5 flex-shrink-0\", isCollapsed ? \"\" : \"mr-3\")}\n            />\n            {!isCollapsed && <span>{t(\"seller.sidebar.helpsupport\")}</span>}\n          </Button>\n        </Link>\n      </div>\n    </div>\n  );\n}\n","size_bytes":20349},"client/src/components/layout/footer.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Store } from \"lucide-react\";\nimport {\n  Facebook,\n  Twitter,\n  Instagram,\n  Linkedin,\n  Globe,\n  Shield,\n} from \"lucide-react\";\n\nexport function Footer() {\n  const { t } = useTranslation();\n\n  return (\n    <footer className=\"bg-gray-900 text-white\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-8\">\n          {/* Company Info */}\n          <div className=\"lg:col-span-2\">\n            <div className=\"flex items-center mb-6\">\n              <div className=\"h-8 w-8 bg-gradient-to-br from-primary-500 to-primary-700 rounded-lg flex items-center justify-center\">\n                <Store className=\"text-white text-sm\" />\n              </div>\n              <span className=\"ml-2 text-xl font-bold\">CEBLEU</span>\n            </div>\n            <p\n              className=\"text-gray-300 mb-6 max-w-md\"\n              data-testid=\"text-footer-description\"\n            >\n              {t(\"footer.description\")}\n            </p>\n            <div className=\"flex space-x-4\">\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-primary-400 transition-colors\"\n                data-testid=\"link-social-facebook\"\n              >\n                <Facebook className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-primary-400 transition-colors\"\n                data-testid=\"link-social-twitter\"\n              >\n                <Twitter className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-primary-400 transition-colors\"\n                data-testid=\"link-social-instagram\"\n              >\n                <Instagram className=\"h-5 w-5\" />\n              </a>\n              <a\n                href=\"#\"\n                className=\"text-gray-400 hover:text-primary-400 transition-colors\"\n                data-testid=\"link-social-linkedin\"\n              >\n                <Linkedin className=\"h-5 w-5\" />\n              </a>\n            </div>\n          </div>\n\n          {/* Quick Links */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-6\">\n              {t(\"footer.quickLinks\")}\n            </h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-about\"\n                >\n                  {t(\"footer.aboutUs\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-how-it-works\"\n                >\n                  {t(\"footer.howItWorks\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-become-seller\"\n                >\n                  {t(\"footer.becomeSeller\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-careers\"\n                >\n                  {t(\"footer.careers\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-blog\"\n                >\n                  {t(\"footer.blog\")}\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          {/* Customer Service */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-6\">\n              {t(\"footer.customerService\")}\n            </h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-help\"\n                >\n                  {t(\"footer.helpCenter\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-contact\"\n                >\n                  {t(\"footer.contactUs\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-shipping\"\n                >\n                  {t(\"footer.shippingInfo\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-returns\"\n                >\n                  {t(\"footer.returns\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-track\"\n                >\n                  {t(\"footer.trackOrder\")}\n                </a>\n              </li>\n            </ul>\n          </div>\n\n          {/* Legal */}\n          <div>\n            <h3 className=\"text-lg font-semibold mb-6\">{t(\"footer.legal\")}</h3>\n            <ul className=\"space-y-3\">\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-privacy\"\n                >\n                  {t(\"footer.privacyPolicy\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-terms\"\n                >\n                  {t(\"footer.termsOfService\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-cookies\"\n                >\n                  {t(\"footer.cookiePolicy\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-gdpr\"\n                >\n                  {t(\"footer.gdpr\")}\n                </a>\n              </li>\n              <li>\n                <a\n                  href=\"#\"\n                  className=\"text-gray-300 hover:text-white transition-colors\"\n                  data-testid=\"link-compliance\"\n                >\n                  {t(\"footer.compliance\")}\n                </a>\n              </li>\n            </ul>\n          </div>\n        </div>\n\n        <div className=\"border-t border-gray-800 mt-12 pt-8\">\n          <div className=\"flex flex-col lg:flex-row justify-between items-center\">\n            <p className=\"text-gray-400 text-sm\" data-testid=\"text-copyright\">\n              {t(\"footer.copyright\")}\n            </p>\n            <div className=\"flex items-center space-x-6 mt-4 lg:mt-0\">\n              <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n                <Globe className=\"h-4 w-4\" />\n                <span data-testid=\"text-languages\">\n                  {t(\"footer.languages\")}\n                </span>\n              </div>\n              <div className=\"flex items-center space-x-2 text-sm text-gray-400\">\n                <Shield className=\"h-4 w-4\" />\n                <span data-testid=\"text-secure\">{t(\"footer.secure\")}</span>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":8167},"client/src/components/layout/header.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Link } from \"wouter\";\nimport { Search, ShoppingCart, User, Store } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { LanguageSwitcher } from \"@/components/ui/language-switcher\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\nexport function Header() {\n  const { t } = useTranslation();\n  const { user, logoutMutation } = useAuth();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n\n  const handleLogout = () => {\n    logoutMutation.mutate();\n  };\n\n  const getDashboardPath = () => {\n    if (!user) return \"/auth\";\n    switch (user.role) {\n      case \"admin\":\n        return \"/dashboard/admin\";\n      case \"seller\":\n        return \"/dashboard/seller\";\n      default:\n        return \"/dashboard/client\";\n    }\n  };\n\n  const getRoleBadgeColor = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return \"bg-orange-100 text-orange-700\";\n      case \"seller\":\n        return \"bg-green-100 text-green-700\";\n      default:\n        return \"bg-primary-100 text-primary-700\";\n    }\n  };\n\n  const getRoleDisplayName = (role: string) => {\n    switch (role) {\n      case \"admin\":\n        return t(\"auth.admin\");\n      case \"seller\":\n        return t(\"auth.seller\");\n      default:\n        return t(\"auth.client\");\n    }\n  };\n\n  return (\n    <header className=\"bg-white shadow-sm border-b sticky top-0 z-50\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center h-16\">\n          {/* Logo */}\n          <Link href=\"/\">\n            <div\n              className=\"flex-shrink-0 flex items-center cursor-pointer\"\n              data-testid=\"link-home\"\n            >\n              <div className=\"h-8 w-8 bg-gradient-to-br from-primary-500 to-primary-700 rounded-lg flex items-center justify-center\">\n                <Store className=\"text-white text-sm\" />\n              </div>\n              <span className=\"ml-2 text-xl font-bold text-gray-900\">\n                CEBLEU\n              </span>\n            </div>\n          </Link>\n\n          {/* Search Bar */}\n          <div className=\"flex-1 max-w-2xl mx-8\">\n            <div className=\"relative\">\n              <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                <Search className=\"h-5 w-5 text-gray-400\" />\n              </div>\n              <Input\n                type=\"text\"\n                placeholder={t(\"search.placeholder\")}\n                value={searchQuery}\n                onChange={(e) => setSearchQuery(e.target.value)}\n                className=\"block w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg bg-gray-50 focus:ring-2 focus:ring-primary-500 focus:border-transparent\"\n                data-testid=\"input-search\"\n              />\n            </div>\n          </div>\n\n          {/* Right Navigation */}\n          <div className=\"flex items-center space-x-4\">\n            {/* Language Switcher */}\n            <LanguageSwitcher />\n\n            {user && (\n              <>\n                {/* Role Badge */}\n                <Badge\n                  className={`text-xs font-medium rounded-full ${getRoleBadgeColor(user.role)}`}\n                >\n                  <span data-testid=\"text-user-role\">\n                    {getRoleDisplayName(user.role)}\n                  </span>\n                </Badge>\n\n                {/* Cart - only show for clients */}\n                {user.role === \"client\" && (\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"relative p-2 text-gray-600 hover:text-primary-600 transition-colors\"\n                    data-testid=\"button-cart\"\n                  >\n                    <ShoppingCart className=\"h-5 w-5\" />\n                    <span className=\"absolute -top-1 -right-1 bg-primary-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center\">\n                      <span data-testid=\"text-cart-count\">3</span>\n                    </span>\n                  </Button>\n                )}\n              </>\n            )}\n\n            {/* User Menu */}\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"flex items-center space-x-2 p-1\"\n                    data-testid=\"button-user-menu\"\n                  >\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage\n                        src={user.avatar || undefined}\n                        alt={user.username}\n                      />\n                      <AvatarFallback>\n                        {user.firstName?.[0]}\n                        {user.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage\n                        src={user.avatar || undefined}\n                        alt={user.username}\n                      />\n                      <AvatarFallback>\n                        {user.firstName?.[0]}\n                        {user.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p\n                        className=\"font-medium text-sm\"\n                        data-testid=\"text-user-name\"\n                      >\n                        {user.firstName} {user.lastName}\n                      </p>\n                      <p\n                        className=\"w-[200px] truncate text-xs text-muted-foreground\"\n                        data-testid=\"text-user-email\"\n                      >\n                        {user.email}\n                      </p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <Link href={getDashboardPath()}>\n                    <DropdownMenuItem\n                      className=\"cursor-pointer\"\n                      data-testid=\"link-dashboard\"\n                    >\n                      <User className=\"mr-2 h-4 w-4\" />\n                      {t(\"nav.profile\")}\n                    </DropdownMenuItem>\n                  </Link>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    onClick={handleLogout}\n                    className=\"cursor-pointer text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    data-testid=\"button-logout\"\n                  >\n                    {t(\"nav.logout\")}\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Link href=\"/auth\">\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  className=\"bg-primary-600 hover:bg-primary-700 text-white\"\n                  data-testid=\"button-login\"\n                >\n                  {t(\"nav.login\")}\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":7752},"client/src/components/modals/add-category-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { X, Plus, Trash2 } from \"lucide-react\";\nimport { useMutation, useQueryClient, useQuery } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useTranslation } from \"react-i18next\";\nimport { initDatabase } from \"server/dbInit\";\n\nconst featureSchema = z.object({\n  name: z.string().min(1, \"Feature name is required\"),\n  type: z.enum([\n    \"text\",\n    \"number\",\n    \"boolean\",\n    \"select\",\n    \"multiselect\",\n    \"color\",\n    \"url\",\n  ]),\n  value: z.string().optional(),\n  isRequired: z.boolean().default(false),\n  options: z.array(z.string()).default([]),\n  sortOrder: z.number().default(0),\n});\n\nconst categoryFormSchema = z.object({\n  id: z.string().optional(),\n  type: z.enum([\"standard\", \"super\"]),\n  parentId: z.string().optional(),\n  slug: z.string().min(1, \"Slug is required\"),\n  icon: z.string().default(\"package\"),\n  imageUrl: z.string().url().optional().or(z.literal(\"\")),\n  isFeatured: z.boolean().default(false),\n  isActive: z.boolean().default(true),\n  sortOrder: z.number().default(0),\n  metadata: z.record(z.any()).default({}),\n  // Multilingual fields\n  nameFr: z.string().min(1, \"French name is required\"),\n  nameEn: z.string().min(1, \"English name is required\"),\n  nameAr: z.string().optional(),\n  descriptionFr: z.string().optional(),\n  descriptionEn: z.string().optional(),\n  descriptionAr: z.string().optional(),\n  // SEO fields\n  seoTitleFr: z.string().optional(),\n  seoTitleEn: z.string().optional(),\n  seoTitleAr: z.string().optional(),\n  seoDescriptionFr: z.string().optional(),\n  seoDescriptionEn: z.string().optional(),\n  seoDescriptionAr: z.string().optional(),\n  seoKeywordsFr: z.string().optional(),\n  seoKeywordsEn: z.string().optional(),\n  seoKeywordsAr: z.string().optional(),\n  // Features\n  features: z.array(featureSchema).default([]),\n});\n\ntype CategoryFormData = z.infer<typeof categoryFormSchema>;\n\ninterface AddCategoryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: CategoryFormData) => void;\n  initialData?: any;\n  isEditMode?: boolean;\n}\n\nexport function AddCategoryModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  initialData,\n  isEditMode = false,\n}: AddCategoryModalProps) {\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Prepare default values based on edit mode\n  const getDefaultValues = () => {\n    if (isEditMode && initialData) {\n      const frTranslation =\n        initialData.translations?.find((t: any) => t.language === \"fr\") || {};\n      const enTranslation =\n        initialData.translations?.find((t: any) => t.language === \"en\") || {};\n      const arTranslation =\n        initialData.translations?.find((t: any) => t.language === \"ar\") || {};\n\n      return {\n        type: initialData.type || \"standard\",\n        parentId: initialData.parentId || \"\",\n        slug: initialData.slug || \"\",\n        icon: initialData.icon || \"package\",\n        imageUrl: initialData.imageUrl || \"\",\n        isFeatured: initialData.isFeatured || false,\n        isActive:\n          initialData.isActive !== undefined ? initialData.isActive : true,\n        sortOrder: initialData.sortOrder || 0,\n        metadata: initialData.metadata || {},\n        nameFr: frTranslation.name || \"\",\n        nameEn: enTranslation.name || \"\",\n        nameAr: arTranslation.name || \"\",\n        descriptionFr: frTranslation.description || \"\",\n        descriptionEn: enTranslation.description || \"\",\n        descriptionAr: arTranslation.description || \"\",\n        seoTitleFr: frTranslation.seoTitle || \"\",\n        seoTitleEn: enTranslation.seoTitle || \"\",\n        seoTitleAr: arTranslation.seoTitle || \"\",\n        seoDescriptionFr: frTranslation.seoDescription || \"\",\n        seoDescriptionEn: enTranslation.seoDescription || \"\",\n        seoDescriptionAr: arTranslation.seoDescription || \"\",\n        seoKeywordsFr: frTranslation.seoKeywords || \"\",\n        seoKeywordsEn: enTranslation.seoKeywords || \"\",\n        seoKeywordsAr: arTranslation.seoKeywords || \"\",\n        features: initialData.features || [],\n      };\n    }\n\n    return {\n      type: \"standard\",\n      parentId: \"\",\n      slug: \"\",\n      icon: \"package\",\n      imageUrl: \"\",\n      isFeatured: false,\n      isActive: true,\n      sortOrder: 0,\n      metadata: {},\n      nameFr: \"\",\n      nameEn: \"\",\n      nameAr: \"\",\n      descriptionFr: \"\",\n      descriptionEn: \"\",\n      descriptionAr: \"\",\n      seoTitleFr: \"\",\n      seoTitleEn: \"\",\n      seoTitleAr: \"\",\n      seoDescriptionFr: \"\",\n      seoDescriptionEn: \"\",\n      seoDescriptionAr: \"\",\n      seoKeywordsFr: \"\",\n      seoKeywordsEn: \"\",\n      seoKeywordsAr: \"\",\n      features: [],\n    };\n  };\n\n  const form = useForm<CategoryFormData>({\n    resolver: zodResolver(categoryFormSchema),\n    defaultValues: getDefaultValues(),\n  });\n\n  const {\n    fields: featureFields,\n    append: appendFeature,\n    remove: removeFeature,\n  } = useFieldArray({\n    control: form.control,\n    name: \"features\",\n  });\n\n  const watchedType = form.watch(\"type\");\n\n  // Reset form when modal opens with initial data\n  useEffect(() => {\n    if (isOpen) {\n      form.reset(getDefaultValues());\n    }\n  }, [isOpen, initialData, form]);\n\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: CategoryFormData & { id?: string }) => {\n      console.log(\"🚀 Form Data Received:\", data);\n\n      const categoryData = {\n        type: data.type,\n        parentId:\n          data.parentId && data.parentId !== \"none\" ? data.parentId : undefined,\n        slug: data.slug,\n        icon: data.icon,\n        imageUrl: data.imageUrl,\n        isActive: data.isActive,\n        isFeatured: data.isFeatured,\n        sortOrder: data.sortOrder,\n        metadata: data.metadata,\n        translations: [\n          {\n            language: \"fr\",\n            name: data.nameFr,\n            description: data.descriptionFr,\n            seoTitle: data.seoTitleFr,\n            seoDescription: data.seoDescriptionFr,\n            seoKeywords: data.seoKeywordsFr,\n          },\n          {\n            language: \"en\",\n            name: data.nameEn,\n            description: data.descriptionEn,\n            seoTitle: data.seoTitleEn,\n            seoDescription: data.seoDescriptionEn,\n            seoKeywords: data.seoKeywordsEn,\n          },\n          {\n            language: \"ar\",\n            name: data.nameAr,\n            description: data.descriptionAr,\n            seoTitle: data.seoTitleAr,\n            seoDescription: data.seoDescriptionAr,\n            seoKeywords: data.seoKeywordsAr,\n          },\n        ].filter((t) => t.name), // Only include translations with names\n        features: data.features,\n      };\n\n      console.log(\"📦 Category Data Prepared:\", categoryData);\n      console.log(\"🌐 API Request Details:\", {\n        method: data.id ? \"PUT\" : \"POST\",\n        url: `/api/admin/categories${data.id ? `/${data.id}` : \"\"}`,\n        payload: categoryData,\n      });\n\n      try {\n        const response = await apiRequest(\n          data.id ? \"PUT\" : \"POST\",\n          `/api/admin/categories${data.id ? `/${data.id}` : \"\"}`,\n          categoryData,\n        );\n        console.log(\"✅ API Response:\", response);\n        const result = await response.json();\n        console.log(\"📄 API Result:\", result);\n        return result;\n      } catch (error) {\n        console.error(\"❌ API Request Failed:\", error);\n        throw error;\n      }\n    },\n    onSuccess: (result, variables) => {\n      if (variables.id) {\n        toast({\n          title: \"Success\",\n          description: \"Category updated successfully\",\n        });\n      } else {\n        toast({\n          title: \"Success\",\n          description: \"Category created successfully\",\n        });\n      }\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/categories\"] });\n      form.reset(getDefaultValues());\n      onClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    form.reset(getDefaultValues());\n    setActiveTab(\"general\");\n    onClose();\n  };\n\n  const handleSubmit = (data: CategoryFormData) => {\n    console.log(\"🎯 Form Submitted with data:\", data);\n    console.log(\"📝 Form validation errors:\", form.formState.errors);\n    console.log(\"🔄 Initial data:\", initialData);\n\n    if (initialData?.id) {\n      console.log(\"📝 Updating existing category with ID:\", initialData.id);\n      // Update existing category\n      createCategoryMutation.mutate({ ...data, id: initialData.id });\n    } else {\n      console.log(\"➕ Creating new category\");\n      // Create new category\n      createCategoryMutation.mutate(data);\n    }\n  };\n\n  const addFeature = () => {\n    appendFeature({\n      name: \"\",\n      type: \"text\",\n      isRequired: false,\n      options: [],\n      sortOrder: featureFields.length,\n    });\n  };\n\n  // Fetch categories for parent selection\n  const { data: allCategories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/admin/categories\"],\n    enabled: isOpen,\n  });\n\n  // Get current language from useTranslation\n  const { i18n } = useTranslation();\n  const { t } = useTranslation();\n\n  \n  // Format categories for parent selection (only show standard categories and supercategories)\n  const parentCategories = allCategories.map((category: any) => ({\n    id: category.id,\n    name: category.translations?.find((t: any) => t.language === i18n.language)?.name || \n          category.translations?.find((t: any) => t.language === 'en')?.name ||\n          \"Unnamed Category\",\n  }));\n\n  // Debug function to fill form with test data\n  const fillTestData = () => {\n    console.log(\"🧪 Filling form with test data\");\n    form.setValue(\"type\", \"standard\");\n    form.setValue(\"slug\", \"test-category-\" + Date.now());\n    form.setValue(\"nameFr\", \"Catégorie Test\");\n    form.setValue(\"nameEn\", \"Test Category\");\n    form.setValue(\"nameAr\", \"فئة اختبار\");\n    form.setValue(\"descriptionFr\", \"Description de test en français\");\n    form.setValue(\"descriptionEn\", \"Test description in English\");\n    form.setValue(\"descriptionAr\", \"وصف الاختبار بالعربية\");\n    form.setValue(\"icon\", \"package\");\n    form.setValue(\"imageUrl\", \"\");\n    form.setValue(\"isFeatured\", false);\n    form.setValue(\"isActive\", true);\n    form.setValue(\"sortOrder\", 0);\n    form.setValue(\"parentId\", \"none\");\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent\n        className=\"max-w-4xl max-h-[90vh] overflow-y-auto\"\n        aria-describedby=\"add-category-description\"\n      >\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle>\n              {isEditMode ? t(\"categories.editCategory\") : t(\"categories.addCategory\")}\n            </DialogTitle>\n            {/* {!isEditMode && (\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={fillTestData}\n                className=\"h-8 text-xs\"\n                type=\"button\"\n              >\n                🧪 Fill Test Data\n              </Button>\n            )} */}\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(handleSubmit)}\n            className=\"space-y-6\"\n          >\n            {/* Category Type Selection */}\n            <div className=\"space-y-4\">\n              <h3 className=\"text-lg font-medium\">{t(\"categories.type\")}</h3>\n              <FormField\n                control={form.control}\n                name=\"type\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormControl>\n                      <RadioGroup\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                        className=\"space-y-3\"\n                      >\n                        <div className=\"flex items-start space-x-3\">\n                          <RadioGroupItem\n                            value=\"standard\"\n                            id=\"standard\"\n                            className=\"mt-1\"\n                          />\n                          <div className=\"space-y-1\">\n                            <label\n                              htmlFor=\"standard\"\n                              className=\"font-medium cursor-pointer\"\n                            >\n                              {t(\"categories.type.standard\")}\n                            </label>\n                            <p className=\"text-sm text-gray-600\">\n                              {t(\"categories.type.standardDesc\")}\n                            </p>\n                          </div>\n                        </div>\n                        <div className=\"flex items-start space-x-3\">\n                          <RadioGroupItem\n                            value=\"super\"\n                            id=\"super\"\n                            className=\"mt-1\"\n                          />\n                          <div className=\"space-y-1\">\n                            <label\n                              htmlFor=\"super\"\n                              className=\"font-medium cursor-pointer flex items-center gap-2\"\n                            >\n                              {t(\"categories.type.super\")}\n                              <span className=\"bg-orange-100 text-orange-800 px-2 py-1 rounded text-xs font-medium\">\n                                New\n                              </span>\n                            </label>\n                            <p className=\"text-sm text-gray-600\">\n                              {t(\"categories.type.superDesc\")}\n                            </p>\n                          </div>\n                        </div>\n                      </RadioGroup>\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n              <div className=\"text-sm text-gray-600 mt-2\">\n                {t(\"categories.type.superNote\")}\n              </div>\n            </div>\n\n            {/* Parent Category Selection - Only show for standard categories */}\n            {form.watch(\"type\") === \"standard\" && (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-lg font-medium\">{t(\"categories.parent\")}</h3>\n                <FormField\n                  control={form.control}\n                  name=\"parentId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-parent-category\">\n                            <SelectValue placeholder={t(\"categories.noparent\")} />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"none\">\n                            {t(\"categories.noparent\")}\n                          </SelectItem>\n                          {parentCategories.map((parent: any) => (\n                            <SelectItem key={parent.id} value={parent.id}>\n                              {parent.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <div className=\"text-sm text-gray-600\">\n                  {t(\"categories.parent.select\")}\n                </div>\n              </div>\n            )}\n\n            {/* Tabs for different sections */}\n            <Tabs\n              value={activeTab}\n              onValueChange={setActiveTab}\n              className=\"w-full\"\n            >\n              <TabsList className=\"grid w-full grid-cols-3\">\n                <TabsTrigger value=\"general\">{t(\"categories.tabs.general\")}</TabsTrigger>\n                <TabsTrigger value=\"features\">{t(\"categories.tabs.features\")}</TabsTrigger>\n                <TabsTrigger value=\"seo\">{t(\"categories.tabs.seo\")}</TabsTrigger>\n              </TabsList>\n\n              {/* General Information Tab */}\n              <TabsContent value=\"general\" className=\"space-y-6 mt-6\">\n                {/* Slug Field */}\n                <FormField\n                  control={form.control}\n                  name=\"slug\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>{t(\"categories.slug\")}</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder={t(\"categories.slug.placeholder\")}\n                          {...field}\n                          data-testid=\"input-slug\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                {/* Multilingual Name Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"nameFr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category Name (French)</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Nom de la catégorie\"\n                            {...field}\n                            data-testid=\"input-name-fr\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"nameEn\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category Name (English)</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Category Name\"\n                            {...field}\n                            data-testid=\"input-name-en\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"nameAr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category Name (Arabic)</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"اسم الفئة\"\n                            {...field}\n                            data-testid=\"input-name-ar\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Multilingual Description Fields */}\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"descriptionFr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (French)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Description de la catégorie\"\n                            {...field}\n                            data-testid=\"input-description-fr\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"descriptionEn\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (English)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Category description\"\n                            {...field}\n                            data-testid=\"input-description-en\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"descriptionAr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (Arabic)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"وصف الفئة\"\n                            {...field}\n                            data-testid=\"input-description-ar\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Icon and Image URL */}\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"icon\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t(\"categories.icon\")}</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"package\"\n                            {...field}\n                            data-testid=\"input-icon\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"imageUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t(\"categories.image\")}</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder={t(\"categories.image.placeholder\")}\n                            {...field}\n                            data-testid=\"input-image-url\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                {/* Switches */}\n                <div className=\"flex gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"isFeatured\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"switch-featured\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          {t(\"categories.featuredCategory\")}\n                        </FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center space-x-2\">\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"switch-active\"\n                          />\n                        </FormControl>\n                        <FormLabel className=\"text-sm font-normal\">\n                          {t(\"categories.active\")}\n                        </FormLabel>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </TabsContent>\n\n              {/* Features Tab */}\n\n              {/* Features Tab */}\n              <TabsContent value=\"features\" className=\"space-y-6 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-medium\">{t(\"categories.features.title\")}</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={addFeature}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-feature\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    {t(\"categories.features.add\")}\n                  </Button>\n                </div>\n\n                {featureFields.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p>{t(\"categories.features.emptyTitle\")}</p>\n                    <p className=\"text-sm\">{t(\"categories.features.emptyDesc\")}</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {featureFields.map((field, index) => (\n                      <div key={field.id} className=\"p-4 border rounded-lg space-y-4\">\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-gray-700\">\n                            {t(\"categories.features.feature\")} #{index + 1}\n                          </h4>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeFeature(index)}\n                            className=\"text-red-500 hover:text-red-700\"\n                            data-testid={`button-remove-feature-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name={`features.${index}.name`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>{t(\"categories.features.name\")}</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder={t(\"categories.features.name\")}\n                                    {...field}\n                                    data-testid={`input-feature-name-${index}`}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name={`features.${index}.type`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>{t(\"categories.features.type\")}</FormLabel>\n                                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                                  <FormControl>\n                                    <SelectTrigger data-testid={`select-feature-type-${index}`}>\n                                      <SelectValue placeholder={t(\"categories.features.selectType\")} />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"text\">{t(\"categories.features.types.text\")}</SelectItem>\n                                    <SelectItem value=\"number\">{t(\"categories.features.types.number\")}</SelectItem>\n                                    <SelectItem value=\"boolean\">{t(\"categories.features.types.boolean\")}</SelectItem>\n                                    <SelectItem value=\"select\">{t(\"categories.features.types.select\")}</SelectItem>\n                                    <SelectItem value=\"multiselect\">{t(\"categories.features.types.multiselect\")}</SelectItem>\n                                    <SelectItem value=\"color\">{t(\"categories.features.types.color\")}</SelectItem>\n                                    <SelectItem value=\"url\">{t(\"categories.features.types.url\")}</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name={`features.${index}.isRequired`}\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center space-x-2\">\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid={`switch-feature-required-${index}`}\n                                />\n                              </FormControl>\n                              <FormLabel className=\"text-sm font-normal\">\n                                {t(\"categories.features.mandatory\")}\n                              </FormLabel>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </TabsContent>\n\n              {/* <TabsContent value=\"features\" className=\"space-y-6 mt-6\">\n                <div className=\"flex items-center justify-between\">\n                  <h3 className=\"text-lg font-medium\">Product Features</h3>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={addFeature}\n                    className=\"flex items-center gap-2\"\n                    data-testid=\"button-add-feature\"\n                  >\n                    <Plus className=\"h-4 w-4\" />\n                    Add a feature\n                  </Button>\n                </div>\n\n                {featureFields.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    <p>No features added yet</p>\n                    <p className=\"text-sm\">Click \"Add a feature\" to start</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    {featureFields.map((field, index) => (\n                      <div\n                        key={field.id}\n                        className=\"p-4 border rounded-lg space-y-4\"\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <h4 className=\"font-medium text-gray-700\">\n                            Feature #{index + 1}\n                          </h4>\n                          <Button\n                            type=\"button\"\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            onClick={() => removeFeature(index)}\n                            className=\"text-red-500 hover:text-red-700\"\n                            data-testid={`button-remove-feature-${index}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n\n                        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                          <FormField\n                            control={form.control}\n                            name={`features.${index}.name`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Name</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    placeholder=\"Ex: Color, Size, Material\"\n                                    {...field}\n                                    data-testid={`input-feature-name-${index}`}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name={`features.${index}.type`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Type</FormLabel>\n                                <Select\n                                  onValueChange={field.onChange}\n                                  defaultValue={field.value}\n                                >\n                                  <FormControl>\n                                    <SelectTrigger\n                                      data-testid={`select-feature-type-${index}`}\n                                    >\n                                      <SelectValue placeholder=\"Select type\" />\n                                    </SelectTrigger>\n                                  </FormControl>\n                                  <SelectContent>\n                                    <SelectItem value=\"text\">Text</SelectItem>\n                                    <SelectItem value=\"number\">\n                                      Number\n                                    </SelectItem>\n                                    <SelectItem value=\"boolean\">\n                                      Boolean\n                                    </SelectItem>\n                                    <SelectItem value=\"select\">\n                                      Select\n                                    </SelectItem>\n                                    <SelectItem value=\"multiselect\">\n                                      Multi-select\n                                    </SelectItem>\n                                    <SelectItem value=\"color\">Color</SelectItem>\n                                    <SelectItem value=\"url\">URL</SelectItem>\n                                  </SelectContent>\n                                </Select>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={form.control}\n                            name={`features.${index}.value`}\n                            render={({ field }) => {\n                              const featureType = form.watch(\n                                `features.${index}.type`,\n                              );\n\n                              return (\n                                <FormItem>\n                                  <FormLabel>Value</FormLabel>\n                                  <FormControl>\n                                    {featureType === \"number\" ? (\n                                      <Input\n                                        type=\"number\"\n                                        placeholder=\"Ex: 100, 25.5\"\n                                        {...field}\n                                        data-testid={`input-feature-value-${index}`}\n                                      />\n                                    ) : featureType === \"boolean\" ? (\n                                      <Select\n                                        onValueChange={field.onChange}\n                                        defaultValue={field.value}\n                                      >\n                                        <SelectTrigger\n                                          data-testid={`select-feature-value-${index}`}\n                                        >\n                                          <SelectValue placeholder=\"Select true or false\" />\n                                        </SelectTrigger>\n                                        <SelectContent>\n                                          <SelectItem value=\"true\">\n                                            True\n                                          </SelectItem>\n                                          <SelectItem value=\"false\">\n                                            False\n                                          </SelectItem>\n                                        </SelectContent>\n                                      </Select>\n                                    ) : featureType === \"color\" ? (\n                                      <div className=\"flex gap-2\">\n                                        <Input\n                                          type=\"color\"\n                                          {...field}\n                                          className=\"w-16 h-8 p-1 border rounded\"\n                                          data-testid={`input-feature-color-${index}`}\n                                        />\n                                        <Input\n                                          type=\"text\"\n                                          placeholder=\"Ex: #FF0000 or Red\"\n                                          {...field}\n                                          data-testid={`input-feature-value-${index}`}\n                                        />\n                                      </div>\n                                    ) : featureType === \"url\" ? (\n                                      <Input\n                                        type=\"url\"\n                                        placeholder=\"Ex: https://example.com\"\n                                        {...field}\n                                        data-testid={`input-feature-value-${index}`}\n                                      />\n                                    ) : featureType === \"select\" ||\n                                      featureType === \"multiselect\" ? (\n                                      <Input\n                                        placeholder=\"Ex: Small, Medium, Large (comma separated)\"\n                                        {...field}\n                                        data-testid={`input-feature-value-${index}`}\n                                      />\n                                    ) : (\n                                      <Input\n                                        type=\"text\"\n                                        placeholder=\"Ex: Red, Large, Cotton\"\n                                        {...field}\n                                        data-testid={`input-feature-value-${index}`}\n                                      />\n                                    )}\n                                  </FormControl>\n                                  <FormMessage />\n                                </FormItem>\n                              );\n                            }}\n                          />\n                        </div>\n\n                        <FormField\n                          control={form.control}\n                          name={`features.${index}.isRequired`}\n                          render={({ field }) => (\n                            <FormItem className=\"flex items-center space-x-2\">\n                              <FormControl>\n                                <Switch\n                                  checked={field.value}\n                                  onCheckedChange={field.onChange}\n                                  data-testid={`switch-feature-required-${index}`}\n                                />\n                              </FormControl>\n                              <FormLabel className=\"text-sm font-normal\">\n                                Mandatory\n                              </FormLabel>\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </TabsContent> */}\n\n              {/* SEO Tab */}\n              <TabsContent value=\"seo\" className=\"space-y-6 mt-6\">\n                {/* SEO Title */}\n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">SEO Title</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"seoTitleFr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Title (French)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"SEO title in French\"\n                              {...field}\n                              data-testid=\"input-seo-title-fr\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"seoTitleEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Title (English)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"SEO title in English\"\n                              {...field}\n                              data-testid=\"input-seo-title-en\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"seoTitleAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Title (Arabic)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"SEO Title in Arabic\"\n                              {...field}\n                              data-testid=\"input-seo-title-ar\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* SEO Description */}\n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">SEO Description</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"seoDescriptionFr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Description (French)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"SEO description in French\"\n                              {...field}\n                              data-testid=\"input-seo-description-fr\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"seoDescriptionEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Description (English)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"SEO description in English\"\n                              {...field}\n                              data-testid=\"input-seo-description-en\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"seoDescriptionAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Description SEO (Arabic)</FormLabel>\n                          <FormControl>\n                            <Textarea\n                              placeholder=\"SEO Description in Arabic\"\n                              {...field}\n                              data-testid=\"input-seo-description-ar\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n\n                {/* SEO Keywords */}\n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">SEO Keywords</h3>\n                  <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"seoKeywordsFr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Keywords (French)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"mot-clé1, mot-clé2, mot-clé3\"\n                              {...field}\n                              data-testid=\"input-seo-keywords-fr\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"seoKeywordsEn\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Keywords (English)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"keyword1, keyword2, keyword3\"\n                              {...field}\n                              data-testid=\"input-seo-keywords-en\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    <FormField\n                      control={form.control}\n                      name=\"seoKeywordsAr\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>SEO Keywords (Arabic)</FormLabel>\n                          <FormControl>\n                            <Input\n                              placeholder=\"Key word 1, Key word 2\"\n                              {...field}\n                              data-testid=\"input-seo-keywords-ar\"\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  </div>\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* Form Actions */}\n            <div className=\"flex justify-end gap-3 pt-6 border-t\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                disabled={createCategoryMutation.isPending}\n                data-testid=\"button-cancel\"\n              >\n                {t(\"categories.cancel\")}\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-blue-600 hover:bg-blue-700\"\n                disabled={createCategoryMutation.isPending}\n                data-testid=\"button-submit\"\n              >\n                {createCategoryMutation.isPending\n                  ? isEditMode\n                    ? t(\"categories.updating\")\n                    : t(\"categories.creating\")\n                  : isEditMode\n                    ? t(\"categories.update\")\n                    : t(\"categories.created\")}\n              </Button>\n            </div>\n\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":50508},"client/src/components/modals/add-supercategory-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { TemplateSelectionModal } from \"./template-selection-modal\";\nimport {\n  TemplateFeature,\n  groupFeaturesByCategory,\n} from \"../../data/categoryTemplates\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Button } from \"@/components/ui/button\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { X, Plus, Image } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst supercategoryFormSchema = z.object({\n  nameFr: z.string().min(1, \"French name is required\"),\n  nameEn: z.string().min(1, \"English name is required\"),\n  nameAr: z.string().optional(),\n  descriptionFr: z.string().optional(),\n  descriptionEn: z.string().optional(),\n  descriptionAr: z.string().optional(),\n  icon: z.string().optional(),\n  mainImageUrl: z.string().url().optional().or(z.literal(\"\")),\n  isFeatured: z.boolean().default(false),\n  isVisible: z.boolean().default(true),\n  template: z.string().optional(),\n  seoTitleFr: z.string().optional(),\n  seoTitleEn: z.string().optional(),\n  seoTitleAr: z.string().optional(),\n  seoDescriptionFr: z.string().optional(),\n  seoDescriptionEn: z.string().optional(),\n  seoDescriptionAr: z.string().optional(),\n  seoKeywordsFr: z.string().optional(),\n  seoKeywordsEn: z.string().optional(),\n  seoKeywordsAr: z.string().optional(),\n  enabledFeatures: z.array(z.string()).default([]),\n});\n\ntype SupercategoryFormData = z.infer<typeof supercategoryFormSchema>;\n\ninterface AddSupercategoryModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onSubmit: (data: SupercategoryFormData) => void;\n  initialData?: any;\n  isEdit?: boolean;\n}\n\nexport function AddSupercategoryModal({\n  isOpen,\n  onClose,\n  onSubmit,\n  initialData,\n  isEdit = false,\n}: AddSupercategoryModalProps) {\n  const [activeTab, setActiveTab] = useState(\"general\");\n  const [metadataView, setMetadataView] = useState<\"list\" | \"groups\">(\"list\");\n  const [isTemplateModalOpen, setIsTemplateModalOpen] = useState(false);\n  const [appliedFeatures, setAppliedFeatures] = useState<TemplateFeature[]>([]);\n  const [selectedTemplateIds, setSelectedTemplateIds] = useState<string[]>([]);\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [customMetadata, setCustomMetadata] = useState<\n    { key: string; value: string; type: string }[]\n  >([]);\n  const { t, i18n } = useTranslation();\n  // Predefined metadata types as shown in the image\n  const metadataTypes = [\n    \"Text\",\n    \"Number\",\n    \"Boolean\",\n    \"Date\",\n    \"URL\",\n    \"Email\",\n    \"Color\",\n    \"Image\",\n    \"File\",\n    \"JSON\",\n    \"Rich Text\",\n    \"Select\",\n  ];\n\n  // Add new metadata handler\n  const handleAddMetadata = () => {\n    setCustomMetadata((prev) => [\n      ...prev,\n      { key: \"\", value: \"\", type: \"Text\" },\n    ]);\n  };\n\n  // Remove metadata handler\n  const handleRemoveMetadata = (index: number) => {\n    setCustomMetadata((prev) => prev.filter((_, i) => i !== index));\n  };\n\n  // Update metadata handler\n  const handleUpdateMetadata = (\n    index: number,\n    field: \"key\" | \"value\" | \"type\",\n    value: string,\n  ) => {\n    setCustomMetadata((prev) =>\n      prev.map((item, i) => (i === index ? { ...item, [field]: value } : item)),\n    );\n  };\n\n  // Function to get default values based on initial data\n  const getDefaultValues = (): SupercategoryFormData => {\n    if (initialData && isEdit) {\n      // Extract translations if available\n      const frTranslation =\n        initialData.translations?.find((t: any) => t.language === \"fr\") || {};\n      const enTranslation =\n        initialData.translations?.find((t: any) => t.language === \"en\") || {};\n      const arTranslation =\n        initialData.translations?.find((t: any) => t.language === \"ar\") || {};\n\n      return {\n        nameFr: frTranslation.name || initialData.nameFr || \"\",\n        nameEn: enTranslation.name || initialData.nameEn || \"\",\n        nameAr: arTranslation.name || initialData.nameAr || \"\",\n        descriptionFr:\n          frTranslation.description || initialData.descriptionFr || \"\",\n        descriptionEn:\n          enTranslation.description || initialData.descriptionEn || \"\",\n        descriptionAr:\n          arTranslation.description || initialData.descriptionAr || \"\",\n        icon: initialData.icon || \"\",\n        mainImageUrl: initialData.mainImageUrl || \"\",\n        isFeatured: initialData.isFeatured || false,\n        isVisible:\n          initialData.isVisible !== undefined ? initialData.isVisible : true,\n        template: initialData.template || \"\",\n        seoTitleFr: frTranslation.seoTitle || initialData.seoTitleFr || \"\",\n        seoTitleEn: enTranslation.seoTitle || initialData.seoTitleEn || \"\",\n        seoTitleAr: arTranslation.seoTitle || initialData.seoTitleAr || \"\",\n        seoDescriptionFr:\n          frTranslation.seoDescription || initialData.seoDescriptionFr || \"\",\n        seoDescriptionEn:\n          enTranslation.seoDescription || initialData.seoDescriptionEn || \"\",\n        seoDescriptionAr:\n          arTranslation.seoDescription || initialData.seoDescriptionAr || \"\",\n        seoKeywordsFr:\n          frTranslation.seoKeywords || initialData.seoKeywordsFr || \"\",\n        seoKeywordsEn:\n          enTranslation.seoKeywords || initialData.seoKeywordsEn || \"\",\n        seoKeywordsAr:\n          arTranslation.seoKeywords || initialData.seoKeywordsAr || \"\",\n        enabledFeatures:\n          initialData.metadata?.enabledFeatures ||\n          initialData.enabledFeatures ||\n          [],\n      };\n    }\n\n    return {\n      nameFr: \"\",\n      nameEn: \"\",\n      nameAr: \"\",\n      descriptionFr: \"\",\n      descriptionEn: \"\",\n      descriptionAr: \"\",\n      icon: \"\",\n      mainImageUrl: \"\",\n      isFeatured: false,\n      isVisible: true,\n      enabledFeatures: [],\n    };\n  };\n\n  // Fetch categories from database\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/admin/categories\"],\n    enabled: isOpen,\n  });\n\n  // Template application handler\n  const handleApplyTemplates = (features: TemplateFeature[]) => {\n    setAppliedFeatures(features);\n    setIsTemplateModalOpen(false);\n  };\n\n  // Handle category selection\n  const handleApplyCategories = () => {\n    const categoryFeatures: TemplateFeature[] = [];\n    let totalProductCount = 0;\n    let totalSubcategoryCount = 0;\n    let totalFeaturesCount = 0;\n\n    selectedCategories.forEach((categoryId) => {\n      const category = categories.find((c: any) => c.id === categoryId);\n\n      if (category) {\n        // Add counts from this category\n        totalProductCount += category.productCount || 0;\n        totalSubcategoryCount += category.subcategoryCount || 0;\n        totalFeaturesCount += category.features ? category.features.length : 0;\n\n        if (category.features) {\n          category.features.forEach((feature: any) => {\n            if (!appliedFeatures.find((f) => f.key === feature.name)) {\n              categoryFeatures.push({\n                key: feature.name,\n                type: feature.type,\n                default_value: feature.value || \"\",\n                description: `Feature from ${category.translations?.[0]?.name || \"category\"}`,\n                category: \"category_features\",\n                isEditable: true,\n              });\n            }\n          });\n        }\n      }\n    });\n\n    // Debug: Show what features we're adding\n    console.log(\n      \"🔥 Final features being added to supercategory:\",\n      categoryFeatures,\n    );\n\n    // Store the merged counts for display purposes only (not as metadata fields)\n    console.log(\n      `📊 Merged statistics: ${totalProductCount} products, ${totalSubcategoryCount} subcategories, ${totalFeaturesCount} features from ${selectedCategories.length} categories`,\n    );\n\n    // Add category features to applied features\n    setAppliedFeatures((prev) => [...prev, ...categoryFeatures]);\n    // Clear selected categories\n    setSelectedCategories([]);\n  };\n\n  const form = useForm<SupercategoryFormData>({\n    resolver: zodResolver(supercategoryFormSchema),\n    defaultValues: getDefaultValues(),\n  });\n\n  // Reset form when modal opens with initial data\n  useEffect(() => {\n    if (isOpen) {\n      form.reset(getDefaultValues());\n      if (initialData && isEdit) {\n        // Load existing applied features from metadata.enabledFeatures\n        const enabledFeatures = initialData.metadata?.enabledFeatures || [];\n        if (enabledFeatures.length > 0) {\n          setAppliedFeatures(enabledFeatures);\n        } else {\n          setAppliedFeatures([]);\n        }\n        setCustomMetadata([]);\n      } else {\n        // Reset for new supercategory\n        setAppliedFeatures([]);\n        setCustomMetadata([]);\n      }\n    }\n  }, [isOpen, initialData, isEdit, form]);\n\n  const handleClose = () => {\n    form.reset(getDefaultValues());\n    setActiveTab(\"general\");\n    setAppliedFeatures([]);\n    setSelectedTemplateIds([]);\n    setSelectedCategories([]);\n    setCustomMetadata([]);\n    onClose();\n  };\n\n  const handleSubmit = (data: SupercategoryFormData) => {\n    // Include applied features in the submission data\n    // Convert TemplateFeature objects to array of strings (feature keys)\n    const templateFeatureKeys = appliedFeatures.map((feature) => feature.key);\n\n    // Convert custom metadata to feature keys as well\n    const customFeatureKeys = customMetadata.map((metadata) => metadata.key);\n\n    // Combine both template features and custom metadata features\n    const submissionData = {\n      ...data,\n      enabledFeatures: [...templateFeatureKeys, ...customFeatureKeys],\n    };\n\n    onSubmit(submissionData);\n    form.reset();\n    setActiveTab(\"general\");\n    setAppliedFeatures([]);\n    setSelectedTemplateIds([]);\n    setSelectedCategories([]);\n    setCustomMetadata([]);\n    onClose();\n  };\n\n  // Group applied features by category\n  const groupedFeatures = groupFeaturesByCategory(appliedFeatures);\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent\n        className=\"max-w-5xl max-h-[90vh] overflow-y-auto\"\n        aria-describedby=\"add-supercategory-description\"\n      >\n        <DialogHeader>\n          <div className=\"flex items-center gap-2\">\n            <DialogTitle>\n              {isEdit ? t(\"categories.editSuperCategory\") : t(\"categories.addSuperCategory\")}\n            </DialogTitle>\n            <Badge className=\"bg-orange-500 text-white\">Super</Badge>\n          </div>\n        </DialogHeader>\n\n        <Form {...form}>\n          <form\n            onSubmit={form.handleSubmit(handleSubmit)}\n            className=\"space-y-6\"\n          >\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList className=\"grid w-full grid-cols-4\">\n                <TabsTrigger value=\"general\">{t(\"categories.generalInfo\")}</TabsTrigger>\n                <TabsTrigger value=\"metadata\">{t(\"categories.metadata\")}</TabsTrigger>\n                <TabsTrigger value=\"seo\">{t(\"categories.seo\")}</TabsTrigger>\n                <TabsTrigger value=\"preview\">{t(\"categories.preview\")}</TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"general\" className=\"space-y-6 mt-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"nameFr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name (FR) *</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Name in French\"\n                            {...field}\n                            data-testid=\"input-name-fr\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"nameEn\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Name (EN) *</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Name in English\"\n                            {...field}\n                            data-testid=\"input-name-en\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"nameAr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Nome (AR)</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Name in Arabic\"\n                            {...field}\n                            data-testid=\"input-name-ar\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"descriptionFr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (FR)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Description in French\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                            data-testid=\"textarea-description-fr\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"descriptionEn\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (EN)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Description in English\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                            data-testid=\"textarea-description-en\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"descriptionAr\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description (AR)</FormLabel>\n                        <FormControl>\n                          <Textarea\n                            placeholder=\"Description in Arabic\"\n                            className=\"min-h-[100px]\"\n                            {...field}\n                            data-testid=\"textarea-description-ar\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 mb-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"icon\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Icon</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"Icon name (eg: car, home, etc.)\"\n                            {...field}\n                            data-testid=\"input-icon\"\n                          />\n                        </FormControl>\n                        <p className=\"text-xs text-gray-500\">\n                          {t(\"categories.iconNot\")}\n                        </p>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"mainImageUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>{t(\"categories.mainImage\")}</FormLabel>\n                        <FormControl>\n                          <Input\n                            placeholder=\"https://example.com/image.jpg\"\n                            {...field}\n                            data-testid=\"input-main-image\"\n                          />\n                        </FormControl>\n                        <p className=\"text-xs text-gray-500\">\n                          {t(\"categories.mainImageNote\")}\n                        </p>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                  <FormField\n                    control={form.control}\n                    name=\"isFeatured\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-lg border p-4\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-featured\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel className=\"text-base font-normal cursor-pointer\">\n                            {t(\"categories.featuredCategory\")}\n                          </FormLabel>\n                          <p className=\"text-sm text-gray-600\">\n                            {t(\"categories.featuredCategoryNote\")}\n                          </p>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={form.control}\n                    name=\"isVisible\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-start space-x-3 space-y-0 rounded-lg border p-4\">\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                            data-testid=\"checkbox-visible\"\n                            className=\"bg-blue-500\"\n                          />\n                        </FormControl>\n                        <div className=\"space-y-1 leading-none\">\n                          <FormLabel className=\"text-base font-normal cursor-pointer\">\n                            {t(\"categories.visibleCategory\")}\n                          </FormLabel>\n                          <p className=\"text-sm text-gray-600\">\n                            {t(\"categories.visibleCategoryNote\")}\n                          </p>\n                        </div>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"metadata\" className=\"space-y-6 mt-6\">\n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">\n                    {t(\"categories.superMetadata\")}\n                  </h3>\n\n                  {/* Category and Template Selection */}\n                  <div className=\"space-y-4 mb-6\">\n                    {/* Category Dropdown with Multi-select */}\n                    <div className=\"flex items-center gap-4\">\n                      <div className=\"flex-1\">\n                        <Select\n                          value={\n                            selectedCategories.length > 0 ? \"multiple\" : \"\"\n                          }\n                          onValueChange={() => {}} // Handled by individual checkboxes\n                        >\n                          <SelectTrigger>\n                            <SelectValue\n                              placeholder={\n                                selectedCategories.length > 0\n                                  ? t(\"categories.selected\", { count: selectedCategories.length })\n                                  : t(\"categories.selectMerge\")\n                              }\n                            />\n                          </SelectTrigger>\n                          <SelectContent>\n                            {categories.map((category: any) => {\n                              const currentLang = i18n.language.split(\"-\")[0]; // normalize code\n                              const translation = category.translations?.find(\n                                (tr: any) => tr.language === currentLang,\n                              );\n\n                              const categoryName =\n                                translation?.name ||\n                                category.translations?.[0]?.name ||\n                                \"Unnamed Category\";\n\n                              const isSelected = selectedCategories.includes(\n                                category.id,\n                              );\n\n                              return (\n                                <div\n                                  key={category.id}\n                                  className=\"flex items-center space-x-2 px-2 py-2 hover:bg-gray-100 cursor-pointer\"\n                                  onClick={(e) => {\n                                    e.preventDefault();\n                                    e.stopPropagation();\n                                    if (isSelected) {\n                                      setSelectedCategories((prev) =>\n                                        prev.filter((id) => id !== category.id),\n                                      );\n                                    } else {\n                                      setSelectedCategories((prev) => [\n                                        ...prev,\n                                        category.id,\n                                      ]);\n                                    }\n                                  }}\n                                >\n                                  <Checkbox\n                                    checked={isSelected}\n                                    onChange={() => {}}\n                                  />\n                                  <span className=\"text-sm\">\n                                    {categoryName}\n                                  </span>\n                                </div>\n                              );\n                            })}\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={handleApplyCategories}\n                        disabled={selectedCategories.length === 0}\n                        type=\"button\"\n                      >\n                        {t(\"categories.apply\")}\n                      </Button>\n                    </div>\n\n                    {/* Template Selection Button */}\n                    <div className=\"flex items-center gap-4\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        onClick={() => setIsTemplateModalOpen(true)}\n                        type=\"button\"\n                      >\n                        {t(\"categories.seeTemplates\")}\n                      </Button>\n                      {selectedTemplateIds.length > 0 && (\n                        <span className=\"text-sm text-gray-600\">\n                          {selectedTemplateIds.length} template\n                          {selectedTemplateIds.length > 1 ? \"s\" : \"\"} selected\n                        </span>\n                      )}\n                    </div>\n                  </div>\n\n                  {/* View toggle buttons */}\n                  <div className=\"flex gap-4 mb-6\">\n                    <Button\n                      variant={metadataView === \"list\" ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => setMetadataView(\"list\")}\n                      type=\"button\"\n                    >\n                      {t(\"categories.listProperties\")}\n                    </Button>\n                    <Button\n                      variant={\n                        metadataView === \"groups\" ? \"default\" : \"outline\"\n                      }\n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => setMetadataView(\"groups\")}\n                      type=\"button\"\n                    >\n                      {t(\"categories.byGroups\")}\n                    </Button>\n                  </div>\n                </div>\n\n                {/* List of properties view */}\n                {metadataView === \"list\" && (\n                  <div className=\"space-y-4\">\n                    <p className=\"text-sm text-gray-600 mb-4\">\n                      {t(\"categories.metadataNote\")}\n                    </p>\n\n                    {(appliedFeatures.length > 0 ||\n                      customMetadata.length > 0) && (\n                      <div className=\"space-y-3\">\n                        <div className=\"grid grid-cols-12 gap-4 text-sm font-medium text-gray-500 border-b pb-2\">\n                          <div className=\"col-span-3\">Key</div>\n                          <div className=\"col-span-4\">Value</div>\n                          <div className=\"col-span-3\">Type</div>\n                          <div className=\"col-span-2\"></div>\n                        </div>\n                        {appliedFeatures.map((feature, index) => (\n                          <div\n                            key={index}\n                            className=\"grid grid-cols-12 gap-4 items-center py-2 border-b border-gray-100\"\n                          >\n                            <div className=\"col-span-3\">\n                              <input\n                                type=\"text\"\n                                value={feature.key}\n                                onChange={(e) => {\n                                  const newFeatures = [...appliedFeatures];\n                                  newFeatures[index].key = e.target.value;\n                                  setAppliedFeatures(newFeatures);\n                                }}\n                                className=\"w-full p-1 border rounded-md text-sm font-medium\"\n                                placeholder=\"Key name\"\n                              />\n                            </div>\n                            <div className=\"col-span-4\">\n                              {feature.type === \"Boolean\" ? (\n                                <select\n                                  value={feature.default_value}\n                                  onChange={(e) => {\n                                    const newFeatures = [...appliedFeatures];\n                                    newFeatures[index].default_value =\n                                      e.target.value;\n                                    setAppliedFeatures(newFeatures);\n                                  }}\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                >\n                                  <option value=\"\">Select...</option>\n                                  <option value=\"true\">True</option>\n                                  <option value=\"false\">False</option>\n                                </select>\n                              ) : feature.type === \"Color\" ? (\n                                <div className=\"flex gap-1\">\n                                  <input\n                                    type=\"color\"\n                                    value={feature.default_value || \"#000000\"}\n                                    onChange={(e) => {\n                                      const newFeatures = [...appliedFeatures];\n                                      newFeatures[index].default_value =\n                                        e.target.value;\n                                      setAppliedFeatures(newFeatures);\n                                    }}\n                                    className=\"w-8 h-6 border rounded\"\n                                  />\n                                  <input\n                                    type=\"text\"\n                                    value={feature.default_value}\n                                    onChange={(e) => {\n                                      const newFeatures = [...appliedFeatures];\n                                      newFeatures[index].default_value =\n                                        e.target.value;\n                                      setAppliedFeatures(newFeatures);\n                                    }}\n                                    className=\"flex-1 p-1 border rounded-md text-sm\"\n                                    placeholder=\"#FF0000\"\n                                  />\n                                </div>\n                              ) : feature.type === \"Number\" ? (\n                                <input\n                                  type=\"number\"\n                                  value={feature.default_value}\n                                  onChange={(e) => {\n                                    const newFeatures = [...appliedFeatures];\n                                    newFeatures[index].default_value =\n                                      e.target.value;\n                                    setAppliedFeatures(newFeatures);\n                                  }}\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"Ex: 100, 25.5\"\n                                />\n                              ) : feature.type === \"URL\" ? (\n                                <input\n                                  type=\"url\"\n                                  value={feature.default_value}\n                                  onChange={(e) => {\n                                    const newFeatures = [...appliedFeatures];\n                                    newFeatures[index].default_value =\n                                      e.target.value;\n                                    setAppliedFeatures(newFeatures);\n                                  }}\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"https://example.com\"\n                                />\n                              ) : feature.type === \"Email\" ? (\n                                <input\n                                  type=\"email\"\n                                  value={feature.default_value}\n                                  onChange={(e) => {\n                                    const newFeatures = [...appliedFeatures];\n                                    newFeatures[index].default_value =\n                                      e.target.value;\n                                    setAppliedFeatures(newFeatures);\n                                  }}\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"example@email.com\"\n                                />\n                              ) : feature.type === \"Date\" ? (\n                                <input\n                                  type=\"date\"\n                                  value={feature.default_value}\n                                  onChange={(e) => {\n                                    const newFeatures = [...appliedFeatures];\n                                    newFeatures[index].default_value =\n                                      e.target.value;\n                                    setAppliedFeatures(newFeatures);\n                                  }}\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                />\n                              ) : (\n                                <input\n                                  type=\"text\"\n                                  value={feature.default_value}\n                                  onChange={(e) => {\n                                    const newFeatures = [...appliedFeatures];\n                                    newFeatures[index].default_value =\n                                      e.target.value;\n                                    setAppliedFeatures(newFeatures);\n                                  }}\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"Property value\"\n                                />\n                              )}\n                            </div>\n                            <div className=\"col-span-3\">\n                              <select\n                                value={feature.type}\n                                onChange={(e) => {\n                                  const newFeatures = [...appliedFeatures];\n                                  newFeatures[index].type = e.target.value;\n                                  setAppliedFeatures(newFeatures);\n                                }}\n                                className=\"w-full p-1 border rounded-md text-sm\"\n                              >\n                                <option value=\"Text\">Text</option>\n                                <option value=\"Number\">Number</option>\n                                <option value=\"Boolean\">Boolean</option>\n                                <option value=\"Date\">Date</option>\n                                <option value=\"URL\">URL</option>\n                                <option value=\"Email\">Email</option>\n                                <option value=\"Color\">Color</option>\n                              </select>\n                            </div>\n                            <div className=\"col-span-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"text-red-500 hover:text-red-700 p-1\"\n                                onClick={() => {\n                                  const newFeatures = appliedFeatures.filter(\n                                    (_, i) => i !== index,\n                                  );\n                                  setAppliedFeatures(newFeatures);\n                                }}\n                                type=\"button\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                        {/* Render custom metadata in the same section */}\n                        {customMetadata.map((metadata, index) => (\n                          <div\n                            key={index}\n                            className=\"grid grid-cols-12 gap-4 items-center py-2 border-b border-gray-100\"\n                          >\n                            <div className=\"col-span-3\">\n                              <input\n                                type=\"text\"\n                                value={metadata.key}\n                                onChange={(e) =>\n                                  handleUpdateMetadata(\n                                    index,\n                                    \"key\",\n                                    e.target.value,\n                                  )\n                                }\n                                className=\"w-full p-1 border rounded-md text-sm\"\n                                placeholder=\"Property Name\"\n                              />\n                            </div>\n                            <div className=\"col-span-4\">\n                              {metadata.type === \"Number\" ? (\n                                <input\n                                  type=\"number\"\n                                  value={metadata.value}\n                                  onChange={(e) =>\n                                    handleUpdateMetadata(\n                                      index,\n                                      \"value\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"Ex: 100, 25.5\"\n                                />\n                              ) : metadata.type === \"Boolean\" ? (\n                                <select\n                                  value={metadata.value}\n                                  onChange={(e) =>\n                                    handleUpdateMetadata(\n                                      index,\n                                      \"value\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                >\n                                  <option value=\"\">Select...</option>\n                                  <option value=\"true\">True</option>\n                                  <option value=\"false\">False</option>\n                                </select>\n                              ) : metadata.type === \"Date\" ? (\n                                <input\n                                  type=\"date\"\n                                  value={metadata.value}\n                                  onChange={(e) =>\n                                    handleUpdateMetadata(\n                                      index,\n                                      \"value\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                />\n                              ) : metadata.type === \"Color\" ? (\n                                <div className=\"flex gap-1\">\n                                  <input\n                                    type=\"color\"\n                                    value={metadata.value}\n                                    onChange={(e) =>\n                                      handleUpdateMetadata(\n                                        index,\n                                        \"value\",\n                                        e.target.value,\n                                      )\n                                    }\n                                    className=\"w-8 h-6 border rounded\"\n                                  />\n                                  <input\n                                    type=\"text\"\n                                    value={metadata.value}\n                                    onChange={(e) =>\n                                      handleUpdateMetadata(\n                                        index,\n                                        \"value\",\n                                        e.target.value,\n                                      )\n                                    }\n                                    className=\"flex-1 p-1 border rounded-md text-sm\"\n                                    placeholder=\"#FF0000\"\n                                  />\n                                </div>\n                              ) : metadata.type === \"URL\" ? (\n                                <input\n                                  type=\"url\"\n                                  value={metadata.value}\n                                  onChange={(e) =>\n                                    handleUpdateMetadata(\n                                      index,\n                                      \"value\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"https://example.com\"\n                                />\n                              ) : metadata.type === \"Email\" ? (\n                                <input\n                                  type=\"email\"\n                                  value={metadata.value}\n                                  onChange={(e) =>\n                                    handleUpdateMetadata(\n                                      index,\n                                      \"value\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"example@email.com\"\n                                />\n                              ) : (\n                                <input\n                                  type=\"text\"\n                                  value={metadata.value}\n                                  onChange={(e) =>\n                                    handleUpdateMetadata(\n                                      index,\n                                      \"value\",\n                                      e.target.value,\n                                    )\n                                  }\n                                  className=\"w-full p-1 border rounded-md text-sm\"\n                                  placeholder=\"Property value\"\n                                />\n                              )}\n                            </div>\n                            <div className=\"col-span-3\">\n                              <Select\n                                value={metadata.type}\n                                onValueChange={(value) =>\n                                  handleUpdateMetadata(index, \"type\", value)\n                                }\n                              >\n                                <SelectTrigger className=\"text-sm h-8\">\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  {metadataTypes.map((type) => (\n                                    <SelectItem key={type} value={type}>\n                                      {type}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                            </div>\n                            <div className=\"col-span-2\">\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleRemoveMetadata(index)}\n                                className=\"text-red-500 hover:text-red-700 p-1\"\n                                type=\"button\"\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    )}\n\n                    {/* Add metadata button */}\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full border-dashed mt-4\"\n                      onClick={handleAddMetadata}\n                      type=\"button\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      {t(\"categories.addMetadata\")}\n                    </Button>\n\n                    {/* Directions for use - only show when no metadata applied */}\n                    {appliedFeatures.length === 0 && (\n\n                    <div className=\"border rounded-lg p-4 bg-blue-50\">\n                      <h4 className=\"font-medium mb-2 text-blue-900\">\n                        {t(\"categories.directionsUse\")}\n                      </h4>\n                      <ul className=\"text-sm text-blue-800 space-y-1\">\n                        <li>• {t(\"categories.displayStyle\")}</li>\n                        <li>• {t(\"categories.bannerUrl\")}</li>\n                        <li>• {t(\"categories.featuredBrands\")}</li>\n                        <li>• {t(\"categories.enableCompare\")}</li>\n                        <li>• {t(\"categories.customFilters\")}</li>\n                        <li>• {t(\"categories.layoutType\")}</li>\n                        <li>• {t(\"categories.searchBoostTerms\")}</li>\n                      </ul>\n                    </div>\n\n                      // <div className=\"border rounded-lg p-4 bg-blue-50\">\n                      //   <h4 className=\"font-medium mb-2 text-blue-900\">\n                      //     {t(\"categories.directionsUse\")}\n                      //   </h4>\n                      //   <ul className=\"text-sm text-blue-800 space-y-1\">\n                      //     <li>\n                      //       • Use{\" \"}\n                      //       <code className=\"bg-blue-100 px-1 rounded text-xs\">\n                      //         display_style\n                      //       </code>{\" \"}\n                      //       to set the display ('grid', 'list', 'mosaic')\n                      //     </li>\n                      //     <li>\n                      //       • Add{\" \"}\n                      //       <code className=\"bg-blue-100 px-1 rounded text-xs\">\n                      //         banner_url\n                      //       </code>{\" \"}\n                      //       for a custom banner\n                      //     </li>\n                      //     <li>\n                      //       • Set{\" \"}\n                      //       <code className=\"bg-blue-100 px-1 rounded text-xs\">\n                      //         featured_brands\n                      //       </code>{\" \"}\n                      //       to highlight specific brands\n                      //     </li>\n                      //     <li>\n                      //       • Use{\" \"}\n                      //       <code className=\"bg-blue-100 px-1 rounded text-xs\">\n                      //         enable_compare\n                      //       </code>\n                      //       (true/false) for product comparison\n                      //     </li>\n                      //     <li>\n                      //       • Add{\" \"}\n                      //       <code className=\"bg-blue-100 px-1 rounded text-xs\">\n                      //         custom_filters\n                      //       </code>{\" \"}\n                      //       for filters specific to this supercategory\n                      //     </li>\n                      //     <li>\n                      //       • Use{\" \"}\n                      //       <code className=\"bg-blue-100 px-1 rounded text-xs\">\n                      //         layout_type\n                      //       </code>{\" \"}\n                      //       to change the arrangement of products\n                      //     </li>\n                      //     <li>\n                      //       • Add{\" \"}\n                      //       <code className=\"bg-blue-100 px-1 rounded text-xs\">\n                      //         search_boost_terms\n                      //       </code>{\" \"}\n                      //       to improve SEO\n                      //     </li>\n                      //   </ul>\n                      // </div>\n                    )}\n                  </div>\n                )}\n\n                {/* By groups view */}\n                {metadataView === \"groups\" && (\n                  <div className=\"space-y-4\">\n                    {Object.keys(groupedFeatures).length > 0 ? (\n                      Object.entries(groupedFeatures).map(\n                        ([category, features]) => (\n                          <div\n                            key={category}\n                            className=\"border rounded-lg p-4 bg-gray-50\"\n                          >\n                            <h4 className=\"font-medium mb-3 capitalize\">\n                              {category.replace(\"_\", \" \")}\n                            </h4>\n                            <div className=\"space-y-2\">\n                              {features.map((feature, index) => (\n                                <div\n                                  key={index}\n                                  className=\"flex items-center justify-between p-2 bg-white rounded border\"\n                                >\n                                  <div className=\"flex-1\">\n                                    <span className=\"text-sm font-medium\">\n                                      {feature.key}\n                                    </span>\n                                    <div className=\"text-xs text-gray-500\">\n                                      {feature.description}\n                                    </div>\n                                  </div>\n                                  <div className=\"text-xs px-2 py-1 bg-gray-100 rounded\">\n                                    {feature.type}\n                                  </div>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                        ),\n                      )\n                    ) : (\n                      <div className=\"text-center py-8\">\n                        <p className=\"text-gray-500 mb-4\">\n                          {t(\"categories.notemp\")}\n                        </p>\n                        <Button\n                          variant=\"outline\"\n                          onClick={() => setIsTemplateModalOpen(true)}\n                          type=\"button\"\n                        >\n                          {t(\"categories.choostemp\")}\n                        </Button>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </TabsContent>\n\n              <TabsContent value=\"seo\" className=\"space-y-6 mt-6\">\n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">\n                    {t(\"categories.seo\")}\n                  </h3>\n\n                  <div className=\"space-y-6\">\n                    <div>\n                      <h4 className=\"font-medium mb-4\">{t(\"categories.tabs.seotitle\")}</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"seoTitleFr\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Title (French)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"SEO title in French\"\n                                  {...field}\n                                  data-testid=\"input-seo-title-fr\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"seoTitleEn\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Title (English)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"SEO title in English\"\n                                  {...field}\n                                  data-testid=\"input-seo-title-en\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"seoTitleAr\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Title (Arabic)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"SEO Title in Arabic\"\n                                  {...field}\n                                  data-testid=\"input-seo-title-ar\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium mb-4\">{t(\"categories.tabs.seodesc\")}</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"seoDescriptionFr\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Description (French)</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"SEO description in French\"\n                                  className=\"min-h-[100px]\"\n                                  {...field}\n                                  data-testid=\"textarea-seo-description-fr\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"seoDescriptionEn\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Description (English)</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"SEO description in English\"\n                                  className=\"min-h-[100px]\"\n                                  {...field}\n                                  data-testid=\"textarea-seo-description-en\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"seoDescriptionAr\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Description SEO (Arabic)</FormLabel>\n                              <FormControl>\n                                <Textarea\n                                  placeholder=\"SEO Description in Arabic\"\n                                  className=\"min-h-[100px]\"\n                                  {...field}\n                                  data-testid=\"textarea-seo-description-ar\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n\n                    <div>\n                      <h4 className=\"font-medium mb-4\">{t(\"categories.tabs.seokeywords\")}</h4>\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"seoKeywordsFr\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Keywords (French)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"mot-clé1, mot-clé2, mot-clé3\"\n                                  {...field}\n                                  data-testid=\"input-seo-keywords-fr\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"seoKeywordsEn\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Keywords (English)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"keyword1, keyword2, keyword3\"\n                                  {...field}\n                                  data-testid=\"input-seo-keywords-en\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={form.control}\n                          name=\"seoKeywordsAr\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>SEO Keywords (Arabic)</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Key word 1, Key word 2\"\n                                  {...field}\n                                  data-testid=\"input-seo-keywords-ar\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"preview\" className=\"space-y-6 mt-6\">\n                <div>\n                  <h3 className=\"text-lg font-medium mb-4\">\n                    {t(\"categories.superPreview\")}\n                  </h3>\n\n                  {form.watch(\"nameFr\") || form.watch(\"nameEn\") ? (\n                    <div className=\"space-y-6\">\n                      {/* Basic Info Preview */}\n                      <div className=\"border rounded-lg p-6 bg-gray-50\">\n                        <h4 className=\"font-medium mb-4\">Basic Information</h4>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                          <div>\n                            <span className=\"text-sm text-gray-500\">\n                              French Name:\n                            </span>\n                            <p className=\"font-medium\">\n                              {form.watch(\"nameFr\") || \"—\"}\n                            </p>\n                          </div>\n                          <div>\n                            <span className=\"text-sm text-gray-500\">\n                              English Name:\n                            </span>\n                            <p className=\"font-medium\">\n                              {form.watch(\"nameEn\") || \"—\"}\n                            </p>\n                          </div>\n                          {form.watch(\"nameAr\") && (\n                            <div>\n                              <span className=\"text-sm text-gray-500\">\n                                Arabic Name:\n                              </span>\n                              <p className=\"font-medium\" dir=\"rtl\">\n                                {form.watch(\"nameAr\")}\n                              </p>\n                            </div>\n                          )}\n                          <div>\n                            <span className=\"text-sm text-gray-500\">\n                              Status:\n                            </span>\n                            <div className=\"flex items-center gap-2\">\n                              <span\n                                className={`inline-block w-3 h-3 rounded-full ${form.watch(\"isVisible\") ? \"bg-green-500\" : \"bg-red-500\"}`}\n                              ></span>\n                              <span>\n                                {form.watch(\"isVisible\") ? \"Visible\" : \"Hidden\"}\n                              </span>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Applied Features Preview */}\n                      {appliedFeatures.length > 0 && (\n                        <div className=\"border rounded-lg p-6 bg-blue-50\">\n                          <h4 className=\"font-medium mb-4\">\n                            Applied Features ({appliedFeatures.length})\n                          </h4>\n                          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3\">\n                            {appliedFeatures.map((feature, index) => (\n                              <div\n                                key={index}\n                                className=\"bg-white rounded-lg p-3 border\"\n                              >\n                                <div className=\"flex items-start justify-between\">\n                                  <div className=\"flex-1\">\n                                    <h5 className=\"text-sm font-medium\">\n                                      {feature.key}\n                                    </h5>\n                                    <p className=\"text-xs text-gray-500 mt-1\">\n                                      {feature.description}\n                                    </p>\n                                  </div>\n                                  <div className=\"ml-2\">\n                                    <span className=\"inline-block px-2 py-1 text-xs bg-gray-100 rounded\">\n                                      {feature.type}\n                                    </span>\n                                  </div>\n                                </div>\n                                <div className=\"mt-2 text-xs\">\n                                  <span className=\"text-gray-500\">\n                                    Default:{\" \"}\n                                  </span>\n                                  <span className=\"font-mono bg-gray-100 px-1 rounded\">\n                                    {feature.default_value}\n                                  </span>\n                                </div>\n                              </div>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Template Summary */}\n                      {selectedTemplateIds.length > 0 && (\n                        <div className=\"border rounded-lg p-6 bg-green-50\">\n                          <h4 className=\"font-medium mb-4\">\n                            Selected Templates\n                          </h4>\n                          <div className=\"flex flex-wrap gap-2\">\n                            {selectedTemplateIds.map((templateId, index) => (\n                              <span\n                                key={index}\n                                className=\"inline-flex items-center px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm\"\n                              >\n                                {templateId.charAt(0).toUpperCase() +\n                                  templateId.slice(1)}\n                              </span>\n                            ))}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* SEO Preview */}\n                      {(form.watch(\"seoTitleFr\") ||\n                        form.watch(\"seoTitleEn\") ||\n                        form.watch(\"seoDescriptionFr\") ||\n                        form.watch(\"seoDescriptionEn\")) && (\n                        <div className=\"border rounded-lg p-6 bg-yellow-50\">\n                          <h4 className=\"font-medium mb-4\">\n                            SEO Configuration\n                          </h4>\n                          <div className=\"space-y-3\">\n                            {form.watch(\"seoTitleFr\") && (\n                              <div>\n                                <span className=\"text-sm text-gray-500\">\n                                  SEO Title (French):\n                                </span>\n                                <p className=\"font-medium\">\n                                  {form.watch(\"seoTitleFr\")}\n                                </p>\n                              </div>\n                            )}\n                            {form.watch(\"seoTitleEn\") && (\n                              <div>\n                                <span className=\"text-sm text-gray-500\">\n                                  SEO Title (English):\n                                </span>\n                                <p className=\"font-medium\">\n                                  {form.watch(\"seoTitleEn\")}\n                                </p>\n                              </div>\n                            )}\n                            {form.watch(\"seoDescriptionFr\") && (\n                              <div>\n                                <span className=\"text-sm text-gray-500\">\n                                  SEO Description (French):\n                                </span>\n                                <p className=\"text-sm\">\n                                  {form.watch(\"seoDescriptionFr\")}\n                                </p>\n                              </div>\n                            )}\n                            {form.watch(\"seoDescriptionEn\") && (\n                              <div>\n                                <span className=\"text-sm text-gray-500\">\n                                  SEO Description (English):\n                                </span>\n                                <p className=\"text-sm\">\n                                  {form.watch(\"seoDescriptionEn\")}\n                                </p>\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      )}\n\n                      {/* Configuration Summary */}\n                      <div className=\"border rounded-lg p-6 bg-gray-50\">\n                        <h4 className=\"font-medium mb-4\">\n                          Configuration Summary\n                        </h4>\n                        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                          <div className=\"bg-white rounded p-3\">\n                            <div className=\"text-2xl font-bold text-blue-600\">\n                              {appliedFeatures.length}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Features\n                            </div>\n                          </div>\n                          <div className=\"bg-white rounded p-3\">\n                            <div className=\"text-2xl font-bold text-green-600\">\n                              {selectedTemplateIds.length}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Templates\n                            </div>\n                          </div>\n                          <div className=\"bg-white rounded p-3\">\n                            <div className=\"text-2xl font-bold text-yellow-600\">\n                              {Object.keys(groupedFeatures).length}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Categories\n                            </div>\n                          </div>\n                          <div className=\"bg-white rounded p-3\">\n                            <div className=\"text-2xl font-bold text-purple-600\">\n                              {form.watch(\"isFeatured\") ? \"✓\" : \"—\"}\n                            </div>\n                            <div className=\"text-xs text-gray-500\">\n                              Featured\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div>\n                  ) : (\n                    <div className=\"text-center py-12 text-gray-500\">\n                      <Image className=\"h-16 w-16 mx-auto mb-4\" />\n                      <h3 className=\"text-lg font-medium mb-2\">{t(\"categories.previewMode\")}</h3>\n                      <p>\n                        {t(\"categories.previewNote\")}\n                      </p>\n                      <p className=\"text-sm\">\n                        {t(\"categories.previewRequirement\")}\n                      </p>\n                    </div>\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n\n            {/* Action Buttons */}\n            <div className=\"flex justify-end space-x-3 pt-6\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={handleClose}\n                data-testid=\"button-cancel\"\n              >\n                {t(\"categories.cancel\")}\n              </Button>\n              <Button\n                type=\"submit\"\n                className=\"bg-blue-600 hover:bg-blue-700\"\n                data-testid=\"button-add\"\n              >\n                {isEdit ? t(\"categories.superupdate\") : t(\"categories.superadd\")}\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n\n      {/* Template Selection Modal */}\n      <TemplateSelectionModal\n        isOpen={isTemplateModalOpen}\n        onClose={() => setIsTemplateModalOpen(false)}\n        onApplyTemplates={(features) => {\n          handleApplyTemplates(features);\n        }}\n        selectedTemplateIds={selectedTemplateIds}\n      />\n    </Dialog>\n  );\n}\n","size_bytes":72063},"client/src/components/products/product-card.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Heart, Star, ShoppingCart, Store as StoreIcon, Truck, Award, Shield } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\ninterface ProductCardProps {\n  product: {\n    id: string;\n    name: string;\n    description: string;\n    price: number;\n    originalPrice?: number;\n    images: string[];\n    rating: number;\n    reviewCount: number;\n    vendorName: string;\n    isFeatured?: boolean;\n    isHotDeal?: boolean;\n    isNew?: boolean;\n    isBundle?: boolean;\n    discount?: number;\n    features: string[];\n  };\n}\n\nexport function ProductCard({ product }: ProductCardProps) {\n  const { t } = useTranslation();\n  const [isWishlisted, setIsWishlisted] = useState(false);\n  const [imageLoaded, setImageLoaded] = useState(false);\n\n  const handleWishlistToggle = () => {\n    setIsWishlisted(!isWishlisted);\n  };\n\n  const handleAddToCart = () => {\n    // TODO: Implement add to cart functionality\n    console.log(\"Adding to cart:\", product.id);\n  };\n\n  const getBadgeConfig = () => {\n    if (product.isHotDeal) return { text: \"Hot Deal\", className: \"bg-red-500 text-white\" };\n    if (product.isFeatured) return { text: \"Featured\", className: \"bg-primary-500 text-white\" };\n    if (product.isNew) return { text: \"New\", className: \"bg-blue-500 text-white\" };\n    if (product.isBundle) return { text: \"Bundle\", className: \"bg-green-500 text-white\" };\n    return null;\n  };\n\n  const getFeatureIcon = (feature: string) => {\n    switch (feature.toLowerCase()) {\n      case \"fast shipping\":\n        return <Truck className=\"h-3 w-3\" />;\n      case \"free shipping\":\n        return <Truck className=\"h-3 w-3\" />;\n      case \"best seller\":\n        return <Award className=\"h-3 w-3\" />;\n      case \"2y warranty\":\n        return <Shield className=\"h-3 w-3\" />;\n      default:\n        return <StoreIcon className=\"h-3 w-3\" />;\n    }\n  };\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    const fullStars = Math.floor(rating);\n    const hasHalfStar = rating % 1 !== 0;\n    \n    for (let i = 0; i < fullStars; i++) {\n      stars.push(<Star key={i} className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />);\n    }\n    \n    if (hasHalfStar) {\n      stars.push(<Star key=\"half\" className=\"h-3 w-3 fill-yellow-400 text-yellow-400 opacity-50\" />);\n    }\n    \n    const remainingStars = 5 - Math.ceil(rating);\n    for (let i = 0; i < remainingStars; i++) {\n      stars.push(<Star key={`empty-${i}`} className=\"h-3 w-3 text-gray-300\" />);\n    }\n    \n    return stars;\n  };\n\n  const badge = getBadgeConfig();\n\n  return (\n    <Card className=\"product-card bg-white rounded-xl shadow-sm hover:shadow-lg transition-all duration-300 border group cursor-pointer overflow-hidden\" data-testid={`card-product-${product.id}`}>\n      <div className=\"relative overflow-hidden rounded-t-xl\">\n        <div className=\"relative w-full h-48 bg-gray-100\">\n          <img\n            src={product.images && product.images[0] ? product.images[0] : \"https://images.unsplash.com/photo-1542291026-7eec264c27ff?ixlib=rb-4.0.3&w=400&h=400\"}\n            alt={product.name}\n            className={`product-image w-full h-full object-cover transition-all duration-300 ${\n              imageLoaded ? \"opacity-100\" : \"opacity-0\"\n            }`}\n            onLoad={() => setImageLoaded(true)}\n            data-testid={`img-product-${product.id}`}\n          />\n          {!imageLoaded && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-gray-100\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary-500\"></div>\n            </div>\n          )}\n        </div>\n        \n        {badge && (\n          <div className=\"absolute top-3 left-3\">\n            <Badge className={`text-xs font-semibold px-2 py-1 rounded-full ${badge.className}`}>\n              {badge.text}\n            </Badge>\n          </div>\n        )}\n        \n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          onClick={handleWishlistToggle}\n          className=\"absolute top-3 right-3 p-2 bg-white rounded-full shadow-sm hover:bg-gray-50 transition-colors\"\n          data-testid={`button-wishlist-${product.id}`}\n        >\n          <Heart className={`h-4 w-4 ${isWishlisted ? \"fill-red-500 text-red-500\" : \"text-gray-400 hover:text-red-500\"}`} />\n        </Button>\n      </div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"flex items-start justify-between mb-2\">\n          <h3 className=\"font-semibold text-gray-900 line-clamp-2 flex-1\" data-testid={`text-product-name-${product.id}`}>\n            {product.name}\n          </h3>\n          <div className=\"flex items-center ml-2\">\n            <div className=\"flex text-yellow-400 text-sm\" data-testid={`rating-product-${product.id}`}>\n              {renderStars(product.rating)}\n            </div>\n            <span className=\"text-xs text-gray-500 ml-1\" data-testid={`text-review-count-${product.id}`}>\n              ({product.reviewCount})\n            </span>\n          </div>\n        </div>\n        \n        <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\" data-testid={`text-product-description-${product.id}`}>\n          {product.description}\n        </p>\n        \n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center space-x-2\">\n            <span className=\"text-2xl font-bold text-gray-900\" data-testid={`text-product-price-${product.id}`}>\n              ${product.price}\n            </span>\n            {product.originalPrice && (\n              <span className=\"text-sm text-gray-500 line-through\" data-testid={`text-original-price-${product.id}`}>\n                ${product.originalPrice}\n              </span>\n            )}\n          </div>\n          {product.discount && (\n            <Badge className=\"text-xs text-green-600 bg-green-100 px-2 py-1 rounded-full\" data-testid={`badge-discount-${product.id}`}>\n              {product.discount}% OFF\n            </Badge>\n          )}\n        </div>\n        \n        <div className=\"flex items-center justify-between text-xs text-gray-500 mb-4\">\n          <div className=\"flex items-center\">\n            <StoreIcon className=\"h-3 w-3 mr-1\" />\n            <span data-testid={`text-vendor-name-${product.id}`}>{product.vendorName}</span>\n          </div>\n          <div className=\"flex items-center\">\n            {product.features && product.features[0] && getFeatureIcon(product.features[0])}\n            <span className=\"ml-1\" data-testid={`text-product-feature-${product.id}`}>\n              {product.features && product.features[0] ? product.features[0] : \"Standard\"}\n            </span>\n          </div>\n        </div>\n        \n        <Button\n          onClick={handleAddToCart}\n          className=\"w-full bg-primary-600 text-white py-2 rounded-lg hover:bg-primary-700 transition-colors font-medium\"\n          data-testid={`button-add-to-cart-${product.id}`}\n        >\n          <ShoppingCart className=\"h-4 w-4 mr-2\" />\n          {t(\"products.addToCart\")}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7239},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/language-switcher.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { ChevronDown } from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Button } from \"@/components/ui/button\";\n\nconst languages = [\n  { code: \"en\", name: \"English\", flag: \"🇺🇸\" },\n  { code: \"fr\", name: \"Français\", flag: \"🇫🇷\" },\n  { code: \"ar\", name: \"العربية\", flag: \"🇸🇦\" },\n];\n\nexport function LanguageSwitcher() {\n  const { i18n, t } = useTranslation();\n  const [isOpen, setIsOpen] = useState(false);\n  \n  const currentLanguage = languages.find(lang => lang.code === i18n.language) || languages[0];\n  \n  const handleLanguageChange = async (langCode: string) => {\n    await i18n.changeLanguage(langCode);\n    // Set document direction for RTL languages\n    if (langCode === 'ar') {\n      document.documentElement.setAttribute('dir', 'rtl');\n      document.documentElement.setAttribute('lang', 'ar');\n    } else {\n      document.documentElement.setAttribute('dir', 'ltr');\n      document.documentElement.setAttribute('lang', langCode);\n    }\n    setIsOpen(false);\n  };\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button \n          variant=\"ghost\" \n          className=\"flex items-center space-x-2 px-3 py-2 text-sm text-gray-700 hover:text-primary-600 transition-colors\"\n          data-testid=\"button-language-switcher\"\n        >\n          <span className=\"text-lg\" data-testid=\"text-language-flag\">{currentLanguage.flag}</span>\n          <span data-testid=\"text-language-code\">{currentLanguage.code.toUpperCase()}</span>\n          <ChevronDown className=\"h-3 w-3\" />\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-48\">\n        {languages.map((language) => (\n          <DropdownMenuItem\n            key={language.code}\n            onClick={() => handleLanguageChange(language.code)}\n            className={`flex items-center space-x-3 px-3 py-2 cursor-pointer ${\n              i18n.language === language.code ? 'bg-primary-50 text-primary-700' : ''\n            }`}\n            data-testid={`option-language-${language.code}`}\n          >\n            <span className=\"text-lg\">{language.flag}</span>\n            <div className=\"flex flex-col\">\n              <span className=\"font-medium\">{language.name}</span>\n              <span className=\"text-xs text-gray-500\">{t(`language.${language.code === 'en' ? 'english' : language.code === 'fr' ? 'french' : 'arabic'}`)}</span>\n            </div>\n          </DropdownMenuItem>\n        ))}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":2732},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/notification-panel.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport {\n  Bell,\n  X,\n  Check,\n  User,\n  Store,\n  ShoppingCart,\n  Package,\n  MessageSquare,\n  Gift,\n  Truck,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { type Notification } from \"@shared/schema\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport function NotificationPanel() {\n  const [isOpen, setIsOpen] = useState(false);\n\n  const { data: notifications = [], isLoading } = useQuery<Notification[]>({\n    queryKey: [\"/api/notifications\"],\n    refetchInterval: 30000, // Refetch every 30 seconds\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (notificationId: string) => {\n      await apiRequest(\"PATCH\", `/api/notifications/${notificationId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    },\n  });\n\n  const unreadCount = notifications.filter((n) => !n.isRead).length;\n\n  const getNotificationIcon = (type: string) => {\n    switch (type) {\n      case \"user_registration\":\n        return <User className=\"h-4 w-4 text-blue-600\" />;\n      case \"seller_registration\":\n        return <Store className=\"h-4 w-4 text-purple-600\" />;\n      case \"seller_approval\":\n      case \"seller_approved\":\n        return <Check className=\"h-4 w-4 text-green-600\" />;\n      case \"seller_rejected\":\n        return <X className=\"h-4 w-4 text-red-600\" />;\n      case \"new_order\":\n        return <ShoppingCart className=\"h-4 w-4 text-orange-600\" />;\n      case \"order_confirmation\":\n        return <Package className=\"h-4 w-4 text-blue-600\" />;\n      case \"order_status_update\":\n        return <Truck className=\"h-4 w-4 text-indigo-600\" />;\n      case \"product_inquiry\":\n        return <MessageSquare className=\"h-4 w-4 text-cyan-600\" />;\n      case \"offer\":\n        return <Gift className=\"h-4 w-4 text-pink-600\" />;\n      default:\n        return <Bell className=\"h-4 w-4 text-gray-600\" />;\n    }\n  };\n\n  const handleMarkAsRead = (notificationId: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n    markAsReadMutation.mutate(notificationId);\n  };\n\n  return (\n    <DropdownMenu open={isOpen} onOpenChange={setIsOpen}>\n      <DropdownMenuTrigger asChild>\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n          <Bell className=\"h-5 w-5 \" />\n          {unreadCount > 0 && (\n            <Badge\n              className=\"absolute -top-1 -right-1 h-5 w-5 p-0 text-xs bg-red-500 hover:bg-red-600 justify-center\"\n              variant=\"destructive\"\n            >\n              {unreadCount > 9 ? \"9+\" : unreadCount}\n            </Badge>\n          )}\n        </Button>\n      </DropdownMenuTrigger>\n      <DropdownMenuContent align=\"end\" className=\"w-80 p-0\">\n        <div className=\"p-4 border-b\">\n          <div className=\"flex items-center justify-between\">\n            <h3 className=\"font-semibold text-sm\">Notifications</h3>\n            {unreadCount > 0 && (\n              <Badge variant=\"secondary\" className=\"text-xs\">\n                {unreadCount} new\n              </Badge>\n            )}\n          </div>\n        </div>\n\n        <ScrollArea className=\"h-80\">\n          {isLoading ? (\n            <div className=\"p-4 text-center text-sm text-gray-500\">\n              Loading notifications...\n            </div>\n          ) : notifications.length === 0 ? (\n            <div className=\"p-4 text-center text-sm text-gray-500\">\n              No notifications yet\n            </div>\n          ) : (\n            <div className=\"p-2\">\n              {notifications.map((notification) => (\n                <div\n                  key={notification.id}\n                  className={`p-3 rounded-lg mb-2 cursor-pointer transition-colors ${\n                    notification.isRead\n                      ? \"bg-gray-50 hover:bg-gray-100\"\n                      : \"bg-blue-50 hover:bg-blue-100 border border-blue-200\"\n                  }`}\n                >\n                  <div className=\"flex items-start space-x-3\">\n                    <div className=\"flex-shrink-0 mt-0.5\">\n                      {getNotificationIcon(notification.type)}\n                    </div>\n                    <div className=\"flex-1 min-w-0\">\n                      <div className=\"flex items-center justify-between\">\n                        <p className=\"text-sm font-medium text-gray-900 truncate\">\n                          {notification.title}\n                        </p>\n                        {!notification.isRead && (\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"h-6 w-6 p-0 text-gray-400 hover:text-gray-600\"\n                            onClick={(e) =>\n                              handleMarkAsRead(notification.id, e)\n                            }\n                          >\n                            <X className=\"h-3 w-3\" />\n                          </Button>\n                        )}\n                      </div>\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        {notification.message}\n                      </p>\n                      <p className=\"text-xs text-gray-400 mt-1\">\n                        {formatDistanceToNow(new Date(notification.createdAt), {\n                          addSuffix: true,\n                        })}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          )}\n        </ScrollArea>\n\n        {notifications.length > 0 && (\n          <div className=\"p-2 border-t bg-gray-50\">\n            <Button\n              variant=\"ghost\"\n              className=\"w-full text-xs text-gray-600 hover:text-gray-800\"\n              onClick={() => setIsOpen(false)}\n            >\n              View all notifications\n            </Button>\n          </div>\n        )}\n      </DropdownMenuContent>\n    </DropdownMenu>\n  );\n}\n","size_bytes":6274},"client/src/components/ui/order-details-modal.tsx":{"content":"import React from \"react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport html2canvas from \"html2canvas\";\nimport jsPDF from \"jspdf\";\nimport {\n  Package,\n  FileText,\n  DollarSign,\n  CreditCard,\n  Download,\n  Printer,\n  Check,\n  X,\n} from \"lucide-react\";\n\ninterface OrderItem {\n  id: string;\n  name: string;\n  description: string;\n  quantity: number;\n  price: string;\n}\n\ninterface OrderDetailsProps {\n  isOpen: boolean;\n  onClose: () => void;\n  order: {\n    id: string;\n    date: string;\n    customer: {\n      name: string;\n      avatar: string;\n    };\n    orderItems?: OrderItem[];\n    totalAmount?: string;\n    status: string;\n    paymentStatus: string;\n    notes?: string;\n  };\n}\n\nexport function OrderDetailsModal({\n  isOpen,\n  onClose,\n  order,\n}: OrderDetailsProps) {\n  // const handlePrint = () => {\n  //   const printContent = document.getElementById('order-details-print');\n  //   if (printContent) {\n  //     const printWindow = window.open('', '_blank');\n  //     if (printWindow) {\n  //       printWindow.document.write(`\n  //         <html>\n  //           <head>\n  //             <title>Order ${order.id}</title>\n  //             <style>\n  //               body { font-family: Arial, sans-serif; margin: 20px; }\n  //               .header { border-bottom: 2px solid #e5e7eb; padding-bottom: 20px; margin-bottom: 20px; }\n  //               .stats-grid { display: grid; grid-template-columns: repeat(4, 1fr); gap: 16px; margin-bottom: 20px; }\n  //               .stat-card { border: 1px solid #e5e7eb; border-radius: 8px; padding: 16px; text-align: center; }\n  //               .stat-value { font-size: 24px; font-weight: bold; margin-bottom: 4px; }\n  //               .stat-label { font-size: 12px; color: #6b7280; }\n  //               .items-section { margin-bottom: 20px; }\n  //               .item { display: flex; justify-content: space-between; align-items: center; padding: 12px 0; border-bottom: 1px solid #f3f4f6; }\n  //               .item:last-child { border-bottom: none; }\n  //               .item-details { flex: 1; }\n  //               .item-name { font-weight: 600; margin-bottom: 4px; }\n  //               .item-desc { font-size: 12px; color: #6b7280; }\n  //               .item-quantity { font-size: 14px; color: #6b7280; margin-top: 4px; }\n  //               .item-price { font-weight: 600; color: #059669; }\n  //               .total-section { border-top: 2px solid #e5e7eb; padding-top: 16px; text-align: right; }\n  //               .total-amount { font-size: 20px; font-weight: bold; }\n  //               @media print {\n  //                 body { margin: 0; }\n  //                 .no-print { display: none; }\n  //               }\n  //             </style>\n  //           </head>\n  //           <body>\n  //             ${printContent.innerHTML}\n  //           </body>\n  //         </html>\n  //       `);\n  //       printWindow.document.close();\n  //       printWindow.focus();\n  //       printWindow.print();\n  //       printWindow.close();\n  //     }\n  //   }\n  // };\n\n  const handlePrint = () => {\n    const printContent = document.getElementById(\"order-details-print\");\n    if (printContent) {\n      const printWindow = window.open(\"\", \"_blank\", \"width=900,height=700\");\n      if (printWindow) {\n        printWindow.document.write(`\n          <html>\n            <head>\n              <title>Order ${order.id}</title>\n              <!-- Tailwind CSS -->\n              <link href=\"https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css\" rel=\"stylesheet\">\n              <style>\n                body {\n                  font-family: Arial, sans-serif;\n                  padding: 20px;\n                }\n                @media print {\n                  body {\n                    -webkit-print-color-adjust: exact !important;\n                    print-color-adjust: exact !important;\n                  }\n                  .no-print {\n                    display: none !important;\n                  }\n                }\n              </style>\n            </head>\n            <body>\n              <div class=\"max-w-4xl mx-auto\">\n                ${printContent.innerHTML}\n              </div>\n            </body>\n          </html>\n        `);\n\n        // wait a bit so Tailwind loads before print\n        printWindow.document.close();\n        printWindow.focus();\n\n        setTimeout(() => {\n          printWindow.print();\n          printWindow.close();\n        }, 500);\n      }\n    }\n  };\n\n  const handleDownload = async () => {\n    const printContent = document.getElementById(\"order-details-print\");\n    if (printContent) {\n      const padding = 10; // in mm\n      const canvas = await html2canvas(printContent, {\n        scale: 2,\n        useCORS: true,\n      });\n\n      const imgData = canvas.toDataURL(\"image/png\");\n      const pdf = new jsPDF(\"p\", \"mm\", \"a4\");\n\n      const pdfWidth = pdf.internal.pageSize.getWidth() - 2 * padding;\n      const pdfHeight = (canvas.height * pdfWidth) / canvas.width;\n\n      pdf.addImage(imgData, \"PNG\", padding, padding, pdfWidth, pdfHeight);\n      pdf.save(`order-${order.id}.pdf`);\n    }\n  };\n\n  // const handleDownload = () => {\n  //   const orderData = {\n  //     orderId: order.id,\n  //     date: order.date,\n  //     customer: order.customer.name,\n  //     items: (order.orderItems || []).map((item) => ({\n  //       name: item.name,\n  //       description: item.description,\n  //       quantity: item.quantity,\n  //       price: item.price,\n  //     })),\n  //     total: order.totalAmount,\n  //     status: order.status,\n  //     paymentStatus: order.paymentStatus,\n  //   };\n\n  //   const dataStr =\n  //     \"data:text/json;charset=utf-8,\" +\n  //     encodeURIComponent(JSON.stringify(orderData, null, 2));\n  //   const downloadAnchorNode = document.createElement(\"a\");\n  //   downloadAnchorNode.setAttribute(\"href\", dataStr);\n  //   downloadAnchorNode.setAttribute(\"download\", `order-${order.id}.json`);\n  //   document.body.appendChild(downloadAnchorNode);\n  //   downloadAnchorNode.click();\n  //   downloadAnchorNode.remove();\n  // };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <div id=\"order-details-print\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center justify-between\">\n              <div>\n                <h2 className=\"text-xl font-semibold\">Command {order.id}</h2>\n                <p className=\"text-sm text-gray-600 mt-1\">\n                  Control in {order.date}\n                </p>\n              </div>\n            </DialogTitle>\n          </DialogHeader>\n\n          <div className=\"mt-6\">\n            {/* Stats Cards */}\n            <div className=\"grid grid-cols-4 gap-4 mb-6\">\n              <Card className=\"bg-blue-50 border-blue-200\">\n                <CardContent className=\"p-4 text-center\">\n                  <Package className=\"h-8 w-8 text-blue-600 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-blue-700\">\n                    {order.orderItems?.length || 0}\n                  </div>\n                  <div className=\"text-xs text-blue-600\">Products</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-green-50 border-green-200\">\n                <CardContent className=\"p-4 text-center\">\n                  <FileText className=\"h-8 w-8 text-green-600 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-green-700\">-</div>\n                  <div className=\"text-xs text-green-600\">Notes</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-purple-50 border-purple-200\">\n                <CardContent className=\"p-4 text-center\">\n                  <DollarSign className=\"h-8 w-8 text-purple-600 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-purple-700\">\n                    {order.totalAmount}\n                  </div>\n                  <div className=\"text-xs text-purple-600\">Total</div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-orange-50 border-orange-200\">\n                <CardContent className=\"p-4 text-center\">\n                  <CreditCard className=\"h-8 w-8 text-orange-600 mx-auto mb-2\" />\n                  <div className=\"text-2xl font-bold text-orange-700\">\n                    {order.paymentStatus}\n                  </div>\n                  <div className=\"text-xs text-orange-600\">Payment</div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Products Section */}\n            <div className=\"mb-6\">\n              <h3 className=\"text-lg font-semibold mb-4 flex items-center\">\n                <Package className=\"h-5 w-5 mr-2\" />\n                Products ordered\n              </h3>\n\n              <div className=\"space-y-4\">\n                {(order.orderItems || []).map((item) => (\n                  <div\n                    key={item.id}\n                    className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex items-center space-x-4\">\n                      <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center\">\n                        <Package className=\"h-6 w-6 text-gray-400\" />\n                      </div>\n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">\n                          {item.name}\n                        </h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {item.description}\n                        </p>\n                        <p className=\"text-sm text-gray-500\">\n                          Quantity: {item.quantity}\n                        </p>\n                      </div>\n                    </div>\n                    <div className=\"text-lg font-semibold text-green-600\">\n                      {item.price}\n                    </div>\n                  </div>\n                ))}\n              </div>\n\n              <Separator className=\"my-4\" />\n\n              <div className=\"flex justify-end\">\n                <div className=\"text-right\">\n                  <p className=\"text-lg font-semibold\">Order total</p>\n                  <p className=\"text-2xl font-bold text-green-600\">\n                    {order.totalAmount}\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex items-center justify-between pt-4 border-t no-print\">\n          <div className=\"flex space-x-2\">\n            <Button\n              variant=\"outline\"\n              onClick={handleDownload}\n              data-testid=\"button-download-order\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Download\n            </Button>\n            <Button\n              variant=\"outline\"\n              onClick={handlePrint}\n              data-testid=\"button-print-order\"\n            >\n              <Printer className=\"h-4 w-4 mr-2\" />\n              Print\n            </Button>\n          </div>\n          <div className=\"flex space-x-2\">\n            <Button\n              className=\"bg-green-600 hover:bg-green-700\"\n              data-testid=\"button-accept-order\"\n            >\n              <Check className=\"h-4 w-4 mr-2\" />\n              Accept\n            </Button>\n            <Button variant=\"destructive\" data-testid=\"button-decline-order\">\n              <X className=\"h-4 w-4 mr-2\" />\n              Decline\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":11925},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/vendors/vendor-card.tsx":{"content":"import { useTranslation } from \"react-i18next\";\nimport { Star, Package } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n\ninterface VendorCardProps {\n  vendor: {\n    id: string;\n    name: string;\n    description: string;\n    avatar: string;\n    rating: number;\n    productCount: number;\n  };\n}\n\nexport function VendorCard({ vendor }: VendorCardProps) {\n  const { t } = useTranslation();\n\n  const handleVisitStore = () => {\n    // TODO: Navigate to vendor store page\n    console.log(\"Visiting store:\", vendor.id);\n  };\n\n  return (\n    <Card className=\"bg-white rounded-xl shadow-sm hover:shadow-lg transition-shadow p-6 text-center\" data-testid={`card-vendor-${vendor.id}`}>\n      <CardContent className=\"p-0\">\n        <Avatar className=\"w-20 h-20 mx-auto mb-4\">\n          <AvatarImage \n            src={vendor.avatar} \n            alt={vendor.name}\n            className=\"object-cover\"\n            data-testid={`img-vendor-avatar-${vendor.id}`}\n          />\n          <AvatarFallback className=\"text-xl font-semibold\">\n            {vendor.name.split(' ').map(n => n[0]).join('')}\n          </AvatarFallback>\n        </Avatar>\n        \n        <h3 className=\"font-bold text-lg text-gray-900 mb-2\" data-testid={`text-vendor-name-${vendor.id}`}>\n          {vendor.name}\n        </h3>\n        \n        <p className=\"text-gray-600 mb-4\" data-testid={`text-vendor-description-${vendor.id}`}>\n          {vendor.description}\n        </p>\n        \n        <div className=\"flex items-center justify-center space-x-4 text-sm text-gray-500 mb-4\">\n          <div className=\"flex items-center\">\n            <Star className=\"h-4 w-4 text-yellow-400 mr-1 fill-yellow-400\" />\n            <span data-testid={`text-vendor-rating-${vendor.id}`}>\n              {vendor.rating} {t(\"vendors.rating\")}\n            </span>\n          </div>\n          <div className=\"flex items-center\">\n            <Package className=\"h-4 w-4 mr-1\" />\n            <span data-testid={`text-vendor-product-count-${vendor.id}`}>\n              {vendor.productCount}k {t(\"vendors.products\")}\n            </span>\n          </div>\n        </div>\n        \n        <Button\n          onClick={handleVisitStore}\n          variant=\"outline\"\n          className=\"w-full border-primary-600 text-primary-600 py-2 rounded-lg hover:bg-primary-50 transition-colors font-medium\"\n          data-testid={`button-visit-store-${vendor.id}`}\n        >\n          {t(\"vendors.visitStore\")}\n        </Button>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2638},"client/src/components/modals/template-selection-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Check, X } from \"lucide-react\";\nimport {\n  categoryTemplates,\n  CategoryTemplate,\n  TemplateFeature,\n} from \"../../data/categoryTemplates\";\n\ninterface TemplateSelectionModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onApplyTemplates: (features: TemplateFeature[]) => void;\n  selectedTemplateIds?: string[];\n}\n\nexport function TemplateSelectionModal({\n  isOpen,\n  onClose,\n  onApplyTemplates,\n  selectedTemplateIds = [],\n}: TemplateSelectionModalProps) {\n  const [selectedTemplates, setSelectedTemplates] =\n    useState<string[]>(selectedTemplateIds);\n\n  // Fetch categories from database\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/admin/categories\"],\n    enabled: isOpen,\n  });\n\n  const toggleTemplate = (templateId: string) => {\n    setSelectedTemplates((prev) =>\n      prev.includes(templateId)\n        ? prev.filter((id) => id !== templateId)\n        : [...prev, templateId],\n    );\n  };\n\n  const handleApplyTemplate = () => {\n    // Merge features from all selected templates and categories\n    const allFeatures: TemplateFeature[] = [];\n    const seenKeys = new Set<string>();\n\n    selectedTemplates.forEach((templateId) => {\n      // Handle predefined templates\n      if (!templateId.startsWith(\"category-\")) {\n        const template = categoryTemplates.find((t) => t.id === templateId);\n        if (template) {\n          template.features.forEach((feature) => {\n            if (!seenKeys.has(feature.key)) {\n              allFeatures.push({ ...feature });\n              seenKeys.add(feature.key);\n            }\n          });\n        }\n      } else {\n        // Handle category features\n        const categoryId = templateId.replace(\"category-\", \"\");\n        const category = categories.find((c: any) => c.id === categoryId);\n        if (category && category.features) {\n          category.features.forEach((feature: any) => {\n            if (!seenKeys.has(feature.name)) {\n              allFeatures.push({\n                key: feature.name,\n                type: feature.type,\n                default_value: feature.value || \"\",\n                description: `Feature from ${category.translations?.[0]?.name || \"category\"}`,\n                category: \"category_features\",\n              });\n              seenKeys.add(feature.name);\n            }\n          });\n        }\n      }\n    });\n\n    onApplyTemplates(allFeatures);\n    onClose();\n  };\n\n  const handleBackToProperties = () => {\n    onClose();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <div className=\"flex items-center justify-between\">\n            <DialogTitle>\n              Select a template to pre-populate your supercategory metadata\n            </DialogTitle>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"h-8 w-8 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          <p className=\"text-sm text-gray-600 mt-2\">\n            Each template contains optimized configurations for a specific\n            product type.\n          </p>\n        </DialogHeader>\n\n        {/* Templates Section */}\n        <div className=\"space-y-6 p-4\">\n          <div>\n            <h3 className=\"text-lg font-semibold mb-4\">Predefined Templates</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {categoryTemplates.map((template) => {\n                const isSelected = selectedTemplates.includes(template.id);\n\n                return (\n                  <div\n                    key={template.id}\n                    className={`relative border-2 rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${\n                      isSelected\n                        ? \"border-blue-500 bg-blue-50\"\n                        : \"border-gray-200 hover:border-gray-300\"\n                    }`}\n                    onClick={() => toggleTemplate(template.id)}\n                  >\n                    {/* Selection indicator */}\n                    {isSelected && (\n                      <div className=\"absolute top-2 right-2 bg-green-500 text-white rounded-full p-1\">\n                        <Check className=\"h-3 w-3\" />\n                      </div>\n                    )}\n\n                    {/* Template icon */}\n                    <div\n                      className={`w-full h-24 ${template.color} rounded-lg flex items-center justify-center text-white text-3xl mb-3`}\n                    >\n                      {template.icon}\n                    </div>\n\n                    {/* Template info */}\n                    <h3 className=\"font-semibold text-lg mb-2\">\n                      {template.name}\n                    </h3>\n                    <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                      {template.description}\n                    </p>\n\n                    {/* Tags */}\n                    <div className=\"flex flex-wrap gap-1 mb-2\">\n                      {template.tags.slice(0, 3).map((tag, index) => (\n                        <Badge\n                          key={index}\n                          variant=\"secondary\"\n                          className=\"text-xs\"\n                        >\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n\n                    {/* Features count */}\n                    <div className=\"text-xs text-gray-500\">\n                      {template.features.length} features\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n\n          {/* Categories Section */}\n          {categories.length > 0 && (\n            <div>\n              <h3 className=\"text-lg font-semibold mb-4\">\n                Available Categories\n              </h3>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                {categories.map((category: any) => {\n                  const categoryName =\n                    category.translations?.[0]?.name || \"Unnamed Category\";\n                  const description =\n                    category.translations?.[0]?.description || \"\";\n                  const isSelected = selectedTemplates.includes(\n                    `category-${category.id}`,\n                  );\n\n                  return (\n                    <div\n                      key={category.id}\n                      className={`relative border-2 rounded-lg p-4 cursor-pointer transition-all hover:shadow-md ${\n                        isSelected\n                          ? \"border-green-500 bg-green-50\"\n                          : \"border-gray-200 hover:border-gray-300\"\n                      }`}\n                      onClick={() => toggleTemplate(`category-${category.id}`)}\n                    >\n                      {/* Selection indicator */}\n                      {isSelected && (\n                        <div className=\"absolute top-2 right-2 bg-green-500 text-white rounded-full p-1\">\n                          <Check className=\"h-3 w-3\" />\n                        </div>\n                      )}\n\n                      {/* Category icon */}\n                      {/* <div className=\"w-full h-16 bg-gradient-to-br from-gray-400 to-gray-600 rounded-lg flex items-center justify-center text-white text-2xl mb-3\">\n                        {category.icon || \"📦\"}\n                      </div> */}\n                      <div\n                        className=\"w-full h-16 rounded-lg flex items-center justify-center text-white text-2xl mb-3\"\n                        style={{\n                          backgroundColor: `#${Math.floor(Math.random() * 16777215).toString(16)}`,\n                        }}\n                      >\n                        {(category.icon || \"📦\")\n                          .toString()\n                          .charAt(0)\n                          .toUpperCase() +\n                          (category.icon || \"📦\").toString().slice(1)}\n                      </div>\n\n                      {/* Category info */}\n                      <h3 className=\"font-semibold text-base mb-2\">\n                        {categoryName}\n                      </h3>\n                      {description && (\n                        <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">\n                          {description}\n                        </p>\n                      )}\n\n                      {/* Features count - simulated for now */}\n                      <div className=\"text-xs text-gray-500\">\n                        {category.features.length} features\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Action buttons */}\n        <div className=\"flex justify-between items-center p-4 border-t\">\n          <Button variant=\"outline\" onClick={handleBackToProperties}>\n            Back to properties\n          </Button>\n\n          <div className=\"flex gap-2\">\n            <span className=\"text-sm text-gray-600 self-center\">\n              {selectedTemplates.length} template(s) selected\n            </span>\n            <Button\n              onClick={handleApplyTemplate}\n              disabled={selectedTemplates.length === 0}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n            >\n              Apply this template\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":9906},"client/src/data/categoryTemplates.ts":{"content":"export interface TemplateFeature {\n  key: string;\n  name: string;\n  type: 'text' | 'number' | 'boolean' | 'select' | 'color' | 'url';\n  defaultValue?: any;\n  options?: string[];\n  group: string;\n  description?: string;\n}\n\nexport interface CategoryTemplate {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  color: string;\n  tags: string[];\n  features: TemplateFeature[];\n}\n\nexport const categoryTemplates: CategoryTemplate[] = [\n  {\n    id: 'automobile',\n    name: 'Automobile',\n    description: 'Designed for automotive configuration for...',\n    icon: '🚗',\n    color: 'bg-blue-500',\n    tags: ['Comparison', 'Year/Price Filters', 'Test drive'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'cards',\n        options: ['cards', 'list', 'grid'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'primary_color',\n        name: 'primary_color',\n        type: 'color',\n        defaultValue: '#1D4ED8',\n        group: 'Display & Design'\n      },\n      {\n        key: 'enable_comparison',\n        name: 'enable_comparison',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'show_year_filter',\n        name: 'show_year_filter',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'show_price_filter',\n        name: 'show_price_filter',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'brand_showcase',\n        name: 'brand_showcase',\n        type: 'select',\n        defaultValue: 'BMW, Audi',\n        options: ['BMW', 'Audi', 'Mercedes', 'Toyota'],\n        group: 'Brands & Categorizations'\n      }\n    ]\n  },\n  {\n    id: 'real_estate',\n    name: 'Real estate',\n    description: 'Templates for real estate sector...',\n    icon: '🏠',\n    color: 'bg-green-500',\n    tags: ['Map view', 'Surface/Rooms', 'Energy'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'cards',\n        options: ['cards', 'list', 'map'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'enable_map_view',\n        name: 'enable_map_view',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'show_surface_filter',\n        name: 'show_surface_filter',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'show_rooms_filter',\n        name: 'show_rooms_filter',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'energy_class',\n        name: 'energy_class',\n        type: 'select',\n        defaultValue: 'A+',\n        options: ['A+', 'A', 'B', 'C', 'D'],\n        group: 'Brands & Categorizations'\n      }\n    ]\n  },\n  {\n    id: 'electronic',\n    name: 'Electronic',\n    description: 'For electronic products with...',\n    icon: '📱',\n    color: 'bg-purple-500',\n    tags: ['Technical specifications', 'Comparison', 'Compatibility'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'grid',\n        options: ['cards', 'list', 'grid'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'show_specifications',\n        name: 'show_specifications',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'enable_comparison',\n        name: 'enable_comparison',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'compatibility_check',\n        name: 'compatibility_check',\n        type: 'boolean',\n        defaultValue: false,\n        group: 'Filters & Navigation'\n      }\n    ]\n  },\n  {\n    id: 'household_appliances',\n    name: 'Household appliances',\n    description: 'Designed for household appliance...',\n    icon: '🧠',\n    color: 'bg-cyan-500',\n    tags: ['Energy class', 'Facility', 'Guarantee'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'cards',\n        options: ['cards', 'list'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'show_energy_rating',\n        name: 'show_energy_rating',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'warranty_info',\n        name: 'warranty_info',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      }\n    ]\n  },\n  {\n    id: 'clothes',\n    name: 'Clothes',\n    description: 'Suitable for clothing with filtering by size...',\n    icon: '👕',\n    color: 'bg-pink-500',\n    tags: ['Size guide', 'Virtual try-on', 'Materials'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'grid',\n        options: ['cards', 'list', 'grid'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'size_guide',\n        name: 'size_guide',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'virtual_try_on',\n        name: 'virtual_try_on',\n        type: 'boolean',\n        defaultValue: false,\n        group: 'Filters & Navigation'\n      }\n    ]\n  },\n  {\n    id: 'sports_leisure',\n    name: 'Sports & Leisure',\n    description: 'For sports equipment with features by sport...',\n    icon: '⚽',\n    color: 'bg-orange-500',\n    tags: ['By sport', 'Video Demos', 'Level'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'cards',\n        options: ['cards', 'list'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'sport_category',\n        name: 'sport_category',\n        type: 'select',\n        defaultValue: 'Football',\n        options: ['Football', 'Basketball', 'Tennis', 'Swimming'],\n        group: 'Brands & Categorizations'\n      },\n      {\n        key: 'skill_level',\n        name: 'skill_level',\n        type: 'select',\n        defaultValue: 'Beginner',\n        options: ['Beginner', 'Intermediate', 'Advanced'],\n        group: 'Filters & Navigation'\n      }\n    ]\n  },\n  {\n    id: 'furniture_decor',\n    name: 'Furniture & Decor',\n    description: 'Furniture template with advanced...',\n    icon: '🪑',\n    color: 'bg-yellow-600',\n    tags: ['Dimensions', 'Style', 'Materials'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'grid',\n        options: ['cards', 'list', 'grid'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'show_dimensions',\n        name: 'show_dimensions',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'material_filter',\n        name: 'material_filter',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      }\n    ]\n  },\n  {\n    id: 'beauty_cosmetics',\n    name: 'Beauty & Cosmetics',\n    description: 'Optimized for beauty products with filters...',\n    icon: '💄',\n    color: 'bg-purple-400',\n    tags: ['Skin type', 'Ingredients', 'Tutorials'],\n    features: [\n      {\n        key: 'display_style',\n        name: 'display_style',\n        type: 'select',\n        defaultValue: 'cards',\n        options: ['cards', 'grid'],\n        group: 'Display & Design'\n      },\n      {\n        key: 'skin_type_filter',\n        name: 'skin_type_filter',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      },\n      {\n        key: 'ingredients_display',\n        name: 'ingredients_display',\n        type: 'boolean',\n        defaultValue: true,\n        group: 'Filters & Navigation'\n      }\n    ]\n  }\n];\n\nexport const getTemplateById = (id: string): CategoryTemplate | undefined => {\n  return categoryTemplates.find(template => template.id === id);\n};\n\nexport const mergeTemplateFeatures = (templateIds: string[]): TemplateFeature[] => {\n  const allFeatures: TemplateFeature[] = [];\n  const seenKeys = new Set<string>();\n\n  templateIds.forEach(templateId => {\n    const template = getTemplateById(templateId);\n    if (template) {\n      template.features.forEach(feature => {\n        if (!seenKeys.has(feature.key)) {\n          allFeatures.push({ ...feature });\n          seenKeys.add(feature.key);\n        }\n      });\n    }\n  });\n\n  return allFeatures;\n};\n\nexport const groupFeaturesByCategory = (features: TemplateFeature[]) => {\n  return features.reduce((groups, feature) => {\n    const group = feature.group;\n    if (!groups[group]) {\n      groups[group] = [];\n    }\n    groups[group].push(feature);\n    return groups;\n  }, {} as Record<string, TemplateFeature[]>);\n};","size_bytes":9110},"client/src/components/forms/advanced-add-product-form.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useForm, useFieldArray } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  AlertCircle,\n  Upload,\n  Link2,\n  Plus,\n  X,\n  Package,\n  Save,\n  Send,\n  CheckCircle,\n  AlertTriangle,\n  Info,\n} from \"lucide-react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport ReactQuill from \"react-quill\";\nimport \"react-quill/dist/quill.snow.css\";\n\nconst SUPPORTED_LANGS = [\"en\", \"fr\", \"ar\"] as const;\n\n// Product schema for validation\nconst productSpecificationSchema = z.object({\n  featureName: z.string().min(1, \"Feature name is required\"),\n  featureValue: z.string().min(1, \"Feature value is required\"),\n  featureType: z.string().min(1, \"Feature type is required\"),\n});\n\nconst productFaqSchema = z.object({\n  question: z.string().min(1, \"Question is required\"),\n  answer: z.string().min(1, \"Answer is required\"),\n});\n\n// Multilingual translation schema\nconst productTranslationSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  highlights: z.string().optional(),\n});\n\n// Optional translation schema for secondary languages\nconst optionalProductTranslationSchema = z.object({\n  name: z.string().optional(),\n  description: z.string().optional(),\n  highlights: z.string().optional(),\n});\n\nconst addProductSchema = z.object({\n  // Multilingual Information - Only English required\n  translations: z.object({\n    en: productTranslationSchema,\n    fr: optionalProductTranslationSchema,\n    ar: optionalProductTranslationSchema,\n  }),\n\n  // Product Details\n  brand: z.string().min(1, \"Brand is required\"),\n  sku: z.string().min(1, \"SKU is required\"),\n  price: z.number().min(0.01, \"Price must be greater than 0\"),\n  originalPrice: z.number().optional(),\n  stock: z.number().min(0, \"Stock must be 0 or greater\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n\n  // Status\n  status: z.enum([\"active\", \"inactive\"]).default(\"active\"),\n\n  // Images with upload method tracking\n  images: z\n    .array(\n      z.object({\n        url: z.string(),\n        uploadMethod: z.enum([\"upload\", \"url\", \"existing\"]),\n      }),\n    )\n    .max(8, \"Maximum 8 images allowed\"),\n\n  // Specifications (dynamic based on category)\n  specifications: z.array(productSpecificationSchema).optional(),\n\n  // FAQs\n  faqs: z.array(productFaqSchema).optional(),\n});\n\ntype AddProductFormData = z.infer<typeof addProductSchema>;\n\ninterface AdvancedAddProductFormProps {\n  onSubmit: (data: AddProductFormData) => void;\n  onCancel: () => void;\n  isLoading?: boolean;\n  editMode?: boolean;\n  editProduct?: any;\n}\n\nexport function AdvancedAddProductForm({\n  onSubmit,\n  onCancel,\n  isLoading = false,\n  editMode = false,\n  editProduct,\n}: AdvancedAddProductFormProps) {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [currentTab, setCurrentTab] = useState(\"information\");\n\n  // Initialize translations state\n  const [translations, setTranslations] = useState(\n    SUPPORTED_LANGS.reduce(\n      (acc, lang) => {\n        // Initialize with edit data if available\n        const editData = editMode && editProduct?.translations?.[lang];\n        acc[lang] = {\n          name: editData?.name || \"\",\n          description: editData?.description || \"\",\n          highlights: editData?.highlights || \"\",\n        };\n        return acc;\n      },\n      {} as Record<\n        string,\n        { name: string; description: string; highlights: string }\n      >,\n    ),\n  );\n\n  // Handle translation changes\n  const handleTranslationChange = (\n    lang: string,\n    field: \"name\" | \"description\" | \"highlights\",\n    value: string,\n  ) => {\n    setTranslations((prev) => ({\n      ...prev,\n      [lang]: {\n        ...prev[lang],\n        [field]: value,\n      },\n    }));\n\n    // Also update the form\n    form.setValue(`translations.${lang}.${field}` as any, value);\n  };\n\n  // Separate uploaded images from URL images in edit mode\n  const initializeImages = () => {\n    if (editMode && editProduct && editProduct.images) {\n      // Check if images have the new structure or old structure\n      const images = editProduct.images;\n      if (images.length > 0 && typeof images[0] === \"string\") {\n        // Old structure - treat all as existing images\n        return {\n          uploaded: [],\n          urls: images as string[],\n        };\n      } else {\n        // New structure - separate by upload method\n        const imageObjects = images as { url: string; uploadMethod: string }[];\n        return {\n          uploaded: imageObjects\n            .filter((img) => img.uploadMethod === \"upload\")\n            .map((img) => img.url),\n          urls: imageObjects\n            .filter((img) => img.uploadMethod !== \"upload\")\n            .map((img) => img.url),\n        };\n      }\n    }\n    return { uploaded: [], urls: [] };\n  };\n\n  const { uploaded: initialUploaded, urls: initialUrls } = initializeImages();\n  const [uploadedImages, setUploadedImages] =\n    useState<string[]>(initialUploaded);\n  const [imageUrls, setImageUrls] = useState<string[]>(initialUrls);\n  const [selectedCategory, setSelectedCategory] = useState<string>(\n    editMode && editProduct ? editProduct.categoryId || \"\" : \"\",\n  );\n  const [isDraft, setIsDraft] = useState(\n    editMode && editProduct ? editProduct.status === \"draft\" : false,\n  );\n\n  const form = useForm<AddProductFormData>({\n    resolver: zodResolver(addProductSchema),\n    defaultValues:\n      editMode && editProduct\n        ? {\n            translations: {\n              en: {\n                name: editProduct.translations?.en?.name || \"\",\n                description: editProduct.translations?.en?.description || \"\",\n                highlights: editProduct.translations?.en?.highlights || \"\",\n              },\n              fr: {\n                name: editProduct.translations?.fr?.name || \"\",\n                description: editProduct.translations?.fr?.description || \"\",\n                highlights: editProduct.translations?.fr?.highlights || \"\",\n              },\n              ar: {\n                name: editProduct.translations?.ar?.name || \"\",\n                description: editProduct.translations?.ar?.description || \"\",\n                highlights: editProduct.translations?.ar?.highlights || \"\",\n              },\n            },\n            brand: editProduct.brand || \"\",\n            sku: editProduct.sku || \"\",\n            price: parseFloat(editProduct.price) || 0,\n            originalPrice: editProduct.originalPrice\n              ? parseFloat(editProduct.originalPrice)\n              : 0,\n            stock: editProduct.stock || 0,\n            categoryId: editProduct.categoryId || \"\",\n            status: editProduct.status || \"active\",\n            images: editProduct.images\n              ? typeof editProduct.images[0] === \"string\"\n                ? (editProduct.images as string[]).map((url) => ({\n                    url,\n                    uploadMethod: \"existing\" as const,\n                  }))\n                : editProduct.images\n              : [],\n            specifications: editProduct.specifications || [],\n            faqs: editProduct.faqs || [],\n          }\n        : {\n            translations: {\n              en: { name: \"\", description: \"\", highlights: \"\" },\n              fr: { name: \"\", description: \"\", highlights: \"\" },\n              ar: { name: \"\", description: \"\", highlights: \"\" },\n            },\n            brand: \"\",\n            sku: \"\",\n            price: \"\" as any,\n            originalPrice: \"\" as any,\n            stock: \"\" as any,\n            categoryId: \"\",\n            status: \"active\",\n            images: [],\n            specifications: [],\n            faqs: [],\n          },\n  });\n\n  const {\n    fields: specificationFields,\n    append: appendSpecification,\n    remove: removeSpecification,\n  } = useFieldArray({\n    control: form.control,\n    name: \"specifications\",\n  });\n\n  const {\n    fields: faqFields,\n    append: appendFaq,\n    remove: removeFaq,\n  } = useFieldArray({\n    control: form.control,\n    name: \"faqs\",\n  });\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Fetch category features when category is selected\n  const { data: categoryFeatures = [] } = useQuery({\n    queryKey: [\"/api/categories\", selectedCategory, \"features\"],\n    enabled: !!selectedCategory,\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/categories/${selectedCategory}/features`,\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch category features\");\n      return response.json();\n    },\n  });\n\n  // Initialize translations, FAQs and Images when in edit mode\n  useEffect(() => {\n    if (editMode && editProduct) {\n      // Initialize translations from edit product\n      if (editProduct.translations) {\n        setTranslations(editProduct.translations);\n        // Also set form values to ensure they appear in the form\n        form.setValue(\n          \"translations.en.name\",\n          editProduct.translations.en?.name || \"\",\n        );\n        form.setValue(\n          \"translations.en.description\",\n          editProduct.translations.en?.description || \"\",\n        );\n        form.setValue(\n          \"translations.en.highlights\",\n          editProduct.translations.en?.highlights || \"\",\n        );\n        form.setValue(\n          \"translations.fr.name\",\n          editProduct.translations.fr?.name || \"\",\n        );\n        form.setValue(\n          \"translations.fr.description\",\n          editProduct.translations.fr?.description || \"\",\n        );\n        form.setValue(\n          \"translations.fr.highlights\",\n          editProduct.translations.fr?.highlights || \"\",\n        );\n        form.setValue(\n          \"translations.ar.name\",\n          editProduct.translations.ar?.name || \"\",\n        );\n        form.setValue(\n          \"translations.ar.description\",\n          editProduct.translations.ar?.description || \"\",\n        );\n        form.setValue(\n          \"translations.ar.highlights\",\n          editProduct.translations.ar?.highlights || \"\",\n        );\n      }\n\n      // Also ensure brand and other fields are set\n      if (editProduct.brand) {\n        form.setValue(\"brand\", editProduct.brand);\n      }\n\n      // Clear existing FAQs first\n      const currentFaqs = form.getValues(\"faqs\") || [];\n      for (let i = currentFaqs.length - 1; i >= 0; i--) {\n        removeFaq(i);\n      }\n\n      // Add existing FAQs if they exist\n      if (editProduct.faqs && editProduct.faqs.length > 0) {\n        editProduct.faqs.forEach((faq: any) => {\n          appendFaq({\n            question: faq.question || \"\",\n            answer: faq.answer || \"\",\n          });\n        });\n      }\n\n      // Reinitialize images to fix disappearing issue\n      const { uploaded, urls } = initializeImages();\n      setUploadedImages(uploaded);\n      setImageUrls(urls);\n    }\n  }, [editMode, editProduct, form, appendFaq, removeFaq]);\n\n  // Auto-populate specifications when category changes\n  useEffect(() => {\n    if (categoryFeatures.length > 0 && !editMode) {\n      // Clear existing specifications only when not in edit mode\n      form.setValue(\"specifications\", []);\n\n      // Add specifications based on category features\n      const newSpecifications = categoryFeatures.map((feature: any) => ({\n        featureName: feature.name,\n        featureValue: \"\",\n        featureType: feature.type,\n      }));\n\n      form.setValue(\"specifications\", newSpecifications);\n    } else if (selectedCategory && !editMode) {\n      // Clear specifications if category has no features and not in edit mode\n      form.setValue(\"specifications\", []);\n    }\n  }, [categoryFeatures, selectedCategory, form]);\n\n  const calculateProgress = () => {\n    const values = form.getValues();\n    let completed = 0;\n    const total = 4;\n\n    // Information tab - check if basic required fields are filled (only English translation required)\n    const hasBasicInfo =\n      values.brand &&\n      values.sku &&\n      values.categoryId &&\n      values.price &&\n      values.translations?.en?.name &&\n      values.translations?.en?.description;\n\n    if (hasBasicInfo) {\n      completed++;\n    }\n\n    // Specifications tab - only count as complete if specifications exist and have values\n    if (values.specifications && values.specifications.length > 0) {\n      const hasValidSpecs = values.specifications.some(\n        (spec) => spec.featureName && spec.featureValue,\n      );\n      if (hasValidSpecs) completed++;\n    }\n\n    // Images tab - only count if images are actually uploaded\n    if (uploadedImages.length > 0 || imageUrls.length > 0) {\n      completed++;\n    }\n\n    // FAQ tab - only count if FAQs have content\n    if (values.faqs && values.faqs.length > 0) {\n      const hasValidFAQs = values.faqs.some(\n        (faq) => faq.question && faq.answer,\n      );\n      if (hasValidFAQs) completed++;\n    }\n\n    return Math.round((completed / total) * 100);\n  };\n\n  // Function to check if a tab has validation errors\n  const getTabValidationStatus = (tabName: string) => {\n    const errors = form.formState.errors;\n    const values = form.getValues();\n\n    switch (tabName) {\n      case \"information\":\n        return !!(\n          errors.translations ||\n          errors.brand ||\n          errors.sku ||\n          errors.categoryId ||\n          errors.price ||\n          !values.translations?.en?.name ||\n          !values.translations?.en?.description\n        );\n      case \"specifications\":\n        return !!errors.specifications;\n      case \"images\":\n        return !!errors.images;\n      case \"faqs\":\n        return !!errors.faqs;\n      default:\n        return false;\n    }\n  };\n\n  const handleImageUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const files = Array.from(event.target.files || []);\n    const totalImages = uploadedImages.length + imageUrls.length;\n\n    if (totalImages + files.length > 8) {\n      alert(\"Maximum 8 images allowed\");\n      return;\n    }\n\n    // Show loading state\n    const loadingToast = toast({\n      title: \"Uploading images...\",\n      description: \"Please wait while we upload your images.\",\n    });\n\n    try {\n      const formData = new FormData();\n      files.forEach((file) => {\n        formData.append(\"images\", file);\n      });\n\n      const response = await fetch(\"/api/upload/images\", {\n        method: \"POST\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to upload images\");\n      }\n\n      const result = await response.json();\n\n      // Update state with uploaded file paths\n      const newImagePaths = result.files.map((file: any) => file.path);\n      setUploadedImages((prev) => [...prev, ...newImagePaths]);\n\n      // Update form with new image structure\n      const currentImages = form.getValues(\"images\") || [];\n      const newImages = [\n        ...currentImages,\n        ...newImagePaths.map((path: string) => ({\n          url: path,\n          uploadMethod: \"upload\" as const,\n        })),\n      ];\n      form.setValue(\"images\", newImages);\n\n      loadingToast.dismiss();\n      toast({\n        title: \"Success\",\n        description: `${files.length} image(s) uploaded successfully.`,\n      });\n    } catch (error) {\n      loadingToast.dismiss();\n      console.error(\"Error uploading images:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload images. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n\n    // Reset file input\n    event.target.value = \"\";\n  };\n\n  const addImageUrl = (url: string) => {\n    const totalImages = uploadedImages.length + imageUrls.length;\n\n    if (totalImages >= 8) {\n      alert(\"Maximum 8 images allowed\");\n      return;\n    }\n\n    if (url && !imageUrls.includes(url)) {\n      const newUrls = [...imageUrls, url];\n      setImageUrls(newUrls);\n\n      // Update form with new image structure\n      const currentImages = form.getValues(\"images\") || [];\n      const newImages = [\n        ...currentImages,\n        { url: url, uploadMethod: \"url\" as const },\n      ];\n      form.setValue(\"images\", newImages);\n    }\n  };\n\n  const removeImage = (index: number, type: \"upload\" | \"url\") => {\n    if (type === \"upload\") {\n      const newUploaded = uploadedImages.filter((_, i) => i !== index);\n      setUploadedImages(newUploaded);\n    } else {\n      const newUrls = imageUrls.filter((_, i) => i !== index);\n      setImageUrls(newUrls);\n    }\n\n    // Update form by removing the image at the correct position\n    const currentImages = form.getValues(\"images\") || [];\n    const updatedImages = currentImages.filter((_, i) => {\n      if (type === \"upload\") {\n        return !(i < uploadedImages.length && i === index);\n      } else {\n        return !(\n          i >= uploadedImages.length && i - uploadedImages.length === index\n        );\n      }\n    });\n    form.setValue(\"images\", updatedImages);\n  };\n\n  const handleSubmit = (data: AddProductFormData, asDraft: boolean = false) => {\n    // Combine all images with their upload methods\n    const allImages = [\n      ...uploadedImages.map((url) => ({\n        url,\n        uploadMethod: \"upload\" as const,\n      })),\n      ...imageUrls.map((url) => ({ url, uploadMethod: \"url\" as const })),\n    ];\n\n    const finalData = {\n      ...data,\n      images: allImages,\n      status: asDraft ? \"inactive\" : data.status || \"active\",\n      // Extract primary language data for backward compatibility with backend\n      name: data.translations.en.name,\n      description: data.translations.en.description,\n      highlights: data.translations.en.highlights,\n    };\n    onSubmit(finalData);\n  };\n\n  const getTabIcon = (\n    tab: string,\n    isCompleted: boolean,\n    hasErrors: boolean,\n  ) => {\n    if (hasErrors) return <AlertTriangle className=\"h-4 w-4 text-red-500\" />;\n    if (isCompleted) return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n    return <Info className=\"h-4 w-4 text-gray-400\" />;\n  };\n\n  const progress = calculateProgress();\n\n  return (\n    <div className=\"max-w-6xl mx-auto p-6\">\n      <Card>\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-2xl font-bold\">\n              {editMode ? t(\"seller.product.edit.title\") : t(\"seller.product.add.title\")}\n            </CardTitle>\n            {/* <CardTitle className=\"text-2xl font-bold\">\n              {editMode ? \"Edit Product\" : \"Add a New Product\"}\n            </CardTitle> */}\n            <div className=\"flex items-center gap-4\">\n              <div className=\"text-sm text-gray-600\">\n                {t(\"seller.product.add.progress\")}: {progress}%\n              </div>\n              <Progress value={progress} className=\"w-32\" />\n            </div>\n          </div>\n\n          {/* Progress indicators */}\n          <div className=\"flex items-center gap-4 mt-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-3 h-3 rounded-full bg-blue-500\"></div>\n              <span>{t(\"seller.product.add.note\")}</span>\n            </div>\n          </div>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mt-4 text-sm\">\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n              <span>{t(\"seller.product.add.error.productName\")}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n              <span>{t(\"seller.product.add.error.description\")}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n              <span>{t(\"seller.product.add.error.price\")}</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <AlertCircle className=\"h-4 w-4 text-orange-500\" />\n              <span>{t(\"seller.product.add.error.brand\")}</span>\n            </div>\n          </div>\n        </CardHeader>\n\n        <CardContent>\n          <Form {...form}>\n            <form\n              onSubmit={form.handleSubmit((data) => handleSubmit(data, false))}\n            >\n              <Tabs\n                value={currentTab}\n                onValueChange={setCurrentTab}\n                className=\"w-full\"\n              >\n                <TabsList className=\"grid w-full grid-cols-3\">\n                  <TabsTrigger\n                    value=\"information\"\n                    className={`flex items-center gap-2 ${getTabValidationStatus(\"information\") ? \"text-red-600 border-red-200\" : \"\"}`}\n                  >\n                    {getTabIcon(\n                      \"information\",\n                      !!(\n                        form.watch(\"translations.en.name\") &&\n                        form.watch(\"translations.fr.name\") &&\n                        form.watch(\"translations.ar.name\")\n                      ),\n                      getTabValidationStatus(\"information\"),\n                    )}\n                    {t(\"seller.product.add.tab.information\")}\n                  </TabsTrigger>\n                  <TabsTrigger\n                    value=\"specifications\"\n                    className={`flex items-center gap-2 ${getTabValidationStatus(\"specifications\") ? \"text-red-600 border-red-200\" : \"\"}`}\n                  >\n                    {getTabIcon(\n                      \"specifications\",\n                      specificationFields.length > 0,\n                      getTabValidationStatus(\"specifications\"),\n                    )}\n                    {t(\"seller.product.add.tab.specifications\")}\n                  </TabsTrigger>\n                  <TabsTrigger\n                    value=\"faq\"\n                    className={`flex items-center gap-2 ${getTabValidationStatus(\"faqs\") ? \"text-red-600 border-red-200\" : \"\"}`}\n                  >\n                    {getTabIcon(\n                      \"faq\",\n                      faqFields.length > 0,\n                      getTabValidationStatus(\"faqs\"),\n                    )}\n                    {t(\"seller.product.add.tab.faq\")}\n                  </TabsTrigger>\n                </TabsList>\n\n                {/* Information Tab */}\n                <TabsContent value=\"information\" className=\"space-y-6 mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>{t(\"seller.product.add.basicInfo\")}</CardTitle>\n                      <p className=\"text-sm text-gray-600\">\n                        {t(\"seller.product.add.basicInfo.desc\")}\n                      </p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {/* Product Names - Three Column Layout */}\n                      <div className=\"space-y-4\">\n                        <div>\n                          <FormLabel className=\"text-base font-semibold mb-4 block\">\n                            {t(\"seller.product.add.productName\")}\n                          </FormLabel>\n                          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-4\">\n                            {/* English Name */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700\">\n                                Name (English) *\n                              </FormLabel>\n                              <Input\n                                placeholder=\"Ex: Samsung Galaxy S24 Ultra Phone - 256 GB - Black\"\n                                value={translations.en?.name || \"\"}\n                                onChange={(e) =>\n                                  handleTranslationChange(\n                                    \"en\",\n                                    \"name\",\n                                    e.target.value,\n                                  )\n                                }\n                                data-testid=\"input-name-en\"\n                                dir=\"ltr\"\n                                className=\"mt-1\"\n                              />\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                A clear and descriptive name improves the\n                                visibility of your product\n                              </p>\n                            </div>\n\n                            {/* French Name */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700\">\n                                Nom (Français)\n                              </FormLabel>\n                              <Input\n                                placeholder=\"Ex: Téléphone Samsung Galaxy S24 Ultra - 256 Go - Noir\"\n                                value={translations.fr?.name || \"\"}\n                                onChange={(e) =>\n                                  handleTranslationChange(\n                                    \"fr\",\n                                    \"name\",\n                                    e.target.value,\n                                  )\n                                }\n                                data-testid=\"input-name-fr\"\n                                dir=\"ltr\"\n                                className=\"mt-1\"\n                              />\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                Un nom clair et descriptif améliore la\n                                visibilité de votre produit\n                              </p>\n                            </div>\n\n                            {/* Arabic Name */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700\">\n                                الاسم (عربي)\n                              </FormLabel>\n                              <Input\n                                placeholder=\"مثال: هاتف سامسونج غالكسي إس 24 ألترا - 256 جيجابايت - أسود\"\n                                value={translations.ar?.name || \"\"}\n                                onChange={(e) =>\n                                  handleTranslationChange(\n                                    \"ar\",\n                                    \"name\",\n                                    e.target.value,\n                                  )\n                                }\n                                data-testid=\"input-name-ar\"\n                                dir=\"rtl\"\n                                className=\"mt-1\"\n                              />\n                              <p\n                                className=\"text-xs text-gray-500 mt-1\"\n                                dir=\"rtl\"\n                              >\n                                يحسن الاسم الواضح والوصفي من ظهور منتجك\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Brand and SKU */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"brand\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>{t(\"seller.product.add.brand\")} *</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Ex: Samsung, Apple, Sony...\"\n                                  {...field}\n                                  data-testid=\"input-brand\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"sku\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>{t(\"seller.product.add.sku\")} *</FormLabel>\n                              <FormControl>\n                                <Input\n                                  placeholder=\"Ex: PROD-12345\"\n                                  {...field}\n                                  data-testid=\"input-sku\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Price and Stock */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"price\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>{t(\"seller.product.add.price\")}</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.01\"\n                                  placeholder=\"Ex: 24999\"\n                                  {...field}\n                                  onChange={(e) => {\n                                    const value = e.target.value;\n                                    field.onChange(\n                                      value === \"\" ? \"\" : parseFloat(value) || 0,\n                                    );\n                                  }}\n                                  data-testid=\"input-price\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"originalPrice\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>{t(\"seller.product.add.originalPrice\")}</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  step=\"0.01\"\n                                  placeholder=\"Ex: 26999\"\n                                  {...field}\n                                  onChange={(e) => {\n                                    const value = e.target.value;\n                                    field.onChange(\n                                      value === \"\" ? \"\" : parseFloat(value) || 0,\n                                    );\n                                  }}\n                                  data-testid=\"input-original-price\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"stock\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>{t(\"seller.product.add.stockQuantity\")}</FormLabel>\n                              <FormControl>\n                                <Input\n                                  type=\"number\"\n                                  placeholder=\"Ex: 100\"\n                                  {...field}\n                                  onChange={(e) => {\n                                    const value = e.target.value;\n                                    field.onChange(\n                                      value === \"\" ? \"\" : parseInt(value) || 0,\n                                    );\n                                  }}\n                                  data-testid=\"input-stock\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Status and Category */}\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                        <FormField\n                          control={form.control}\n                          name=\"status\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>{t(\"seller.product.add.status\")}</FormLabel>\n                              <Select\n                                onValueChange={field.onChange}\n                                defaultValue={field.value}\n                              >\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-status\">\n                                    <SelectValue placeholder=\"Select status\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  <SelectItem value=\"active\">{t(\"seller.product.active\")}</SelectItem>\n                                  <SelectItem value=\"inactive\">\n                                    {t(\"seller.product.inactive\")}\n                                  </SelectItem>\n                                  {/* <SelectItem value=\"draft\">Draft</SelectItem> */}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n\n                        <FormField\n                          control={form.control}\n                          name=\"categoryId\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>Category *</FormLabel>\n                              <Select\n                                onValueChange={(value) => {\n                                  field.onChange(value);\n                                  setSelectedCategory(value);\n                                }}\n                                defaultValue={field.value}\n                              >\n                                <FormControl>\n                                  <SelectTrigger data-testid=\"select-category\">\n                                    <SelectValue placeholder=\"Select a category\" />\n                                  </SelectTrigger>\n                                </FormControl>\n                                <SelectContent>\n                                  {categories.map((category: any) => (\n                                    <SelectItem\n                                      key={category.id}\n                                      value={category.id}\n                                    >\n                                      {category.translations?.[0]?.name ||\n                                        category.name}\n                                    </SelectItem>\n                                  ))}\n                                </SelectContent>\n                              </Select>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                      </div>\n\n                      {/* Description with Rich Text - Three Column Layout */}\n                      <div className=\"space-y-4\">\n                        <div>\n                          <FormLabel className=\"text-base font-semibold mb-4 block\">\n                            {t(\"seller.product.add.description\")}\n                          </FormLabel>\n                          <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-4 [&_.ql-editor]:mb-8\">\n                            {/* English Description */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                                Description (English) *\n                              </FormLabel>\n                              <ReactQuill\n                                theme=\"snow\"\n                                value={translations.en?.description || \"\"}\n                                onChange={(value) =>\n                                  handleTranslationChange(\n                                    \"en\",\n                                    \"description\",\n                                    value,\n                                  )\n                                }\n                                placeholder=\"Detailed product description...\"\n                                modules={{\n                                  toolbar: [\n                                    [\"bold\", \"italic\", \"underline\"],\n                                    [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                    [\"link\"],\n                                    [\"clean\"],\n                                  ],\n                                }}\n                                style={{ direction: \"ltr\", height: \"200px\" }}\n                              />\n                            </div>\n\n                            {/* French Description */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                                Description (Français)\n                              </FormLabel>\n                              <ReactQuill\n                                theme=\"snow\"\n                                value={translations.fr?.description || \"\"}\n                                onChange={(value) =>\n                                  handleTranslationChange(\n                                    \"fr\",\n                                    \"description\",\n                                    value,\n                                  )\n                                }\n                                placeholder=\"Description détaillée du produit...\"\n                                modules={{\n                                  toolbar: [\n                                    [\"bold\", \"italic\", \"underline\"],\n                                    [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                    [\"link\"],\n                                    [\"clean\"],\n                                  ],\n                                }}\n                                style={{ direction: \"ltr\", height: \"200px\" }}\n                              />\n                            </div>\n\n                            {/* Arabic Description */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                                الوصف (عربي)\n                              </FormLabel>\n                              <ReactQuill\n                                theme=\"snow\"\n                                value={translations.ar?.description || \"\"}\n                                onChange={(value) =>\n                                  handleTranslationChange(\n                                    \"ar\",\n                                    \"description\",\n                                    value,\n                                  )\n                                }\n                                placeholder=\"وصف مفصل للمنتج...\"\n                                modules={{\n                                  toolbar: [\n                                    [\"bold\", \"italic\", \"underline\"],\n                                    [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                    [\"link\"],\n                                    [\"clean\"],\n                                  ],\n                                }}\n                                style={{ direction: \"rtl\", height: \"200px\" }}\n                              />\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Product Highlights - Three Column Layout */}\n                      <div className=\"space-y-4 \">\n                        <div>\n                          <FormLabel className=\"text-base font-semibold mb-4  block\">\n                            Product Highlights\n                          </FormLabel>\n                          <div className=\"grid grid-cols-1 xl:grid-cols-3 gap-4 [&_.ql-editor]:mb-8\">\n                            {/* English Highlights */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                                Highlights (English)\n                              </FormLabel>\n                              <ReactQuill\n                                theme=\"snow\"\n                                value={translations.en?.highlights || \"\"}\n                                onChange={(value) =>\n                                  handleTranslationChange(\n                                    \"en\",\n                                    \"highlights\",\n                                    value,\n                                  )\n                                }\n                                placeholder=\"Ex: Premium quality, Elegant design, Ease of use...\"\n                                modules={{\n                                  toolbar: [\n                                    [\"bold\", \"italic\", \"underline\"],\n                                    [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                    [\"link\"],\n                                    [\"clean\"],\n                                  ],\n                                }}\n                                style={{ direction: \"ltr\", height: \"150px\" }}\n                              />\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                List the main features that distinguish this\n                                product\n                              </p>\n                            </div>\n\n                            {/* French Highlights */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                                Points forts (Français)\n                              </FormLabel>\n                              <ReactQuill\n                                theme=\"snow\"\n                                value={translations.fr?.highlights || \"\"}\n                                onChange={(value) =>\n                                  handleTranslationChange(\n                                    \"fr\",\n                                    \"highlights\",\n                                    value,\n                                  )\n                                }\n                                placeholder=\"Ex: Qualité premium, Design élégant, Facilité d'utilisation...\"\n                                modules={{\n                                  toolbar: [\n                                    [\"bold\", \"italic\", \"underline\"],\n                                    [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                    [\"link\"],\n                                    [\"clean\"],\n                                  ],\n                                }}\n                                style={{ direction: \"ltr\", height: \"150px\" }}\n                              />\n                              <p className=\"text-xs text-gray-500 mt-1\">\n                                Listez les principales fonctionnalités qui\n                                distinguent ce produit\n                              </p>\n                            </div>\n\n                            {/* Arabic Highlights */}\n                            <div>\n                              <FormLabel className=\"text-sm font-medium text-gray-700 mb-2 block\">\n                                المميزات (عربي)\n                              </FormLabel>\n                              <ReactQuill\n                                theme=\"snow\"\n                                value={translations.ar?.highlights || \"\"}\n                                onChange={(value) =>\n                                  handleTranslationChange(\n                                    \"ar\",\n                                    \"highlights\",\n                                    value,\n                                  )\n                                }\n                                placeholder=\"مثال: جودة عالية، تصميم أنيق، سهولة الاستخدام...\"\n                                modules={{\n                                  toolbar: [\n                                    [\"bold\", \"italic\", \"underline\"],\n                                    [{ list: \"ordered\" }, { list: \"bullet\" }],\n                                    [\"link\"],\n                                    [\"clean\"],\n                                  ],\n                                }}\n                                style={{ direction: \"rtl\", height: \"150px\" }}\n                              />\n                              <p\n                                className=\"text-xs text-gray-500 mt-1\"\n                                dir=\"rtl\"\n                              >\n                                اذكر الميزات الرئيسية التي تميز هذا المنتج\n                              </p>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n\n                      {/* Images Section moved to Information tab */}\n                      <Card>\n                        <CardHeader>\n                          <CardTitle>{t(\"seller.product.images.title\")}</CardTitle>\n                          <p className=\"text-sm text-gray-600\">\n                            {t(\"seller.product.images.note\")}\n                          </p>\n                        </CardHeader>\n                        <CardContent className=\"space-y-6\">\n                          {/* Upload Images */}\n                          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n                            {/* Existing uploaded images */}\n                            {uploadedImages.map((image, index) => (\n                              <div\n                                key={index}\n                                className=\"relative aspect-square border-2 border-dashed border-gray-300 rounded-lg overflow-hidden\"\n                              >\n                                <img\n                                  src={image}\n                                  alt={`Upload ${index + 1}`}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  className=\"absolute top-2 right-2\"\n                                  onClick={() => removeImage(index, \"upload\")}\n                                  data-testid={`button-remove-upload-${index}`}\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </Button>\n                                {index === 0 && (\n                                  <Badge className=\"absolute bottom-2 left-2 bg-blue-600\">\n                                    Main Image\n                                  </Badge>\n                                )}\n                              </div>\n                            ))}\n\n                            {/* Existing URL images */}\n                            {imageUrls.map((url, index) => (\n                              <div\n                                key={index}\n                                className=\"relative aspect-square border-2 border-dashed border-gray-300 rounded-lg overflow-hidden\"\n                              >\n                                <img\n                                  src={url}\n                                  alt={`URL ${index + 1}`}\n                                  className=\"w-full h-full object-cover\"\n                                />\n                                <Button\n                                  type=\"button\"\n                                  variant=\"destructive\"\n                                  size=\"sm\"\n                                  className=\"absolute top-2 right-2\"\n                                  onClick={() => removeImage(index, \"url\")}\n                                  data-testid={`button-remove-url-${index}`}\n                                >\n                                  <X className=\"h-3 w-3\" />\n                                </Button>\n                                <Badge className=\"absolute bottom-2 left-2 bg-green-600\">\n                                  <Link2 className=\"h-3 w-3 mr-1\" />\n                                  {editMode ? \"Existing\" : \"URL\"}\n                                </Badge>\n                              </div>\n                            ))}\n\n                            {/* Upload button */}\n                            {uploadedImages.length + imageUrls.length < 8 && (\n                              <label className=\"aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-gray-400 transition-colors\">\n                                <Upload className=\"h-8 w-8 text-gray-400 mb-2\" />\n                                <span className=\"text-sm text-gray-600\">\n                                  {t(\"seller.product.images.upload\")}\n                                </span>\n                                <input\n                                  type=\"file\"\n                                  multiple\n                                  accept=\"image/*\"\n                                  onChange={handleImageUpload}\n                                  className=\"hidden\"\n                                  data-testid=\"input-image-upload\"\n                                />\n                              </label>\n                            )}\n                          </div>\n\n                          {/* Add by URL */}\n                          <div className=\"space-y-2\">\n                            <h4 className=\"font-medium\">{t(\"seller.product.images.addUrl\")}</h4>\n                            <div className=\"flex gap-2\">\n                              <Input\n                                placeholder={t(\"seller.product.images.urlPlaceholder\")}\n                                onKeyPress={(e) => {\n                                  if (e.key === \"Enter\") {\n                                    e.preventDefault();\n                                    const input = e.target as HTMLInputElement;\n                                    addImageUrl(input.value);\n                                    input.value = \"\";\n                                  }\n                                }}\n                                data-testid=\"input-image-url\"\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"outline\"\n                                onClick={(e) => {\n                                  const input = (e.target as HTMLElement)\n                                    .previousElementSibling as HTMLInputElement;\n                                  addImageUrl(input.value);\n                                  input.value = \"\";\n                                }}\n                                data-testid=\"button-add-image-url\"\n                              >\n                                <Plus className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n\n                          <div className=\"p-4 bg-gray-50 rounded-lg\">\n                            <h4 className=\"font-medium mb-2\">\n                              {t(\"seller.product.images.recommendations.title\")}\n                            </h4>\n                            <ul className=\"text-sm text-gray-600 space-y-1\">\n                              <li>{t(\"seller.product.images.recommendations.format\")}</li>\n                              <li>\n                                {t(\"seller.product.images.recommendations.size\")}\n                              </li>\n                              <li>{t(\"seller.product.images.recommendations.background\")}</li>\n                              <li>{t(\"seller.product.images.recommendations.watermark\")}</li>\n                              <li>{t(\"seller.product.images.recommendations.maxSize\")}</li>\n                            </ul>\n                          </div>\n                        </CardContent>\n                      </Card>\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* Specifications Tab - Category defined fields only */}\n                <TabsContent value=\"specifications\" className=\"space-y-6 mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <CardTitle>Technical specifications</CardTitle>\n                      <p className=\"text-sm text-gray-600\">\n                        Add technical details of your product to help customers\n                        make their choice.\n                      </p>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {!selectedCategory && (\n                        <div className=\"text-center py-8 border-2 border-dashed border-gray-300 rounded-lg\">\n                          <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-600 mb-4\">\n                            Please select a category first to see available\n                            specifications\n                          </p>\n                        </div>\n                      )}\n\n                      {selectedCategory && categoryFeatures.length === 0 && (\n                        <div className=\"text-center py-8 border-2 border-dashed border-gray-300 rounded-lg\">\n                          <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-600 mb-4\">\n                            No specifications defined for this category\n                          </p>\n                        </div>\n                      )}\n\n                      {selectedCategory && categoryFeatures.length > 0 && (\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          {categoryFeatures.map(\n                            (feature: any, index: number) => (\n                              <FormField\n                                key={feature.id}\n                                control={form.control}\n                                name={`specifications.${index}.featureValue`}\n                                render={({ field }) => (\n                                  <FormItem>\n                                    <FormLabel className=\"flex items-center gap-2\">\n                                      {feature.name}\n                                      {feature.isRequired && (\n                                        <span className=\"text-red-500 text-sm\">\n                                          *\n                                        </span>\n                                      )}\n                                    </FormLabel>\n                                    <FormControl>\n                                      {feature.type === \"select\" ? (\n                                        <Select\n                                          onValueChange={field.onChange}\n                                          defaultValue={field.value}\n                                        >\n                                          <SelectTrigger\n                                            data-testid={`select-spec-${index}`}\n                                          >\n                                            <SelectValue\n                                              placeholder={`Select ${feature.name.toLowerCase()}`}\n                                            />\n                                          </SelectTrigger>\n                                          <SelectContent>\n                                            {(feature.options || []).map(\n                                              (option: string) => (\n                                                <SelectItem\n                                                  key={option}\n                                                  value={option}\n                                                >\n                                                  {option}\n                                                </SelectItem>\n                                              ),\n                                            )}\n                                          </SelectContent>\n                                        </Select>\n                                      ) : feature.type === \"color\" ? (\n                                        <div className=\"flex gap-2\">\n                                          <Input\n                                            {...field}\n                                            placeholder={\n                                              feature.value ||\n                                              `Ex: Red, Blue, Green`\n                                            }\n                                            data-testid={`input-spec-${index}`}\n                                            className=\"flex-1\"\n                                          />\n                                          <input\n                                            type=\"color\"\n                                            onChange={(e) =>\n                                              field.onChange(e.target.value)\n                                            }\n                                            value={field.value || \"#000000\"}\n                                            className=\"w-12 h-10 rounded border border-gray-300\"\n                                          />\n                                        </div>\n                                      ) : feature.type === \"number\" ? (\n                                        <Input\n                                          {...field}\n                                          type=\"number\"\n                                          placeholder={\n                                            feature.value ||\n                                            `Enter ${feature.name.toLowerCase()}`\n                                          }\n                                          data-testid={`input-spec-${index}`}\n                                        />\n                                      ) : feature.type === \"url\" ? (\n                                        <Input\n                                          {...field}\n                                          type=\"url\"\n                                          placeholder={\n                                            feature.value ||\n                                            `https://example.com`\n                                          }\n                                          data-testid={`input-spec-${index}`}\n                                        />\n                                      ) : (\n                                        <Input\n                                          {...field}\n                                          placeholder={\n                                            feature.value ||\n                                            `Enter ${feature.name.toLowerCase()}`\n                                          }\n                                          data-testid={`input-spec-${index}`}\n                                        />\n                                      )}\n                                    </FormControl>\n                                    {feature.value && (\n                                      <p className=\"text-sm text-gray-500\">\n                                        Example: {feature.value}\n                                      </p>\n                                    )}\n                                    <FormMessage />\n                                  </FormItem>\n                                )}\n                              />\n                            ),\n                          )}\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n\n                {/* FAQ Tab */}\n                <TabsContent value=\"faq\" className=\"space-y-6 mt-6\">\n                  <Card>\n                    <CardHeader>\n                      <div className=\"flex items-center justify-between\">\n                        <div>\n                          <CardTitle className=\"flex items-center gap-2\">\n                            <Package className=\"h-5 w-5\" />\n                            Frequently Asked Questions\n                          </CardTitle>\n                          <p className=\"text-sm text-gray-600 mt-1\">\n                            Add frequently asked questions about your product to\n                            help your customers.\n                          </p>\n                        </div>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() =>\n                            appendFaq({ question: \"\", answer: \"\" })\n                          }\n                          data-testid=\"button-add-faq\"\n                        >\n                          <Plus className=\"h-4 w-4 mr-2\" />\n                          Add\n                        </Button>\n                      </div>\n                    </CardHeader>\n                    <CardContent className=\"space-y-6\">\n                      {faqFields.map((field, index) => (\n                        <div\n                          key={field.id}\n                          className=\"p-4 border rounded-lg space-y-4\"\n                        >\n                          <div className=\"flex items-center justify-between\">\n                            <h4 className=\"font-medium\">FAQ #{index + 1}</h4>\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => removeFaq(index)}\n                              className=\"text-red-600 hover:text-red-700\"\n                              data-testid={`button-remove-faq-${index}`}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n\n                          <FormField\n                            control={form.control}\n                            name={`faqs.${index}.question`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Question:</FormLabel>\n                                <FormControl>\n                                  <Input\n                                    {...field}\n                                    placeholder=\"Ex: What are the exact dimensions of the product?\"\n                                    data-testid={`input-faq-question-${index}`}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n\n                          <FormField\n                            control={form.control}\n                            name={`faqs.${index}.answer`}\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>Answer:</FormLabel>\n                                <FormControl>\n                                  <Textarea\n                                    {...field}\n                                    placeholder=\"Ex: The exact dimensions are 10 cm x 15 cm x 5 cm.\"\n                                    rows={3}\n                                    data-testid={`textarea-faq-answer-${index}`}\n                                  />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                      ))}\n\n                      {faqFields.length === 0 && (\n                        <div className=\"text-center py-8 border-2 border-dashed border-gray-300 rounded-lg\">\n                          <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                          <p className=\"text-gray-600 mb-4\">\n                            No FAQs added yet\n                          </p>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() =>\n                              appendFaq({ question: \"\", answer: \"\" })\n                            }\n                            data-testid=\"button-add-first-faq\"\n                          >\n                            <Plus className=\"h-4 w-4 mr-2\" />\n                            Add another question\n                          </Button>\n                        </div>\n                      )}\n                    </CardContent>\n                  </Card>\n                </TabsContent>\n              </Tabs>\n\n              {/* Action Buttons */}\n              <div className=\"flex items-center justify-between mt-8 pt-6 border-t\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={onCancel}\n                  data-testid=\"button-cancel\"\n                >\n                   {t(\"seller.product.images.cancel\")}\n                </Button>\n\n                <div className=\"flex items-center gap-4\">\n                  {/* <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => handleSubmit(form.getValues(), true)}\n                    disabled={isLoading}\n                    data-testid=\"button-save-draft\"\n                  >\n                    <Save className=\"h-4 w-4 mr-2\" />\n                    Save as draft\n                  </Button> */}\n\n                  <Button\n                    type=\"submit\"\n                    disabled={isLoading}\n                    data-testid=\"button-publish\"\n                  >\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    {isLoading ? t(\"seller.product.images.publishing\") : t(\"seller.product.images.publish\")}\n                  </Button>\n                </div>\n              </div>\n            </form>\n          </Form>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":68713},"server/migrations/0002_add_highlights.ts":{"content":"import { pgTable, varchar, text, sql } from \"drizzle-orm/pg-core\";\n\nexport const productTranslations = pgTable(\"product_translations\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  productId: varchar(\"product_id\"),\n  language: text(\"language\"),\n  name: text(\"name\"),\n  description: text(\"description\"),\n  shortDescription: text(\"short_description\"),\n  highlights: text(\"highlights\"),\n});\n\nexport async function up(db: any) {\n  await db.execute(sql`ALTER TABLE product_translations ADD COLUMN IF NOT EXISTS highlights TEXT`);\n}\n\nexport async function down(db: any) {\n  await db.execute(sql`ALTER TABLE product_translations DROP COLUMN IF EXISTS highlights`);\n}\n","size_bytes":684},"client/src/pages/admin/dashboard/index.tsx":{"content":"// import { useState } from \"react\";\n// import { useTranslation } from \"react-i18next\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { useAuth } from \"@/hooks/use-auth\";\n// import { DashboardLayout } from \"@/components/layout/dashboard-layout\";\n// import { OrderDetailsModal } from \"@/components/ui/order-details-modal\";\n// import { Button } from \"@/components/ui/button\";\n// import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n// import { Badge } from \"@/components/ui/badge\";\n// import { Progress } from \"@/components/ui/progress\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"@/components/ui/table\";\n// import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n// import {\n//   Dialog,\n//   DialogContent,\n//   DialogDescription,\n//   DialogFooter,\n//   DialogHeader,\n//   DialogTitle,\n// } from \"@/components/ui/dialog\";\n// import { Label } from \"@/components/ui/label\";\n// import { Textarea } from \"@/components/ui/textarea\";\n// import {\n//   Users,\n//   Store,\n//   DollarSign,\n//   TrendingUp,\n//   Settings,\n//   Shield,\n//   AlertTriangle,\n//   CheckCircle,\n//   XCircle,\n//   Edit,\n//   Eye,\n//   Plus,\n//   Package,\n//   ShoppingCart,\n//   Activity,\n//   BarChart3,\n//   ArrowUpRight,\n//   ArrowDownRight,\n//   Clock,\n//   Star,\n//   MoreHorizontal,\n//   Filter,\n//   ChevronDown,\n//   Truck,\n//   CreditCard,\n//   Check,\n//   X,\n//   ArrowUp,\n//   ArrowDown,\n//   Trash,\n// } from \"lucide-react\";\n// import {\n//   DropdownMenu,\n//   DropdownMenuContent,\n//   DropdownMenuItem,\n//   DropdownMenuTrigger,\n// } from \"@/components/ui/dropdown-menu\";\n// import { PendingSellers } from \"@/components/admin/pending-sellers\";\n// import {\n//   LineChart,\n//   Line,\n//   XAxis,\n//   YAxis,\n//   CartesianGrid,\n//   Tooltip,\n//   ResponsiveContainer,\n//   BarChart,\n//   Bar,\n//   PieChart,\n//   Pie,\n//   Cell,\n// } from \"recharts\";\n\n// export default function AdminDashboard() {\n//   const { t } = useTranslation();\n//   const { user } = useAuth();\n//   const [selectedOrder, setSelectedOrder] = useState<any>(null);\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isDismissModalOpen, setIsDismissModalOpen] = useState(false);\n//   const [dismissReason, setDismissReason] = useState(\"\");\n//   const [orderToDismiss, setOrderToDismiss] = useState<any>(null);\n//   const [expandedOrders, setExpandedOrders] = useState<Set<string>>(new Set());\n\n//   const { data: dashboardStats, isLoading } = useQuery({\n//     queryKey: [\"/api/dashboard/admin\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/dashboard/admin\", {\n//         credentials: \"include\",\n//       });\n//       if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n//       return response.json();\n//     },\n//   });\n\n//   // Mock data for charts and tables\n//   const salesTrendData = [\n//     { month: \"Jan\", sales: 12000, orders: 145 },\n//     { month: \"Feb\", sales: 19000, orders: 223 },\n//     { month: \"Mar\", sales: 15000, orders: 176 },\n//     { month: \"Apr\", sales: 22000, orders: 267 },\n//     { month: \"May\", sales: 28000, orders: 334 },\n//     { month: \"Jun\", sales: 35000, orders: 412 },\n//   ];\n\n//   const popularProducts = [\n//     {\n//       id: 1,\n//       name: \"Premium Headphones\",\n//       category: \"Electronics\",\n//       sales: 1247,\n//       revenue: 249400,\n//       rating: 4.8,\n//       image: \"https://ui-avatars.com/api/?name=PH&background=6366f1&color=fff\",\n//     },\n//     {\n//       id: 2,\n//       name: \"Smart Smartphone\",\n//       category: \"Electronics\",\n//       sales: 943,\n//       revenue: 1226590,\n//       rating: 4.6,\n//       image: \"https://ui-avatars.com/api/?name=SS&background=10b981&color=fff\",\n//     },\n//     {\n//       id: 3,\n//       name: \"Wireless Headphones\",\n//       category: \"Electronics\",\n//       sales: 567,\n//       revenue: 113400,\n//       rating: 4.5,\n//       image: \"https://ui-avatars.com/api/?name=WH&background=f59e0b&color=fff\",\n//     },\n//     {\n//       id: 4,\n//       name: \"Computer Tool\",\n//       category: \"Electronics\",\n//       sales: 445,\n//       revenue: 133500,\n//       rating: 4.3,\n//       image: \"https://ui-avatars.com/api/?name=CT&background=ef4444&color=fff\",\n//     },\n//     {\n//       id: 5,\n//       name: \"Sports Shoes\",\n//       category: \"Fashion\",\n//       sales: 389,\n//       revenue: 77800,\n//       rating: 4.7,\n//       image: \"https://ui-avatars.com/api/?name=SS&background=8b5cf6&color=fff\",\n//     },\n//   ];\n\n//   const recentOrders = [\n//     {\n//       id: \"ORD-001\",\n//       customer: \"Ahmed Benali\",\n//       email: \"ahmed@example.com\",\n//       product: \"Premium Headphones\",\n//       amount: 199.99,\n//       status: \"Processing\",\n//       date: \"2024-01-20\",\n//       avatar:\n//         \"https://ui-avatars.com/api/?name=Ahmed+Benali&background=6366f1&color=fff\",\n//     },\n//     {\n//       id: \"ORD-002\",\n//       customer: \"Sara Djouad\",\n//       email: \"sara@example.com\",\n//       product: \"Smart Smartphone\",\n//       amount: 1299.99,\n//       status: \"Shipped\",\n//       date: \"2024-01-19\",\n//       avatar:\n//         \"https://ui-avatars.com/api/?name=Sara+Djouad&background=10b981&color=fff\",\n//     },\n//     {\n//       id: \"ORD-003\",\n//       customer: \"Mohamed Kaddour\",\n//       email: \"mohamed@example.com\",\n//       product: \"Wireless Headphones\",\n//       amount: 149.99,\n//       status: \"Delivered\",\n//       date: \"2024-01-18\",\n//       avatar:\n//         \"https://ui-avatars.com/api/?name=Mohamed+Kaddour&background=f59e0b&color=fff\",\n//     },\n//     {\n//       id: \"ORD-004\",\n//       customer: \"Fatima Boutaiba\",\n//       email: \"fatima@example.com\",\n//       product: \"Computer Tool\",\n//       amount: 299.99,\n//       status: \"Processing\",\n//       date: \"2024-01-17\",\n//       avatar:\n//         \"https://ui-avatars.com/api/?name=Fatima+Boutaiba&background=ef4444&color=fff\",\n//     },\n//     {\n//       id: \"ORD-005\",\n//       customer: \"Yacine Mesbah\",\n//       email: \"yacine@example.com\",\n//       product: \"Sports Shoes\",\n//       amount: 89.99,\n//       status: \"Cancelled\",\n//       date: \"2024-01-16\",\n//       avatar:\n//         \"https://ui-avatars.com/api/?name=Yacine+Mesbah&background=8b5cf6&color=fff\",\n//     },\n//   ];\n\n//   const { data: ordersData = [], isLoading: ordersLoading } = useQuery({\n//     queryKey: [\"/api/orders\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/orders\", {\n//         credentials: \"include\",\n//       });\n//       if (!response.ok) throw new Error(\"Failed to fetch orders\");\n//       return response.json();\n//     },\n//   });\n\n//   const getStatusColor = (status: string) => {\n//     switch (status.toLowerCase()) {\n//       case \"packed\":\n//         return \"bg-blue-100 text-blue-700\";\n//       case \"on-way\":\n//         return \"bg-orange-100 text-orange-700\";\n//       case \"delivered\":\n//         return \"bg-green-100 text-green-700\";\n//       case \"cancelled\":\n//         return \"bg-red-100 text-red-700\";\n//       default:\n//         return \"bg-gray-100 text-gray-700\";\n//     }\n//   };\n\n//   const formatDate = (dateString: string) => {\n//     const date = new Date(dateString);\n//     return date.toLocaleDateString(\"en-US\", {\n//       year: \"numeric\",\n//       month: \"long\",\n//       day: \"numeric\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     });\n//   };\n\n//   const toggleExpandOrder = (orderId: string) => {\n//     const newExpandedOrders = new Set(expandedOrders);\n//     if (expandedOrders.has(orderId)) {\n//       newExpandedOrders.delete(orderId);\n//     } else {\n//       newExpandedOrders.add(orderId);\n//     }\n//     setExpandedOrders(newExpandedOrders);\n//   };\n\n//   if (!user || user.role !== \"admin\") {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n//         <p className=\"text-red-600\">Access denied. Admin role required.</p>\n//       </div>\n//     );\n//   }\n//   let value = 0;\n//   const isPositive = value >= 0;\n\n//   const handleDismissOrder = (order: any) => {\n//     setOrderToDismiss(order);\n//     setIsDismissModalOpen(true);\n//   };\n\n//   const confirmDismissOrder = () => {\n//     if (orderToDismiss && dismissReason.trim()) {\n//       console.log(\n//         `Dismissing order ${orderToDismiss.id} with reason: ${dismissReason}`,\n//       );\n//       // Here you would typically make an API call to dismiss the order\n//       setIsDismissModalOpen(false);\n//       setDismissReason(\"\");\n//       setOrderToDismiss(null);\n//     }\n//   };\n\n//   const handleApproveOrder = (order: any) => {\n//     console.log(`Approving order ${order.id}`);\n//     // Here you would typically make an API call to approve the order\n//   };\n\n//   if (!user) {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n//         <p className=\"text-red-600\">Access denied. Seller role required.</p>\n//       </div>\n//     );\n//   }\n\n//   const handleViewOrder = async (order: any) => {\n//     try {\n//       let orderDetails;\n\n//       // Check if this is a dummy order (has items already) or database order\n//       if (order.items) {\n//         // It's a dummy order with items already included\n//         orderDetails = order;\n//       } else {\n//         // It's a database order, fetch details from API\n//         const response = await fetch(`/api/orders/${order.id}`, {\n//           credentials: \"include\",\n//         });\n//         if (!response.ok) throw new Error(\"Failed to fetch order details\");\n//         orderDetails = await response.json();\n//       }\n\n//       setSelectedOrder({\n//         id: orderDetails.id,\n//         date: formatDate(orderDetails.createdAt),\n//         customer: {\n//           name: orderDetails.customerName,\n//           avatar:\n//             orderDetails.customerAvatar ||\n//             \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\",\n//         },\n//         orderItems:\n//           orderDetails.items?.map((item: any) => ({\n//             id: item.id,\n//             name: item.productName || \"Product\",\n//             description: item.productDescription || \"\",\n//             quantity: item.quantity,\n//             price: `$${item.unitPrice}`,\n//           })) || [],\n//         totalAmount: `$${orderDetails.totalAmount}`,\n//         status: orderDetails.status,\n//         paymentStatus: \"Paid\",\n//       });\n//       setIsModalOpen(true);\n//     } catch (error) {\n//       console.error(\"Error fetching order details:\", error);\n//     }\n//   };\n\n//   return (\n//     <DashboardLayout title=\"Administrator Dashboard\">\n//       <div>\n//         <div className=\"flex\">\n//           <Shield className=\"text-primary w-8 h-8 mr-2\" />\n//           <h1 className=\"text-3xl font-bold mb-3\">Administrator Dashboard</h1>\n//         </div>\n//         <p className=\"text-lg mb-6\">\n//           Monitor and manage your marketplace platform\n//         </p>\n//       </div>\n//       <div className=\"space-y-6\">\n//         {/* Stats Cards */}\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n//           {isLoading ? (\n//             Array.from({ length: 4 }).map((_, i) => (\n//               <Card key={i}>\n//                 <CardContent className=\"p-6\">\n//                   <Skeleton className=\"h-6 w-full mb-2\" />\n//                   <Skeleton className=\"h-8 w-16\" />\n//                 </CardContent>\n//               </Card>\n//             ))\n//           ) : (\n//             <>\n//               <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center space-x-20\">\n//                     <div className=\"bg-white/20 p-3 rounded-lg\">\n//                       <DollarSign className=\"h-8 w-8 text-blue-600\" />\n//                     </div>\n\n//                     <div\n//                       className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n//                         isPositive\n//                           ? \"bg-green-50 text-green-700\"\n//                           : \"bg-red-50 text-red-700\"\n//                       }`}\n//                     >\n//                       {isPositive ? (\n//                         <ArrowUp className=\"h-4 w-4 mr-1\" />\n//                       ) : (\n//                         <ArrowDown className=\"h-4 w-4 mr-1\" />\n//                       )}\n//                       {value}%\n//                     </div>\n//                   </div>\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <p\n//                         className=\"text-sm font-medium text-black-100\"\n//                         data-testid=\"text-revenue-label\"\n//                       >\n//                         Turnover\n//                       </p>\n//                       <p\n//                         className=\"text-2xl font-bold\"\n//                         data-testid=\"text-revenue\"\n//                       >\n//                         2,340,000.00 DA\n//                       </p>\n//                       <p className=\"text-xs text-black-100 mt-1\">\n//                         +8.2% from last month\n//                       </p>\n//                     </div>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n\n//               <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center space-x-20\">\n//                     <div className=\"bg-white/20 p-3 rounded-lg\">\n//                       <ShoppingCart className=\"h-8 w-8 text-orange-600\" />\n//                     </div>\n//                     <div\n//                       className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n//                         isPositive\n//                           ? \"bg-green-50 text-green-700\"\n//                           : \"bg-red-50 text-red-700\"\n//                       }`}\n//                     >\n//                       {isPositive ? (\n//                         <ArrowUp className=\"h-4 w-4 mr-1\" />\n//                       ) : (\n//                         <ArrowDown className=\"h-4 w-4 mr-1\" />\n//                       )}\n//                       {value}%\n//                     </div>\n//                   </div>\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <p\n//                         className=\"text-sm font-medium text-black-100\"\n//                         data-testid=\"text-orders-label\"\n//                       >\n//                         Orders\n//                       </p>\n//                       <p\n//                         className=\"text-3xl font-bold\"\n//                         data-testid=\"text-orders\"\n//                       >\n//                         1,247\n//                       </p>\n//                       <p className=\"text-xs text-black-100 mt-1\">\n//                         +5.4% from last month\n//                       </p>\n//                     </div>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n\n//               <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center space-x-20\">\n//                     <div className=\"bg-white/20 p-3 rounded-lg\">\n//                       <Users className=\"h-8 w-8 text-blue-600\" />\n//                     </div>\n\n//                     <div\n//                       className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n//                         isPositive\n//                           ? \"bg-green-50 text-green-700\"\n//                           : \"bg-red-50 text-red-700\"\n//                       }`}\n//                     >\n//                       {isPositive ? (\n//                         <ArrowUp className=\"h-4 w-4 mr-1\" />\n//                       ) : (\n//                         <ArrowDown className=\"h-4 w-4 mr-1\" />\n//                       )}\n//                       {value}%\n//                     </div>\n//                   </div>\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <p\n//                         className=\"text-sm font-medium text-black-100\"\n//                         data-testid=\"text-products-label\"\n//                       >\n//                         Boutiques\n//                       </p>\n//                       <p\n//                         className=\"text-3xl font-bold\"\n//                         data-testid=\"text-products\"\n//                       >\n//                         89\n//                       </p>\n//                       <p className=\"text-xs text-black-100 mt-1\">\n//                         +2.1% from last month\n//                       </p>\n//                     </div>\n//                     {/* <div className=\"bg-white/20 p-3 rounded-lg\">\n//                       <Package className=\"h-8 w-8\" />\n//                     </div> */}\n//                   </div>\n//                 </CardContent>\n//               </Card>\n\n//               <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center space-x-20\">\n//                     <div className=\"bg-white/20 p-3 rounded-lg\">\n//                       <Eye className=\"h-8 w-8 text-green-600\" />\n//                     </div>\n\n//                     <div\n//                       className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n//                         isPositive\n//                           ? \"bg-green-50 text-green-700\"\n//                           : \"bg-red-50 text-red-700\"\n//                       }`}\n//                     >\n//                       {isPositive ? (\n//                         <ArrowUp className=\"h-4 w-4 mr-1\" />\n//                       ) : (\n//                         <ArrowDown className=\"h-4 w-4 mr-1\" />\n//                       )}\n//                       {value}%\n//                     </div>\n//                   </div>\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <p\n//                         className=\"text-sm font-medium text-black-100\"\n//                         data-testid=\"text-customers-label\"\n//                       >\n//                         Customers\n//                       </p>\n//                       <p\n//                         className=\"text-3xl font-bold\"\n//                         data-testid=\"text-customers\"\n//                       >\n//                         5,432\n//                       </p>\n//                       <p className=\"text-xs text-black-100 mt-1\">\n//                         +12.3% from last month\n//                       </p>\n//                     </div>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n//             </>\n//           )}\n//         </div>\n\n//         {/* Quick Actions */}\n//         {/* <div className=\"mb-8\">\n//           <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n//             Quick Actions\n//           </h2>\n//           <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n//             <Button\n//               className=\"h-20 flex-col space-y-2 bg-primary-600 hover:bg-primary-700\"\n//               data-testid=\"button-add-category\"\n//             >\n//               <Plus className=\"h-6 w-6\" />\n//               <span>Add Category</span>\n//             </Button>\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-20 flex-col space-y-2\"\n//               data-testid=\"button-manage-users\"\n//             >\n//               <Users className=\"h-6 w-6\" />\n//               <span>Manage Users</span>\n//             </Button>\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-20 flex-col space-y-2\"\n//               data-testid=\"button-vendor-approval\"\n//             >\n//               <Shield className=\"h-6 w-6\" />\n//               <span>Vendor Approval</span>\n//             </Button>\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-20 flex-col space-y-2\"\n//               data-testid=\"button-platform-settings\"\n//             >\n//               <Settings className=\"h-6 w-6\" />\n//               <span>Platform Settings</span>\n//             </Button>\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-20 flex-col space-y-2\"\n//               data-testid=\"button-content-moderation\"\n//             >\n//               <AlertTriangle className=\"h-6 w-6\" />\n//               <span>Content Moderation</span>\n//             </Button>\n//           </div>\n//         </div>\n//  */}\n\n//         {/* Pending Sellers Management */}\n//         {/* <div className=\"mb-8\">\n//           <PendingSellers />\n//         </div> */}\n\n//         {/* Main Dashboard Grid */}\n//         <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n//           {/* Left Column - Charts and Main Content */}\n//           <div className=\"lg:col-span-2 space-y-6\">\n//             {/* Sales Trend Chart */}\n//             <Card>\n//               <CardHeader>\n//                 <CardTitle className=\"text-lg font-semibold\">\n//                   Platform Overview\n//                 </CardTitle>\n//               </CardHeader>\n//               <Card className=\"m-4\">\n//                 <CardHeader className=\"flex flex-row items-center justify-between\">\n//                   <CardTitle className=\"text-lg font-semibold\">\n//                     Sales Trend\n//                   </CardTitle>\n//                   {/* <Button variant=\"outline\" size=\"sm\">\n//                     <Filter className=\"h-4 w-4 mr-2\" />\n//                     Filter\n//                   </Button> */}\n//                 </CardHeader>\n//                 <CardContent>\n//                   <div className=\"h-80\">\n//                     <ResponsiveContainer width=\"100%\" height=\"100%\">\n//                       <LineChart data={salesTrendData}>\n//                         <CartesianGrid strokeDasharray=\"3 3\" />\n//                         <XAxis dataKey=\"month\" />\n//                         <YAxis />\n//                         <Tooltip />\n//                         <Line\n//                           type=\"monotone\"\n//                           dataKey=\"sales\"\n//                           stroke=\"#8b5cf6\"\n//                           strokeWidth={3}\n//                           dot={{ fill: \"#8b5cf6\", strokeWidth: 2, r: 4 }}\n//                         />\n//                       </LineChart>\n//                     </ResponsiveContainer>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n//             </Card>\n\n//             {/* Popular Products */}\n//             <Card>\n//               <CardHeader>\n//                 <CardTitle className=\"text-lg font-semibold\">\n//                   Popular Products\n//                 </CardTitle>\n//               </CardHeader>\n//               <CardContent>\n//                 <div className=\"space-y-4\">\n//                   {popularProducts.map((product) => (\n//                     <div\n//                       key={product.id}\n//                       className=\"flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50\"\n//                     >\n//                       <div className=\"flex items-center space-x-3\">\n//                         <Avatar className=\"h-10 w-10\">\n//                           <AvatarImage src={product.image} />\n//                           <AvatarFallback>\n//                             {product.name.slice(0, 2)}\n//                           </AvatarFallback>\n//                         </Avatar>\n//                         <div>\n//                           <p className=\"font-medium text-gray-900\">\n//                             {product.name}\n//                           </p>\n//                           <p className=\"text-sm text-gray-500\">\n//                             {product.category}\n//                           </p>\n//                         </div>\n//                       </div>\n//                       <div className=\"text-right\">\n//                         <p className=\"font-semibold\">{product.sales} sales</p>\n//                         <div className=\"flex items-center space-x-1\">\n//                           <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n//                           <span className=\"text-xs text-gray-500\">\n//                             {product.rating}\n//                           </span>\n//                         </div>\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               </CardContent>\n//             </Card>\n//           </div>\n\n//           {/* Right Column - Active Stores and Recent Users */}\n//           <div className=\"space-y-6\">\n//             {/* Active Stores */}\n//             <Card>\n//               <CardHeader className=\"flex flex-row items-center justify-between\">\n//                 <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center\">\n//                   <Store className=\"h-4 w-4 mr-2\" />\n//                   Active Stores\n//                 </CardTitle>\n//                 <span className=\"text-xs text-gray-500\">50</span>\n//               </CardHeader>\n//               <CardContent className=\"space-y-3\">\n//                 <div className=\"flex items-center justify-between\">\n//                   <div>\n//                     <p className=\"font-medium text-sm\">TechStore DZ</p>\n//                     <p className=\"text-xs text-gray-500\">\n//                       134 products • 1,450 DA/month\n//                     </p>\n//                   </div>\n//                   <Badge className=\"bg-green-100 text-green-700 text-xs\">\n//                     Active\n//                   </Badge>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <div>\n//                     <p className=\"font-medium text-sm\">Fashion Plus</p>\n//                     <p className=\"text-xs text-gray-500\">\n//                       119 products • 970 DA/month\n//                     </p>\n//                   </div>\n//                   <Badge className=\"bg-green-100 text-green-700 text-xs\">\n//                     Active\n//                   </Badge>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <div>\n//                     <p className=\"font-medium text-sm\">Home & Garden</p>\n//                     <p className=\"text-xs text-gray-500\">\n//                       85 products • 540 DA/month\n//                     </p>\n//                   </div>\n//                   <Badge className=\"bg-orange-100 text-orange-700 text-xs\">\n//                     On Hold\n//                   </Badge>\n//                 </div>\n//                 <div className=\"pt-2 border-t\">\n//                   <Button\n//                     variant=\"ghost\"\n//                     size=\"sm\"\n//                     className=\"text-blue-600 hover:text-blue-700 text-xs w-full justify-start p-0\"\n//                   >\n//                     Manage the shops\n//                     <ChevronDown className=\"h-3 w-3 ml-auto rotate-[-90deg]\" />\n//                   </Button>\n//                 </div>\n//               </CardContent>\n//             </Card>\n\n//             {/* Recent Users */}\n//             <Card>\n//               <CardHeader className=\"flex flex-row items-center justify-between\">\n//                 <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center\">\n//                   <Users className=\"h-4 w-4 mr-2\" />\n//                   Recent Users\n//                 </CardTitle>\n//                 <span className=\"text-xs text-gray-500\">+23 today</span>\n//               </CardHeader>\n//               <CardContent className=\"space-y-3\">\n//                 <div className=\"flex items-center justify-between\">\n//                   <div>\n//                     <p className=\"font-medium text-sm\">Ahmed Benali</p>\n//                     <p className=\"text-xs text-gray-500\">\n//                       Registered 4 hours ago\n//                     </p>\n//                   </div>\n//                   <Badge className=\"bg-blue-100 text-blue-700 text-xs\">\n//                     Customer\n//                   </Badge>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <div>\n//                     <p className=\"font-medium text-sm\">ElectroMax Store</p>\n//                     <p className=\"text-xs text-gray-500\">\n//                       Registered 5 hours ago\n//                     </p>\n//                   </div>\n//                   <Badge className=\"bg-purple-100 text-purple-700 text-xs\">\n//                     Seller\n//                   </Badge>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <div>\n//                     <p className=\"font-medium text-sm\">Fatima Zahra</p>\n//                     <p className=\"text-xs text-gray-500\">\n//                       Registered yesterday\n//                     </p>\n//                   </div>\n//                   <Badge className=\"bg-blue-100 text-blue-700 text-xs\">\n//                     Customer\n//                   </Badge>\n//                 </div>\n//                 <div className=\"pt-2 border-t\">\n//                   <Button\n//                     variant=\"ghost\"\n//                     size=\"sm\"\n//                     className=\"text-blue-600 hover:text-blue-700 text-xs w-full justify-start p-0\"\n//                   >\n//                     Manage users\n//                     <ChevronDown className=\"h-3 w-3 ml-auto rotate-[-90deg]\" />\n//                   </Button>\n//                 </div>\n//               </CardContent>\n//             </Card>\n//           </div>\n//         </div>\n\n//         {/* Recent Orders - Same as Seller Dashboard */}\n//         <Card>\n//           <CardHeader className=\"flex flex-row items-center justify-between\">\n//             <CardTitle>Recent Orders</CardTitle>\n//             <Button variant=\"ghost\" size=\"sm\">\n//               {t(\"order.seeAllOrders\")}\n//             </Button>\n//           </CardHeader>\n//           <CardContent>\n//             <div className=\"space-y-2 overflow-x-auto\">\n//               {ordersLoading ? (\n//                 Array.from({ length: 3 }).map((_, index) => (\n//                   <div key={index} className=\"border rounded-lg p-4 min-w-max\">\n//                     <div className=\"flex items-center space-x-4\">\n//                       <Skeleton className=\"h-4 w-4\" />\n//                       <Skeleton className=\"h-4 w-20\" />\n//                       <Skeleton className=\"h-8 w-8 rounded-full\" />\n//                       <Skeleton className=\"h-4 w-32\" />\n//                       <Skeleton className=\"h-4 w-24\" />\n//                       <Skeleton className=\"h-4 w-20\" />\n//                       <Skeleton className=\"h-4 w-16\" />\n//                       <Skeleton className=\"h-4 w-16\" />\n//                       <Skeleton className=\"h-4 w-20\" />\n//                       <Skeleton className=\"h-4 w-8\" />\n//                     </div>\n//                   </div>\n//                 ))\n//               ) : ordersData.length === 0 ? (\n//                 <div className=\"text-center py-8 text-gray-500\">\n//                   No orders found\n//                 </div>\n//               ) : (\n//                 ordersData.map((order: any) => (\n//                   <div\n//                     key={order.id}\n//                     className=\"border rounded-lg bg-white shadow-sm min-w-max\"\n//                   >\n//                     {/* Order Row */}\n//                     <div\n//                       className=\"flex items-center p-4 cursor-pointer hover:bg-gray-50\"\n//                       onClick={() => toggleExpandOrder(order.id)}\n//                     >\n//                       <div className=\"flex items-center space-x-4 flex-1\">\n//                         {/* Expand/Collapse Button */}\n//                         <Button\n//                           variant=\"ghost\"\n//                           size=\"sm\"\n//                           className=\"w-6 h-6 p-0\"\n//                         >\n//                           <ChevronDown\n//                             className={`h-4 w-4 transition-transform ${\n//                               expandedOrders.has(order.id) ? \"rotate-180\" : \"\"\n//                             }`}\n//                           />\n//                         </Button>\n\n//                         {/* Order ID */}\n//                         <div className=\"min-w-[100px]\">\n//                           <span className=\"font-medium\">\n//                             ORD-{order.id.slice(-4)}\n//                           </span>\n//                         </div>\n\n//                         {/* Customer */}\n//                         <div className=\"flex items-center space-x-3 min-w-[200px]\">\n//                           <Avatar className=\"h-8 w-8\">\n//                             <AvatarImage\n//                               src={\n//                                 order.customerAvatar ||\n//                                 \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\"\n//                               }\n//                               alt={order.customerName}\n//                             />\n//                             <AvatarFallback>\n//                               {order.customerName\n//                                 ?.split(\" \")\n//                                 .map((n: string) => n[0])\n//                                 .join(\"\") || \"U\"}\n//                             </AvatarFallback>\n//                           </Avatar>\n//                           <span className=\"font-medium\">\n//                             {order.customerName || \"Unknown\"}\n//                           </span>\n//                         </div>\n\n//                         {/* Store */}\n//                         <div className=\"flex items-center space-x-2 min-w-[120px]\">\n//                           <div className=\"w-6 h-6 bg-blue-100 rounded flex items-center justify-center\">\n//                             <Store className=\"h-3 w-3 text-blue-600\" />\n//                           </div>\n//                           <span>TechStore</span>\n//                         </div>\n\n//                         {/* Status */}\n//                         <div className=\"min-w-[100px]\">\n//                           <Badge className={getStatusColor(order.status)}>\n//                             {order.status}\n//                           </Badge>\n//                         </div>\n\n//                         {/* Payment */}\n//                         <div className=\"min-w-[80px]\">\n//                           <Badge className=\"bg-green-100 text-green-700\">\n//                             {t(\"order.paid\")}\n//                           </Badge>\n//                         </div>\n\n//                         {/* Items */}\n//                         <div className=\"min-w-[100px]\">\n//                           <span className=\"text-gray-600\">\n//                             3 {t(\"order.articles\")}\n//                           </span>\n//                         </div>\n\n//                         {/* Amount */}\n//                         <div className=\"min-w-[100px]\">\n//                           <span className=\"font-semibold\">\n//                             {order.amount} DA\n//                           </span>\n//                         </div>\n//                       </div>\n\n//                       {/* Actions */}\n//                       <div\n//                         className=\"ml-4\"\n//                         onClick={(e) => e.stopPropagation()}\n//                       >\n//                         <div className=\"flex items-center space-x-2\">\n//                           <Button\n//                             variant=\"ghost\"\n//                             size=\"icon\"\n//                             onClick={() => handleViewOrder(order)}\n//                           >\n//                             <Eye className=\"h-4 w-4\" />\n//                           </Button>\n//                           <Button\n//                             variant=\"ghost\"\n//                             size=\"icon\"\n//                             onClick={() => handleApproveOrder(order)}\n//                           >\n//                             <Check className=\"h-4 w-4\" />\n//                           </Button>\n//                           <Button\n//                             variant=\"ghost\"\n//                             size=\"icon\"\n//                             onClick={() => handleDismissOrder(order)}\n//                           >\n//                             <X className=\"h-4 w-4 text-red-500\" />\n//                           </Button>\n//                         </div>\n//                         {/* <DropdownMenu>\n//                           <DropdownMenuTrigger asChild>\n//                             <Button\n//                               variant=\"ghost\"\n//                               size=\"sm\"\n//                               data-testid={`dropdown-actions-${order.id}`}\n//                             >\n//                               <MoreHorizontal className=\"h-4 w-4\" />\n//                             </Button>\n//                           </DropdownMenuTrigger>\n//                           <DropdownMenuContent align=\"end\">\n//                             <DropdownMenuItem>\n//                               <Eye className=\"h-4 w-4 mr-2\" />\n//                               {t(\"order.viewDetails\")}\n//                             </DropdownMenuItem>\n//                             <DropdownMenuItem>\n//                               <Check className=\"h-4 w-4 mr-2 text-green-600\" />\n//                               {t(\"order.approve\")}\n//                             </DropdownMenuItem>\n//                             <DropdownMenuItem>\n//                               <X className=\"h-4 w-4 mr-2 text-red-600\" />\n//                               {t(\"order.reject\")}\n//                             </DropdownMenuItem>\n//                           </DropdownMenuContent>\n//                         </DropdownMenu> */}\n//                       </div>\n//                     </div>\n\n//                     {/* Expanded Content */}\n//                     {expandedOrders.has(order.id) && (\n//                       <div className=\"border-t bg-gray-50 p-6\">\n//                         <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n//                           {/* Customer Information */}\n//                           <div className=\"space-y-4\">\n//                             <div className=\"flex items-center space-x-2\">\n//                               <Users className=\"h-4 w-4 text-gray-500\" />\n//                               <h3 className=\"font-medium\">\n//                                 {t(\"order.customerInformation\")}\n//                               </h3>\n//                             </div>\n//                             <div className=\"space-y-2 text-sm\">\n//                               <div className=\"flex items-center space-x-2\">\n//                                 <Avatar className=\"h-6 w-6\">\n//                                   <AvatarImage src={order.avatar} />\n//                                   <AvatarFallback>\n//                                     {order.customer\n//                                       ?.split(\" \")\n//                                       .map((n: string) => n[0])\n//                                       .join(\"\") || \"U\"}\n//                                   </AvatarFallback>\n//                                 </Avatar>\n//                                 <span className=\"font-medium\">\n//                                   {order.customer || \"Unknown\"}\n//                                 </span>\n//                               </div>\n//                               <p className=\"text-gray-600\">\n//                                 {t(\"order.clientId\")} MD-{order.id.slice(-5)}\n//                               </p>\n//                               <p className=\"text-gray-600\">\n//                                 {order.email || \"customer@example.com\"}\n//                               </p>\n//                               <p className=\"text-gray-600\">📞 0573456789</p>\n//                               <p className=\"text-xs text-gray-500 mt-2\">\n//                                 {t(\"order.orderPlacedOn\")} {order.date}\n//                               </p>\n//                             </div>\n//                           </div>\n\n//                           {/* Products Ordered */}\n//                           <div className=\"space-y-4\">\n//                             <div className=\"flex items-center space-x-2\">\n//                               <Package className=\"h-4 w-4 text-gray-500\" />\n//                               <h3 className=\"font-medium\">\n//                                 {t(\"order.productsOrdered\")} ( 3 )\n//                               </h3>\n//                             </div>\n//                             <div className=\"space-y-3\">\n//                               <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n//                                 <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n//                                   <Package className=\"h-5 w-5 text-blue-600\" />\n//                                 </div>\n//                                 <div className=\"flex-1\">\n//                                   <p className=\"font-medium text-sm\">\n//                                     {order.product}\n//                                   </p>\n//                                   <p className=\"text-xs text-gray-500\">\n//                                     Electronics\n//                                   </p>\n//                                   <p className=\"text-xs text-gray-500\">\n//                                     SKU: SKU-2345-1\n//                                   </p>\n//                                 </div>\n//                                 <div className=\"text-right\">\n//                                   <p className=\"text-sm\">Qty: 1</p>\n//                                   <p className=\"text-sm font-medium\">\n//                                     Price: {order.amount} DA\n//                                   </p>\n//                                   <p className=\"text-sm font-semibold text-green-600\">\n//                                     {order.amount} DA\n//                                   </p>\n//                                 </div>\n//                               </div>\n//                             </div>\n//                           </div>\n\n//                           {/* Delivery & Financial Summary */}\n//                           <div className=\"space-y-6\">\n//                             {/* Delivery Information */}\n//                             <div className=\"space-y-4\">\n//                               <div className=\"flex items-center space-x-2\">\n//                                 <Truck className=\"h-4 w-4 text-gray-500\" />\n//                                 <h3 className=\"font-medium\">\n//                                   {t(\"order.delivery\")}\n//                                 </h3>\n//                               </div>\n//                               <div className=\"space-y-2 text-sm\">\n//                                 <div>\n//                                   <p className=\"font-medium\">\n//                                     {t(\"order.deliveryAddress\")}\n//                                   </p>\n//                                   <p className=\"text-gray-600\">\n//                                     34 Independence Avenue\n//                                   </p>\n//                                   <p className=\"text-gray-600\">\n//                                     Tlemcen, 13000\n//                                   </p>\n//                                   <p className=\"text-gray-600\">Algeria</p>\n//                                 </div>\n//                                 <div className=\"pt-2\">\n//                                   <p className=\"font-medium\">\n//                                     {t(\"order.method\")}\n//                                   </p>\n//                                   <p className=\"text-gray-600\">\n//                                     {t(\"order.freeDelivery\")}\n//                                   </p>\n//                                   <p className=\"text-gray-600\">\n//                                     {t(\"order.estimatedTime\")} 2-4{\" \"}\n//                                     {t(\"order.workingDays\")}\n//                                   </p>\n//                                   <p className=\"text-gray-600\">\n//                                     {t(\"order.status\")}{\" \"}\n//                                     <span className=\"text-blue-600 font-medium\">\n//                                       {order.status}\n//                                     </span>\n//                                   </p>\n//                                 </div>\n//                               </div>\n//                             </div>\n\n//                             {/* Financial Summary */}\n//                             <div className=\"space-y-4\">\n//                               <div className=\"flex items-center space-x-2\">\n//                                 <CreditCard className=\"h-4 w-4 text-gray-500\" />\n//                                 <h3 className=\"font-medium\">\n//                                   {t(\"order.financialSummary\")}\n//                                 </h3>\n//                               </div>\n//                               <div className=\"space-y-2 text-sm bg-white p-4 rounded border\">\n//                                 <div className=\"flex justify-between\">\n//                                   <span>\n//                                     {t(\"order.subtotal\")} ( 1 {t(\"order.items\")}{\" \"}\n//                                     ):\n//                                   </span>\n//                                   <span>{order.amount} DA</span>\n//                                 </div>\n//                                 <div className=\"flex justify-between\">\n//                                   <span>{t(\"order.deliveryCosts\")}</span>\n//                                   <span className=\"text-green-600\">\n//                                     {t(\"order.free\")}\n//                                   </span>\n//                                 </div>\n//                                 <div className=\"flex justify-between\">\n//                                   <span>{t(\"order.vat\")} (19%):</span>\n//                                   <span>\n//                                     {(order.amount * 0.19).toFixed(2)} DA\n//                                   </span>\n//                                 </div>\n//                                 <hr className=\"my-2\" />\n//                                 <div className=\"flex justify-between font-semibold text-base\">\n//                                   <span>{t(\"order.total\")}</span>\n//                                   <span className=\"text-green-600\">\n//                                     {order.amount} DA\n//                                   </span>\n//                                 </div>\n//                                 <div className=\"flex items-center space-x-2 mt-2\">\n//                                   <Badge className=\"bg-green-100 text-green-700\">\n//                                     {t(\"order.payment\")} {t(\"order.paid\")}\n//                                   </Badge>\n//                                 </div>\n//                               </div>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       </div>\n//                     )}\n//                   </div>\n//                 ))\n//               )}\n//             </div>\n//           </CardContent>\n//         </Card>\n\n//         {selectedOrder && (\n//           <OrderDetailsModal\n//             isOpen={isModalOpen}\n//             onClose={() => setIsModalOpen(false)}\n//             order={selectedOrder}\n//           />\n//         )}\n//         <Dialog open={isDismissModalOpen} onOpenChange={setIsDismissModalOpen}>\n//           <DialogContent>\n//             <DialogHeader>\n//               <DialogTitle>Dismiss Order</DialogTitle>\n//               <DialogDescription>\n//                 Please provide a reason for dismissing order{\" \"}\n//                 {orderToDismiss?.id}\n//               </DialogDescription>\n//             </DialogHeader>\n//             <div className=\"space-y-4\">\n//               <div>\n//                 <Label htmlFor=\"dismiss-reason\">Reason for dismissal</Label>\n//                 <Textarea\n//                   id=\"dismiss-reason\"\n//                   placeholder=\"Enter the reason for dismissing this order...\"\n//                   value={dismissReason}\n//                   onChange={(e) => setDismissReason(e.target.value)}\n//                   className=\"mt-2\"\n//                   rows={4}\n//                 />\n//               </div>\n//             </div>\n//             <DialogFooter>\n//               <Button\n//                 variant=\"outline\"\n//                 onClick={() => {\n//                   setIsDismissModalOpen(false);\n//                   setDismissReason(\"\");\n//                   setOrderToDismiss(null);\n//                 }}\n//               >\n//                 Cancel\n//               </Button>\n//               <Button\n//                 onClick={confirmDismissOrder}\n//                 disabled={!dismissReason.trim()}\n//                 className=\"bg-red-600 hover:bg-red-700\"\n//               >\n//                 Dismiss Order\n//               </Button>\n//             </DialogFooter>\n//           </DialogContent>\n//         </Dialog>\n\n//         {/* Pending Sellers Management */}\n//         {/* <div className=\"mb-8\">\n//           <PendingSellers />\n//         </div> */}\n//       </div>\n//     </DashboardLayout>\n//   );\n// }\n\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { OrderDetailsModal } from \"@/components/ui/order-details-modal\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Progress } from \"@/components/ui/progress\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Users,\n  Store,\n  DollarSign,\n  TrendingUp,\n  Settings,\n  Shield,\n  AlertTriangle,\n  CheckCircle,\n  XCircle,\n  Edit,\n  Eye,\n  Plus,\n  Package,\n  ShoppingCart,\n  Activity,\n  BarChart3,\n  ArrowUpRight,\n  ArrowDownRight,\n  Clock,\n  Star,\n  MoreHorizontal,\n  Filter,\n  ChevronDown,\n  Truck,\n  CreditCard,\n  Check,\n  X,\n  ArrowUp,\n  ArrowDown,\n  Trash,\n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { PendingSellers } from \"@/components/admin/pending-sellers\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n  BarChart,\n  Bar,\n  PieChart,\n  Pie,\n  Cell,\n} from \"recharts\";\n\nexport default function AdminDashboard() {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isDismissModalOpen, setIsDismissModalOpen] = useState(false);\n  const [dismissReason, setDismissReason] = useState(\"\");\n  const [orderToDismiss, setOrderToDismiss] = useState<any>(null);\n  const [expandedOrders, setExpandedOrders] = useState<Set<string>>(new Set());\n\n  const { data: dashboardStats, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/admin\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/admin\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n      return response.json();\n    },\n  });\n\n  // Fetch active stores/sellers\n  const { data: activeStores = [], isLoading: storesLoading } = useQuery({\n    queryKey: [\"/api/admin/users\", \"sellers\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      const users = await response.json();\n      return users.filter((user: any) => user.role === \"seller\" && user.isActive && user.sellerStatus === \"approved\").slice(0, 3);\n    },\n  });\n\n  // Fetch recent users\n  const { data: recentUsers = [], isLoading: usersLoading } = useQuery({\n    queryKey: [\"/api/admin/users\", \"recent\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch users\");\n      const users = await response.json();\n      return users.sort((a: any, b: any) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()).slice(0, 3);\n    },\n  });\n\n  const handleStoreManagementClick = () => {\n    window.location.href = \"/dashboard/admin/stores\";\n  };\n\n  const handleUserManagementClick = () => {\n    window.location.href = \"/dashboard/admin/users\";\n  };\n\n  // Helper function to get relative time\n  const getRelativeTime = (date: string) => {\n    const now = new Date();\n    const createdDate = new Date(date);\n    const diffInHours = Math.floor((now.getTime() - createdDate.getTime()) / (1000 * 60 * 60));\n    \n    if (diffInHours < 1) return \"Just now\";\n    if (diffInHours < 24) return `${diffInHours} hours ago`;\n    const diffInDays = Math.floor(diffInHours / 24);\n    if (diffInDays === 1) return \"Yesterday\";\n    if (diffInDays < 7) return `${diffInDays} days ago`;\n    return createdDate.toLocaleDateString();\n  };\n\n  // Mock data for charts and tables\n  const salesTrendData = [\n    { month: \"Jan\", sales: 12000, orders: 145 },\n    { month: \"Feb\", sales: 19000, orders: 223 },\n    { month: \"Mar\", sales: 15000, orders: 176 },\n    { month: \"Apr\", sales: 22000, orders: 267 },\n    { month: \"May\", sales: 28000, orders: 334 },\n    { month: \"Jun\", sales: 35000, orders: 412 },\n  ];\n\n  const popularProducts = [\n    {\n      id: 1,\n      name: \"Premium Headphones\",\n      category: \"Electronics\",\n      sales: 1247,\n      revenue: 249400,\n      rating: 4.8,\n      image: \"https://ui-avatars.com/api/?name=PH&background=6366f1&color=fff\",\n    },\n    {\n      id: 2,\n      name: \"Smart Smartphone\",\n      category: \"Electronics\",\n      sales: 943,\n      revenue: 1226590,\n      rating: 4.6,\n      image: \"https://ui-avatars.com/api/?name=SS&background=10b981&color=fff\",\n    },\n    {\n      id: 3,\n      name: \"Wireless Headphones\",\n      category: \"Electronics\",\n      sales: 567,\n      revenue: 113400,\n      rating: 4.5,\n      image: \"https://ui-avatars.com/api/?name=WH&background=f59e0b&color=fff\",\n    },\n    {\n      id: 4,\n      name: \"Computer Tool\",\n      category: \"Electronics\",\n      sales: 445,\n      revenue: 133500,\n      rating: 4.3,\n      image: \"https://ui-avatars.com/api/?name=CT&background=ef4444&color=fff\",\n    },\n    {\n      id: 5,\n      name: \"Sports Shoes\",\n      category: \"Fashion\",\n      sales: 389,\n      revenue: 77800,\n      rating: 4.7,\n      image: \"https://ui-avatars.com/api/?name=SS&background=8b5cf6&color=fff\",\n    },\n  ];\n\n  const recentOrders = [\n    {\n      id: \"ORD-001\",\n      customer: \"Ahmed Benali\",\n      email: \"ahmed@example.com\",\n      product: \"Premium Headphones\",\n      amount: 199.99,\n      status: \"Processing\",\n      date: \"2024-01-20\",\n      avatar:\n        \"https://ui-avatars.com/api/?name=Ahmed+Benali&background=6366f1&color=fff\",\n    },\n    {\n      id: \"ORD-002\",\n      customer: \"Sara Djouad\",\n      email: \"sara@example.com\",\n      product: \"Smart Smartphone\",\n      amount: 1299.99,\n      status: \"Shipped\",\n      date: \"2024-01-19\",\n      avatar:\n        \"https://ui-avatars.com/api/?name=Sara+Djouad&background=10b981&color=fff\",\n    },\n    {\n      id: \"ORD-003\",\n      customer: \"Mohamed Kaddour\",\n      email: \"mohamed@example.com\",\n      product: \"Wireless Headphones\",\n      amount: 149.99,\n      status: \"Delivered\",\n      date: \"2024-01-18\",\n      avatar:\n        \"https://ui-avatars.com/api/?name=Mohamed+Kaddour&background=f59e0b&color=fff\",\n    },\n    {\n      id: \"ORD-004\",\n      customer: \"Fatima Boutaiba\",\n      email: \"fatima@example.com\",\n      product: \"Computer Tool\",\n      amount: 299.99,\n      status: \"Processing\",\n      date: \"2024-01-17\",\n      avatar:\n        \"https://ui-avatars.com/api/?name=Fatima+Boutaiba&background=ef4444&color=fff\",\n    },\n    {\n      id: \"ORD-005\",\n      customer: \"Yacine Mesbah\",\n      email: \"yacine@example.com\",\n      product: \"Sports Shoes\",\n      amount: 89.99,\n      status: \"Cancelled\",\n      date: \"2024-01-16\",\n      avatar:\n        \"https://ui-avatars.com/api/?name=Yacine+Mesbah&background=8b5cf6&color=fff\",\n    },\n  ];\n\n  const { data: ordersData = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/orders\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch orders\");\n      return response.json();\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"packed\":\n        return \"bg-blue-100 text-blue-700\";\n      case \"on-way\":\n        return \"bg-orange-100 text-orange-700\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-700\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-700\";\n      default:\n        return \"bg-gray-100 text-gray-700\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const toggleExpandOrder = (orderId: string) => {\n    const newExpandedOrders = new Set(expandedOrders);\n    if (expandedOrders.has(orderId)) {\n      newExpandedOrders.delete(orderId);\n    } else {\n      newExpandedOrders.add(orderId);\n    }\n    setExpandedOrders(newExpandedOrders);\n  };\n\n  if (!user || user.role !== \"admin\") {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <p className=\"text-red-600\">Access denied. Admin role required.</p>\n      </div>\n    );\n  }\n  let value = 0;\n  const isPositive = value >= 0;\n\n  const handleDismissOrder = (order: any) => {\n    setOrderToDismiss(order);\n    setIsDismissModalOpen(true);\n  };\n\n  const confirmDismissOrder = () => {\n    if (orderToDismiss && dismissReason.trim()) {\n      console.log(\n        `Dismissing order ${orderToDismiss.id} with reason: ${dismissReason}`,\n      );\n      // Here you would typically make an API call to dismiss the order\n      setIsDismissModalOpen(false);\n      setDismissReason(\"\");\n      setOrderToDismiss(null);\n    }\n  };\n\n  const handleApproveOrder = (order: any) => {\n    console.log(`Approving order ${order.id}`);\n    // Here you would typically make an API call to approve the order\n  };\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <p className=\"text-red-600\">Access denied. Seller role required.</p>\n      </div>\n    );\n  }\n\n  const handleViewOrder = async (order: any) => {\n    try {\n      let orderDetails;\n\n      // Check if this is a dummy order (has items already) or database order\n      if (order.items) {\n        // It's a dummy order with items already included\n        orderDetails = order;\n      } else {\n        // It's a database order, fetch details from API\n        const response = await fetch(`/api/orders/${order.id}`, {\n          credentials: \"include\",\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch order details\");\n        orderDetails = await response.json();\n      }\n\n      setSelectedOrder({\n        id: orderDetails.id,\n        date: formatDate(orderDetails.createdAt),\n        customer: {\n          name: orderDetails.customerName,\n          avatar:\n            orderDetails.customerAvatar ||\n            \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\",\n        },\n        orderItems:\n          orderDetails.items?.map((item: any) => ({\n            id: item.id,\n            name: item.productName || \"Product\",\n            description: item.productDescription || \"\",\n            quantity: item.quantity,\n            price: `$${item.unitPrice}`,\n          })) || [],\n        totalAmount: `$${orderDetails.totalAmount}`,\n        status: orderDetails.status,\n        paymentStatus: \"Paid\",\n      });\n      setIsModalOpen(true);\n    } catch (error) {\n      console.error(\"Error fetching order details:\", error);\n    }\n  };\n\n  return (\n    <DashboardLayout>\n      <div>\n        <div className=\"flex\">\n          <Shield className=\"text-primary w-8 h-8 mr-2\" />\n          <h1 className=\"text-3xl font-bold mb-3\">{t(\"admin.heading\")}</h1>\n        </div>\n        <p className=\"text-lg mb-6\">{t(\"admin.subheading\")}</p>\n      </div>\n      <div className=\"space-y-6\">\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {isLoading ? (\n            Array.from({ length: 4 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-full mb-2\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <>\n              <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-20\">\n                    <div className=\"bg-white/20 p-3 rounded-lg\">\n                      <DollarSign className=\"h-8 w-8 text-blue-600\" />\n                    </div>\n\n                    <div\n                      className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n                        isPositive\n                          ? \"bg-green-50 text-green-700\"\n                          : \"bg-red-50 text-red-700\"\n                      }`}\n                    >\n                      {isPositive ? (\n                        <ArrowUp className=\"h-4 w-4 mr-1\" />\n                      ) : (\n                        <ArrowDown className=\"h-4 w-4 mr-1\" />\n                      )}\n                      {value}%\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p\n                        className=\"text-sm font-medium text-black-100\"\n                        data-testid=\"text-revenue-label\"\n                      >\n                        {t(\"admin.card.Revenue\")}\n                      </p>\n                      <p\n                        className=\"text-2xl font-bold\"\n                        data-testid=\"text-revenue\"\n                      >\n                        2,340,000.00 DA\n                      </p>\n                      <p className=\"text-xs text-black-100 mt-1\">\n                        {t(\"admin.card.dic\", { value: \"+8.2%\" })}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-20\">\n                    <div className=\"bg-white/20 p-3 rounded-lg\">\n                      <ShoppingCart className=\"h-8 w-8 text-orange-600\" />\n                    </div>\n                    <div\n                      className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n                        isPositive\n                          ? \"bg-green-50 text-green-700\"\n                          : \"bg-red-50 text-red-700\"\n                      }`}\n                    >\n                      {isPositive ? (\n                        <ArrowUp className=\"h-4 w-4 mr-1\" />\n                      ) : (\n                        <ArrowDown className=\"h-4 w-4 mr-1\" />\n                      )}\n                      {value}%\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p\n                        className=\"text-sm font-medium text-black-100\"\n                        data-testid=\"text-orders-label\"\n                      >\n                        {t(\"admin.card.Orders\")}\n                      </p>\n                      <p\n                        className=\"text-3xl font-bold\"\n                        data-testid=\"text-orders\"\n                      >\n                        1,247\n                      </p>\n                      <p className=\"text-xs text-black-100 mt-1\">\n                        {t(\"admin.card.dic\", { value: \"+5.4%\" })}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-20\">\n                    <div className=\"bg-white/20 p-3 rounded-lg\">\n                      <Users className=\"h-8 w-8 text-blue-600\" />\n                    </div>\n\n                    <div\n                      className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n                        isPositive\n                          ? \"bg-green-50 text-green-700\"\n                          : \"bg-red-50 text-red-700\"\n                      }`}\n                    >\n                      {isPositive ? (\n                        <ArrowUp className=\"h-4 w-4 mr-1\" />\n                      ) : (\n                        <ArrowDown className=\"h-4 w-4 mr-1\" />\n                      )}\n                      {value}%\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p\n                        className=\"text-sm font-medium text-black-100\"\n                        data-testid=\"text-products-label\"\n                      >\n                        {t(\"admin.card.Shops\")}\n                      </p>\n                      <p\n                        className=\"text-3xl font-bold\"\n                        data-testid=\"text-products\"\n                      >\n                        89\n                      </p>\n                      <p className=\"text-xs text-black-100 mt-1\">\n                        {t(\"admin.card.dic\", { value: \"+8.2%\" })}\n                      </p>\n                    </div>\n                    {/* <div className=\"bg-white/20 p-3 rounded-lg\">\n                      <Package className=\"h-8 w-8\" />\n                    </div> */}\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card className=\"bg-gradient-to-r from-white-500 to-white-600 text-black\">\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center space-x-20\">\n                    <div className=\"bg-white/20 p-3 rounded-lg\">\n                      <Eye className=\"h-8 w-8 text-green-600\" />\n                    </div>\n\n                    <div\n                      className={`inline-flex items-center px-2 py-1 rounded-full text-sm font-medium ${\n                        isPositive\n                          ? \"bg-green-50 text-green-700\"\n                          : \"bg-red-50 text-red-700\"\n                      }`}\n                    >\n                      {isPositive ? (\n                        <ArrowUp className=\"h-4 w-4 mr-1\" />\n                      ) : (\n                        <ArrowDown className=\"h-4 w-4 mr-1\" />\n                      )}\n                      {value}%\n                    </div>\n                  </div>\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <p\n                        className=\"text-sm font-medium text-black-100\"\n                        data-testid=\"text-customers-label\"\n                      >\n                        {t(\"admin.card.Customers\")}\n                      </p>\n                      <p\n                        className=\"text-3xl font-bold\"\n                        data-testid=\"text-customers\"\n                      >\n                        5,432\n                      </p>\n                      <p className=\"text-xs text-black-100 mt-1\">\n                        {t(\"admin.card.dic\", { value: \"+12.3%\" })}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </div>\n\n        {/* Quick Actions */}\n        {/* <div className=\"mb-8\">\n          <h2 className=\"text-xl font-semibold text-gray-900 mb-4\">\n            Quick Actions\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\n            <Button\n              className=\"h-20 flex-col space-y-2 bg-primary-600 hover:bg-primary-700\"\n              data-testid=\"button-add-category\"\n            >\n              <Plus className=\"h-6 w-6\" />\n              <span>Add Category</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex-col space-y-2\"\n              data-testid=\"button-manage-users\"\n            >\n              <Users className=\"h-6 w-6\" />\n              <span>Manage Users</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex-col space-y-2\"\n              data-testid=\"button-vendor-approval\"\n            >\n              <Shield className=\"h-6 w-6\" />\n              <span>Vendor Approval</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex-col space-y-2\"\n              data-testid=\"button-platform-settings\"\n            >\n              <Settings className=\"h-6 w-6\" />\n              <span>Platform Settings</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-20 flex-col space-y-2\"\n              data-testid=\"button-content-moderation\"\n            >\n              <AlertTriangle className=\"h-6 w-6\" />\n              <span>Content Moderation</span>\n            </Button>\n          </div>\n        </div>\n */}\n\n        {/* Pending Sellers Management */}\n        {/* <div className=\"mb-8\">\n          <PendingSellers />\n        </div> */}\n\n        {/* Main Dashboard Grid */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n          {/* Left Column - Charts and Main Content */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            {/* Sales Trend Chart */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold\">\n                  {t(\"admin.sales.heading\")}\n                </CardTitle>\n              </CardHeader>\n              <Card className=\"m-4\">\n                <CardHeader className=\"flex flex-row items-center justify-between\">\n                  <CardTitle className=\"text-lg font-semibold\">\n                    {t(\"admin.sales.subheading\")}\n                  </CardTitle>\n                  {/* <Button variant=\"outline\" size=\"sm\">\n                    <Filter className=\"h-4 w-4 mr-2\" />\n                    Filter\n                  </Button> */}\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-80\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={salesTrendData}>\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"month\" />\n                        <YAxis />\n                        <Tooltip />\n                        <Line\n                          type=\"monotone\"\n                          dataKey=\"sales\"\n                          stroke=\"#8b5cf6\"\n                          strokeWidth={3}\n                          dot={{ fill: \"#8b5cf6\", strokeWidth: 2, r: 4 }}\n                        />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </Card>\n\n            {/* Popular Products */}\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg font-semibold\">\n                  {t(\"admin.papul.heading\")}\n                </CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {popularProducts.map((product) => (\n                    <div\n                      key={product.id}\n                      className=\"flex items-center justify-between p-3 rounded-lg border hover:bg-gray-50\"\n                    >\n                      <div className=\"flex items-center space-x-3\">\n                        <Avatar className=\"h-10 w-10\">\n                          <AvatarImage src={product.image} />\n                          <AvatarFallback>\n                            {product.name.slice(0, 2)}\n                          </AvatarFallback>\n                        </Avatar>\n                        <div>\n                          <p className=\"font-medium text-gray-900\">\n                            {product.name}\n                          </p>\n                          <p className=\"text-sm text-gray-500\">\n                            {product.category}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p className=\"font-semibold\">{product.sales} sales</p>\n                        <div className=\"flex items-center space-x-1\">\n                          <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                          <span className=\"text-xs text-gray-500\">\n                            {product.rating}\n                          </span>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Right Column - Active Stores and Recent Users */}\n          <div className=\"space-y-6\">\n            {/* Active Stores */}\n            <Card \n              className=\"hover:shadow-md transition-shadow cursor-pointer\"\n              onClick={handleStoreManagementClick}\n            >\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center\">\n                  <Store className=\"h-4 w-4 mr-2\" />\n                  {t(\"admin.active.heading\")}\n                </CardTitle>\n                <span className=\"text-xs text-gray-500\">{activeStores.length}</span>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {storesLoading ? (\n                  Array.from({ length: 3 }).map((_, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-4 w-24\" />\n                        <Skeleton className=\"h-3 w-32\" />\n                      </div>\n                      <Skeleton className=\"h-5 w-12\" />\n                    </div>\n                  ))\n                ) : activeStores.length > 0 ? (\n                  activeStores.map((store: any) => (\n                    <div key={store.id} className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{store.storeName || store.firstName + \" \" + store.lastName}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          {store.businessType || \"Store\"} • Joined {getRelativeTime(store.createdAt)}\n                        </p>\n                      </div>\n                      <Badge className=\"bg-green-100 text-green-700 text-xs\">\n                        Active\n                      </Badge>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-sm text-gray-500\">No active stores yet</p>\n                  </div>\n                )}\n                <div className=\"pt-2 border-t\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-blue-600 hover:text-blue-700 text-xs w-full justify-start p-0\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleStoreManagementClick();\n                    }}\n                  >\n                    {t(\"admin.active.link\")}\n                    <ChevronDown className=\"h-3 w-3 ml-auto rotate-[-90deg]\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n\n            {/* Recent Users */}\n            <Card \n              className=\"hover:shadow-md transition-shadow cursor-pointer\"\n              onClick={handleUserManagementClick}\n            >\n              <CardHeader className=\"flex flex-row items-center justify-between\">\n                <CardTitle className=\"text-sm font-medium text-gray-600 flex items-center\">\n                  <Users className=\"h-4 w-4 mr-2\" />\n                  {t(\"admin.recent.heading\")}\n                </CardTitle>\n                <span className=\"text-xs text-gray-500\">\n                  {recentUsers.filter((user: any) => {\n                    const today = new Date();\n                    const userDate = new Date(user.createdAt);\n                    return today.toDateString() === userDate.toDateString();\n                  }).length} {t(\"admin.recent.today\")}\n                </span>\n              </CardHeader>\n              <CardContent className=\"space-y-3\">\n                {usersLoading ? (\n                  Array.from({ length: 3 }).map((_, index) => (\n                    <div key={index} className=\"flex items-center justify-between\">\n                      <div className=\"space-y-2\">\n                        <Skeleton className=\"h-4 w-24\" />\n                        <Skeleton className=\"h-3 w-32\" />\n                      </div>\n                      <Skeleton className=\"h-5 w-16\" />\n                    </div>\n                  ))\n                ) : recentUsers.length > 0 ? (\n                  recentUsers.map((user: any) => (\n                    <div key={user.id} className=\"flex items-center justify-between\">\n                      <div>\n                        <p className=\"font-medium text-sm\">{user.storeName || user.firstName + \" \" + user.lastName}</p>\n                        <p className=\"text-xs text-gray-500\">\n                          Registered {getRelativeTime(user.createdAt)}\n                        </p>\n                      </div>\n                      <Badge \n                        className={`text-xs ${\n                          user.role === \"seller\" \n                            ? \"bg-purple-100 text-purple-700\" \n                            : user.role === \"admin\"\n                            ? \"bg-red-100 text-red-700\"\n                            : \"bg-blue-100 text-blue-700\"\n                        }`}\n                      >\n                        {user.role === \"seller\" ? \"Seller\" : user.role === \"admin\" ? \"Admin\" : \"Customer\"}\n                      </Badge>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"text-center py-4\">\n                    <p className=\"text-sm text-gray-500\">No recent users</p>\n                  </div>\n                )}\n                <div className=\"pt-2 border-t\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-blue-600 hover:text-blue-700 text-xs w-full justify-start p-0\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      handleUserManagementClick();\n                    }}\n                  >\n                    {t(\"admin.recent.link\")}\n                    <ChevronDown className=\"h-3 w-3 ml-auto rotate-[-90deg]\" />\n                  </Button>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Recent Orders - Same as Seller Dashboard */}\n        <Card>\n          <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle>{t(\"admin.recent.orders\")}</CardTitle>\n            <Button variant=\"ghost\" size=\"sm\">\n              {t(\"admin.recent.orders.link\")}\n            </Button>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2 overflow-x-auto\">\n              {ordersLoading ? (\n                Array.from({ length: 3 }).map((_, index) => (\n                  <div key={index} className=\"border rounded-lg p-4 min-w-max\">\n                    <div className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-4 w-4\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                      <Skeleton className=\"h-8 w-8 rounded-full\" />\n                      <Skeleton className=\"h-4 w-32\" />\n                      <Skeleton className=\"h-4 w-24\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-16\" />\n                      <Skeleton className=\"h-4 w-20\" />\n                      <Skeleton className=\"h-4 w-8\" />\n                    </div>\n                  </div>\n                ))\n              ) : ordersData.length === 0 ? (\n                <div className=\"text-center py-8 text-gray-500\">\n                  No orders found\n                </div>\n              ) : (\n                ordersData.map((order: any) => (\n                  <div\n                    key={order.id}\n                    className=\"border rounded-lg bg-white shadow-sm min-w-max\"\n                  >\n                    {/* Order Row */}\n                    <div\n                      className=\"flex items-center p-4 cursor-pointer hover:bg-gray-50\"\n                      onClick={() => toggleExpandOrder(order.id)}\n                    >\n                      <div className=\"flex items-center space-x-4 flex-1\">\n                        {/* Expand/Collapse Button */}\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          className=\"w-6 h-6 p-0\"\n                        >\n                          <ChevronDown\n                            className={`h-4 w-4 transition-transform ${\n                              expandedOrders.has(order.id) ? \"rotate-180\" : \"\"\n                            }`}\n                          />\n                        </Button>\n\n                        {/* Order ID */}\n                        <div className=\"min-w-[100px]\">\n                          <span className=\"font-medium\">\n                            ORD-{order.id.slice(-4)}\n                          </span>\n                        </div>\n\n                        {/* Customer */}\n                        <div className=\"flex items-center space-x-3 min-w-[200px]\">\n                          <Avatar className=\"h-8 w-8\">\n                            <AvatarImage\n                              src={\n                                order.customerAvatar ||\n                                \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\"\n                              }\n                              alt={order.customerName}\n                            />\n                            <AvatarFallback>\n                              {order.customerName\n                                ?.split(\" \")\n                                .map((n: string) => n[0])\n                                .join(\"\") || \"U\"}\n                            </AvatarFallback>\n                          </Avatar>\n                          <span className=\"font-medium\">\n                            {order.customerName || \"Unknown\"}\n                          </span>\n                        </div>\n\n                        {/* Store */}\n                        <div className=\"flex items-center space-x-2 min-w-[120px]\">\n                          <div className=\"w-6 h-6 bg-blue-100 rounded flex items-center justify-center\">\n                            <Store className=\"h-3 w-3 text-blue-600\" />\n                          </div>\n                          <span>TechStore</span>\n                        </div>\n\n                        {/* Status */}\n                        <div className=\"min-w-[100px]\">\n                          <Badge className={getStatusColor(order.status)}>\n                            {order.status}\n                          </Badge>\n                        </div>\n\n                        {/* Payment */}\n                        <div className=\"min-w-[80px]\">\n                          <Badge className=\"bg-green-100 text-green-700\">\n                            {t(\"order.paid\")}\n                          </Badge>\n                        </div>\n\n                        {/* Items */}\n                        <div className=\"min-w-[100px]\">\n                          <span className=\"text-gray-600\">\n                            3 {t(\"order.articles\")}\n                          </span>\n                        </div>\n\n                        {/* Amount */}\n                        <div className=\"min-w-[100px]\">\n                          <span className=\"font-semibold\">\n                            {order.amount} DA\n                          </span>\n                        </div>\n                      </div>\n\n                      {/* Actions */}\n                      <div\n                        className=\"ml-4\"\n                        onClick={(e) => e.stopPropagation()}\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => handleViewOrder(order)}\n                          >\n                            <Eye className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => handleApproveOrder(order)}\n                          >\n                            <Check className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"icon\"\n                            onClick={() => handleDismissOrder(order)}\n                          >\n                            <X className=\"h-4 w-4 text-red-500\" />\n                          </Button>\n                        </div>\n                        {/* <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              data-testid={`dropdown-actions-${order.id}`}\n                            >\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem>\n                              <Eye className=\"h-4 w-4 mr-2\" />\n                              {t(\"order.viewDetails\")}\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Check className=\"h-4 w-4 mr-2 text-green-600\" />\n                              {t(\"order.approve\")}\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <X className=\"h-4 w-4 mr-2 text-red-600\" />\n                              {t(\"order.reject\")}\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu> */}\n                      </div>\n                    </div>\n\n                    {/* Expanded Content */}\n                    {expandedOrders.has(order.id) && (\n                      <div className=\"border-t bg-gray-50 p-6\">\n                        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                          {/* Customer Information */}\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Users className=\"h-4 w-4 text-gray-500\" />\n                              <h3 className=\"font-medium\">\n                                {t(\"order.customerInformation\")}\n                              </h3>\n                            </div>\n                            <div className=\"space-y-2 text-sm\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Avatar className=\"h-6 w-6\">\n                                  <AvatarImage src={order.avatar} />\n                                  <AvatarFallback>\n                                    {order.customer\n                                      ?.split(\" \")\n                                      .map((n: string) => n[0])\n                                      .join(\"\") || \"U\"}\n                                  </AvatarFallback>\n                                </Avatar>\n                                <span className=\"font-medium\">\n                                  {order.customer || \"Unknown\"}\n                                </span>\n                              </div>\n                              <p className=\"text-gray-600\">\n                                {t(\"order.clientId\")} MD-{order.id.slice(-5)}\n                              </p>\n                              <p className=\"text-gray-600\">\n                                {order.email || \"customer@example.com\"}\n                              </p>\n                              <p className=\"text-gray-600\">📞 0573456789</p>\n                              <p className=\"text-xs text-gray-500 mt-2\">\n                                {t(\"order.orderPlacedOn\")} {order.date}\n                              </p>\n                            </div>\n                          </div>\n\n                          {/* Products Ordered */}\n                          <div className=\"space-y-4\">\n                            <div className=\"flex items-center space-x-2\">\n                              <Package className=\"h-4 w-4 text-gray-500\" />\n                              <h3 className=\"font-medium\">\n                                {t(\"order.productsOrdered\")} ( 3 )\n                              </h3>\n                            </div>\n                            <div className=\"space-y-3\">\n                              <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n                                <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n                                  <Package className=\"h-5 w-5 text-blue-600\" />\n                                </div>\n                                <div className=\"flex-1\">\n                                  <p className=\"font-medium text-sm\">\n                                    {order.product}\n                                  </p>\n                                  <p className=\"text-xs text-gray-500\">\n                                    Electronics\n                                  </p>\n                                  <p className=\"text-xs text-gray-500\">\n                                    SKU: SKU-2345-1\n                                  </p>\n                                </div>\n                                <div className=\"text-right\">\n                                  <p className=\"text-sm\">Qty: 1</p>\n                                  <p className=\"text-sm font-medium\">\n                                    Price: {order.amount} DA\n                                  </p>\n                                  <p className=\"text-sm font-semibold text-green-600\">\n                                    {order.amount} DA\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Delivery & Financial Summary */}\n                          <div className=\"space-y-6\">\n                            {/* Delivery Information */}\n                            <div className=\"space-y-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Truck className=\"h-4 w-4 text-gray-500\" />\n                                <h3 className=\"font-medium\">\n                                  {t(\"order.delivery\")}\n                                </h3>\n                              </div>\n                              <div className=\"space-y-2 text-sm\">\n                                <div>\n                                  <p className=\"font-medium\">\n                                    {t(\"order.deliveryAddress\")}\n                                  </p>\n                                  <p className=\"text-gray-600\">\n                                    34 Independence Avenue\n                                  </p>\n                                  <p className=\"text-gray-600\">\n                                    Tlemcen, 13000\n                                  </p>\n                                  <p className=\"text-gray-600\">Algeria</p>\n                                </div>\n                                <div className=\"pt-2\">\n                                  <p className=\"font-medium\">\n                                    {t(\"order.method\")}\n                                  </p>\n                                  <p className=\"text-gray-600\">\n                                    {t(\"order.freeDelivery\")}\n                                  </p>\n                                  <p className=\"text-gray-600\">\n                                    {t(\"order.estimatedTime\")} 2-4{\" \"}\n                                    {t(\"order.workingDays\")}\n                                  </p>\n                                  <p className=\"text-gray-600\">\n                                    {t(\"order.status\")}{\" \"}\n                                    <span className=\"text-blue-600 font-medium\">\n                                      {order.status}\n                                    </span>\n                                  </p>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Financial Summary */}\n                            <div className=\"space-y-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <CreditCard className=\"h-4 w-4 text-gray-500\" />\n                                <h3 className=\"font-medium\">\n                                  {t(\"order.financialSummary\")}\n                                </h3>\n                              </div>\n                              <div className=\"space-y-2 text-sm bg-white p-4 rounded border\">\n                                <div className=\"flex justify-between\">\n                                  <span>\n                                    {t(\"order.subtotal\")} ( 1 {t(\"order.items\")}{\" \"}\n                                    ):\n                                  </span>\n                                  <span>{order.amount} DA</span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span>{t(\"order.deliveryCosts\")}</span>\n                                  <span className=\"text-green-600\">\n                                    {t(\"order.free\")}\n                                  </span>\n                                </div>\n                                <div className=\"flex justify-between\">\n                                  <span>{t(\"order.vat\")} (19%):</span>\n                                  <span>\n                                    {(order.amount * 0.19).toFixed(2)} DA\n                                  </span>\n                                </div>\n                                <hr className=\"my-2\" />\n                                <div className=\"flex justify-between font-semibold text-base\">\n                                  <span>{t(\"order.total\")}</span>\n                                  <span className=\"text-green-600\">\n                                    {order.amount} DA\n                                  </span>\n                                </div>\n                                <div className=\"flex items-center space-x-2 mt-2\">\n                                  <Badge className=\"bg-green-100 text-green-700\">\n                                    {t(\"order.payment\")} {t(\"order.paid\")}\n                                  </Badge>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    )}\n                  </div>\n                ))\n              )}\n            </div>\n          </CardContent>\n        </Card>\n\n        {selectedOrder && (\n          <OrderDetailsModal\n            isOpen={isModalOpen}\n            onClose={() => setIsModalOpen(false)}\n            order={selectedOrder}\n          />\n        )}\n        <Dialog open={isDismissModalOpen} onOpenChange={setIsDismissModalOpen}>\n          <DialogContent>\n            <DialogHeader>\n              <DialogTitle>Dismiss Order</DialogTitle>\n              <DialogDescription>\n                Please provide a reason for dismissing order{\" \"}\n                {orderToDismiss?.id}\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"dismiss-reason\">Reason for dismissal</Label>\n                <Textarea\n                  id=\"dismiss-reason\"\n                  placeholder=\"Enter the reason for dismissing this order...\"\n                  value={dismissReason}\n                  onChange={(e) => setDismissReason(e.target.value)}\n                  className=\"mt-2\"\n                  rows={4}\n                />\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => {\n                  setIsDismissModalOpen(false);\n                  setDismissReason(\"\");\n                  setOrderToDismiss(null);\n                }}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={confirmDismissOrder}\n                disabled={!dismissReason.trim()}\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                Dismiss Order\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n\n        {/* Pending Sellers Management */}\n        {/* <div className=\"mb-8\">\n          <PendingSellers />\n        </div> */}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":101753},"client/src/pages/admin/products/categories-management.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Search,\n  Plus,\n  MoreVertical,\n  Eye,\n  Edit,\n  Trash2,\n  Filter,\n  ChevronDown,\n  X,\n} from \"lucide-react\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { AddCategoryModal } from \"@/components/modals/add-category-modal\";\nimport { AddSupercategoryModal } from \"@/components/modals/add-supercategory-modal\";\nimport { Dialog, DialogContent, DialogHeader } from \"@/components/ui/dialog\";\n// Category interface based on the existing schema\ninterface Category {\n  id: string;\n  name: string;\n  description?: string;\n  parentId?: string;\n  imageUrl?: string;\n  isActive: boolean;\n  displayOrder: number;\n  createdAt: string;\n  updatedAt: string;\n  productCount: number;\n  subcategoryCount: number;\n}\n\nexport default function CategoriesManagement() {\n  const { t, i18n } = useTranslation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedFilter, setSelectedFilter] = useState(\"All categories\");\n  const [showCategoryModal, setShowCategoryModal] = useState(false);\n  const [showSupercategoryModal, setShowSupercategoryModal] = useState(false);\n  const [showCategoryDetailModal, setShowCategoryDetailModal] = useState(false);\n  const [selectedCategoryForView, setSelectedCategoryForView] =\n    useState<Category | null>(null);\n\n  // Edit category modal states\n  const [showEditCategoryModal, setShowEditCategoryModal] = useState(false);\n  const [selectedCategoryForEdit, setSelectedCategoryForEdit] =\n    useState<any>(null);\n\n  // Edit supercategory modal states\n  const [showEditSupercategoryModal, setShowEditSupercategoryModal] =\n    useState(false);\n  const [selectedSupercategoryForEdit, setSelectedSupercategoryForEdit] =\n    useState<any>(null);\n\n  // Delete category modal states\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [selectedCategoryForDelete, setSelectedCategoryForDelete] =\n    useState<any>(null);\n\n  // Fetch categories data from API\n  const { data: categories = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/categories\"],\n  });\n\n  // Fetch supercategories data for the table\n  const { data: supercategories = [], isLoading: isLoadingSupercategories } =\n    useQuery({\n      queryKey: [\"/api/admin/supercategories\"],\n    });\n\n  // Filter categories with proper null/undefined checks\n  // const filteredCategories = categories.filter((category) => {\n  //   if (!category || !searchQuery) return true;\n\n  //   // Handle category name from translations or direct name property\n  //   const categoryName =\n  //     category.translations?.[0]?.name || category.name || \"\";\n  //   const categoryDescription =\n  //     category.translations?.[0]?.description || category.description || \"\";\n\n  //   return (\n  //     categoryName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n  //     categoryDescription.toLowerCase().includes(searchQuery.toLowerCase())\n  //   );\n  // });\n  const filteredCategories = categories.filter((category) => {\n    if (!category) return false;\n\n    // Search filter\n    const categoryName =\n      category.translations?.[0]?.name || category.name || \"\";\n    const categoryDescription =\n      category.translations?.[0]?.description || category.description || \"\";\n\n    const matchesSearch =\n      !searchQuery ||\n      categoryName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      categoryDescription.toLowerCase().includes(searchQuery.toLowerCase());\n\n    // Tab filter\n    if (selectedFilter === \"Featured\") {\n      return matchesSearch && category.isFeatured;\n    }\n\n    // Default: All categories\n    return matchesSearch;\n  });\n  const deleteCategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\n        \"DELETE\",\n        `/api/admin/categories/${id}`,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Deleted\",\n        description: \"Category deleted successfully\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/categories\"] });\n      setShowDeleteModal(false);\n      setSelectedCategoryForDelete(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete supercategory mutation (separate from regular categories)\n  const deleteSupercategoryMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await apiRequest(\n        \"DELETE\",\n        `/api/admin/categories/${id}`,\n      );\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Deleted\",\n        description: \"Supercategory deleted successfully\",\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/admin/supercategories\"],\n      });\n      setShowDeleteModal(false);\n      setSelectedCategoryForDelete(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete supercategory\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCategoryDelete = async (categoryId: string) => {\n    deleteCategoryMutation.mutate(categoryId);\n  };\n\n  const handleSupercategoryDelete = async (supercategoryId: string) => {\n    deleteSupercategoryMutation.mutate(supercategoryId);\n  };\n\n  // Create category mutation\n  const createCategoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/categories\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/categories\"] });\n      toast({\n        title: \"Success\",\n        description: \"Category created successfully\",\n      });\n      setShowCategoryModal(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create category\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const handleCategorySubmit = (data: any) => {\n    createCategoryMutation.mutate(data);\n  };\n\n  // Create supercategory mutation\n  const createSupercategoryMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const res = await apiRequest(\"POST\", \"/api/admin/supercategories\", data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/admin/supercategories\"],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Supercategory created successfully\",\n      });\n      setShowSupercategoryModal(false);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create supercategory\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update supercategory mutation\n  const updateSupercategoryMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: any }) => {\n      const res = await apiRequest(\"PUT\", `/api/admin/categories/${id}`, data);\n      return await res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/admin/supercategories\"],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Supercategory updated successfully\",\n      });\n      setShowEditSupercategoryModal(false);\n      setSelectedSupercategoryForEdit(null);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update supercategory\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSupercategorySubmit = (data: any) => {\n    if (selectedSupercategoryForEdit) {\n      // Update existing supercategory\n      updateSupercategoryMutation.mutate({\n        id: selectedSupercategoryForEdit.id,\n        data,\n      });\n    } else {\n      // Create new supercategory\n      createSupercategoryMutation.mutate(data);\n    }\n  };\n\n  return (\n    <DashboardLayout\n      title={t(\"categories.heading\")}\n      subtitle={t(\"categories.subheading\")}\n    >\n      <div className=\"space-y-6\">\n        {/* Header Actions */}\n        <div className=\"flex justify-between items-center\">\n          <div className=\"flex gap-2\">\n            <Button\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              onClick={() => setShowCategoryModal(true)}\n              data-testid=\"button-add-category\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"categories.add\")}\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"bg-purple-600 hover:bg-purple-700 text-white border-purple-600\"\n              onClick={() => setShowSupercategoryModal(true)}\n              data-testid=\"button-add-supercategory\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"categories.addSuper\")}\n            </Button>\n          </div>\n        </div>\n\n        {/* Search */}\n        <div className=\"flex gap-4 items-center\">\n          <div className=\"relative flex-1 max-w-md\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder={t(\"categories.search\")}\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-categories\"\n            />\n          </div>\n        </div>\n\n        {/* Filter Tabs */}\n        <div className=\"flex gap-1 border-b\">\n          <Button\n            variant={selectedFilter === \"All categories\" ? \"default\" : \"ghost\"}\n            className={`rounded-5 border-b-2 ${\n              selectedFilter === \"All categories\"\n                ? \"border-gray-100\"\n                : \"border-transparent\"\n            }`}\n            onClick={() => setSelectedFilter(\"All categories\")}\n            data-testid=\"tab-all-categories\"\n          >\n            {t(\"categories.all\")}\n          </Button>\n\n          <Button\n            variant={selectedFilter === \"Featured\" ? \"default\" : \"ghost\"}\n            className={`rounded-5 border-b-2 ${\n              selectedFilter === \"Featured\"\n                ? \"border-blue-500\"\n                : \"border-transparent\"\n            }`}\n            onClick={() => setSelectedFilter(\"Featured\")}\n            data-testid=\"tab-featured\"\n          >\n            {t(\"categories.features\")}\n          </Button>\n        </div>\n\n        {/* Category Cards Grid */}\n        {isLoading ? (\n          <div className=\"text-center py-12\" data-testid=\"loading-state\">\n            <div className=\"text-lg text-gray-600\">Loading categories...</div>\n          </div>\n        ) : filteredCategories.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-state\">\n            <div className=\"text-lg text-gray-600 mb-2\">\n              {t(\"categories.notfound\")}\n            </div>\n            {/* <div className=\"text-sm text-gray-500\">\n              {categories.length === 0\n                ? \"Get started by creating your first category\"\n                : \"No categories match your search criteria\"}\n            </div> */}\n            <div className=\"text-sm text-gray-500\">\n              {categories.length === 0\n                ? t(\"categories.createdesc\")\n                : t(\"categories.noMatch\")}\n            </div>\n            {categories.length === 0 && (\n              <Button\n                className=\"mt-4 bg-blue-600 hover:bg-blue-700\"\n                onClick={() => setShowCategoryModal(true)}\n                data-testid=\"button-create-first-category\"\n              >\n                <Plus className=\"h-4 w-4 mr-2\" />\n                {t(\"categories.createfirstcate\")}\n              </Button>\n            )}\n          </div>\n        ) : selectedFilter === \"Featured\" && filteredCategories.length === 0 ? (\n          <div className=\"text-center py-12\" data-testid=\"empty-featured-state\">\n            <div className=\"text-lg text-gray-600 mb-2\">\n              No featured categories available\n            </div>\n            <div className=\"text-sm text-gray-500\">\n              Mark some categories as featured to see them here.\n            </div>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-4\">\n            {filteredCategories.map((category: any) => {\n              // Get category name from translations or fallback\n              const categoryName =\n                category.translations?.[0]?.name ||\n                category.name ||\n                \"Unnamed Category\";\n              const categoryDescription =\n                category.translations?.[0]?.description ||\n                category.description ||\n                \"\";\n              const imageUrl =\n                category.imageUrl ||\n                \"https://media.istockphoto.com/id/1359362604/vector/woman-filling-form.jpg?s=2048x2048&w=is&k=20&c=8x1JF6peIwRG3aIouflvEt23aZH5pO5apsIGwm3Eqlw=\";\n\n              return (\n                <Card\n                  key={category.id}\n                  className=\"hover:shadow-md transition-shadow cursor-pointer\"\n                  data-testid={`card-category-${category.id}`}\n                >\n                  <CardHeader className=\"p-0\">\n                    <div className=\"relative h-32 bg-gray-100 rounded-t-lg overflow-hidden\">\n                      <img\n                        src={imageUrl}\n                        alt={categoryName}\n                        className=\"w-full h-full object-cover\"\n                        onError={(e) => {\n                          console.log(\"Error loading image:\");\n                        }}\n                      />\n                      {category.isFeatured && (\n                        <div className=\"absolute top-2 left-2\">\n                          <span className=\"bg-orange-100 text-orange-800 px-2 py-1 rounded text-xs font-medium\">\n                            {t(\"categories.featured\")}\n                          </span>\n                        </div>\n                      )}\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"p-4\">\n                    <CardTitle className=\"text-sm font-medium mb-2\">\n                      {categoryName}\n                    </CardTitle>\n                    {categoryDescription && (\n                      <p className=\"text-xs text-gray-600 mb-2 line-clamp-2\">\n                        {categoryDescription}\n                      </p>\n                    )}\n                    <div className=\"text-xs text-gray-500 space-y-1\">\n                      <div>{category.productCount || 0} products</div>\n                      <div>{category.subcategoryCount || 0} subcategories</div>\n                      <div className=\"flex items-center gap-1\">\n                        <span\n                          className={`w-2 h-2 rounded-full ${\n                            category.isActive ? \"bg-green-500\" : \"bg-red-500\"\n                          }`}\n                        ></span>\n                        {category.isActive ? \"Active\" : \"Inactive\"}\n                      </div>\n                    </div>\n                    <div className=\"flex items-center mt-3 \">\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"flex items-center gap-1 text-xs p-1 h-auto focus:bg-gray-200 hover:bg-gray-100\"\n                        onClick={() => {\n                          setSelectedCategoryForView(category);\n                          setShowCategoryDetailModal(true);\n                        }}\n                        data-testid={`button-view-category-${category.id}`}\n                      >\n                        <Eye className=\"h-3 w-3 text-gray-400\" />\n                        <span className=\"text-gray-500\"></span>\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"flex items-center gap-1 text-xs p-1 h-auto focus:bg-gray-200 hover:bg-gray-100\"\n                        onClick={() => {\n                          setSelectedCategoryForEdit(category);\n                          setShowEditCategoryModal(true);\n                        }}\n                        data-testid={`button-edit-category-${category.id}`}\n                      >\n                        <Edit className=\"h-3 w-3 text-gray-400\" />\n                        <span className=\"text-gray-500\"></span>\n                      </Button>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"flex items-center gap-1 text-xs p-1 h-auto focus:bg-gray-200 hover:bg-gray-100\"\n                        onClick={() => {\n                          setSelectedCategoryForDelete(category);\n                          setShowDeleteModal(true);\n                        }}\n                        data-testid={`button-delete-category-${category.id}`}\n                      >\n                        <Trash2 className=\"h-3 w-3 text-red-400\" />\n                        <span className=\"text-red-500\"></span>\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n\n        {/* Structure of Categories Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>{t(\"categories.structure\")}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>{t(\"categories.name\")}</TableHead>\n                  <TableHead>{t(\"categories.description\")}</TableHead>\n                  <TableHead>{t(\"categories.products\")}</TableHead>\n                  <TableHead>{t(\"categories.subcategories\")}</TableHead>\n                  <TableHead>{t(\"categories.features\")}</TableHead>\n                  <TableHead className=\"w-[100px]\">\n                    {t(\"categories.actions\")}\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoadingSupercategories ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      Loading supercategories...\n                    </TableCell>\n                  </TableRow>\n                ) : supercategories.length === 0 ? (\n                  <TableRow>\n                    <TableCell colSpan={6} className=\"text-center py-8\">\n                      <div className=\"text-lg text-gray-600 mb-2\">\n                        {t(\"categories.noSuperFound\")}\n                      </div>\n                      <div className=\"text-sm text-gray-500\">\n                        {t(\"categories.createFirst\")}\n                      </div>\n                      <Button\n                        className=\"mt-4 bg-purple-600 hover:bg-purple-700\"\n                        onClick={() => setShowSupercategoryModal(true)}\n                        data-testid=\"button-create-first-supercategory\"\n                      >\n                        <Plus className=\"h-4 w-4 mr-2\" />\n                        {t(\"categories.createBtn\")}\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  supercategories.map((supercategory: any) => {\n                    const name =\n                      supercategory.translations?.[0]?.name ||\n                      \"Unnamed Supercategory\";\n                    const description =\n                      supercategory.translations?.[0]?.description || \"\";\n                    const childrenCount = supercategory.children?.length || 0;\n                    const featuresCount = supercategory.features?.length || 0;\n                    const enabledFeatures =\n                      supercategory.metadata?.enabledFeatures || [];\n\n                    return (\n                      <TableRow\n                        key={supercategory.id}\n                        data-testid={`row-supercategory-${supercategory.id}`}\n                      >\n                        <TableCell className=\"font-medium\">{name}</TableCell>\n                        <TableCell className=\"max-w-[200px]\">\n                          <span\n                            className=\"text-sm text-gray-600\"\n                            title={description}\n                          >\n                            {description || \"No description\"}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"max-w-[300px]\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            <span className=\"inline-block px-2 py-1 text-xs bg-blue-100 text-blue-800 rounded\">\n                              0 products\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"max-w-[250px]\">\n                          <div className=\"flex flex-wrap gap-1\">\n                            {childrenCount > 0 ? (\n                              supercategory.children\n                                .slice(0, 2)\n                                .map((child: any, index: number) => (\n                                  <span\n                                    key={index}\n                                    className=\"inline-block px-2 py-1 text-xs bg-green-100 text-green-800 rounded\"\n                                  >\n                                    {child.translations?.[0]?.name || \"Unnamed\"}\n                                  </span>\n                                ))\n                            ) : (\n                              <span className=\"inline-block px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\">\n                                No subcategories\n                              </span>\n                            )}\n                            {childrenCount > 2 && (\n                              <span className=\"inline-block px-2 py-1 text-xs bg-gray-100 text-gray-600 rounded\">\n                                +{childrenCount - 2} more\n                              </span>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-600 max-w-[150px]\">\n                          {enabledFeatures.length > 0 ? (\n                            <div className=\"flex flex-wrap gap-1\">\n                              {enabledFeatures.map(\n                                (feature: string, idx: number) => (\n                                  <span\n                                    key={idx}\n                                    className=\"px-2 py-0.5 rounded-full bg-gray-200 text-gray-700 text-xs\"\n                                    title={feature}\n                                  >\n                                    {feature}\n                                  </span>\n                                ),\n                              )}\n                            </div>\n                          ) : (\n                            <span>No features</span>\n                          )}\n                        </TableCell>\n\n                        {/* <TableCell className=\"text-sm text-gray-600 max-w-[150px]\">\n                        <span title={enabledFeatures.join(\", \")}>\n                          {enabledFeatures.length > 0 \n                            ? `${enabledFeatures.length} features enabled`\n                            : \"No features\"}\n                        </span>\n                      </TableCell> */}\n                        <TableCell>\n                          <div className=\"flex items-center justify-center gap-1\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 w-8 p-0 hover:bg-gray-100\"\n                              onClick={() => {\n                                setSelectedSupercategoryForEdit(supercategory);\n                                setShowEditSupercategoryModal(true);\n                              }}\n                              data-testid={`button-edit-supercategory-${supercategory.id}`}\n                            >\n                              <Edit className=\"h-4 w-4 text-gray-400\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 w-8 p-0 hover:bg-gray-100\"\n                              onClick={() => {\n                                setSelectedCategoryForDelete(supercategory);\n                                setShowDeleteModal(true);\n                              }}\n                              data-testid={`button-delete-supercategory-${supercategory.id}`}\n                            >\n                              <Trash2 className=\"h-4 w-4 text-gray-400\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              className=\"h-8 w-8 p-0 hover:bg-gray-100\"\n                              onClick={() => {\n                                setSelectedCategoryForView(supercategory);\n                                setShowCategoryDetailModal(true);\n                              }}\n                              data-testid={`button-view-supercategory-${supercategory.id}`}\n                            >\n                              <ChevronDown className=\"h-4 w-4 text-gray-400 rotate-[-90deg]\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })\n                )}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        {/* Modals */}\n        <AddCategoryModal\n          isOpen={showCategoryModal}\n          onClose={() => setShowCategoryModal(false)}\n          onSubmit={handleCategorySubmit}\n        />\n        <AddSupercategoryModal\n          isOpen={showSupercategoryModal}\n          onClose={() => setShowSupercategoryModal(false)}\n          onSubmit={handleSupercategorySubmit}\n        />\n        <AddSupercategoryModal\n          isOpen={showEditSupercategoryModal}\n          onClose={() => {\n            setShowEditSupercategoryModal(false);\n            setSelectedSupercategoryForEdit(null);\n          }}\n          onSubmit={handleSupercategorySubmit}\n          initialData={selectedSupercategoryForEdit}\n          isEdit={true}\n        />\n\n        {/* Category Detail Modal */}\n        {selectedCategoryForView && (\n          <CategoryDetailModal\n            isOpen={showCategoryDetailModal}\n            onClose={() => {\n              setShowCategoryDetailModal(false);\n              setSelectedCategoryForView(null);\n            }}\n            category={selectedCategoryForView}\n          />\n        )}\n\n        {/* Edit Category Modal */}\n        {selectedCategoryForEdit && (\n          <AddCategoryModal\n            isOpen={showEditCategoryModal}\n            onClose={() => {\n              setShowEditCategoryModal(false);\n              setSelectedCategoryForEdit(null);\n            }}\n            onSubmit={handleCategorySubmit}\n            initialData={selectedCategoryForEdit}\n            isEditMode={true}\n          />\n        )}\n\n        {/* Delete Confirmation Modal */}\n        {selectedCategoryForDelete && (\n          <DeleteCategoryModal\n            isOpen={showDeleteModal}\n            onClose={() => {\n              setShowDeleteModal(false);\n              setSelectedCategoryForDelete(null);\n            }}\n            category={selectedCategoryForDelete}\n            onConfirm={() => {\n              // Use appropriate delete handler based on category type\n              if (selectedCategoryForDelete.type === \"super\") {\n                handleSupercategoryDelete(selectedCategoryForDelete.id);\n                console.log(\n                  \"Delete supercategory:\",\n                  selectedCategoryForDelete.id,\n                );\n              } else {\n                handleCategoryDelete(selectedCategoryForDelete.id);\n                console.log(\"Delete category:\", selectedCategoryForDelete.id);\n              }\n            }}\n          />\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n\n// Category Detail Modal Component\nfunction CategoryDetailModal({\n  isOpen,\n  onClose,\n  category,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  category: any;\n}) {\n  if (!category) return null;\n\n  // Get category data with fallbacks\n  const { t } = useTranslation();\n  const categoryName =\n    category.translations?.[0]?.name || category.name || \"Unnamed Category\";\n  const categoryDescription =\n    category.translations?.[0]?.description ||\n    category.description ||\n    \"No description available\";\n  const imageUrl = category.imageUrl || \"/api/placeholder/800/400\";\n  // Sample subcategories data\n  const subcategories = [\n    { name: \"Téléphones\", count: 68 },\n    { name: \"Ordinateurs\", count: 45 },\n    { name: \"Accessoires\", count: 43 },\n  ];\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent\n        className=\"max-w-4xl max-h-[90vh] overflow-y-auto\"\n        aria-describedby=\"category-detail-description\"\n      >\n        <DialogHeader className=\"pb-0\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <h2 className=\"text-xl font-semibold text-gray-900\">\n                {categoryName}\n              </h2>\n              <div className=\"text-sm text-gray-500\">\n                Type: {category.type || \"Standard\"}\n              </div>\n              {category.isFeatured && (\n                <div className=\"bg-orange-100 text-orange-800 px-2 py-1 rounded text-xs font-medium\">\n                  {t(\"categories.featured\")}\n                </div>\n              )}\n            </div>\n            {/* <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={onClose}\n              className=\"h-6 w-6 p-0\"\n            >\n              <X className=\"h-4 w-4\" />\n            </Button> */}\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Category Header Image */}\n          <div className=\"relative h-48 bg-gray-100 rounded-lg overflow-hidden\">\n            <img\n              src={imageUrl}\n              alt={categoryName}\n              className=\"w-full h-full object-cover\"\n              onError={(e) => {\n                const target = e.target as HTMLImageElement;\n                target.src = \"/api/placeholder/800/400\";\n              }}\n            />\n            <div className=\"absolute inset-0 bg-black bg-opacity-40 flex items-center justify-center\">\n              <div className=\"text-center text-white\">\n                <h3 className=\"text-2xl font-bold\">{categoryName}</h3>\n                <p className=\"text-lg opacity-90\">{categoryDescription}</p>\n              </div>\n            </div>\n          </div>\n\n          {/* Statistics */}\n          <div className=\"grid grid-cols-3 gap-6\">\n            <div className=\"text-center p-4 border rounded-lg\">\n              <div className=\"text-3xl font-bold text-blue-600 mb-2\">\n                {category.productCount || 0}\n              </div>\n              <div className=\"text-sm text-gray-600 flex items-center justify-center gap-1\">\n                <div className=\"w-4 h-4 bg-blue-100 rounded flex items-center justify-center\">\n                  <div className=\"w-2 h-2 bg-blue-500 rounded\"></div>\n                </div>\n                Products\n              </div>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <div className=\"text-3xl font-bold text-green-600 mb-2\">\n                {category.subcategoryCount || 0}\n              </div>\n              <div className=\"text-sm text-gray-600 flex items-center justify-center gap-1\">\n                <div className=\"w-4 h-4 bg-green-100 rounded flex items-center justify-center\">\n                  <div className=\"w-2 h-2 bg-green-500 rounded\"></div>\n                </div>\n                Subcategories\n              </div>\n            </div>\n            <div className=\"text-center p-4 border rounded-lg\">\n              <div className=\"text-sm font-medium text-purple-600 mb-2\">\n                Status\n              </div>\n              <div className=\"text-sm text-gray-600 flex items-center justify-center gap-1\">\n                <div\n                  className={`w-4 h-4 rounded flex items-center justify-center ${\n                    category.isActive ? \"bg-green-100\" : \"bg-red-100\"\n                  }`}\n                >\n                  <div\n                    className={`w-2 h-2 rounded ${\n                      category.isActive ? \"bg-green-500\" : \"bg-red-500\"\n                    }`}\n                  ></div>\n                </div>\n                {category.isActive ? \"Active\" : \"Inactive\"}\n              </div>\n            </div>\n          </div>\n\n          {/* Features */}\n          {category.features && category.features.length > 0 && (\n            <div>\n              <h3 className=\"text-lg font-medium mb-4\">Category Features</h3>\n              <div className=\"grid grid-cols-2 gap-4\">\n                {category.features.map((feature: any, index: number) => (\n                  <Card key={index} className=\"p-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"font-medium\">{feature.name}</span>\n                      <span className=\"text-xs text-gray-500\">\n                        {feature.type}\n                      </span>\n                    </div>\n                    {feature.description && (\n                      <p className=\"text-sm text-gray-600 mt-1\">\n                        {feature.description}\n                      </p>\n                    )}\n                  </Card>\n                ))}\n              </div>\n            </div>\n          )}\n\n          {/* Category Information */}\n          <div>\n            <h3 className=\"text-lg font-medium mb-4\">Category Information</h3>\n            <div className=\"grid grid-cols-2 gap-6\">\n              <div className=\"space-y-4\">\n                <div>\n                  <span className=\"text-sm text-gray-600\">Type:</span>\n                  <span className=\"ml-2 text-sm font-medium\">\n                    {category.type || \"standard\"}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-sm text-gray-600\">Status:</span>\n                  <span className=\"ml-2\">\n                    <span\n                      className={`px-2 py-1 rounded text-xs font-medium ${\n                        category.isActive\n                          ? \"bg-green-100 text-green-800\"\n                          : \"bg-red-100 text-red-800\"\n                      }`}\n                    >\n                      {category.isActive ? \"Active\" : \"Inactive\"}\n                    </span>\n                  </span>\n                </div>\n              </div>\n              <div className=\"space-y-4\">\n                <div>\n                  <span className=\"text-sm text-gray-600\">Slug:</span>\n                  <span className=\"ml-2 text-sm font-medium\">\n                    {category.slug || \"No slug\"}\n                  </span>\n                </div>\n                <div>\n                  <span className=\"text-sm text-gray-600\">Featured:</span>\n                  <span className=\"ml-2\">\n                    <span\n                      className={`px-2 py-1 rounded text-xs font-medium ${\n                        category.isFeatured\n                          ? \"bg-orange-100 text-orange-800\"\n                          : \"bg-gray-100 text-gray-800\"\n                      }`}\n                    >\n                      {category.isFeatured ? \"Yes\" : \"No\"}\n                    </span>\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Description */}\n          <div>\n            <h4 className=\"font-medium mb-2\">Description:</h4>\n            <p className=\"text-sm text-gray-600\">{categoryDescription}</p>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\n// Delete Category Confirmation Modal Component\nfunction DeleteCategoryModal({\n  isOpen,\n  onClose,\n  category,\n  onConfirm,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  category: any;\n  onConfirm: () => void;\n}) {\n  if (!category) return null;\n\n  const categoryName =\n    category.translations?.[0]?.name || category.name || \"Unnamed Category\";\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-md\">\n        <DialogHeader>\n          <div className=\"flex items-center gap-3\">\n            <div className=\"w-10 h-10 bg-red-100 rounded-full flex items-center justify-center\">\n              <Trash2 className=\"h-5 w-5 text-red-600\" />\n            </div>\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900\">\n                Delete Category\n              </h2>\n              <p className=\"text-sm text-gray-500\">\n                This action cannot be undone\n              </p>\n            </div>\n          </div>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          <p className=\"text-sm text-gray-700\">\n            Are you sure you want to delete \"<strong>{categoryName}</strong>\"?\n            This will permanently remove the category and all its associated\n            data.\n          </p>\n\n          <div className=\"bg-amber-50 border border-amber-200 rounded-lg p-3\">\n            <div className=\"flex items-start gap-2\">\n              <div className=\"w-4 h-4 bg-amber-400 rounded-full flex-shrink-0 mt-0.5\" />\n              <div className=\"text-xs text-amber-800\">\n                <strong>Warning:</strong> Deleting this category may affect\n                products and subcategories associated with it.\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"flex justify-end gap-3 pt-4\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            data-testid=\"button-cancel-delete\"\n          >\n            Cancel\n          </Button>\n          <Button\n            type=\"button\"\n            className=\"bg-red-600 hover:bg-red-700 text-white\"\n            onClick={onConfirm}\n            data-testid=\"button-confirm-delete\"\n          >\n            Delete Category\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":39820},"client/src/pages/admin/settings/store-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuSeparator,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport {\n  Store,\n  Building2,\n  MoreVertical,\n  CheckCircle,\n  X,\n  FileText,\n  Ban,\n  Pause,\n  AlertTriangle,\n  MessageCircle,\n  Users,\n  ShoppingBag,\n  TrendingUp,\n  Plus,\n  Eye,\n  Send,\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertStoreSchema } from \"@shared/schema\";\nimport type { Store as StoreType } from \"@shared/schema\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\n\n// Enhanced store data type for the UI\ninterface StoreWithDetails extends StoreType {\n  ownerName?: string;\n  ownerEmail?: string;\n  categoryName?: string;\n}\n\nconst createStoreSchema = z.object({\n  name: z.string().min(1, \"Store name is required\"),\n  ownerEmail: z.string().email(\"Please enter a valid email address\"),\n  categoryId: z.string().optional(),\n  description: z.string().optional(),\n});\n\ntype CreateStoreFormData = z.infer<typeof createStoreSchema>;\n\n// Send message form schema\nconst sendMessageSchema = z.object({\n  messageType: z.string().min(1, \"Message type is required\"),\n  messageContent: z.string().min(1, \"Message content is required\"),\n});\n\ntype SendMessageFormData = z.infer<typeof sendMessageSchema>;\n\nexport default function StoreManagement() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [selectedStore, setSelectedStore] = useState<StoreWithDetails | null>(\n    null,\n  );\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [sendMessageStore, setSendMessageStore] =\n    useState<StoreWithDetails | null>(null);\n\n  // Fetch store statistics\n  const { data: storeStats } = useQuery<{\n    totalStores: number;\n    activeStores: number;\n    onHoldStores: number;\n    totalRevenue: string;\n  }>({\n    queryKey: [\"/api/admin/stores/stats\"],\n  });\n\n  // Fetch all stores\n  const { data: stores = [], isLoading } = useQuery<StoreWithDetails[]>({\n    queryKey: [\"/api/admin/stores\"],\n  });\n\n  // Fetch categories for the add store form\n  const { data: categories = [] } = useQuery<\n    Array<{ id: string; name: string }>\n  >({\n    queryKey: [\"/api/categories\"],\n  });\n\n  // Create store mutation\n  const createStoreMutation = useMutation({\n    mutationFn: async (data: CreateStoreFormData) => {\n      const response = await fetch(\"/api/admin/stores\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || \"Failed to create store\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stores\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stores/stats\"] });\n      toast({\n        title: \"Store created successfully\",\n        description: \"The new store has been added to the system.\",\n      });\n      setShowAddModal(false);\n      form.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to create store\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Update store mutation\n  const updateStoreMutation = useMutation({\n    mutationFn: async ({ id, updates }: { id: string; updates: any }) => {\n      const response = await fetch(`/api/admin/stores/${id}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(updates),\n      });\n      if (!response.ok) throw new Error(\"Failed to update store\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stores\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stores/stats\"] });\n      toast({\n        title: \"Store updated successfully\",\n        description: \"The store status has been updated.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Failed to update store\",\n        description: \"Please try again later.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const form = useForm<CreateStoreFormData>({\n    resolver: zodResolver(createStoreSchema),\n    defaultValues: {\n      name: \"\",\n      ownerEmail: \"\",\n      categoryId: \"\",\n      description: \"\",\n    },\n  });\n\n  // Form for sending messages\n  const messageForm = useForm<SendMessageFormData>({\n    resolver: zodResolver(sendMessageSchema),\n    defaultValues: {\n      messageType: \"\",\n      messageContent: \"\",\n    },\n  });\n\n  const handleStoreAction = (store: StoreWithDetails, action: string) => {\n    switch (action) {\n      case \"validate\":\n        updateStoreMutation.mutate({\n          id: store.id,\n          updates: { status: \"active\" },\n        });\n        break;\n      case \"dismiss\":\n        updateStoreMutation.mutate({\n          id: store.id,\n          updates: { status: \"dismissed\" },\n        });\n        break;\n      case \"suspend_noncompliance\":\n        updateStoreMutation.mutate({\n          id: store.id,\n          updates: { \n            status: \"suspended_noncompliance\",\n            suspensionReason: \"Your store has been suspended due to non-compliance with our terms and conditions. Please review our policies and contact support for clarification.\"\n          },\n        });\n        break;\n      case \"suspend_documents\":\n        updateStoreMutation.mutate({\n          id: store.id,\n          updates: { \n            status: \"suspended_documents\",\n            suspensionReason: \"Your store has been suspended because required documents are missing or invalid. Please provide the requested documentation to reactivate your store.\"\n          },\n        });\n        break;\n      case \"suspend_fraud\":\n        updateStoreMutation.mutate({\n          id: store.id,\n          updates: { \n            status: \"suspended_fraud\",\n            suspensionReason: \"Your store has been suspended due to suspected fraudulent activity. Please contact our support team immediately to resolve this issue.\"\n          },\n        });\n        break;\n      case \"request_documents\":\n        updateStoreMutation.mutate({\n          id: store.id,\n          updates: {\n            status: \"documents_requested\",\n            messagesSent: (store.messagesSent || 0) + 1,\n          },\n        });\n        break;\n      case \"send_message\":\n        setSendMessageStore(store);\n        messageForm.reset();\n        break;\n    }\n  };\n\n  // Send message mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: async (data: SendMessageFormData) => {\n      if (!sendMessageStore) throw new Error(\"No store selected\");\n\n      const response = await fetch(\n        `/api/admin/stores/${sendMessageStore.id}/message`,\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          credentials: \"include\",\n          body: JSON.stringify(data),\n        },\n      );\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || \"Failed to send message\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/stores\"] });\n      toast({\n        title: \"Message sent successfully\",\n        description: `Message has been sent to ${sendMessageStore?.name}.`,\n      });\n      setSendMessageStore(null);\n      messageForm.reset();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Failed to send message\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSendMessage = async (data: SendMessageFormData) => {\n    sendMessageMutation.mutate(data);\n  };\n\n  // Dummy messages for demonstration (will be replaced with DB fetch later)\n  const getDummyLastMessage = (store: StoreWithDetails) => {\n    const dummyMessages = [\n      {\n        type: \"KYC document request\",\n        content:\n          \"Please provide your business registration documents by end of week.\",\n        time: \"2 days ago\",\n      },\n      {\n        type: \"Payment reminder\",\n        content: \"Your monthly subscription payment is due in 3 days.\",\n        time: \"5 hours ago\",\n      },\n      {\n        type: \"Suspension Notification\",\n        content:\n          \"Your store has been temporarily suspended due to policy violations.\",\n        time: \"1 week ago\",\n      },\n      {\n        type: \"Reactivation Notification\",\n        content: \"Your store has been successfully reactivated. Welcome back!\",\n        time: \"3 days ago\",\n      },\n      {\n        type: \"Extension of time limit\",\n        content: \"We've extended your document submission deadline by 7 days.\",\n        time: \"1 day ago\",\n      },\n      {\n        type: \"Personalized message\",\n        content: \"Great job on your sales performance this month! Keep it up.\",\n        time: \"6 hours ago\",\n      },\n    ];\n\n    const messageIndex =\n      store.messagesSent > 0\n        ? (store.messagesSent - 1) % dummyMessages.length\n        : 0;\n    return store.messagesSent > 0 ? dummyMessages[messageIndex] : null;\n  };\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\">\n            Active\n          </span>\n        );\n      case \"pending_validation\":\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-300\">\n            En attente de validation\n          </span>\n        );\n      case \"dismissed\":\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\">\n            Dismissed\n          </span>\n        );\n      case \"suspended_noncompliance\":\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\">\n            Suspended\n          </span>\n        );\n      case \"suspended_documents\":\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-300\">\n            Missing Docs\n          </span>\n        );\n      case \"suspended_fraud\":\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\">\n            Fraud\n          </span>\n        );\n      case \"documents_requested\":\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\">\n            Docs Requested\n          </span>\n        );\n      default:\n        return (\n          <span className=\"px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\">\n            {status}\n          </span>\n        );\n    }\n  };\n\n  const onSubmit = (data: CreateStoreFormData) => {\n    createStoreMutation.mutate(data);\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex items-center justify-center h-64\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <DashboardLayout\n    >\n      <div className=\"space-y-6\">\n        <div className=\"flex justify-between items-center\">\n          <div>\n          <span>\n            <h1 className=\"text-2xl font-semibold text-gray-900 flex items-center\">\n              <Store className=\"h-6 w-6 mr-2\" />\n              {t(\"store.heading\")}\n              </h1>\n            <p className=\"text-gray-600 mt-1\">{t(\"store.subheading\")}</p>\n          </span>\n          </div>\n          <Button\n            onClick={() => setShowAddModal(true)}\n            className=\"bg-purple-600 hover:bg-purple-700\"\n            data-testid=\"button-add-store\"\n          >\n            <Plus className=\"h-4 w-4 mr-2\" />\n            {t(\"store.actions.add\")}\n          </Button>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {t(\"store.stats.total\")}\n              </CardTitle>\n              <Store className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold\"\n                data-testid=\"stat-total-stores\"\n              >\n                {storeStats?.totalStores || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                {t(\"store.stats.active\")}\n              </CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold text-green-600\"\n                data-testid=\"stat-active-stores\"\n              >\n                {storeStats?.activeStores || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">{t(\"store.stats.hold\")}</CardTitle>\n              <Pause className=\"h-4 w-4 text-yellow-600\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold text-yellow-600\"\n                data-testid=\"stat-onhold-stores\"\n              >\n                {storeStats?.onHoldStores || 0}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">{t(\"store.stats.revenue\")}</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold text-purple-600\"\n                data-testid=\"stat-total-revenue\"\n              >\n                {parseFloat(storeStats?.totalRevenue || \"0\").toLocaleString()}{\" \"}\n                DA\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Stores Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>{t(\"store.list.heading\")}</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Table>\n              <TableHeader>\n                <TableRow>\n                  <TableHead>{t(\"store.list.code\")}</TableHead>\n                  <TableHead>{t(\"store.list.name\")}</TableHead>\n                  <TableHead>{t(\"store.list.status\")}</TableHead>\n                  <TableHead>{t(\"store.list.creation\")}</TableHead>\n                  <TableHead>{t(\"store.list.subscription\")}</TableHead>\n                  <TableHead>{t(\"store.list.endsubscription\")}</TableHead>\n                  <TableHead>{t(\"store.list.messages\")}</TableHead>\n                  <TableHead>{t(\"store.list.lastaction\")}</TableHead>\n                  <TableHead className=\"w-[50px]\">{t(\"store.list.Action\")}</TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {stores.map((store) => (\n                  <TableRow\n                    key={store.id}\n                    data-testid={`row-store-${store.id}`}\n                  >\n                    <TableCell\n                      className=\"font-medium\"\n                      data-testid={`text-code-${store.id}`}\n                    >\n                      {store.codeStore}\n                    </TableCell>\n                    <TableCell>\n                      <div\n                        className=\"cursor-pointer hover:text-purple-600\"\n                        onClick={() => setSelectedStore(store)}\n                        data-testid={`button-store-details-${store.id}`}\n                      >\n                        <div className=\"font-medium\">{store.name}</div>\n                        <div className=\"text-sm text-gray-500\">\n                          {store.ownerName}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell data-testid={`status-${store.id}`}>\n                      {getStatusBadge(store.status)}\n                    </TableCell>\n                    <TableCell data-testid={`date-created-${store.id}`}>\n                      {new Date(store.createdAt).toLocaleDateString()}\n                    </TableCell>\n                    <TableCell>Active</TableCell>\n                    <TableCell data-testid={`subscription-end-${store.id}`}>\n                      {store.subscriptionEnd\n                        ? new Date(store.subscriptionEnd).toLocaleDateString()\n                        : \"-\"}\n                    </TableCell>\n                    <TableCell\n                      data-testid={`messages-sent-${store.id}`}\n                      className=\"max-w-[200px]\"\n                    >\n                      {(() => {\n                        const lastMessage = getDummyLastMessage(store);\n                        if (!lastMessage) {\n                          return (\n                            <span className=\"text-gray-400 text-sm\">\n                              No messages sent\n                            </span>\n                          );\n                        }\n                        return (\n                          <div className=\"space-y-1\">\n                            <div className=\"text-xs font-medium text-purple-600\">\n                              {lastMessage.type}\n                            </div>\n                            <div\n                              className=\"text-xs text-gray-600 dark:text-gray-400 truncate\"\n                              title={lastMessage.content}\n                            >\n                              {lastMessage.content}\n                            </div>\n                            <div className=\"text-xs text-gray-400\">\n                              {lastMessage.time}\n                            </div>\n                          </div>\n                        );\n                      })()}\n                    </TableCell>\n                    <TableCell data-testid={`last-action-${store.id}`}>\n                      {store.lastActionAt\n                        ? new Date(store.lastActionAt).toLocaleDateString()\n                        : \"-\"}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex items-center gap-2\">\n                        {/* Details button */}\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={() => setSelectedStore(store)}\n                          data-testid={`action-details-${store.id}`}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2 text-blue-600\" />\n                          {t(\"store.table.details\")}\n                        </Button>\n\n                        {/* Actions dropdown */}\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              className=\"flex items-center gap-1\"\n                            >\n                              {t(\"store.table.actions\")}\n                              <MoreVertical className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            {store.status === \"pending_validation\" && (\n                              <>\n                                <DropdownMenuItem\n                                  onClick={() =>\n                                    handleStoreAction(store, \"validate\")\n                                  }\n                                >\n                                  <CheckCircle className=\"h-4 w-4 mr-2 text-green-600\" />\n                                  Validate the store\n                                </DropdownMenuItem>\n                                <DropdownMenuItem\n                                  onClick={() =>\n                                    handleStoreAction(store, \"dismiss\")\n                                  }\n                                >\n                                  <X className=\"h-4 w-4 mr-2 text-red-600\" />\n                                  Dismiss\n                                </DropdownMenuItem>\n                              </>\n                            )}\n                            <DropdownMenuItem\n                              onClick={() =>\n                                handleStoreAction(store, \"request_documents\")\n                              }\n                            >\n                              <FileText className=\"h-4 w-4 mr-2 text-blue-600\" />\n                              Request documents\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() =>\n                                handleStoreAction(\n                                  store,\n                                  \"suspend_noncompliance\",\n                                )\n                              }\n                            >\n                              <Ban className=\"h-4 w-4 mr-2 text-orange-600\" />\n                              Suspend for non-compliance\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() =>\n                                handleStoreAction(store, \"suspend_documents\")\n                              }\n                            >\n                              <Pause className=\"h-4 w-4 mr-2 text-purple-600\" />\n                              Suspend for missing documents\n                            </DropdownMenuItem>\n                            <DropdownMenuItem\n                              onClick={() =>\n                                handleStoreAction(store, \"suspend_fraud\")\n                              }\n                            >\n                              <AlertTriangle className=\"h-4 w-4 mr-2 text-red-600\" />\n                              Suspended for fraud\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n\n                      {/* Send Message below row */}\n                      <div className=\"mt-2\">\n                        <Button\n                          variant=\"secondary\"\n                          size=\"sm\"\n                          onClick={() =>\n                            handleStoreAction(store, \"send_message\")\n                          }\n                          data-testid={`action-send-message-${store.id}`}\n                        >\n                          <MessageCircle className=\"h-4 w-4 mr-2 text-blue-600\" />\n                          {t(\"store.table.sendMessage\")}\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        {/* Store Details Modal */}\n        {selectedStore && (\n          <Dialog\n            open={!!selectedStore}\n            onOpenChange={() => setSelectedStore(null)}\n          >\n            <DialogContent\n              className=\"max-w-md\"\n              data-testid=\"modal-store-details\"\n            >\n              <DialogHeader>\n                <DialogTitle>Store Details</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div>\n                  <h3\n                    className=\"font-semibold text-lg\"\n                    data-testid=\"text-store-name\"\n                  >\n                    {selectedStore.name}\n                  </h3>\n                  <div className=\"mt-1\" data-testid=\"text-store-status\">\n                    {getStatusBadge(selectedStore.status)}\n                  </div>\n                </div>\n\n                <div className=\"space-y-2\">\n                  <div>\n                    <span className=\"font-medium\">Owner:</span>\n                    <span className=\"ml-2\" data-testid=\"text-owner-name\">\n                      {selectedStore.ownerName}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Email:</span>\n                    <span className=\"ml-2\" data-testid=\"text-owner-email\">\n                      {selectedStore.ownerEmail}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"font-medium\">Category:</span>\n                    <span className=\"ml-2\" data-testid=\"text-category\">\n                      {selectedStore.categoryName || \"Uncategorized\"}\n                    </span>\n                  </div>\n                  {selectedStore.description && (\n                    <div>\n                      <span className=\"font-medium\">Description:</span>\n                      <p\n                        className=\"mt-1 text-sm text-gray-600 dark:text-gray-400\"\n                        data-testid=\"text-description\"\n                      >\n                        {selectedStore.description}\n                      </p>\n                    </div>\n                  )}\n                </div>\n\n                <div className=\"flex justify-between pt-4 border-t\">\n                  <div className=\"text-center\">\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-product-count\"\n                    >\n                      {selectedStore.productCount || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Products</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-order-count\"\n                    >\n                      {selectedStore.orderCount || 0}\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Orders</div>\n                  </div>\n                  <div className=\"text-center\">\n                    <div\n                      className=\"text-2xl font-bold\"\n                      data-testid=\"text-revenue\"\n                    >\n                      {parseFloat(\n                        selectedStore.totalRevenue || \"0\",\n                      ).toLocaleString()}{\" \"}\n                      DA\n                    </div>\n                    <div className=\"text-sm text-gray-500\">Revenue</div>\n                  </div>\n                </div>\n              </div>\n            </DialogContent>\n          </Dialog>\n        )}\n\n        {/* Add Store Modal */}\n        <Dialog open={showAddModal} onOpenChange={setShowAddModal}>\n          <DialogContent className=\"max-w-md\" data-testid=\"modal-add-store\">\n            <DialogHeader>\n              <DialogTitle>Add a new store</DialogTitle>\n            </DialogHeader>\n            <Form {...form}>\n              <form\n                onSubmit={form.handleSubmit(onSubmit)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={form.control}\n                  name=\"name\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Store Name</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-store-name\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"ownerEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Owner's email</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"email\"\n                          {...field}\n                          data-testid=\"input-owner-email\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"categoryId\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Category</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-category\">\n                            <SelectValue placeholder=\"Select a category\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          {categories.map((category) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              {category.name}\n                            </SelectItem>\n                          ))}\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description (optional)</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          data-testid=\"textarea-description\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setShowAddModal(false)}\n                    data-testid=\"button-cancel-add-store\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={createStoreMutation.isPending}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid=\"button-create-store\"\n                  >\n                    {createStoreMutation.isPending\n                      ? \"Creating...\"\n                      : \"Create the store\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n\n        {/* Send Message Modal */}\n        <Dialog\n          open={!!sendMessageStore}\n          onOpenChange={() => setSendMessageStore(null)}\n        >\n          <DialogContent className=\"max-w-md\" data-testid=\"modal-send-message\">\n            <DialogHeader>\n              <DialogTitle>\n                Send a message to {sendMessageStore?.name}\n              </DialogTitle>\n            </DialogHeader>\n            <Form {...messageForm}>\n              <form\n                onSubmit={messageForm.handleSubmit(onSendMessage)}\n                className=\"space-y-4\"\n              >\n                <FormField\n                  control={messageForm.control}\n                  name=\"messageType\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message type</FormLabel>\n                      <Select\n                        onValueChange={field.onChange}\n                        defaultValue={field.value}\n                      >\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-message-type\">\n                            <SelectValue placeholder=\"Choose a message type...\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"kyc_document_request\">\n                            <div className=\"flex items-center\">\n                              <FileText className=\"h-4 w-4 mr-2\" />\n                              KYC document request\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"payment_reminder\">\n                            <div className=\"flex items-center\">\n                              <span className=\"h-4 w-4 mr-2 flex items-center justify-center text-sm\">\n                                $\n                              </span>\n                              Payment reminder\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"suspension_notification\">\n                            <div className=\"flex items-center\">\n                              <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                              Suspension Notification\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"reactivation_notification\">\n                            <div className=\"flex items-center\">\n                              <span className=\"h-4 w-4 mr-2 flex items-center justify-center\">\n                                <div className=\"w-3 h-3 rounded-full border-2 border-current\"></div>\n                              </span>\n                              Reactivation Notification\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"extension_time_limit\">\n                            <div className=\"flex items-center\">\n                              <span className=\"h-4 w-4 mr-2 flex items-center justify-center text-sm\">\n                                ⏰\n                              </span>\n                              Extension of time limit\n                            </div>\n                          </SelectItem>\n                          <SelectItem value=\"personalized_message\">\n                            <div className=\"flex items-center\">\n                              <MessageCircle className=\"h-4 w-4 mr-2\" />\n                              Personalized message\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={messageForm.control}\n                  name=\"messageContent\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Message content</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Type your message here...\"\n                          className=\"min-h-[120px]\"\n                          data-testid=\"textarea-message-content\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"text-sm text-gray-500 mt-2\">\n                  <strong>Tip:</strong> Personalize the message by replacing the\n                  items in [brackets] with the specific information.\n                </div>\n\n                <div className=\"flex justify-end gap-2 pt-4\">\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setSendMessageStore(null)}\n                    data-testid=\"button-cancel-message\"\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={sendMessageMutation.isPending}\n                    className=\"bg-purple-600 hover:bg-purple-700\"\n                    data-testid=\"button-send-message\"\n                  >\n                    <Send className=\"h-4 w-4 mr-2\" />\n                    {sendMessageMutation.isPending ? \"Sending...\" : \"Send\"}\n                  </Button>\n                </div>\n              </form>\n            </Form>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":38551},"client/src/pages/admin/users/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { type User } from \"@shared/schema\";\nimport { exportToExcel, formatDate, formatBoolean } from \"@/utils/excel-export\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Users,\n  UserCheck,\n  Store,\n  Clock,\n  Search,\n  Plus,\n  Settings,\n  X,\n  Download,\n} from \"lucide-react\";\n\n// Form schema for creating users\nconst createUserSchema = z.object({\n  firstName: z.string().min(1, \"First name is required\"),\n  lastName: z.string().min(1, \"Last name is required\"),\n  email: z.string().email(\"Invalid email address\"),\n  username: z.string().min(3, \"Username must be at least 3 characters\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  role: z.enum([\"client\", \"seller\", \"admin\"]),\n  isActive: z.boolean().default(true),\n});\n\nexport default function UserManagement() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isAddUserModalOpen, setIsAddUserModalOpen] = useState(false);\n  const [userStatus, setUserStatus] = useState(\"\");\n  const [userRole, setUserRole] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [sellerStatusFilter, setSellerStatusFilter] = useState(\"all\");\n\n  // Form for adding new users\n  const form = useForm<z.infer<typeof createUserSchema>>({\n    resolver: zodResolver(createUserSchema),\n    defaultValues: {\n      firstName: \"\",\n      lastName: \"\",\n      email: \"\",\n      username: \"\",\n      password: \"\",\n      role: \"client\",\n      isActive: true,\n    },\n  });\n\n  const { data: users = [], isLoading } = useQuery({\n    queryKey: [\"/api/admin/users\"],\n  });\n\n  const {\n    data: userStats = {\n      totalUsers: 0,\n      activeUsers: 0,\n      sellers: 0,\n      onHold: 0,\n      pendingSellers: 0,\n    },\n  } = useQuery<{\n    totalUsers: number;\n    activeUsers: number;\n    sellers: number;\n    onHold: number;\n    pendingSellers?: number;\n  }>({\n    queryKey: [\"/api/admin/users/stats\"],\n  });\n\n  // Calculate pending sellers from current users data\n  const pendingSellers = (users as User[]).filter(\n    (user) => user.role === \"seller\" && user.sellerStatus === \"pending\",\n  ).length;\n\n  const openUserModal = (user: User) => {\n    setSelectedUser(user);\n    setUserStatus(user.isActive ? \"Active\" : \"Inactive\");\n    setUserRole(user.role.charAt(0).toUpperCase() + user.role.slice(1));\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setSelectedUser(null);\n    setUserStatus(\"\");\n    setUserRole(\"\");\n  };\n\n  const updateSellerStatusMutation = useMutation({\n    mutationFn: async ({\n      userId,\n      status,\n    }: {\n      userId: string;\n      status: string;\n    }) => {\n      const res = await apiRequest(\n        \"PATCH\",\n        `/api/users/${userId}/seller-status`,\n        { status },\n      );\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"Seller status updated successfully\",\n      });\n      closeModal();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateUserMutation = useMutation({\n    mutationFn: async ({\n      userId,\n      status,\n      role,\n    }: {\n      userId: string;\n      status: string;\n      role: string;\n    }) => {\n      const res = await apiRequest(\"PATCH\", `/api/users/${userId}`, {\n        status,\n        role,\n      });\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/stats\"] });\n      toast({ title: \"Success\", description: \"User updated successfully\" });\n      closeModal();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      const res = await apiRequest(\"DELETE\", `/api/users/${userId}`);\n      return res.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/stats\"] });\n      toast({ title: \"Success\", description: \"User deleted successfully\" });\n      closeModal();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleSafeguard = () => {\n    if (!selectedUser) return;\n\n    // If it's a seller pending approval, approve them\n    if (\n      selectedUser.role === \"seller\" &&\n      selectedUser.sellerStatus === \"pending\"\n    ) {\n      updateSellerStatusMutation.mutate({\n        userId: selectedUser.id,\n        status: \"approved\",\n      });\n    } else {\n      // Regular user update with new status and role\n      updateUserMutation.mutate({\n        userId: selectedUser.id,\n        status: userStatus,\n        role: userRole,\n      });\n    }\n  };\n\n  const handleDelete = () => {\n    if (!selectedUser) return;\n\n    // If it's a seller pending approval, reject them\n    if (\n      selectedUser.role === \"seller\" &&\n      selectedUser.sellerStatus === \"pending\"\n    ) {\n      updateSellerStatusMutation.mutate({\n        userId: selectedUser.id,\n        status: \"rejected\",\n      });\n    } else {\n      // Regular user deletion\n      deleteUserMutation.mutate(selectedUser.id);\n    }\n  };\n\n  const handleExportUsers = () => {\n    if (!filteredUsers.length) {\n      alert('No users to export');\n      return;\n    }\n\n    const columns = [\n      { key: 'username', label: 'Username' },\n      { key: 'firstName', label: 'First Name' },\n      { key: 'lastName', label: 'Last Name' },\n      { key: 'email', label: 'Email' },\n      { key: 'role', label: 'Role' },\n      { key: 'status', label: 'Status' },\n      { key: 'sellerStatus', label: 'Seller Status' },\n      { key: 'isActive', label: 'Active', format: formatBoolean },\n      { key: 'createdAt', label: 'Created Date', format: formatDate },\n      { key: 'lastLoginAt', label: 'Last Login', format: formatDate },\n    ];\n\n    const success = exportToExcel({\n      filename: `users-${new Date().toISOString().split('T')[0]}`,\n      sheetName: 'Users',\n      columns,\n      data: filteredUsers,\n    });\n\n    if (success) {\n      console.log('Users exported successfully');\n    } else {\n      alert('Failed to export users. Please try again.');\n    }\n  };\n\n  const createUserMutation = useMutation({\n    mutationFn: async (userData: z.infer<typeof createUserSchema>) => {\n      const response = await fetch(\"/api/admin/users\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(userData),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to create user\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/stats\"] });\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n      setIsAddUserModalOpen(false);\n      form.reset();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmitCreateUser = (data: z.infer<typeof createUserSchema>) => {\n    createUserMutation.mutate(data);\n  };\n\n  const createTestUsersMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/admin/users/create-test-users\", {\n        method: \"POST\",\n        credentials: \"include\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n      });\n      if (!response.ok) {\n        throw new Error(\"Failed to create test users\");\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      // Refresh the user list and stats\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/users/stats\"] });\n    },\n  });\n\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"active\":\n        return \"bg-green-100 text-green-700\";\n      case \"inactive\":\n        return \"bg-gray-100 text-gray-700\";\n      case \"on hold\":\n        return \"bg-yellow-100 text-yellow-700\";\n      case \"terminated\":\n        return \"bg-red-100 text-red-700\";\n      default:\n        return \"bg-gray-100 text-gray-700\";\n    }\n  };\n\n  const getRoleColor = (role: string) => {\n    switch (role.toLowerCase()) {\n      case \"seller\":\n        return \"bg-purple-100 text-purple-700\";\n      case \"customer\":\n        return \"bg-blue-100 text-blue-700\";\n      default:\n        return \"bg-gray-100 text-gray-700\";\n    }\n  };\n\n  const filteredUsers = (users as User[]).filter((user: User) => {\n    // Search filter\n    const matchesSearch =\n      searchTerm === \"\" ||\n      `${user.firstName} ${user.lastName}`\n        .toLowerCase()\n        .includes(searchTerm.toLowerCase()) ||\n      user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (user.storeName &&\n        user.storeName.toLowerCase().includes(searchTerm.toLowerCase()));\n\n    // Status filter\n    const matchesStatus =\n      statusFilter === \"all\" ||\n      (statusFilter === \"active\" && (user.status === \"Active\" || (user.isActive && !user.status))) ||\n      (statusFilter === \"inactive\" && (user.status === \"Inactive\" || (!user.isActive && !user.status))) ||\n      (statusFilter === \"onhold\" && user.status === \"On Hold\") ||\n      (statusFilter === \"terminated\" && user.status === \"Terminated\");\n\n    // Role filter\n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n\n    // Seller status filter (only applies when role filter is \"seller\")\n    const matchesSellerStatus =\n      roleFilter !== \"seller\" ||\n      sellerStatusFilter === \"all\" ||\n      user.sellerStatus === sellerStatusFilter;\n\n    return matchesSearch && matchesStatus && matchesRole && matchesSellerStatus;\n  });\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900 flex items-center\">\n              <Users className=\"h-6 w-6 mr-2\" />\n              {t(\"user.heading\")}\n            </h1>\n            <p className=\"text-gray-600 mt-1\">{t(\"user.subheading\")}</p>\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Button \n              variant=\"outline\" \n              size=\"sm\"\n              onClick={handleExportUsers}\n              data-testid=\"button-export-users\"\n            >\n              <Download className=\"h-4 w-4 mr-2\" />\n              Export Users\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              onClick={() => setIsAddUserModalOpen(true)}\n              data-testid=\"button-add-user\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"user.actions.add\")}\n            </Button>\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Users className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    {t(\"user.stats.total\")}\n                  </p>\n                  <p className=\"text-2xl font-bold\">{userStats.totalUsers}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <UserCheck className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    {t(\"user.stats.active\")}\n                  </p>\n                  <p className=\"text-2xl font-bold\">{userStats.activeUsers}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Store className=\"h-5 w-5 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    {t(\"user.stats.sellers\")}\n                  </p>\n                  <p className=\"text-2xl font-bold\">{userStats.sellers}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <Clock className=\"h-5 w-5 text-orange-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">\n                    {t(\"user.stats.hold\")}\n                  </p>\n                  <p className=\"text-2xl font-bold\">{userStats.onHold}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card\n            className={\n              pendingSellers > 0 ? \"ring-2 ring-yellow-400 bg-yellow-50\" : \"\"\n            }\n            onClick={() => {\n              setRoleFilter(\"seller\");\n              setSellerStatusFilter(\"pending\");\n            }}\n            style={{ cursor: pendingSellers > 0 ? \"pointer\" : \"default\" }}\n          >\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                  <Store className=\"h-5 w-5 text-yellow-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">{t(\"user.stats.pending\")}</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">\n                    {pendingSellers}\n                  </p>\n                  {pendingSellers > 0 && (\n                    <p className=\"text-xs text-yellow-600 font-medium\">\n                      {t(\"user.stats.pending.click\")}\n                    </p>\n                  )}\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex items-center justify-between space-x-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder={t(\"user.search.placeholder\")}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n          <div className=\"flex items-center space-x-3\">\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-40\">\n                <SelectValue placeholder=\"All statuses\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">{t(\"user.filters.status\")}</SelectItem>\n                <SelectItem value=\"active\">{t(\"user.allactive\")}</SelectItem>\n                <SelectItem value=\"inactive\">{t(\"user.allinactive\")}</SelectItem>\n                <SelectItem value=\"onhold\">{t(\"user.allonhold\")}</SelectItem>\n                <SelectItem value=\"terminated\">{t(\"user.allterminated\")}</SelectItem>\n              </SelectContent>\n            </Select>\n            <Select value={roleFilter} onValueChange={setRoleFilter}>\n              <SelectTrigger className=\"w-32\">\n                <SelectValue placeholder=\"All roles\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">{t(\"user.filters.roles\")}</SelectItem>\n                <SelectItem value=\"client\">{t(\"user.allcustomer\")}</SelectItem>\n                <SelectItem value=\"seller\">{t(\"user.allseller\")}</SelectItem>\n                <SelectItem value=\"admin\">{t(\"user.alladmin\")}</SelectItem>\n              </SelectContent>\n            </Select>\n            {roleFilter === \"seller\" && (\n              <Select\n                value={sellerStatusFilter}\n                onValueChange={setSellerStatusFilter}\n              >\n                <SelectTrigger className=\"w-48\">\n                  <SelectValue placeholder=\"Seller Status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Sellers</SelectItem>\n                  <SelectItem value=\"pending\">Pending Approval</SelectItem>\n                  <SelectItem value=\"approved\">Approved</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  <SelectItem value=\"suspended\">Suspended</SelectItem>\n                </SelectContent>\n              </Select>\n            )}\n          </div>\n        </div>\n\n        {/* Users Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              {t(\"user.list.heading\")} ({filteredUsers.length})\n            </CardTitle>\n            <div className=\"flex items-center space-x-2 text-sm text-gray-500\">\n              <span className=\"w-2 h-2 bg-green-500 rounded-full\"></span>\n              <span>{t(\"user.list.online\")}</span>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"space-y-4\">\n                {Array.from({ length: 5 }).map((_, index) => (\n                  <div key={index} className=\"flex items-center space-x-4\">\n                    <Skeleton className=\"h-10 w-10 rounded-full\" />\n                    <Skeleton className=\"h-4 w-32\" />\n                    <Skeleton className=\"h-4 w-20\" />\n                    <Skeleton className=\"h-4 w-16\" />\n                    <Skeleton className=\"h-4 w-24\" />\n                    <Skeleton className=\"h-4 w-32\" />\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>{t(\"user.table.user\")}</TableHead>\n                    <TableHead>{t(\"user.table.role\")}</TableHead>\n                    <TableHead>{t(\"user.table.sellerstatus\")}</TableHead>\n                    <TableHead>{t(\"user.table.status\")}</TableHead>\n                    <TableHead>{t(\"user.table.registration\")}</TableHead>\n                    <TableHead>{t(\"user.table.lastlogin\")}</TableHead>\n                    <TableHead>{t(\"user.table.actions\")}</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={7} className=\"text-center py-8\">\n                        <div className=\"flex flex-col items-center space-y-3\">\n                          <Users className=\"h-12 w-12 text-gray-400\" />\n                          <div>\n                            <p className=\"text-gray-500 font-medium\">\n                              {searchTerm\n                                ? \"No users found matching your search\"\n                                : \"No users available\"}\n                            </p>\n                            <p className=\"text-sm text-gray-400 mt-1\">\n                              {searchTerm\n                                ? \"Try adjusting your search criteria\"\n                                : 'Click \"Create test users\" to add some sample data'}\n                            </p>\n                          </div>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredUsers.map((user: User) => (\n                      <TableRow key={user.id}>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage src={user.avatar || undefined} />\n                              <AvatarFallback className=\"text-xs\">\n                                {(user.firstName?.charAt(0) || \"\") +\n                                  (user.lastName?.charAt(0) || \"\")}\n                              </AvatarFallback>\n                            </Avatar>\n                            <div>\n                              <p className=\"font-medium text-sm\">\n                                {user.firstName} {user.lastName}\n                              </p>\n                              <p className=\"text-xs text-gray-500\">\n                                {user.email}\n                              </p>\n                              {user.role === \"seller\" && user.storeName && (\n                                <p className=\"text-xs text-purple-600 font-medium\">\n                                  🏪 {user.storeName}\n                                </p>\n                              )}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getRoleColor(user.role)}>\n                            {user.role.charAt(0).toUpperCase() +\n                              user.role.slice(1)}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          {user.role === \"seller\" && user.sellerStatus ? (\n                            <Badge\n                              className={\n                                user.sellerStatus === \"pending\"\n                                  ? \"bg-yellow-100 text-yellow-700\"\n                                  : user.sellerStatus === \"approved\"\n                                    ? \"bg-green-100 text-green-700\"\n                                    : user.sellerStatus === \"rejected\"\n                                      ? \"bg-red-100 text-red-700\"\n                                      : \"bg-gray-100 text-gray-700\"\n                              }\n                            >\n                              {user.sellerStatus}\n                            </Badge>\n                          ) : (\n                            <span className=\"text-gray-400 text-sm\">N/A</span>\n                          )}\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            className={getStatusColor(\n                              user.status\n                                ? user.status.toLowerCase()\n                                : user.isActive\n                                  ? \"active\"\n                                  : \"inactive\",\n                            )}\n                          >\n                            {user.status ||\n                              (user.isActive ? \"Active\" : \"Inactive\")}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-600\">\n                          {new Date(user.createdAt).toLocaleDateString(\"en-US\")}\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-600\">\n                          {user.updatedAt\n                            ? new Date(user.updatedAt).toLocaleDateString(\n                                \"en-US\",\n                              )\n                            : \"Never\"}\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-2\">\n                            {user.role === \"seller\" &&\n                            user.sellerStatus === \"pending\" ? (\n                              <>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-green-600 border-green-600 hover:bg-green-50\"\n                                  onClick={() =>\n                                    updateSellerStatusMutation.mutate({\n                                      userId: user.id,\n                                      status: \"approved\",\n                                    })\n                                  }\n                                  disabled={\n                                    updateSellerStatusMutation.isPending\n                                  }\n                                >\n                                  ✓ Approve\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 border-red-600 hover:bg-red-50\"\n                                  onClick={() =>\n                                    updateSellerStatusMutation.mutate({\n                                      userId: user.id,\n                                      status: \"rejected\",\n                                    })\n                                  }\n                                  disabled={\n                                    updateSellerStatusMutation.isPending\n                                  }\n                                >\n                                  ✕ Reject\n                                </Button>\n                              </>\n                            ) : (\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => openUserModal(user)}\n                              >\n                                <Settings className=\"h-4 w-4\" />\n                              </Button>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* User Management Modal */}\n      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"text-lg font-semibold text-gray-900\">\n              Manage user\n            </DialogTitle>\n            <p className=\"text-sm text-gray-500 mt-1\">\n              Edit {selectedUser?.firstName} {selectedUser?.lastName}'s\n              information\n            </p>\n          </DialogHeader>\n\n          <div className=\"space-y-4 mt-4\">\n            {/* Status Dropdown */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                {t(\"user.allstatus\")}\n              </label>\n              <Select value={userStatus} onValueChange={setUserStatus}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Active\">{t(\"user.allactive\")}</SelectItem>\n                  <SelectItem value=\"Inactive\">\n                    {t(\"user.allinactive\")}\n                  </SelectItem>\n                  <SelectItem value=\"On Hold\">{t(\"user.allonhold\")}</SelectItem>\n                  <SelectItem value=\"Terminated\">\n                    {t(\"user.allterminated\")}\n                  </SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n\n            {/* Role Dropdown */}\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium text-gray-700\">\n                {t(\"user.allroles\")}\n              </label>\n              <Select value={userRole} onValueChange={setUserRole}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Select role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Client\">\n                    {t(\"user.allcustomer\")}\n                  </SelectItem>\n                  <SelectItem value=\"Seller\">{t(\"user.allseller\")}</SelectItem>\n                  <SelectItem value=\"Admin\">{t(\"user.alladmin\")}</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          {/* Action Buttons */}\n          <div className=\"flex justify-between items-center mt-6 pt-4 border-t\">\n            <Button\n              variant=\"destructive\"\n              onClick={handleDelete}\n              disabled={\n                deleteUserMutation.isPending ||\n                updateSellerStatusMutation.isPending\n              }\n              className=\"bg-red-400 hover:bg-red-500\"\n            >\n              {deleteUserMutation.isPending ? \"Deleting...\" : \"DELETE\"}\n            </Button>\n            <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                onClick={closeModal}\n                disabled={\n                  deleteUserMutation.isPending ||\n                  updateUserMutation.isPending ||\n                  updateSellerStatusMutation.isPending\n                }\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleSafeguard}\n                disabled={\n                  updateUserMutation.isPending ||\n                  updateSellerStatusMutation.isPending\n                }\n                className=\"bg-blue-600 hover:bg-blue-700\"\n              >\n                {updateUserMutation.isPending ||\n                updateSellerStatusMutation.isPending\n                  ? \"Saving...\"\n                  : \"To safeguard\"}\n              </Button>\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add User Modal */}\n      <Dialog open={isAddUserModalOpen} onOpenChange={setIsAddUserModalOpen}>\n        <DialogContent className=\"max-w-md\" data-testid=\"modal-add-user\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <Plus className=\"h-5 w-5\" />\n              Add New User\n            </DialogTitle>\n          </DialogHeader>\n\n          <Form {...form}>\n            <form\n              onSubmit={form.handleSubmit(onSubmitCreateUser)}\n              className=\"space-y-4\"\n            >\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={form.control}\n                  name=\"firstName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>First Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"John\"\n                          {...field}\n                          data-testid=\"input-first-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={form.control}\n                  name=\"lastName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Last Name</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Doe\"\n                          {...field}\n                          data-testid=\"input-last-name\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"john.doe@example.com\"\n                        {...field}\n                        data-testid=\"input-email\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"johndoe\"\n                        {...field}\n                        data-testid=\"input-username\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        {...field}\n                        data-testid=\"input-password\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Role</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select a role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"client\">Customer</SelectItem>\n                        <SelectItem value=\"seller\">Seller</SelectItem>\n                        <SelectItem value=\"admin\">Admin</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"flex justify-end gap-3 pt-4\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setIsAddUserModalOpen(false);\n                    form.reset();\n                  }}\n                  disabled={createUserMutation.isPending}\n                  data-testid=\"button-cancel-add-user\"\n                >\n                  Cancel\n                </Button>\n                <Button\n                  type=\"submit\"\n                  disabled={createUserMutation.isPending}\n                  data-testid=\"button-submit-add-user\"\n                >\n                  {createUserMutation.isPending ? \"Creating...\" : \"Create User\"}\n                </Button>\n              </div>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":37813},"client/src/pages/client/products/details.tsx":{"content":"import { useParams } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Star, ShoppingCart, Heart, Share2, ArrowLeft } from \"lucide-react\";\n\nexport default function ProductDetails() {\n  const { id } = useParams();\n\n  // Fetch product details\n  const { data: product, isLoading, error } = useQuery({\n    queryKey: [\"/api/products\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${id}`);\n      if (!response.ok) throw new Error(\"Failed to fetch product\");\n      return response.json();\n    },\n    enabled: !!id,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 p-6\">\n        <div className=\"max-w-7xl mx-auto\">\n          <Skeleton className=\"h-8 w-32 mb-6\" />\n          <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n            <Skeleton className=\"aspect-square rounded-lg\" />\n            <div className=\"space-y-4\">\n              <Skeleton className=\"h-8 w-3/4\" />\n              <Skeleton className=\"h-4 w-full\" />\n              <Skeleton className=\"h-4 w-2/3\" />\n              <Skeleton className=\"h-12 w-32\" />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Product Not Found</h1>\n          <p className=\"text-gray-600 mb-4\">The product you're looking for doesn't exist.</p>\n          <Button onClick={() => window.history.back()}>\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Go Back\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  const renderStars = (rating: number) => {\n    return [...Array(5)].map((_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) ? \"fill-yellow-400 text-yellow-400\" : \"text-gray-300\"\n        }`}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => window.history.back()}\n            className=\"mb-4\"\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back\n          </Button>\n        </div>\n      </div>\n\n      {/* Product Details */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-12\">\n          {/* Product Images */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square bg-white rounded-lg shadow-sm overflow-hidden\">\n              {product.images?.[0] ? (\n                <img\n                  src={product.images[0]}\n                  alt={product.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n                  <div className=\"text-center\">\n                    <div className=\"text-gray-400 text-6xl mb-2\">📦</div>\n                    <p className=\"text-gray-500\">No image available</p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Thumbnail Gallery */}\n            {product.images && product.images.length > 1 && (\n              <div className=\"grid grid-cols-4 gap-2\">\n                {product.images.slice(1, 5).map((image: string, index: number) => (\n                  <div\n                    key={index}\n                    className=\"aspect-square bg-white rounded-lg shadow-sm overflow-hidden\"\n                  >\n                    <img\n                      src={image}\n                      alt={`${product.name} ${index + 2}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">\n                {product.name}\n              </h1>\n              <p className=\"text-gray-600\">SKU: {product.sku}</p>\n            </div>\n\n            {/* Rating */}\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center\">\n                {renderStars(product.rating || 0)}\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                {product.rating || 0} ({product.reviewCount || 0} reviews)\n              </span>\n            </div>\n\n            {/* Price */}\n            <div className=\"flex items-center gap-3\">\n              <span className=\"text-3xl font-bold text-primary-600\">\n                ${product.price}\n              </span>\n              {product.originalPrice && (\n                <span className=\"text-xl text-gray-500 line-through\">\n                  ${product.originalPrice}\n                </span>\n              )}\n            </div>\n\n            {/* Stock Status */}\n            <div>\n              <Badge\n                className={`${\n                  product.stock > 10\n                    ? \"bg-green-100 text-green-800\"\n                    : product.stock > 0\n                      ? \"bg-yellow-100 text-yellow-800\"\n                      : \"bg-red-100 text-red-800\"\n                }`}\n              >\n                {product.stock > 10\n                  ? \"In Stock\"\n                  : product.stock > 0\n                    ? \"Low Stock\"\n                    : \"Out of Stock\"}\n              </Badge>\n              <p className=\"text-sm text-gray-600 mt-1\">\n                {product.stock} units available\n              </p>\n            </div>\n\n            {/* Description */}\n            {product.description && (\n              <div>\n                <h3 className=\"font-semibold text-gray-900 mb-2\">Description</h3>\n                <p className=\"text-gray-700\">{product.description}</p>\n              </div>\n            )}\n\n            {/* Action Buttons */}\n            <div className=\"flex gap-4\">\n              <Button\n                size=\"lg\"\n                className=\"flex-1\"\n                disabled={product.stock === 0}\n              >\n                <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                Add to Cart\n              </Button>\n              <Button size=\"lg\" variant=\"outline\">\n                <Heart className=\"h-5 w-5\" />\n              </Button>\n              <Button size=\"lg\" variant=\"outline\">\n                <Share2 className=\"h-5 w-5\" />\n              </Button>\n            </div>\n\n            {/* Vendor Info */}\n            {product.vendorName && (\n              <Card>\n                <CardContent className=\"p-4\">\n                  <h3 className=\"font-semibold text-gray-900 mb-2\">Sold by</h3>\n                  <p className=\"text-gray-700\">{product.vendorName}</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":7346},"client/src/pages/client/profile/index.tsx":{"content":"// import { useTranslation } from \"react-i18next\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { useAuth } from \"@/hooks/use-auth\";\n// import { DashboardLayout } from \"@/components/layout/dashboard-layout\";\n// import { Button } from \"@/components/ui/button\";\n// import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n// import { Badge } from \"@/components/ui/badge\";\n// import {\n//   ShoppingBag,\n//   Heart,\n//   Star,\n//   Package,\n//   Clock,\n//   CheckCircle,\n//   Truck,\n//   CreditCard,\n//   Bell,\n//   Eye,\n//   List,\n//   User,\n//   TrendingUp,\n// } from \"lucide-react\";\n\n// export default function ClientDashboard() {\n//   const { t } = useTranslation();\n//   const { user } = useAuth();\n\n//   const { data: dashboardStats, isLoading } = useQuery({\n//     queryKey: [\"/api/dashboard/client\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/dashboard/client\", {\n//         credentials: \"include\",\n//       });\n//       if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n//       return response.json();\n//     },\n//   });\n\n//   if (!user || user.role !== \"client\") {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n//         <p className=\"text-red-600\">Access denied. Client role required.</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <DashboardLayout title=\"Customer Area\">\n//       <div className=\"p-6\">\n//         {/* Header Section */}\n//         <div className=\"mb-8\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <div className=\"flex\">\n//                 <User className=\"w-7 h-7 mr-3\" />\n//                 <h1\n//                   className=\"text-2xl font-bold text-gray-900\"\n//                   data-testid=\"text-dashboard-title\"\n//                 >\n//                   Customer Dashboard\n//                 </h1>\n//               </div>\n//               <p\n//                 className=\"text-gray-600 mt-1\"\n//                 data-testid=\"text-dashboard-subtitle\"\n//               >\n//                 Manage your orders and purchases\n//               </p>\n//             </div>\n//             {/* <div className=\"flex space-x-2\">\n//               <Button variant=\"outline\" size=\"sm\" data-testid=\"button-admin-dashboard\">\n//                 Admin Dashboard\n//               </Button>\n//               <Button variant=\"outline\" size=\"sm\" data-testid=\"button-shop-dashboard\">\n//                 Shop Dashboard\n//               </Button>\n//               <Button size=\"sm\" className=\"bg-primary-600 hover:bg-primary-700\" data-testid=\"button-browse-products\">\n//                 Browse products\n//               </Button>\n//             </div> */}\n//           </div>\n//         </div>\n\n//         {/* Stats Cards */}\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n//           {isLoading ? (\n//             Array.from({ length: 4 }).map((_, i) => (\n//               <Card key={i}>\n//                 <CardContent className=\"p-6\">\n//                   <Skeleton className=\"h-6 w-full mb-2\" />\n//                   <Skeleton className=\"h-8 w-16\" />\n//                 </CardContent>\n//               </Card>\n//             ))\n//           ) : (\n//             <>\n//               <Card>\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <div className=\"flex mb-3\">\n//                         <Package className=\"text-primary-600 w-4 h-4 mr-2\" />\n//                         <p\n//                           className=\"text-sm font-medium text-black-600\"\n//                           data-testid=\"text-total-orders-label\"\n//                         >\n//                           Orders\n//                         </p>\n//                       </div>\n//                       <p\n//                         className=\"text-2xl font-bold text-black-700\"\n//                         data-testid=\"text-total-orders\"\n//                       >\n//                         {dashboardStats?.totalOrders || 12}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n\n//               <Card>\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <div className=\"flex mb-3\">\n//                         <Heart className=\"text-red-600 w-5 h-5 mr-2\" />\n//                         <p\n//                           className=\"text-sm font-medium text-black-600\"\n//                           data-testid=\"text-wishlist-items-label\"\n//                         >\n//                           Wishlist\n//                         </p>\n//                       </div>\n//                       <p\n//                         className=\"text-2xl font-bold text-black-700\"\n//                         data-testid=\"text-wishlist-items\"\n//                       >\n//                         {dashboardStats?.wishlistItems || 24}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n\n//               <Card>\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <div className=\"flex mb-3\">\n//                         <Star className=\"text-yellow-600 w-5 h-5 mr-2\" />\n//                         <p\n//                           className=\"text-sm font-medium text-black-600\"\n//                           data-testid=\"text-reviews-written-label\"\n//                         >\n//                           My Reviews\n//                         </p>\n//                       </div>\n//                       <p\n//                         className=\"text-2xl font-bold text-black-700\"\n//                         data-testid=\"text-reviews-written\"\n//                       >\n//                         {dashboardStats?.reviewsWritten || 8}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n\n//               <Card>\n//                 <CardContent className=\"p-6\">\n//                   <div className=\"flex items-center justify-between\">\n//                     <div>\n//                       <div className=\"flex mb-3\">\n//                         <TrendingUp className=\"text-yellow-600 w-4 h-4 mr-2\" />\n//                         <p\n//                           className=\"text-sm font-medium text-black-600\"\n//                           data-testid=\"text-loyalty-points-label\"\n//                         >\n//                           Loyalty points\n//                         </p>\n//                       </div>\n\n//                       <p\n//                         className=\"text-2xl font-bold text-black-700\"\n//                         data-testid=\"text-total-spent\"\n//                       >\n//                         {dashboardStats?.totalSpent || \"1,234\"}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 </CardContent>\n//               </Card>\n//             </>\n//           )}\n//         </div>\n\n//         <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n//           {/* Recent Orders */}\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle className=\"flex items-center\">\n//                 <Package className=\"h-5 w-5 mr-2\" />\n//                 Recent Orders\n//               </CardTitle>\n//               <Button\n//                 variant=\"outline\"\n//                 size=\"sm\"\n//                 data-testid=\"button-view-all-orders\"\n//               >\n//                 View All\n//               </Button>\n//             </CardHeader>\n//             <CardContent>\n//               {isLoading ? (\n//                 <div className=\"space-y-4\">\n//                   {Array.from({ length: 3 }).map((_, i) => (\n//                     <div key={i} className=\"flex items-center space-x-4\">\n//                       <Skeleton className=\"h-12 w-12 rounded\" />\n//                       <div className=\"flex-1\">\n//                         <Skeleton className=\"h-4 w-3/4 mb-2\" />\n//                         <Skeleton className=\"h-3 w-1/2\" />\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               ) : (\n//                 <div className=\"space-y-4\">\n//                   {/* Mock recent orders */}\n//                   {[\n//                     {\n//                       id: \"1\",\n//                       name: \"Premium Wireless Headphones\",\n//                       status: \"delivered\",\n//                       date: \"2024-01-15\",\n//                       price: \"$199.99\",\n//                     },\n//                     {\n//                       id: \"2\",\n//                       name: 'Gaming Laptop Pro 15\"',\n//                       status: \"shipped\",\n//                       date: \"2024-01-12\",\n//                       price: \"$1,299.99\",\n//                     },\n//                     {\n//                       id: \"3\",\n//                       name: \"Smart Fitness Watch\",\n//                       status: \"pending\",\n//                       date: \"2024-01-10\",\n//                       price: \"$299.99\",\n//                     },\n//                   ].map((order) => (\n//                     <div\n//                       key={order.id}\n//                       className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n//                       data-testid={`order-item-${order.id}`}\n//                     >\n//                       <div className=\"flex items-center space-x-4\">\n//                         <Package className=\"h-10 w-10 text-gray-400\" />\n//                         <div>\n//                           <p\n//                             className=\"font-medium text-gray-900\"\n//                             data-testid={`order-name-${order.id}`}\n//                           >\n//                             {order.name}\n//                           </p>\n//                           <p\n//                             className=\"text-sm text-gray-500\"\n//                             data-testid={`order-date-${order.id}`}\n//                           >\n//                             {order.date}\n//                           </p>\n//                         </div>\n//                       </div>\n//                       <div className=\"text-right\">\n//                         <p\n//                           className=\"font-semibold text-gray-900\"\n//                           data-testid={`order-price-${order.id}`}\n//                         >\n//                           {order.price}\n//                         </p>\n//                         <Badge\n//                           variant={\n//                             order.status === \"delivered\"\n//                               ? \"default\"\n//                               : order.status === \"shipped\"\n//                                 ? \"secondary\"\n//                                 : \"outline\"\n//                           }\n//                           className={\n//                             order.status === \"delivered\"\n//                               ? \"bg-green-100 text-green-700\"\n//                               : order.status === \"shipped\"\n//                                 ? \"bg-blue-100 text-blue-700\"\n//                                 : \"bg-yellow-100 text-yellow-700\"\n//                           }\n//                           data-testid={`order-status-${order.id}`}\n//                         >\n//                           {order.status === \"delivered\" && (\n//                             <CheckCircle className=\"h-3 w-3 mr-1\" />\n//                           )}\n//                           {order.status === \"shipped\" && (\n//                             <Truck className=\"h-3 w-3 mr-1\" />\n//                           )}\n//                           {order.status === \"pending\" && (\n//                             <Clock className=\"h-3 w-3 mr-1\" />\n//                           )}\n//                           {order.status.charAt(0).toUpperCase() +\n//                             order.status.slice(1)}\n//                         </Badge>\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             </CardContent>\n//           </Card>\n\n//           {/* Wishlist */}\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle className=\"flex items-center\">\n//                 <Heart className=\"h-5 w-5 mr-2\" />\n//                 Wishlist\n//               </CardTitle>\n//               <Button\n//                 variant=\"outline\"\n//                 size=\"sm\"\n//                 data-testid=\"button-view-all-wishlist\"\n//               >\n//                 View All\n//               </Button>\n//             </CardHeader>\n//             <CardContent>\n//               {isLoading ? (\n//                 <div className=\"space-y-4\">\n//                   {Array.from({ length: 3 }).map((_, i) => (\n//                     <div key={i} className=\"flex items-center space-x-4\">\n//                       <Skeleton className=\"h-12 w-12 rounded\" />\n//                       <div className=\"flex-1\">\n//                         <Skeleton className=\"h-4 w-3/4 mb-2\" />\n//                         <Skeleton className=\"h-3 w-1/2\" />\n//                       </div>\n//                     </div>\n//                   ))}\n//                 </div>\n//               ) : (\n//                 <div className=\"space-y-4\">\n//                   {/* Mock wishlist items */}\n//                   {[\n//                     {\n//                       id: \"1\",\n//                       name: \"Professional Camera Kit\",\n//                       price: \"$899.99\",\n//                       image:\n//                         \"https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&w=60&h=60\",\n//                     },\n//                     {\n//                       id: \"2\",\n//                       name: \"Ergonomic Office Chair\",\n//                       price: \"$449.99\",\n//                       image:\n//                         \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&w=60&h=60\",\n//                     },\n//                     {\n//                       id: \"3\",\n//                       name: \"Wireless Charging Stand\",\n//                       price: \"$79.99\",\n//                       image:\n//                         \"https://images.unsplash.com/photo-1572569511254-d8f925fe2cbb?ixlib=rb-4.0.3&w=60&h=60\",\n//                     },\n//                   ].map((item) => (\n//                     <div\n//                       key={item.id}\n//                       className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n//                       data-testid={`wishlist-item-${item.id}`}\n//                     >\n//                       <div className=\"flex items-center space-x-4\">\n//                         <img\n//                           src={item.image}\n//                           alt={item.name}\n//                           className=\"h-12 w-12 rounded object-cover\"\n//                           data-testid={`wishlist-image-${item.id}`}\n//                         />\n//                         <div>\n//                           <p\n//                             className=\"font-medium text-gray-900\"\n//                             data-testid={`wishlist-name-${item.id}`}\n//                           >\n//                             {item.name}\n//                           </p>\n//                           <p\n//                             className=\"text-sm font-semibold text-primary-600\"\n//                             data-testid={`wishlist-price-${item.id}`}\n//                           >\n//                             {item.price}\n//                           </p>\n//                         </div>\n//                       </div>\n//                       <Button\n//                         size=\"sm\"\n//                         className=\"bg-primary-600 hover:bg-primary-700\"\n//                         data-testid={`button-add-to-cart-${item.id}`}\n//                       >\n//                         Add to Cart\n//                       </Button>\n//                     </div>\n//                   ))}\n//                 </div>\n//               )}\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Bottom Grid - Notifications and Recommendations */}\n//         <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n//           {/* Notifications */}\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle className=\"flex items-center\">\n//                 <Bell className=\"h-5 w-5 mr-2\" />\n//                 Notifications\n//               </CardTitle>\n//               <Button\n//                 variant=\"ghost\"\n//                 size=\"sm\"\n//                 data-testid=\"button-view-all-notifications\"\n//               >\n//                 3 new items\n//               </Button>\n//             </CardHeader>\n//             <CardContent>\n//               <div className=\"space-y-4\">\n//                 {[\n//                   {\n//                     id: \"1\",\n//                     type: \"shipped\",\n//                     title: \"Order shipped\",\n//                     message: \"Your order #ORD-001 has been shipped.\",\n//                     time: \"2 hours ago\",\n//                   },\n//                   {\n//                     id: \"2\",\n//                     type: \"sale\",\n//                     title: \"Product on sale\",\n//                     message: \"You can save $50 on Wireless headphones.\",\n//                     time: \"1 day ago\",\n//                   },\n//                   {\n//                     id: \"3\",\n//                     type: \"review\",\n//                     title: \"Opinion requested\",\n//                     message: \"How was your Samsung Galaxy A54 purchase?\",\n//                     time: \"2 days ago\",\n//                   },\n//                 ].map((notification) => (\n//                   <div\n//                     key={notification.id}\n//                     className=\"flex items-start p-3 bg-gray-50 rounded-lg\"\n//                     data-testid={`notification-${notification.id}`}\n//                   >\n//                     <div className=\"flex-shrink-0 mr-3\">\n//                       {notification.type === \"shipped\" && (\n//                         <Package className=\"h-5 w-5 text-blue-500\" />\n//                       )}\n//                       {notification.type === \"sale\" && (\n//                         <TrendingUp className=\"h-5 w-5 text-green-500\" />\n//                       )}\n//                       {notification.type === \"review\" && (\n//                         <Star className=\"h-5 w-5 text-yellow-500\" />\n//                       )}\n//                     </div>\n//                     <div className=\"flex-1\">\n//                       <p\n//                         className=\"font-medium text-gray-900\"\n//                         data-testid={`notification-title-${notification.id}`}\n//                       >\n//                         {notification.title}\n//                       </p>\n//                       <p\n//                         className=\"text-sm text-gray-600\"\n//                         data-testid={`notification-message-${notification.id}`}\n//                       >\n//                         {notification.message}\n//                       </p>\n//                       <p\n//                         className=\"text-xs text-gray-500 mt-1\"\n//                         data-testid={`notification-time-${notification.id}`}\n//                       >\n//                         {notification.time}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//               <div className=\"mt-4 text-center\">\n//                 <Button\n//                   variant=\"ghost\"\n//                   size=\"sm\"\n//                   data-testid=\"button-all-notifications\"\n//                 >\n//                   All notifications\n//                 </Button>\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           {/* Recommendations */}\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle className=\"flex items-center\">\n//                 <Star className=\"h-5 w-5 mr-2\" />\n//                 Recommendations\n//               </CardTitle>\n//               <Button\n//                 variant=\"ghost\"\n//                 size=\"sm\"\n//                 data-testid=\"button-view-all-recommendations\"\n//               >\n//                 See more products\n//               </Button>\n//             </CardHeader>\n//             <CardContent>\n//               <div className=\"space-y-4\">\n//                 {[\n//                   {\n//                     id: \"1\",\n//                     name: \"Smartphone Galaxy A54\",\n//                     price: \"429.99 DA\",\n//                     rating: 4.5,\n//                     image:\n//                       \"https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?ixlib=rb-4.0.3&w=60&h=60\",\n//                   },\n//                   {\n//                     id: \"2\",\n//                     name: \"Galaxy Sony WH-1000XM4\",\n//                     price: \"3000 monthly\",\n//                     rating: 4.8,\n//                     image:\n//                       \"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&w=60&h=60\",\n//                   },\n//                 ].map((product) => (\n//                   <div\n//                     key={product.id}\n//                     className=\"flex items-center p-3 bg-gray-50 rounded-lg\"\n//                     data-testid={`recommendation-${product.id}`}\n//                   >\n//                     <img\n//                       src={product.image}\n//                       alt={product.name}\n//                       className=\"h-12 w-12 rounded object-cover mr-3\"\n//                       data-testid={`recommendation-image-${product.id}`}\n//                     />\n//                     <div className=\"flex-1\">\n//                       <p\n//                         className=\"font-medium text-gray-900\"\n//                         data-testid={`recommendation-name-${product.id}`}\n//                       >\n//                         {product.name}\n//                       </p>\n//                       <div className=\"flex items-center mt-1\">\n//                         <div className=\"flex text-yellow-400\">\n//                           {Array.from({ length: 5 }).map((_, i) => (\n//                             <Star\n//                               key={i}\n//                               className={`h-3 w-3 ${i < Math.floor(product.rating) ? \"fill-current\" : \"\"}`}\n//                             />\n//                           ))}\n//                         </div>\n//                         <span className=\"text-xs text-gray-500 ml-1\">\n//                           ({product.rating})\n//                         </span>\n//                       </div>\n//                       <p\n//                         className=\"text-sm font-semibold text-primary-600 mt-1\"\n//                         data-testid={`recommendation-price-${product.id}`}\n//                       >\n//                         {product.price}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Quick Actions */}\n//         <div className=\"mt-8\">\n//           <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n//             Quick Actions\n//           </h2>\n//           <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-16 flex-col space-y-1\"\n//               data-testid=\"button-track-order\"\n//             >\n//               <Eye className=\"h-5 w-5\" />\n//               <span className=\"text-sm\">Track my order ($)</span>\n//             </Button>\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-16 flex-col space-y-1\"\n//               data-testid=\"button-track-packages\"\n//             >\n//               <Package className=\"h-5 w-5\" />\n//               <span className=\"text-sm\">Track my packages</span>\n//             </Button>\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-16 flex-col space-y-1\"\n//               data-testid=\"button-wish-list\"\n//             >\n//               <Heart className=\"h-5 w-5\" />\n//               <span className=\"text-sm\">My wish list</span>\n//             </Button>\n//             <Button\n//               variant=\"outline\"\n//               className=\"h-16 flex-col space-y-1\"\n//               data-testid=\"button-my-profile\"\n//             >\n//               <User className=\"h-5 w-5\" />\n//               <span className=\"text-sm\">My profile</span>\n//             </Button>\n//           </div>\n//         </div>\n//       </div>\n//     </DashboardLayout>\n//   );\n// }\n\n\n\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  ShoppingBag,\n  Heart,\n  Star,\n  Package,\n  Clock,\n  CheckCircle,\n  Truck,\n  CreditCard,\n  Bell,\n  Eye,\n  List,\n  User,\n  TrendingUp,\n} from \"lucide-react\";\n\nexport default function ClientDashboard() {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n\n  const { data: dashboardStats, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/client\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/client\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n      return response.json();\n    },\n  });\n\n  if (!user || user.role !== \"client\") {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <p className=\"text-red-600\">Access denied. Client role required.</p>\n      </div>\n    );\n  }\n\n  return (\n    <DashboardLayout title={t(\"client.dashboard.title\")}>\n      <div className=\"p-6\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"flex\">\n                <User className=\"w-7 h-7 mr-3\" />\n                <h1\n                  className=\"text-2xl font-bold text-gray-900\"\n                  data-testid=\"text-dashboard-title\"\n                >\n                  {t(\"client.dashboard.title\")}\n                </h1>\n              </div>\n              <p\n                className=\"text-gray-600 mt-1\"\n                data-testid=\"text-dashboard-subtitle\"\n              >\n               {t(\"client.dashboard.subtitle\")}\n              </p>\n            </div>\n            {/* <div className=\"flex space-x-2\">\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-admin-dashboard\">\n                Admin Dashboard\n              </Button>\n              <Button variant=\"outline\" size=\"sm\" data-testid=\"button-shop-dashboard\">\n                Shop Dashboard\n              </Button>\n              <Button size=\"sm\" className=\"bg-primary-600 hover:bg-primary-700\" data-testid=\"button-browse-products\">\n                Browse products\n              </Button>\n            </div> */}\n          </div>\n        </div>\n\n        {/* Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          {isLoading ? (\n            Array.from({ length: 4 }).map((_, i) => (\n              <Card key={i}>\n                <CardContent className=\"p-6\">\n                  <Skeleton className=\"h-6 w-full mb-2\" />\n                  <Skeleton className=\"h-8 w-16\" />\n                </CardContent>\n              </Card>\n            ))\n          ) : (\n            <>\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex mb-3\">\n                        <Package className=\"text-primary-600 w-4 h-4 mr-2\" />\n                        <p\n                          className=\"text-sm font-medium text-black-600\"\n                          data-testid=\"text-total-orders-label\"\n                        >\n                        {t(\"client.dashboard.orders\")}\n                        </p>\n                      </div>\n                      <p\n                        className=\"text-2xl font-bold text-black-700\"\n                        data-testid=\"text-total-orders\"\n                      >\n                        {dashboardStats?.totalOrders || 12}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex mb-3\">\n                        <Heart className=\"text-red-600 w-5 h-5 mr-2\" />\n                        <p\n                          className=\"text-sm font-medium text-black-600\"\n                          data-testid=\"text-wishlist-items-label\"\n                        >\n                         {t(\"client.dashboard.wishlist\")}\n                        </p>\n                      </div>\n                      <p\n                        className=\"text-2xl font-bold text-black-700\"\n                        data-testid=\"text-wishlist-items\"\n                      >\n                        {dashboardStats?.wishlistItems || 24}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex mb-3\">\n                        <Star className=\"text-yellow-600 w-5 h-5 mr-2\" />\n                        <p\n                          className=\"text-sm font-medium text-black-600\"\n                          data-testid=\"text-reviews-written-label\"\n                        >\n                         {t(\"client.dashboard.reviews\")}\n                        </p>\n                      </div>\n                      <p\n                        className=\"text-2xl font-bold text-black-700\"\n                        data-testid=\"text-reviews-written\"\n                      >\n                        {dashboardStats?.reviewsWritten || 8}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between\">\n                    <div>\n                      <div className=\"flex mb-3\">\n                        <TrendingUp className=\"text-yellow-600 w-4 h-4 mr-2\" />\n                        <p\n                          className=\"text-sm font-medium text-black-600\"\n                          data-testid=\"text-loyalty-points-label\"\n                        >\n                         {t(\"client.dashboard.Loyaltypoints\")}\n                        </p>\n                      </div>\n\n                      <p\n                        className=\"text-2xl font-bold text-black-700\"\n                        data-testid=\"text-total-spent\"\n                      >\n                        {dashboardStats?.totalSpent || \"1,234\"}\n                      </p>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Recent Orders */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Package className=\"h-5 w-5 mr-2\" />\n                {t(\"client.dashboard.recentorders\")}\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-view-all-orders\"\n              >\n               {t(\"client.dashboard.viewall\")}\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 3 }).map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-12 w-12 rounded\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                        <Skeleton className=\"h-3 w-1/2\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Mock recent orders */}\n                  {[\n                    {\n                      id: \"1\",\n                      name: \"Premium Wireless Headphones\",\n                      status: \"delivered\",\n                      date: \"2024-01-15\",\n                      price: \"$199.99\",\n                    },\n                    {\n                      id: \"2\",\n                      name: 'Gaming Laptop Pro 15\"',\n                      status: \"shipped\",\n                      date: \"2024-01-12\",\n                      price: \"$1,299.99\",\n                    },\n                    {\n                      id: \"3\",\n                      name: \"Smart Fitness Watch\",\n                      status: \"pending\",\n                      date: \"2024-01-10\",\n                      price: \"$299.99\",\n                    },\n                  ].map((order) => (\n                    <div\n                      key={order.id}\n                      className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                      data-testid={`order-item-${order.id}`}\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <Package className=\"h-10 w-10 text-gray-400\" />\n                        <div>\n                          <p\n                            className=\"font-medium text-gray-900\"\n                            data-testid={`order-name-${order.id}`}\n                          >\n                            {order.name}\n                          </p>\n                          <p\n                            className=\"text-sm text-gray-500\"\n                            data-testid={`order-date-${order.id}`}\n                          >\n                            {order.date}\n                          </p>\n                        </div>\n                      </div>\n                      <div className=\"text-right\">\n                        <p\n                          className=\"font-semibold text-gray-900\"\n                          data-testid={`order-price-${order.id}`}\n                        >\n                          {order.price}\n                        </p>\n                        <Badge\n                          variant={\n                            order.status === \"delivered\"\n                              ? \"default\"\n                              : order.status === \"shipped\"\n                                ? \"secondary\"\n                                : \"outline\"\n                          }\n                          className={\n                            order.status === \"delivered\"\n                              ? \"bg-green-100 text-green-700\"\n                              : order.status === \"shipped\"\n                                ? \"bg-blue-100 text-blue-700\"\n                                : \"bg-yellow-100 text-yellow-700\"\n                          }\n                          data-testid={`order-status-${order.id}`}\n                        >\n                          {order.status === \"delivered\" && (\n                            <CheckCircle className=\"h-3 w-3 mr-1\" />\n                          )}\n                          {order.status === \"shipped\" && (\n                            <Truck className=\"h-3 w-3 mr-1\" />\n                          )}\n                          {order.status === \"pending\" && (\n                            <Clock className=\"h-3 w-3 mr-1\" />\n                          )}\n                          {order.status.charAt(0).toUpperCase() +\n                            order.status.slice(1)}\n                        </Badge>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Wishlist */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Heart className=\"h-5 w-5 mr-2\" />\n               {t(\"admin.heading\")}\n              </CardTitle>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-view-all-wishlist\"\n              >\n               {t(\"admin.heading\")}\n              </Button>\n            </CardHeader>\n            <CardContent>\n              {isLoading ? (\n                <div className=\"space-y-4\">\n                  {Array.from({ length: 3 }).map((_, i) => (\n                    <div key={i} className=\"flex items-center space-x-4\">\n                      <Skeleton className=\"h-12 w-12 rounded\" />\n                      <div className=\"flex-1\">\n                        <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                        <Skeleton className=\"h-3 w-1/2\" />\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {/* Mock wishlist items */}\n                  {[\n                    {\n                      id: \"1\",\n                      name: \"Professional Camera Kit\",\n                      price: \"$899.99\",\n                      image:\n                        \"https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&w=60&h=60\",\n                    },\n                    {\n                      id: \"2\",\n                      name: \"Ergonomic Office Chair\",\n                      price: \"$449.99\",\n                      image:\n                        \"https://images.unsplash.com/photo-1586023492125-27b2c045efd7?ixlib=rb-4.0.3&w=60&h=60\",\n                    },\n                    {\n                      id: \"3\",\n                      name: \"Wireless Charging Stand\",\n                      price: \"$79.99\",\n                      image:\n                        \"https://images.unsplash.com/photo-1572569511254-d8f925fe2cbb?ixlib=rb-4.0.3&w=60&h=60\",\n                    },\n                  ].map((item) => (\n                    <div\n                      key={item.id}\n                      className=\"flex items-center justify-between p-4 bg-gray-50 rounded-lg\"\n                      data-testid={`wishlist-item-${item.id}`}\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <img\n                          src={item.image}\n                          alt={item.name}\n                          className=\"h-12 w-12 rounded object-cover\"\n                          data-testid={`wishlist-image-${item.id}`}\n                        />\n                        <div>\n                          <p\n                            className=\"font-medium text-gray-900\"\n                            data-testid={`wishlist-name-${item.id}`}\n                          >\n                            {item.name}\n                          </p>\n                          <p\n                            className=\"text-sm font-semibold text-primary-600\"\n                            data-testid={`wishlist-price-${item.id}`}\n                          >\n                            {item.price}\n                          </p>\n                        </div>\n                      </div>\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-primary-600 hover:bg-primary-700\"\n                        data-testid={`button-add-to-cart-${item.id}`}\n                      >\n                        Add to Cart\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Bottom Grid - Notifications and Recommendations */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mt-8\">\n          {/* Notifications */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Bell className=\"h-5 w-5 mr-2\" />\n                {t(\"client.dashboard.notifications\")}\n              </CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                data-testid=\"button-view-all-notifications\"\n              >\n                3 {t(\"client.dashboard.notifications.item\")}\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    id: \"1\",\n                    type: \"shipped\",\n                    title: \"Order shipped\",\n                    message: \"Your order #ORD-001 has been shipped.\",\n                    time: \"2 hours ago\",\n                  },\n                  {\n                    id: \"2\",\n                    type: \"sale\",\n                    title: \"Product on sale\",\n                    message: \"You can save $50 on Wireless headphones.\",\n                    time: \"1 day ago\",\n                  },\n                  {\n                    id: \"3\",\n                    type: \"review\",\n                    title: \"Opinion requested\",\n                    message: \"How was your Samsung Galaxy A54 purchase?\",\n                    time: \"2 days ago\",\n                  },\n                ].map((notification) => (\n                  <div\n                    key={notification.id}\n                    className=\"flex items-start p-3 bg-gray-50 rounded-lg\"\n                    data-testid={`notification-${notification.id}`}\n                  >\n                    <div className=\"flex-shrink-0 mr-3\">\n                      {notification.type === \"shipped\" && (\n                        <Package className=\"h-5 w-5 text-blue-500\" />\n                      )}\n                      {notification.type === \"sale\" && (\n                        <TrendingUp className=\"h-5 w-5 text-green-500\" />\n                      )}\n                      {notification.type === \"review\" && (\n                        <Star className=\"h-5 w-5 text-yellow-500\" />\n                      )}\n                    </div>\n                    <div className=\"flex-1\">\n                      <p\n                        className=\"font-medium text-gray-900\"\n                        data-testid={`notification-title-${notification.id}`}\n                      >\n                        {notification.title}\n                      </p>\n                      <p\n                        className=\"text-sm text-gray-600\"\n                        data-testid={`notification-message-${notification.id}`}\n                      >\n                        {notification.message}\n                      </p>\n                      <p\n                        className=\"text-xs text-gray-500 mt-1\"\n                        data-testid={`notification-time-${notification.id}`}\n                      >\n                        {notification.time}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n              <div className=\"mt-4 text-center\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  data-testid=\"button-all-notifications\"\n                >\n                 {t(\"client.dashboard.notifications.view\")}\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Recommendations */}\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Star className=\"h-5 w-5 mr-2\" />\n                {t(\"client.dashboard.recommendations\")}\n              </CardTitle>\n              <Button\n                variant=\"ghost\"\n                size=\"sm\"\n                data-testid=\"button-view-all-recommendations\"\n              >\n               {t(\"client.dashboard.recommendations.view\")}\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {[\n                  {\n                    id: \"1\",\n                    name: \"Smartphone Galaxy A54\",\n                    price: \"429.99 DA\",\n                    rating: 4.5,\n                    image:\n                      \"https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?ixlib=rb-4.0.3&w=60&h=60\",\n                  },\n                  {\n                    id: \"2\",\n                    name: \"Galaxy Sony WH-1000XM4\",\n                    price: \"3000 monthly\",\n                    rating: 4.8,\n                    image:\n                      \"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&w=60&h=60\",\n                  },\n                ].map((product) => (\n                  <div\n                    key={product.id}\n                    className=\"flex items-center p-3 bg-gray-50 rounded-lg\"\n                    data-testid={`recommendation-${product.id}`}\n                  >\n                    <img\n                      src={product.image}\n                      alt={product.name}\n                      className=\"h-12 w-12 rounded object-cover mr-3\"\n                      data-testid={`recommendation-image-${product.id}`}\n                    />\n                    <div className=\"flex-1\">\n                      <p\n                        className=\"font-medium text-gray-900\"\n                        data-testid={`recommendation-name-${product.id}`}\n                      >\n                        {product.name}\n                      </p>\n                      <div className=\"flex items-center mt-1\">\n                        <div className=\"flex text-yellow-400\">\n                          {Array.from({ length: 5 }).map((_, i) => (\n                            <Star\n                              key={i}\n                              className={`h-3 w-3 ${i < Math.floor(product.rating) ? \"fill-current\" : \"\"}`}\n                            />\n                          ))}\n                        </div>\n                        <span className=\"text-xs text-gray-500 ml-1\">\n                          ({product.rating})\n                        </span>\n                      </div>\n                      <p\n                        className=\"text-sm font-semibold text-primary-600 mt-1\"\n                        data-testid={`recommendation-price-${product.id}`}\n                      >\n                        {product.price}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"mt-8\">\n          <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n            {t(\"client.dashboard.QuickActions\")}\n          </h2>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\n            <Button\n              variant=\"outline\"\n              className=\"h-16 flex-col space-y-1\"\n              data-testid=\"button-track-order\"\n            >\n              <Eye className=\"h-5 w-5\" />\n              <span className=\"text-sm\">{t(\"client.dashboard.QuickActions.orders\")} ($)</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-16 flex-col space-y-1\"\n              data-testid=\"button-track-packages\"\n            >\n              <Package className=\"h-5 w-5\" />\n              <span className=\"text-sm\">{t(\"client.dashboard.QuickActions.packages\")}</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-16 flex-col space-y-1\"\n              data-testid=\"button-wish-list\"\n            >\n              <Heart className=\"h-5 w-5\" />\n              <span className=\"text-sm\">{t(\"client.dashboard.QuickActions.wishlist\")}</span>\n            </Button>\n            <Button\n              variant=\"outline\"\n              className=\"h-16 flex-col space-y-1\"\n              data-testid=\"button-my-profile\"\n            >\n              <User className=\"h-5 w-5\" />\n              <span className=\"text-sm\">{t(\"client.dashboard.QuickActions.profile\")}</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":50386},"client/src/pages/seller/dashboard/index.tsx":{"content":"// import { useState } from \"react\";\n// import { useTranslation } from \"react-i18next\";\n// import { useQuery, useQueryClient } from \"@tanstack/react-query\";\n// import { useAuth } from \"@/hooks/use-auth\";\n// import { DashboardLayout } from \"@/components/layout/dashboard-layout\";\n// import { Button } from \"@/components/ui/button\";\n// import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n// import { Badge } from \"@/components/ui/badge\";\n// import { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\n// import {\n//   DropdownMenu,\n//   DropdownMenuContent,\n//   DropdownMenuItem,\n//   DropdownMenuSeparator,\n//   DropdownMenuTrigger,\n// } from \"@/components/ui/dropdown-menu\";\n// import {\n//   Dialog,\n//   DialogContent,\n//   DialogDescription,\n//   DialogFooter,\n//   DialogHeader,\n//   DialogTitle,\n// } from \"@/components/ui/dialog\";\n// import { Input } from \"@/components/ui/input\";\n// import { Label } from \"@/components/ui/label\";\n// import { Textarea } from \"@/components/ui/textarea\";\n// import {\n//   Table,\n//   TableBody,\n//   TableCell,\n//   TableHead,\n//   TableHeader,\n//   TableRow,\n// } from \"@/components/ui/table\";\n// import { OrderDetailsModal } from \"@/components/ui/order-details-modal\";\n// import { AddProductForm } from \"@/components/forms/add-product-form\";\n// import { dummyOrders, dummyProducts } from \"@/data/dummy-data\";\n// import {\n//   Package,\n//   DollarSign,\n//   ShoppingBag,\n//   Megaphone,\n//   TrendingUp,\n//   Plus,\n//   Edit,\n//   Eye,\n//   BarChart3,\n//   Store,\n//   MoreHorizontal,\n//   Search,\n//   Filter,\n//   Calendar,\n//   Download,\n//   RefreshCw,\n//   X,\n//   Check,\n//   AlertCircle,\n//   Truck,\n//   CreditCard,\n//   Star,\n//   ChevronDown,\n//   Info,\n//   Activity,\n//   TriangleAlert,\n//   TrendingDown,\n//   Users,\n// } from \"lucide-react\";\n\n// export default function SellerDashboard() {\n//   const { t } = useTranslation();\n//   const { user } = useAuth();\n//   const [selectedOrder, setSelectedOrder] = useState<any>(null);\n//   const [isModalOpen, setIsModalOpen] = useState(false);\n//   const [isDismissModalOpen, setIsDismissModalOpen] = useState(false);\n//   const [dismissReason, setDismissReason] = useState(\"\");\n//   const [orderToDismiss, setOrderToDismiss] = useState<any>(null);\n//   const [showAddProductForm, setShowAddProductForm] = useState(false);\n//   const [isSubmittingProduct, setIsSubmittingProduct] = useState(false);\n//   const [expandedOrders, setExpandedOrders] = useState<Set<string>>(new Set());\n\n//   const { data: dashboardStats, isLoading } = useQuery({\n//     queryKey: [\"/api/dashboard/seller\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/dashboard/seller\", {\n//         credentials: \"include\",\n//       });\n//       if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n//       return response.json();\n//     },\n//   });\n\n//   const { data: ordersData = [], isLoading: ordersLoading } = useQuery({\n//     queryKey: [\"/api/orders\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/orders\", {\n//         credentials: \"include\",\n//       });\n//       if (!response.ok) throw new Error(\"Failed to fetch orders\");\n//       const dbOrders = await response.json();\n\n//       // Combine database orders with dummy orders\n//       const combinedOrders = [...dbOrders, ...dummyOrders];\n//       return combinedOrders;\n//     },\n//   });\n\n//   // Status color mapping\n//   const getStatusColor = (status: string) => {\n//     switch (status.toLowerCase()) {\n//       case \"packed\":\n//         return \"bg-blue-100 text-blue-700\";\n//       case \"on-way\":\n//         return \"bg-orange-100 text-orange-700\";\n//       case \"delivered\":\n//         return \"bg-green-100 text-green-700\";\n//       case \"cancelled\":\n//         return \"bg-red-100 text-red-700\";\n//       default:\n//         return \"bg-gray-100 text-gray-700\";\n//     }\n//   };\n\n//   const formatDate = (dateString: string) => {\n//     const date = new Date(dateString);\n//     return date.toLocaleDateString(\"en-US\", {\n//       year: \"numeric\",\n//       month: \"long\",\n//       day: \"numeric\",\n//       hour: \"2-digit\",\n//       minute: \"2-digit\",\n//     });\n//   };\n\n//   const toggleExpandOrder = (orderId: string) => {\n//     const newExpandedOrders = new Set(expandedOrders);\n//     if (expandedOrders.has(orderId)) {\n//       newExpandedOrders.delete(orderId);\n//     } else {\n//       newExpandedOrders.add(orderId);\n//     }\n//     setExpandedOrders(newExpandedOrders);\n//   };\n\n//   const handleViewOrder = async (order: any) => {\n//     try {\n//       let orderDetails;\n\n//       // Check if this is a dummy order (has items already) or database order\n//       if (order.items) {\n//         // It's a dummy order with items already included\n//         orderDetails = order;\n//       } else {\n//         // It's a database order, fetch details from API\n//         const response = await fetch(`/api/orders/${order.id}`, {\n//           credentials: \"include\",\n//         });\n//         if (!response.ok) throw new Error(\"Failed to fetch order details\");\n//         orderDetails = await response.json();\n//       }\n\n//       setSelectedOrder({\n//         id: orderDetails.id,\n//         date: formatDate(orderDetails.createdAt),\n//         customer: {\n//           name: orderDetails.customerName,\n//           avatar:\n//             orderDetails.customerAvatar ||\n//             \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\",\n//         },\n//         orderItems:\n//           orderDetails.items?.map((item: any) => ({\n//             id: item.id,\n//             name: item.productName || \"Product\",\n//             description: item.productDescription || \"\",\n//             quantity: item.quantity,\n//             price: `$${item.unitPrice}`,\n//           })) || [],\n//         totalAmount: `$${orderDetails.totalAmount}`,\n//         status: orderDetails.status,\n//         paymentStatus: \"Paid\",\n//       });\n//       setIsModalOpen(true);\n//     } catch (error) {\n//       console.error(\"Error fetching order details:\", error);\n//     }\n//   };\n\n//   const handleDismissOrder = (order: any) => {\n//     setOrderToDismiss(order);\n//     setIsDismissModalOpen(true);\n//   };\n\n//   const handleAddProduct = async (productData: any) => {\n//     setIsSubmittingProduct(true);\n//     try {\n//       const response = await fetch(\"/api/products\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         credentials: \"include\",\n//         body: JSON.stringify(productData),\n//       });\n\n//       if (!response.ok) {\n//         const errorData = await response.json();\n//         if (errorData.field === \"sku\") {\n//           alert(`Error: ${errorData.error}`);\n//           return;\n//         }\n//         throw new Error(errorData.error || \"Failed to create product\");\n//       }\n\n//       const newProduct = await response.json();\n//       console.log(\"Product created:\", newProduct);\n\n//       // Close the form and refresh the data\n//       setShowAddProductForm(false);\n\n//       // Refresh the page to show new product\n//       window.location.reload();\n//     } catch (error) {\n//       console.error(\"Error creating product:\", error);\n//       alert(\"Failed to create product. Please try again.\");\n//     } finally {\n//       setIsSubmittingProduct(false);\n//     }\n//   };\n\n//   const confirmDismissOrder = () => {\n//     if (orderToDismiss && dismissReason.trim()) {\n//       console.log(\n//         `Dismissing order ${orderToDismiss.id} with reason: ${dismissReason}`,\n//       );\n//       // Here you would typically make an API call to dismiss the order\n//       setIsDismissModalOpen(false);\n//       setDismissReason(\"\");\n//       setOrderToDismiss(null);\n//     }\n//   };\n\n//   const handleApproveOrder = (order: any) => {\n//     console.log(`Approving order ${order.id}`);\n//     // Here you would typically make an API call to approve the order\n//   };\n\n//   if (!user || user.role !== \"seller\") {\n//     return (\n//       <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n//         <p className=\"text-red-600\">Access denied. Seller role required.</p>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <DashboardLayout title=\"Boutique Space\">\n//       <div className=\"p-6\">\n//         {/* Header Section */}\n//         <div className=\"mb-8\">\n//           <div className=\"flex items-center justify-between\">\n//             <div>\n//               <h1\n//                 className=\"text-2xl font-bold text-gray-900\"\n//                 data-testid=\"text-dashboard-title\"\n//               >\n//                 Dashboard Shop Dashboard\n//               </h1>\n//               <p\n//                 className=\"text-gray-600 mt-1\"\n//                 data-testid=\"text-dashboard-subtitle\"\n//               >\n//                 Manage your storefront and performance\n//               </p>\n//             </div>\n//             {/* <div className=\"flex space-x-2\">\n//               <Button\n//                 variant=\"outline\"\n//                 size=\"sm\"\n//                 data-testid=\"button-admin-dashboard\"\n//               >\n//                 Admin Dashboard\n//               </Button>\n//               <Button\n//                 variant=\"outline\"\n//                 size=\"sm\"\n//                 data-testid=\"button-customer-dashboard\"\n//               >\n//                 Customer Dashboard\n//               </Button>\n//               <Button\n//                 size=\"sm\"\n//                 className=\"bg-primary-600 hover:bg-primary-700\"\n//                 data-testid=\"button-shop-products\"\n//               >\n//                 Shop Products\n//               </Button>\n//             </div> */}\n//           </div>\n//         </div>\n\n//         {/* Main Stats Cards */}\n//         <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-6\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p\n//                     className=\"text-sm text-gray-500 mb-1\"\n//                     data-testid=\"text-turnover-label\"\n//                   >\n//                     Turnover\n//                   </p>\n//                   <p\n//                     className=\"text-xl font-semibold text-gray-900 mb-2\"\n//                     data-testid=\"text-turnover\"\n//                   >\n//                     458,000.00 DA\n//                   </p>\n//                   <div className=\"flex items-center\">\n//                     <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n//                     <span className=\"text-xs text-green-600\">+10.5%</span>\n//                     <span className=\"text-xs text-gray-400 ml-1\">\n//                       vs previous period\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div className=\"w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center\">\n//                   <DollarSign className=\"h-5 w-5 text-blue-600\" />\n//                 </div>\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-6\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p\n//                     className=\"text-sm text-gray-500 mb-1\"\n//                     data-testid=\"text-orders-label\"\n//                   >\n//                     Orders\n//                   </p>\n//                   <p\n//                     className=\"text-xl font-semibold text-gray-900 mb-2\"\n//                     data-testid=\"text-orders\"\n//                   >\n//                     85\n//                   </p>\n//                   <div className=\"flex items-center\">\n//                     <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n//                     <span className=\"text-xs text-green-600\">+7.2%</span>\n//                     <span className=\"text-xs text-gray-400 ml-1\">\n//                       vs previous period\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div className=\"w-10 h-10 bg-orange-50 rounded-lg flex items-center justify-center\">\n//                   <ShoppingBag className=\"h-5 w-5 text-orange-600\" />\n//                 </div>\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-6\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p\n//                     className=\"text-sm text-gray-500 mb-1\"\n//                     data-testid=\"text-products-label\"\n//                   >\n//                     Products\n//                   </p>\n//                   <p\n//                     className=\"text-xl font-semibold text-gray-900 mb-2\"\n//                     data-testid=\"text-products\"\n//                   >\n//                     124\n//                   </p>\n//                   <div className=\"flex items-center\">\n//                     <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n//                     <span className=\"text-xs text-green-600\">+3.8%</span>\n//                     <span className=\"text-xs text-gray-400 ml-1\">\n//                       vs previous period\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div className=\"w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center\">\n//                   <Users className=\"h-5 w-5 text-blue-600\" />\n//                 </div>\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-6\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p\n//                     className=\"text-sm text-gray-500 mb-1\"\n//                     data-testid=\"text-promotions-label\"\n//                   >\n//                     Promotions\n//                   </p>\n//                   <p\n//                     className=\"text-xl font-semibold text-gray-900 mb-2\"\n//                     data-testid=\"text-promotions\"\n//                   >\n//                     8\n//                   </p>\n//                   <div className=\"flex items-center\">\n//                     <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n//                     <span className=\"text-xs text-green-600\">+25%</span>\n//                     <span className=\"text-xs text-gray-400 ml-1\">\n//                       vs previous period\n//                     </span>\n//                   </div>\n//                 </div>\n//                 <div className=\"w-10 h-10 bg-green-50 rounded-lg flex items-center justify-center\">\n//                   <Eye className=\"h-5 w-5 text-green-600\" />\n//                 </div>\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Secondary Stats Row */}\n//         <div className=\"grid grid-cols-5 gap-4 mb-8\">\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-4\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p className=\"text-sm text-gray-500 mb-1\">Total</p>\n//                   <p className=\"text-lg font-semibold text-gray-900\">0</p>\n//                 </div>\n//                 <Info className=\"h-4 w-4 text-gray-400\" />\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-4\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p className=\"text-sm text-gray-500 mb-1\">Assets</p>\n//                   <p className=\"text-lg font-semibold text-gray-900\">0</p>\n//                 </div>\n//                 <Activity className=\"h-4 w-4 text-green-500\" />\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-4\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p className=\"text-sm text-gray-500 mb-1\">Breakup</p>\n//                   <p className=\"text-lg font-semibold text-gray-900\">0</p>\n//                 </div>\n//                 <TriangleAlert className=\"h-4 w-4 text-orange-500\" />\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-4\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p className=\"text-sm text-gray-500 mb-1\">Low stock</p>\n//                   <p className=\"text-lg font-semibold text-gray-900\">0</p>\n//                 </div>\n//                 <TrendingDown className=\"h-4 w-4 text-yellow-500\" />\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           <Card className=\"bg-white border border-gray-200\">\n//             <CardContent className=\"p-4\">\n//               <div className=\"flex items-center justify-between\">\n//                 <div>\n//                   <p className=\"text-sm text-gray-500 mb-1\">Featured</p>\n//                   <p className=\"text-lg font-semibold text-gray-900\">0</p>\n//                 </div>\n//                 <Star className=\"h-4 w-4 text-yellow-500\" />\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Product Management */}\n//         <div className=\"mb-8\">\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle className=\"flex items-center\">\n//                 <Package className=\"h-5 w-5 mr-2\" />\n//                 Product Management\n//               </CardTitle>\n//               <div className=\"flex space-x-2\">\n//                 <Button variant=\"outline\" size=\"sm\">\n//                   <Search className=\"h-4 w-4 mr-2\" />\n//                   Search for a product\n//                 </Button>\n//                 <Button variant=\"outline\" size=\"sm\">\n//                   <Filter className=\"h-4 w-4\" />\n//                 </Button>\n//                 <Button variant=\"outline\" size=\"sm\">\n//                   Export\n//                 </Button>\n//                 <Button\n//                   size=\"sm\"\n//                   className=\"bg-primary-600 hover:bg-primary-700\"\n//                   onClick={() => setShowAddProductForm(true)}\n//                   data-testid=\"button-add-product\"\n//                 >\n//                   <Plus className=\"h-4 w-4 mr-2\" />\n//                   Add Product\n//                 </Button>\n//               </div>\n//             </CardHeader>\n//             <CardContent>\n//               <div className=\"flex items-center justify-center py-12\">\n//                 <div className=\"text-center\">\n//                   <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n//                   <p className=\"text-gray-500 mb-4\">No products found</p>\n//                   <Button\n//                     className=\"bg-primary-600 hover:bg-primary-700\"\n//                     onClick={() => setShowAddProductForm(true)}\n//                     data-testid=\"button-add-first-product\"\n//                   >\n//                     <Plus className=\"h-4 w-4 mr-2\" />\n//                     Add your first product\n//                   </Button>\n//                 </div>\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Charts Row */}\n//         <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n//           {/* Sales Trend */}\n//           <Card>\n//             <CardHeader>\n//               <CardTitle>Sales Trend</CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <div className=\"h-64 flex items-center justify-center text-gray-500\">\n//                 <BarChart3 className=\"h-8 w-8 mr-2\" />\n//                 Sales chart placeholder\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           {/* Distribution by Category */}\n//           <Card>\n//             <CardHeader>\n//               <CardTitle>Distribution by Category</CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <div className=\"h-64 flex items-center justify-center text-gray-500\">\n//                 <Package className=\"h-8 w-8 mr-2\" />\n//                 Category distribution chart placeholder\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Popular Products */}\n//         <div className=\"mb-8\">\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle>Popular Products</CardTitle>\n//               <Button variant=\"ghost\" size=\"sm\">\n//                 Results\n//               </Button>\n//             </CardHeader>\n//             <CardContent>\n//               <div className=\"space-y-4\">\n//                 {dummyProducts.map((product, index) => (\n//                   <div\n//                     key={index}\n//                     className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n//                   >\n//                     <div className=\"flex items-center space-x-3\">\n//                       <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center\">\n//                         <Package className=\"h-6 w-6 text-gray-400\" />\n//                       </div>\n//                       <div>\n//                         <p className=\"font-medium text-gray-900\">\n//                           {product.name}\n//                         </p>\n//                         <div className=\"flex items-center space-x-2\">\n//                           <div className=\"flex text-yellow-400\">\n//                             {Array.from({ length: 5 }).map((_, i) => (\n//                               <Star\n//                                 key={i}\n//                                 className={`h-3 w-3 ${i < Math.floor(parseFloat(product.rating)) ? \"fill-current\" : \"\"}`}\n//                               />\n//                             ))}\n//                           </div>\n//                           <span className=\"text-xs text-gray-500\">\n//                             ({product.rating})\n//                           </span>\n//                         </div>\n//                         <p className=\"text-xs text-gray-500\">{product.sales}</p>\n//                       </div>\n//                     </div>\n//                     <p className=\"font-semibold text-gray-900\">\n//                       ${product.price}\n//                     </p>\n//                   </div>\n//                 ))}\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Current Disputes */}\n//         <div className=\"mb-8\">\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle>Current disputes</CardTitle>\n//               <div className=\"flex space-x-2\">\n//                 <Button variant=\"ghost\" size=\"sm\">\n//                   2 cases\n//                 </Button>\n//                 <Button variant=\"ghost\" size=\"sm\">\n//                   Dispute History\n//                 </Button>\n//               </div>\n//             </CardHeader>\n//             <CardContent>\n//               <Table>\n//                 <TableHeader>\n//                   <TableRow>\n//                     <TableHead>Order</TableHead>\n//                     <TableHead>Product</TableHead>\n//                     <TableHead>Amount</TableHead>\n//                     <TableHead>Status</TableHead>\n//                     <TableHead>Date</TableHead>\n//                     <TableHead>Actions</TableHead>\n//                   </TableRow>\n//                 </TableHeader>\n//                 <TableBody>\n//                   <TableRow>\n//                     <TableCell>ORD-001</TableCell>\n//                     <TableCell>Charger not received</TableCell>\n//                     <TableCell>4700.00</TableCell>\n//                     <TableCell>\n//                       <Badge className=\"bg-yellow-100 text-yellow-700\">\n//                         Waiting\n//                       </Badge>\n//                     </TableCell>\n//                     <TableCell>April 11, 2023</TableCell>\n//                     <TableCell>\n//                       <DropdownMenu>\n//                         <DropdownMenuTrigger asChild>\n//                           <Button variant=\"ghost\" size=\"sm\">\n//                             <MoreHorizontal className=\"h-4 w-4\" />\n//                           </Button>\n//                         </DropdownMenuTrigger>\n//                         <DropdownMenuContent align=\"end\">\n//                           <DropdownMenuItem>\n//                             <Eye className=\"h-4 w-4 mr-2\" />\n//                             Details\n//                           </DropdownMenuItem>\n//                           <DropdownMenuItem>\n//                             <AlertCircle className=\"h-4 w-4 mr-2\" />\n//                             Delivery\n//                           </DropdownMenuItem>\n//                         </DropdownMenuContent>\n//                       </DropdownMenu>\n//                     </TableCell>\n//                   </TableRow>\n//                   <TableRow>\n//                     <TableCell>ORD-002</TableCell>\n//                     <TableCell>Two items</TableCell>\n//                     <TableCell>4700.00</TableCell>\n//                     <TableCell>\n//                       <Badge className=\"bg-red-100 text-red-700\">\n//                         Returned\n//                       </Badge>\n//                     </TableCell>\n//                     <TableCell>April 11, 2023</TableCell>\n//                     <TableCell>\n//                       <DropdownMenu>\n//                         <DropdownMenuTrigger asChild>\n//                           <Button variant=\"ghost\" size=\"sm\">\n//                             <MoreHorizontal className=\"h-4 w-4\" />\n//                           </Button>\n//                         </DropdownMenuTrigger>\n//                         <DropdownMenuContent align=\"end\">\n//                           <DropdownMenuItem>\n//                             <Eye className=\"h-4 w-4 mr-2\" />\n//                             Details\n//                           </DropdownMenuItem>\n//                           <DropdownMenuItem>\n//                             <AlertCircle className=\"h-4 w-4 mr-2\" />\n//                             Delivery\n//                           </DropdownMenuItem>\n//                         </DropdownMenuContent>\n//                       </DropdownMenu>\n//                     </TableCell>\n//                   </TableRow>\n//                 </TableBody>\n//               </Table>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Recent Orders */}\n//         <div className=\"mb-8\">\n//           <Card>\n//             <CardHeader className=\"flex flex-row items-center justify-between\">\n//               <CardTitle>Recent Orders</CardTitle>\n//               <Button variant=\"ghost\" size=\"sm\">\n//                 {t(\"order.seeAllOrders\")}\n//               </Button>\n//             </CardHeader>\n//             <CardContent>\n//               <div className=\"space-y-2 overflow-x-auto\">\n//                 {ordersLoading ? (\n//                   Array.from({ length: 3 }).map((_, index) => (\n//                     <div\n//                       key={index}\n//                       className=\"border rounded-lg p-4  min-w-max\"\n//                     >\n//                       <div className=\"flex items-center space-x-4\">\n//                         <Skeleton className=\"h-4 w-4\" />\n//                         <Skeleton className=\"h-4 w-20\" />\n//                         <Skeleton className=\"h-8 w-8 rounded-full\" />\n//                         <Skeleton className=\"h-4 w-32\" />\n//                         <Skeleton className=\"h-4 w-24\" />\n//                         <Skeleton className=\"h-4 w-20\" />\n//                         <Skeleton className=\"h-4 w-16\" />\n//                         <Skeleton className=\"h-4 w-16\" />\n//                         <Skeleton className=\"h-4 w-20\" />\n//                         <Skeleton className=\"h-4 w-8\" />\n//                       </div>\n//                     </div>\n//                   ))\n//                 ) : ordersData.length === 0 ? (\n//                   <div className=\"text-center py-8 text-gray-500\">\n//                     No orders found\n//                   </div>\n//                 ) : (\n//                   ordersData.map((order) => (\n//                     <div\n//                       key={order.id}\n//                       className=\"border rounded-lg bg-white shadow-sm min-w-max\"\n//                     >\n//                       {/* Order Row */}\n//                       <div\n//                         className=\"flex items-center p-4 cursor-pointer hover:bg-gray-50\"\n//                         onClick={() => toggleExpandOrder(order.id)}\n//                       >\n//                         <div className=\"flex items-center space-x-4 flex-1\">\n//                           {/* Expand/Collapse Button */}\n//                           <Button\n//                             variant=\"ghost\"\n//                             size=\"sm\"\n//                             className=\"w-6 h-6 p-0\"\n//                           >\n//                             <ChevronDown\n//                               className={`h-4 w-4 transition-transform ${\n//                                 expandedOrders.has(order.id) ? \"rotate-180\" : \"\"\n//                               }`}\n//                             />\n//                           </Button>\n\n//                           {/* Order ID */}\n//                           <div className=\"min-w-[100px]\">\n//                             <span className=\"font-medium\">\n//                               ORD-{order.id.slice(-4)}\n//                             </span>\n//                           </div>\n\n//                           {/* Customer */}\n//                           <div className=\"flex items-center space-x-3 min-w-[200px]\">\n//                             <Avatar className=\"h-8 w-8\">\n//                               <AvatarImage\n//                                 src={\n//                                   order.customerAvatar ||\n//                                   \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\"\n//                                 }\n//                                 alt={order.customerName}\n//                               />\n//                               <AvatarFallback>\n//                                 {order.customerName\n//                                   ?.split(\" \")\n//                                   .map((n: string) => n[0])\n//                                   .join(\"\") || \"U\"}\n//                               </AvatarFallback>\n//                             </Avatar>\n//                             <span className=\"font-medium\">\n//                               {order.customerName || \"Unknown\"}\n//                             </span>\n//                           </div>\n\n//                           {/* Store */}\n//                           <div className=\"flex items-center space-x-2 min-w-[120px]\">\n//                             <div className=\"w-6 h-6 bg-blue-100 rounded flex items-center justify-center\">\n//                               <Store className=\"h-3 w-3 text-blue-600\" />\n//                             </div>\n//                             <span>My Store</span>\n//                           </div>\n\n//                           {/* Status */}\n//                           <div className=\"min-w-[100px]\">\n//                             <Badge className={getStatusColor(order.status)}>\n//                               {order.status}\n//                             </Badge>\n//                           </div>\n\n//                           {/* Payment */}\n//                           <div className=\"min-w-[80px]\">\n//                             <Badge className=\"bg-green-100 text-green-700\">\n//                               {t(\"order.paid\")}\n//                             </Badge>\n//                           </div>\n\n//                           {/* Items */}\n//                           <div className=\"min-w-[100px]\">\n//                             <span className=\"text-gray-600\">\n//                               3 {t(\"order.articles\")}\n//                             </span>\n//                           </div>\n\n//                           {/* Amount */}\n//                           <div className=\"min-w-[100px]\">\n//                             <span className=\"font-semibold\">\n//                               ${order.totalAmount}\n//                             </span>\n//                           </div>\n//                         </div>\n\n//                         {/* Actions */}\n//                         <div\n//                           className=\"ml-4\"\n//                           onClick={(e) => e.stopPropagation()}\n//                         >\n//                           <div className=\"flex items-center space-x-2\">\n//                             <Button\n//                               variant=\"ghost\"\n//                               size=\"icon\"\n//                               onClick={() => handleViewOrder(order)}\n//                             >\n//                               <Eye className=\"h-4 w-4\" />\n//                             </Button>\n//                             <Button\n//                               variant=\"ghost\"\n//                               size=\"icon\"\n//                               onClick={() => handleApproveOrder(order)}\n//                             >\n//                               <Check className=\"h-4 w-4\" />\n//                             </Button>\n//                             <Button\n//                               variant=\"ghost\"\n//                               size=\"icon\"\n//                               onClick={() => handleDismissOrder(order)}\n//                             >\n//                               <X className=\"h-4 w-4 text-red-500\" />\n//                             </Button>\n//                           </div>\n//                           {/* <DropdownMenu>\n//                             <DropdownMenuTrigger asChild>\n//                               <Button\n//                                 variant=\"ghost\"\n//                                 size=\"sm\"\n//                                 data-testid={`dropdown-actions-${order.id}`}\n//                               >\n//                                 <MoreHorizontal className=\"h-4 w-4\" />\n//                               </Button>\n//                             </DropdownMenuTrigger>\n//                             <DropdownMenuContent align=\"end\">\n//                               <DropdownMenuItem\n//                                 onClick={() => handleViewOrder(order)}\n//                               >\n//                                 <Eye className=\"h-4 w-4 mr-2\" />\n//                                 {t(\"order.viewDetails\")}\n//                               </DropdownMenuItem>\n//                               <DropdownMenuItem\n//                                 onClick={() => handleApproveOrder(order)}\n//                               >\n//                                 <Check className=\"h-4 w-4 mr-2 text-green-600\" />\n//                                 {t(\"order.approve\")}\n//                               </DropdownMenuItem>\n//                               <DropdownMenuItem\n//                                 onClick={() => handleDismissOrder(order)}\n//                               >\n//                                 <X className=\"h-4 w-4 mr-2 text-red-600\" />\n//                                 {t(\"order.reject\")}\n//                               </DropdownMenuItem>\n//                             </DropdownMenuContent>\n//                           </DropdownMenu> */}\n//                         </div>\n//                       </div>\n\n//                       {/* Expanded Content */}\n//                       {expandedOrders.has(order.id) && (\n//                         <div className=\"border-t bg-gray-50 p-6\">\n//                           <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n//                             {/* Customer Information */}\n//                             <div className=\"space-y-4\">\n//                               <div className=\"flex items-center space-x-2\">\n//                                 <Users className=\"h-4 w-4 text-gray-500\" />\n//                                 <h3 className=\"font-medium\">\n//                                   {t(\"order.customerInformation\")}\n//                                 </h3>\n//                               </div>\n//                               <div className=\"space-y-2 text-sm\">\n//                                 <div className=\"flex items-center space-x-2\">\n//                                   <Avatar className=\"h-6 w-6\">\n//                                     <AvatarImage src={order.customerAvatar} />\n//                                     <AvatarFallback>\n//                                       {order.customerName\n//                                         ?.split(\" \")\n//                                         .map((n: string) => n[0])\n//                                         .join(\"\") || \"U\"}\n//                                     </AvatarFallback>\n//                                   </Avatar>\n//                                   <span className=\"font-medium\">\n//                                     {order.customerName || \"Unknown\"}\n//                                   </span>\n//                                 </div>\n//                                 <p className=\"text-gray-600\">\n//                                   {t(\"order.clientId\")} MD-{order.id.slice(-5)}\n//                                 </p>\n//                                 <p className=\"text-gray-600\">\n//                                   {order.customerEmail ||\n//                                     \"customer@example.com\"}\n//                                 </p>\n//                                 <p className=\"text-gray-600\">\n//                                   📞 {order.customerPhone || \"0573456789\"}\n//                                 </p>\n//                                 <p className=\"text-xs text-gray-500 mt-2\">\n//                                   {t(\"order.orderPlacedOn\")}{\" \"}\n//                                   {formatDate(order.createdAt)}\n//                                 </p>\n//                               </div>\n//                             </div>\n\n//                             {/* Products Ordered */}\n//                             <div className=\"space-y-4\">\n//                               <div className=\"flex items-center space-x-2\">\n//                                 <Package className=\"h-4 w-4 text-gray-500\" />\n//                                 <h3 className=\"font-medium\">\n//                                   {t(\"order.productsOrdered\")} ( 3 )\n//                                 </h3>\n//                               </div>\n//                               <div className=\"space-y-3\">\n//                                 {/* Sample products - you would map over actual order items */}\n//                                 <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n//                                   <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n//                                     <ShoppingBag className=\"h-5 w-5 text-blue-600\" />\n//                                   </div>\n//                                   <div className=\"flex-1\">\n//                                     <p className=\"font-medium text-sm\">\n//                                       Protective shell\n//                                     </p>\n//                                     <p className=\"text-xs text-gray-500\">\n//                                       Accessories\n//                                     </p>\n//                                     <p className=\"text-xs text-gray-500\">\n//                                       SKU: SKU-2345-1\n//                                     </p>\n//                                   </div>\n//                                   <div className=\"text-right\">\n//                                     <p className=\"text-sm\">Qty: 1</p>\n//                                     <p className=\"text-sm font-medium\">\n//                                       Price: $8.00\n//                                     </p>\n//                                     <p className=\"text-sm font-semibold text-green-600\">\n//                                       $8.00 DA\n//                                     </p>\n//                                   </div>\n//                                 </div>\n\n//                                 <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n//                                   <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n//                                     <ShoppingBag className=\"h-5 w-5 text-blue-600\" />\n//                                   </div>\n//                                   <div className=\"flex-1\">\n//                                     <p className=\"font-medium text-sm\">\n//                                       Apple Watch Series 9\n//                                     </p>\n//                                     <p className=\"text-xs text-gray-500\">\n//                                       Accessories\n//                                     </p>\n//                                     <p className=\"text-xs text-gray-500\">\n//                                       SKU: SKU-2345-2\n//                                     </p>\n//                                   </div>\n//                                   <div className=\"text-right\">\n//                                     <p className=\"text-sm\">Qty: 1</p>\n//                                     <p className=\"text-sm font-medium\">\n//                                       Price: $106.99\n//                                     </p>\n//                                     <p className=\"text-sm font-semibold text-green-600\">\n//                                       $319.97 DA\n//                                     </p>\n//                                   </div>\n//                                 </div>\n\n//                                 <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n//                                   <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n//                                     <ShoppingBag className=\"h-5 w-5 text-blue-600\" />\n//                                   </div>\n//                                   <div className=\"flex-1\">\n//                                     <p className=\"font-medium text-sm\">\n//                                       iPad Air tablet\n//                                     </p>\n//                                     <p className=\"text-xs text-gray-500\">\n//                                       Electronics\n//                                     </p>\n//                                     <p className=\"text-xs text-gray-500\">\n//                                       SKU: SKU-2345-3\n//                                     </p>\n//                                   </div>\n//                                   <div className=\"text-right\">\n//                                     <p className=\"text-sm\">Qty: 1</p>\n//                                     <p className=\"text-sm font-medium\">\n//                                       Price: $456.99\n//                                     </p>\n//                                     <p className=\"text-sm font-semibold text-green-600\">\n//                                       $456.99 DA\n//                                     </p>\n//                                   </div>\n//                                 </div>\n//                               </div>\n//                             </div>\n\n//                             {/* Delivery & Financial Summary */}\n//                             <div className=\"space-y-6\">\n//                               {/* Delivery Information */}\n//                               <div className=\"space-y-4\">\n//                                 <div className=\"flex items-center space-x-2\">\n//                                   <Truck className=\"h-4 w-4 text-gray-500\" />\n//                                   <h3 className=\"font-medium\">\n//                                     {t(\"order.delivery\")}\n//                                   </h3>\n//                                 </div>\n//                                 <div className=\"space-y-2 text-sm\">\n//                                   <div>\n//                                     <p className=\"font-medium\">\n//                                       {t(\"order.deliveryAddress\")}\n//                                     </p>\n//                                     <p className=\"text-gray-600\">\n//                                       34 Independence Avenue\n//                                     </p>\n//                                     <p className=\"text-gray-600\">\n//                                       Tlemcen, 13000\n//                                     </p>\n//                                     <p className=\"text-gray-600\">Algeria</p>\n//                                   </div>\n//                                   <div className=\"pt-2\">\n//                                     <p className=\"font-medium\">\n//                                       {t(\"order.method\")}\n//                                     </p>\n//                                     <p className=\"text-gray-600\">\n//                                       {t(\"order.freeDelivery\")}\n//                                     </p>\n//                                     <p className=\"text-gray-600\">\n//                                       {t(\"order.estimatedTime\")} 2-4{\" \"}\n//                                       {t(\"order.workingDays\")}\n//                                     </p>\n//                                     <p className=\"text-gray-600\">\n//                                       {t(\"order.status\")}{\" \"}\n//                                       <span className=\"text-blue-600 font-medium\">\n//                                         {t(\"order.shipped\")}\n//                                       </span>\n//                                     </p>\n//                                   </div>\n//                                 </div>\n//                               </div>\n\n//                               {/* Financial Summary */}\n//                               <div className=\"space-y-4\">\n//                                 <div className=\"flex items-center space-x-2\">\n//                                   <CreditCard className=\"h-4 w-4 text-gray-500\" />\n//                                   <h3 className=\"font-medium\">\n//                                     {t(\"order.financialSummary\")}\n//                                   </h3>\n//                                 </div>\n//                                 <div className=\"space-y-2 text-sm bg-white p-4 rounded border\">\n//                                   <div className=\"flex justify-between\">\n//                                     <span>\n//                                       {t(\"order.subtotal\")} ( 3{\" \"}\n//                                       {t(\"order.items\")} ):\n//                                     </span>\n//                                     <span>649.795 DA</span>\n//                                   </div>\n//                                   <div className=\"flex justify-between\">\n//                                     <span>{t(\"order.deliveryCosts\")}</span>\n//                                     <span className=\"text-green-600\">\n//                                       {t(\"order.free\")}\n//                                     </span>\n//                                   </div>\n//                                   <div className=\"flex justify-between\">\n//                                     <span>{t(\"order.vat\")} (19%):</span>\n//                                     <span>123.461.05 DA</span>\n//                                   </div>\n//                                   <hr className=\"my-2\" />\n//                                   <div className=\"flex justify-between font-semibold text-base\">\n//                                     <span>{t(\"order.total\")}</span>\n//                                     <span className=\"text-green-600\">\n//                                       773,256.05 DA\n//                                     </span>\n//                                   </div>\n//                                   <div className=\"flex items-center space-x-2 mt-2\">\n//                                     <Badge className=\"bg-green-100 text-green-700\">\n//                                       {t(\"order.payment\")} {t(\"order.paid\")}\n//                                     </Badge>\n//                                   </div>\n//                                 </div>\n//                               </div>\n//                             </div>\n//                           </div>\n//                         </div>\n//                       )}\n//                     </div>\n//                   ))\n//                 )}\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n//       </div>\n\n//       {/* Order Details Modal */}\n//       {selectedOrder && (\n//         <OrderDetailsModal\n//           isOpen={isModalOpen}\n//           onClose={() => setIsModalOpen(false)}\n//           order={selectedOrder}\n//         />\n//       )}\n\n//       {/* Dismiss Order Modal */}\n//       <Dialog open={isDismissModalOpen} onOpenChange={setIsDismissModalOpen}>\n//         <DialogContent>\n//           <DialogHeader>\n//             <DialogTitle>Dismiss Order</DialogTitle>\n//             <DialogDescription>\n//               Please provide a reason for dismissing order {orderToDismiss?.id}\n//             </DialogDescription>\n//           </DialogHeader>\n//           <div className=\"space-y-4\">\n//             <div>\n//               <Label htmlFor=\"dismiss-reason\">Reason for dismissal</Label>\n//               <Textarea\n//                 id=\"dismiss-reason\"\n//                 placeholder=\"Enter the reason for dismissing this order...\"\n//                 value={dismissReason}\n//                 onChange={(e) => setDismissReason(e.target.value)}\n//                 className=\"mt-2\"\n//                 rows={4}\n//               />\n//             </div>\n//           </div>\n//           <DialogFooter>\n//             <Button\n//               variant=\"outline\"\n//               onClick={() => {\n//                 setIsDismissModalOpen(false);\n//                 setDismissReason(\"\");\n//                 setOrderToDismiss(null);\n//               }}\n//             >\n//               Cancel\n//             </Button>\n//             <Button\n//               onClick={confirmDismissOrder}\n//               disabled={!dismissReason.trim()}\n//               className=\"bg-red-600 hover:bg-red-700\"\n//             >\n//               Dismiss Order\n//             </Button>\n//           </DialogFooter>\n//         </DialogContent>\n//       </Dialog>\n\n//       {/* Add Product Form */}\n//       {showAddProductForm && (\n//         <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n//           <div className=\"bg-white rounded-lg max-w-6xl w-full max-h-[90vh] overflow-hidden\">\n//             <AddProductForm\n//               onSubmit={handleAddProduct}\n//               onCancel={() => setShowAddProductForm(false)}\n//               isLoading={isSubmittingProduct}\n//             />\n//           </div>\n//         </div>\n//       )}\n//     </DashboardLayout>\n//   );\n// }\n\nimport { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { OrderDetailsModal } from \"@/components/ui/order-details-modal\";\nimport { AdvancedAddProductForm } from \"@/components/forms/advanced-add-product-form\";\nimport { ProductViewModal } from \"@/components/modals/product-view-modal\";\nimport { ProductEditModal } from \"@/components/modals/product-edit-modal\";\nimport { dummyOrders, dummyProducts } from \"@/data/dummy-data\";\nimport {\n  exportToExcel,\n  formatCurrency,\n  formatDate,\n  formatBoolean,\n} from \"@/utils/excel-export\";\nimport {\n  Package,\n  DollarSign,\n  ShoppingBag,\n  Megaphone,\n  TrendingUp,\n  Plus,\n  Edit,\n  Eye,\n  BarChart3,\n  Store,\n  MoreHorizontal,\n  Search,\n  Filter,\n  Calendar,\n  Download,\n  RefreshCw,\n  X,\n  Check,\n  AlertCircle,\n  Truck,\n  CreditCard,\n  Star,\n  ChevronDown,\n  Info,\n  Activity,\n  TriangleAlert,\n  TrendingDown,\n  Users,\n} from \"lucide-react\";\n\nexport default function SellerDashboard() {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [isDismissModalOpen, setIsDismissModalOpen] = useState(false);\n  const [dismissReason, setDismissReason] = useState(\"\");\n  const [orderToDismiss, setOrderToDismiss] = useState<any>(null);\n  const [showAddProductForm, setShowAddProductForm] = useState(false);\n  const [isSubmittingProduct, setIsSubmittingProduct] = useState(false);\n  const [expandedOrders, setExpandedOrders] = useState<Set<string>>(new Set());\n  const [selectedProduct, setSelectedProduct] = useState<any>(null);\n  const [showProductViewModal, setShowProductViewModal] = useState(false);\n  const [showProductEditModal, setShowProductEditModal] = useState(false);\n  const [productToDelete, setProductToDelete] = useState<any>(null);\n  const [showDeleteModal, setShowDeleteModal] = useState(false);\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState<\n    \"all\" | \"active\" | \"out-of-stock\"\n  >(\"all\");\n  const [showFilterDropdown, setShowFilterDropdown] = useState(false);\n\n  const { data: dashboardStats, isLoading } = useQuery({\n    queryKey: [\"/api/dashboard/seller\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/dashboard/seller\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch dashboard stats\");\n      return response.json();\n    },\n  });\n\n  const { data: ordersData = [], isLoading: ordersLoading } = useQuery({\n    queryKey: [\"/api/orders\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/orders\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch orders\");\n      const dbOrders = await response.json();\n\n      // Combine database orders with dummy orders\n      const combinedOrders = [...dbOrders, ...dummyOrders];\n      return combinedOrders;\n    },\n  });\n\n  // Fetch seller products\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/seller/products\", user?.id],\n    queryFn: async () => {\n      const response = await fetch(\"/api/seller/products\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch seller store status\n  const { data: storeStatus, isLoading: storeLoading } = useQuery({\n    queryKey: [\"/api/seller/store/status\", user?.id],\n    queryFn: async () => {\n      const response = await fetch(\"/api/seller/store/status\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch store status\");\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch categories for product modals\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\", \"en\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/categories?language=en\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch categories\");\n      return response.json();\n    },\n  });\n\n  // Status color mapping\n  const getStatusColor = (status: string) => {\n    switch (status.toLowerCase()) {\n      case \"packed\":\n        return \"bg-blue-100 text-blue-700\";\n      case \"on-way\":\n        return \"bg-orange-100 text-orange-700\";\n      case \"delivered\":\n        return \"bg-green-100 text-green-700\";\n      case \"cancelled\":\n        return \"bg-red-100 text-red-700\";\n      default:\n        return \"bg-gray-100 text-gray-700\";\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"long\",\n      day: \"numeric\",\n      hour: \"2-digit\",\n      minute: \"2-digit\",\n    });\n  };\n\n  const toggleExpandOrder = (orderId: string) => {\n    const newExpandedOrders = new Set(expandedOrders);\n    if (expandedOrders.has(orderId)) {\n      newExpandedOrders.delete(orderId);\n    } else {\n      newExpandedOrders.add(orderId);\n    }\n    setExpandedOrders(newExpandedOrders);\n  };\n\n  const handleViewOrder = async (order: any) => {\n    try {\n      let orderDetails;\n\n      // Check if this is a dummy order (has items already) or database order\n      if (order.items) {\n        // It's a dummy order with items already included\n        orderDetails = order;\n      } else {\n        // It's a database order, fetch details from API\n        const response = await fetch(`/api/orders/${order.id}`, {\n          credentials: \"include\",\n        });\n        if (!response.ok) throw new Error(\"Failed to fetch order details\");\n        orderDetails = await response.json();\n      }\n\n      setSelectedOrder({\n        id: orderDetails.id,\n        date: formatDate(orderDetails.createdAt),\n        customer: {\n          name: orderDetails.customerName,\n          avatar:\n            orderDetails.customerAvatar ||\n            \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\",\n        },\n        orderItems:\n          orderDetails.items?.map((item: any) => ({\n            id: item.id,\n            name: item.productName || \"Product\",\n            description: item.productDescription || \"\",\n            quantity: item.quantity,\n            price: `$${item.unitPrice}`,\n          })) || [],\n        totalAmount: `$${orderDetails.totalAmount}`,\n        status: orderDetails.status,\n        paymentStatus: \"Paid\",\n      });\n      setIsModalOpen(true);\n    } catch (error) {\n      console.error(\"Error fetching order details:\", error);\n    }\n  };\n\n  const handleDismissOrder = (order: any) => {\n    setOrderToDismiss(order);\n    setIsDismissModalOpen(true);\n  };\n\n  const handleAddProduct = async (productData: any) => {\n    setIsSubmittingProduct(true);\n    try {\n      const response = await fetch(\"/api/products\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(productData),\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to create product\");\n      }\n\n      const newProduct = await response.json();\n      console.log(\"Product created successfully:\", newProduct);\n\n      // Close the form and refresh the data\n      setShowAddProductForm(false);\n\n      // Invalidate queries to refresh the product list\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/seller/products\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/products\"],\n      });\n    } catch (error) {\n      console.error(\"Error creating product:\", error);\n      alert(\"Failed to create product. Please try again.\");\n    } finally {\n      setIsSubmittingProduct(false);\n    }\n  };\n\n  const confirmDismissOrder = () => {\n    if (orderToDismiss && dismissReason.trim()) {\n      console.log(\n        `Dismissing order ${orderToDismiss.id} with reason: ${dismissReason}`,\n      );\n      // Here you would typically make an API call to dismiss the order\n      setIsDismissModalOpen(false);\n      setDismissReason(\"\");\n      setOrderToDismiss(null);\n    }\n  };\n\n  const handleApproveOrder = (order: any) => {\n    console.log(`Approving order ${order.id}`);\n    // Here you would typically make an API call to approve the order\n  };\n\n  const handleViewProduct = (product: any) => {\n    setSelectedProduct(product);\n    setShowProductViewModal(true);\n  };\n\n  const handleEditProduct = (product: any) => {\n    setSelectedProduct(product);\n    setShowProductEditModal(true);\n  };\n\n  const handleCloseProductViewModal = () => {\n    setShowProductViewModal(false);\n    setSelectedProduct(null);\n  };\n\n  const handleCloseProductEditModal = () => {\n    setShowProductEditModal(false);\n    setSelectedProduct(null);\n  };\n\n  const handleExportProducts = () => {\n    if (!products.length) {\n      alert(\"No products to export\");\n      return;\n    }\n\n    const columns = [\n      { key: \"sku\", label: \"SKU\" },\n      { key: \"translations.en.name\", label: \"Product Name\" },\n      { key: \"brand\", label: \"Brand\" },\n      { key: \"price\", label: \"Price\", format: formatCurrency },\n      { key: \"stock\", label: \"Stock\" },\n      { key: \"status\", label: \"Status\", format: formatBoolean },\n      { key: \"createdAt\", label: \"Created Date\", format: formatDate },\n      { key: \"updatedAt\", label: \"Updated Date\", format: formatDate },\n    ];\n\n    const success = exportToExcel({\n      filename: `products-${new Date().toISOString().split(\"T\")[0]}`,\n      sheetName: \"Products\",\n      columns,\n      data: products,\n    });\n\n    if (success) {\n      console.log(\"Products exported successfully\");\n    } else {\n      alert(\"Failed to export products. Please try again.\");\n    }\n  };\n\n  const handleDeleteProduct = (product: any) => {\n    setProductToDelete(product);\n    setShowDeleteModal(true);\n  };\n\n  const confirmDeleteProduct = async () => {\n    if (!productToDelete) return;\n\n    try {\n      const response = await fetch(`/api/products/${productToDelete.id}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to delete product\");\n      }\n\n      // Invalidate queries to refresh the product list\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/seller/products\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/products\"],\n      });\n\n      setShowDeleteModal(false);\n      setProductToDelete(null);\n    } catch (error) {\n      console.error(\"Error deleting product:\", error);\n      alert(\"Failed to delete product. Please try again.\");\n    }\n  };\n\n  const handleSearch = () => {\n    // Filter will be applied through filteredProducts computed property\n    console.log(\"Searching for:\", searchTerm);\n  };\n\n  const handleFilterChange = (status: \"all\" | \"active\" | \"out-of-stock\") => {\n    setFilterStatus(status);\n    setShowFilterDropdown(false);\n  };\n\n  // Filter products based on search term and filter status\n  const filteredProducts = products.filter((product: any) => {\n    const matchesSearch =\n      !searchTerm ||\n      product.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.sku?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      product.brand?.toLowerCase().includes(searchTerm.toLowerCase());\n\n    const matchesFilter =\n      filterStatus === \"all\" ||\n      (filterStatus === \"active\" && product.stock > 0) ||\n      (filterStatus === \"out-of-stock\" && product.stock === 0);\n\n    return matchesSearch && matchesFilter;\n  });\n\n  if (!user || user.role !== \"seller\") {\n    return (\n      <div className=\"min-h-screen bg-gray-50 flex items-center justify-center\">\n        <p className=\"text-red-600\">Access denied. Seller role required.</p>\n      </div>\n    );\n  }\n\n  return (\n    <DashboardLayout title={t(\"header.heading\")}>\n      <div className=\"p-6\">\n        {/* Header Section */}\n        <div className=\"mb-8\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1\n                className=\"text-2xl font-bold text-gray-900\"\n                data-testid=\"text-dashboard-title\"\n              >\n                {t(\"seller.dashboard.title\")}\n              </h1>\n              <p\n                className=\"text-gray-600 mt-1\"\n                data-testid=\"text-dashboard-subtitle\"\n              >\n                {t(\"seller.dashboard.subtitle\")}\n              </p>\n            </div>\n            {/* <div className=\"flex space-x-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-admin-dashboard\"\n              >\n                Admin Dashboard\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                data-testid=\"button-customer-dashboard\"\n              >\n                Customer Dashboard\n              </Button>\n              <Button\n                size=\"sm\"\n                className=\"bg-primary-600 hover:bg-primary-700\"\n                data-testid=\"button-shop-products\"\n              >\n                Shop Products\n              </Button>\n            </div> */}\n          </div>\n        </div>\n\n        {/* Store Suspension Warning */}\n        {storeStatus?.status === \"suspended\" && (\n          <div className=\"mb-6\">\n            <Card className=\"border-red-200 bg-red-50\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-start space-x-3\">\n                  <div className=\"flex-shrink-0\">\n                    <AlertCircle className=\"h-6 w-6 text-red-600\" />\n                  </div>\n                  <div className=\"flex-1\">\n                    <h3 className=\"text-lg font-semibold text-red-800 mb-2\">\n                      Store Suspended\n                    </h3>\n                    <p className=\"text-red-700 mb-3\">\n                      Your store has been temporarily suspended. You can still\n                      access your dashboard, but your products are not visible\n                      to customers.\n                    </p>\n                    {storeStatus.suspensionReason && (\n                      <div>\n                        <p className=\"text-sm font-medium text-red-800 mb-1\">\n                          Reason for suspension:\n                        </p>\n                        <p className=\"text-sm text-red-700 bg-red-100 p-3 rounded-md\">\n                          {storeStatus.suspensionReason}\n                        </p>\n                      </div>\n                    )}\n                    <p className=\"text-sm text-red-600 mt-3\">\n                      Please contact admin for assistance to resolve this issue.\n                    </p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n\n        {/* Main Stats Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6\">\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p\n                    className=\"text-sm text-gray-500 mb-1\"\n                    data-testid=\"text-turnover-label\"\n                  >\n                    {t(\"seller.dashboard.turnover\")}\n                  </p>\n                  <p\n                    className=\"text-xl font-semibold text-gray-900 mb-2\"\n                    data-testid=\"text-turnover\"\n                  >\n                    458,000.00 DA\n                  </p>\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n                    <span className=\"text-xs text-green-600\">+10.5%</span>\n                    <span className=\"text-xs text-gray-400 ml-1\">\n                      vs previous period\n                    </span>\n                  </div>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center\">\n                  <DollarSign className=\"h-5 w-5 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p\n                    className=\"text-sm text-gray-500 mb-1\"\n                    data-testid=\"text-orders-label\"\n                  >\n                    {t(\"seller.dashboard.orders\")}\n                  </p>\n                  <p\n                    className=\"text-xl font-semibold text-gray-900 mb-2\"\n                    data-testid=\"text-orders\"\n                  >\n                    85\n                  </p>\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n                    <span className=\"text-xs text-green-600\">+7.2%</span>\n                    <span className=\"text-xs text-gray-400 ml-1\">\n                      vs previous period\n                    </span>\n                  </div>\n                </div>\n                <div className=\"w-10 h-10 bg-orange-50 rounded-lg flex items-center justify-center\">\n                  <ShoppingBag className=\"h-5 w-5 text-orange-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p\n                    className=\"text-sm text-gray-500 mb-1\"\n                    data-testid=\"text-products-label\"\n                  >\n                    {t(\"seller.dashboard.products\")}\n                  </p>\n                  <p\n                    className=\"text-xl font-semibold text-gray-900 mb-2\"\n                    data-testid=\"text-products\"\n                  >\n                    124\n                  </p>\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n                    <span className=\"text-xs text-green-600\">+3.8%</span>\n                    <span className=\"text-xs text-gray-400 ml-1\">\n                      vs previous period\n                    </span>\n                  </div>\n                </div>\n                <div className=\"w-10 h-10 bg-blue-50 rounded-lg flex items-center justify-center\">\n                  <Users className=\"h-5 w-5 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p\n                    className=\"text-sm text-gray-500 mb-1\"\n                    data-testid=\"text-promotions-label\"\n                  >\n                    {t(\"seller.dashboard.promotions\")}\n                  </p>\n                  <p\n                    className=\"text-xl font-semibold text-gray-900 mb-2\"\n                    data-testid=\"text-promotions\"\n                  >\n                    8\n                  </p>\n                  <div className=\"flex items-center\">\n                    <TrendingUp className=\"h-3 w-3 text-green-500 mr-1\" />\n                    <span className=\"text-xs text-green-600\">+25%</span>\n                    <span className=\"text-xs text-gray-400 ml-1\">\n                      vs previous period\n                    </span>\n                  </div>\n                </div>\n                <div className=\"w-10 h-10 bg-green-50 rounded-lg flex items-center justify-center\">\n                  <Eye className=\"h-5 w-5 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Secondary Stats Row */}\n        <div className=\"grid grid-cols-5 gap-4 mb-8\">\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">\n                    {t(\"seller.dashboard.total\")}\n                  </p>\n                  <p className=\"text-lg font-semibold text-gray-900\">0</p>\n                </div>\n                <Info className=\"h-4 w-4 text-gray-400\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">\n                    {t(\"seller.dashboard.assets\")}\n                  </p>\n                  <p className=\"text-lg font-semibold text-gray-900\">0</p>\n                </div>\n                <Activity className=\"h-4 w-4 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">\n                    {t(\"seller.dashboard.breakup\")}\n                  </p>\n                  <p className=\"text-lg font-semibold text-gray-900\">0</p>\n                </div>\n                <TriangleAlert className=\"h-4 w-4 text-orange-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">\n                    {t(\"seller.dashboard.lowstock\")}\n                  </p>\n                  <p className=\"text-lg font-semibold text-gray-900\">0</p>\n                </div>\n                <TrendingDown className=\"h-4 w-4 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card className=\"bg-white border border-gray-200\">\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-500 mb-1\">\n                    {t(\"seller.dashboard.featured\")}\n                  </p>\n                  <p className=\"text-lg font-semibold text-gray-900\">0</p>\n                </div>\n                <Star className=\"h-4 w-4 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Product Management */}\n        <div className=\"mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle className=\"flex items-center\">\n                <Package className=\"h-5 w-5 mr-2\" />\n                {t(\"seller.dashboard.productmanagement\")}\n              </CardTitle>\n              <div className=\"flex space-x-2 items-center\">\n                <div className=\"flex items-center space-x-2\">\n                  <Input\n                    placeholder=\"Search products...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"w-64\"\n                    data-testid=\"input-search-products\"\n                  />\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={handleSearch}\n                    data-testid=\"button-search\"\n                  >\n                    <Search className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <DropdownMenu\n                  open={showFilterDropdown}\n                  onOpenChange={setShowFilterDropdown}\n                >\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid=\"button-filter\"\n                    >\n                      <Filter className=\"h-4 w-4 mr-2\" />\n                      {filterStatus === \"all\"\n                        ? \"All\"\n                        : filterStatus === \"active\"\n                          ? \"Active\"\n                          : \"Out of Stock\"}\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuItem onClick={() => handleFilterChange(\"all\")}>\n                      All Products\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => handleFilterChange(\"active\")}\n                    >\n                      Active Products\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => handleFilterChange(\"out-of-stock\")}\n                    >\n                      Out of Stock\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={handleExportProducts}\n                  data-testid=\"button-export-products\"\n                >\n                  {t(\"seller.dashboard.export\")}\n                </Button>\n                <Button\n                  size=\"sm\"\n                  className=\"bg-primary-600 hover:bg-primary-700\"\n                  onClick={() => setShowAddProductForm(true)}\n                  data-testid=\"button-add-product\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  {t(\"seller.dashboard.addproduct\")}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              {productsLoading ? (\n                <div className=\"space-y-3\">\n                  {Array.from({ length: 5 }).map((_, index) => (\n                    <Skeleton key={index} className=\"h-16 w-full\" />\n                  ))}\n                </div>\n              ) : filteredProducts.length > 0 ? (\n                <Table>\n                  <TableHeader>\n                    <TableRow>\n                      <TableHead>\n                        {t(\"seller.productManagment.table.image\")}\n                      </TableHead>\n                      <TableHead>\n                        {t(\"seller.productManagment.table.productName\")}\n                      </TableHead>\n                      <TableHead>\n                        {t(\"seller.productManagment.table.price\")}\n                      </TableHead>\n                      <TableHead>\n                        {t(\"seller.productManagment.table.stock\")}\n                      </TableHead>\n                      <TableHead>\n                        {t(\"seller.productManagment.table.sku\")}\n                      </TableHead>\n                      <TableHead>\n                        {t(\"seller.productManagment.table.status\")}\n                      </TableHead>\n                      <TableHead>\n                        {t(\"seller.productManagment.table.actions\")}\n                      </TableHead>\n                    </TableRow>\n                  </TableHeader>\n                  <TableBody>\n                    {filteredProducts.map((product: any) => (\n                      <TableRow key={product.id} className=\"hover:bg-gray-50\">\n                        <TableCell>\n                          <div className=\"w-12 h-12 bg-gray-100 rounded overflow-hidden\">\n                            {product.images?.[0] ? (\n                              <img\n                                src={product.images[0]}\n                                alt={product.name}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            ) : (\n                              <div className=\"w-full h-full flex items-center justify-center\">\n                                <Package className=\"h-4 w-4 text-gray-400\" />\n                              </div>\n                            )}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium text-gray-900\">\n                            {product.name}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"font-medium\">${product.price}</div>\n                        </TableCell>\n                        <TableCell>\n                          <div>{product.stock || 0}</div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm text-gray-600\">\n                            {product.sku}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge\n                            className={\n                              product.stock > 0\n                                ? \"bg-green-100 text-green-800\"\n                                : \"bg-red-100 text-red-800\"\n                            }\n                          >\n                            {product.stock > 0 ? \"Active\" : \"Out of Stock\"}\n                          </Badge>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-2\">\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0\"\n                              data-testid={`button-view-${product.id}`}\n                              onClick={() => handleViewProduct(product)}\n                            >\n                              <Eye className=\"h-4 w-4 text-gray-600\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0\"\n                              data-testid={`button-edit-${product.id}`}\n                              onClick={() => handleEditProduct(product)}\n                            >\n                              <Edit className=\"h-4 w-4 text-gray-600\" />\n                            </Button>\n                            <Button\n                              size=\"sm\"\n                              variant=\"ghost\"\n                              className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\n                              data-testid={`button-delete-${product.id}`}\n                              onClick={() => handleDeleteProduct(product)}\n                            >\n                              <X className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    ))}\n                  </TableBody>\n                </Table>\n              ) : products.length > 0 ? (\n                <div className=\"flex items-center justify-center py-12\">\n                  <div className=\"text-center\">\n                    <Package className=\"mx-auto h-12 w-12 text-gray-400\" />\n                    <h3 className=\"mt-2 text-sm font-medium text-gray-900\">\n                      No products match your filters\n                    </h3>\n                    <p className=\"mt-1 text-sm text-gray-500\">\n                      Try adjusting your search or filter criteria.\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"flex items-center justify-center py-12\">\n                  <div className=\"text-center\">\n                    <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                    <p className=\"text-gray-500 mb-4\">\n                      {t(\"seller.dashboard.noproducts\")}\n                    </p>\n                    <Button\n                      className=\"bg-primary-600 hover:bg-primary-700\"\n                      onClick={() => setShowAddProductForm(true)}\n                      data-testid=\"button-add-first-product\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      {t(\"seller.dashboard.addfirstproduct\")}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Charts Row */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8\">\n          {/* Sales Trend */}\n          <Card>\n            <CardHeader>\n              <CardTitle>{t(\"seller.dashboard.salestrend\")}</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                <BarChart3 className=\"h-8 w-8 mr-2\" />\n                {t(\"seller.dashboard.salestrend.place\")}\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Distribution by Category */}\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {t(\"seller.dashboard.distributioncategory\")}\n              </CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"h-64 flex items-center justify-center text-gray-500\">\n                <Package className=\"h-8 w-8 mr-2\" />\n                {t(\"seller.dashboard.distributioncategory.place\")}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Popular Products */}\n        <div className=\"mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>{t(\"seller.popular.products\")}</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\">\n                {t(\"seller.popular.results\")}\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {dummyProducts.map((product, index) => (\n                  <div\n                    key={index}\n                    className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\"\n                  >\n                    <div className=\"flex items-center space-x-3\">\n                      <div className=\"w-12 h-12 bg-gray-200 rounded-lg flex items-center justify-center\">\n                        <Package className=\"h-6 w-6 text-gray-400\" />\n                      </div>\n                      <div>\n                        <p className=\"font-medium text-gray-900\">\n                          {product.name}\n                        </p>\n                        <div className=\"flex items-center space-x-2\">\n                          <div className=\"flex text-yellow-400\">\n                            {Array.from({ length: 5 }).map((_, i) => (\n                              <Star\n                                key={i}\n                                className={`h-3 w-3 ${i < Math.floor(parseFloat(product.rating)) ? \"fill-current\" : \"\"}`}\n                              />\n                            ))}\n                          </div>\n                          <span className=\"text-xs text-gray-500\">\n                            ({product.rating})\n                          </span>\n                        </div>\n                        <p className=\"text-xs text-gray-500\">{product.sales}</p>\n                      </div>\n                    </div>\n                    <p className=\"font-semibold text-gray-900\">\n                      ${product.price}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Current Disputes */}\n        <div className=\"mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>{t(\"seller.CurrentDisputes\")}</CardTitle>\n              <div className=\"flex space-x-2\">\n                <Button variant=\"ghost\" size=\"sm\">\n                  2 {t(\"seller.CurrentDisputes.cases\")}\n                </Button>\n                <Button variant=\"ghost\" size=\"sm\">\n                  {t(\"seller.CurrentDisputes.history\")}\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent>\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>{t(\"seller.recent.table.order\")}</TableHead>\n                    <TableHead>{t(\"seller.recent.table.product\")}</TableHead>\n                    <TableHead>{t(\"seller.recent.table.amount\")}</TableHead>\n                    <TableHead>{t(\"seller.recent.table.status\")}</TableHead>\n                    <TableHead>{t(\"seller.recent.table.date\")}</TableHead>\n                    <TableHead>{t(\"seller.recent.table.actions\")}</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  <TableRow>\n                    <TableCell>ORD-001</TableCell>\n                    <TableCell>Charger not received</TableCell>\n                    <TableCell>4700.00</TableCell>\n                    <TableCell>\n                      <Badge className=\"bg-yellow-100 text-yellow-700\">\n                        Waiting\n                      </Badge>\n                    </TableCell>\n                    <TableCell>April 11, 2023</TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem>\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <AlertCircle className=\"h-4 w-4 mr-2\" />\n                            Delivery\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                  <TableRow>\n                    <TableCell>ORD-002</TableCell>\n                    <TableCell>Two items</TableCell>\n                    <TableCell>4700.00</TableCell>\n                    <TableCell>\n                      <Badge className=\"bg-red-100 text-red-700\">\n                        Returned\n                      </Badge>\n                    </TableCell>\n                    <TableCell>April 11, 2023</TableCell>\n                    <TableCell>\n                      <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                          <Button variant=\"ghost\" size=\"sm\">\n                            <MoreHorizontal className=\"h-4 w-4\" />\n                          </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent align=\"end\">\n                          <DropdownMenuItem>\n                            <Eye className=\"h-4 w-4 mr-2\" />\n                            Details\n                          </DropdownMenuItem>\n                          <DropdownMenuItem>\n                            <AlertCircle className=\"h-4 w-4 mr-2\" />\n                            Delivery\n                          </DropdownMenuItem>\n                        </DropdownMenuContent>\n                      </DropdownMenu>\n                    </TableCell>\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Recent Orders */}\n        <div className=\"mb-8\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between\">\n              <CardTitle>{t(\"seller.recent.orders\")}</CardTitle>\n              <Button variant=\"ghost\" size=\"sm\">\n                {t(\"seller.recent.orders.view\")}\n              </Button>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-2 overflow-x-auto\">\n                {ordersLoading ? (\n                  Array.from({ length: 3 }).map((_, index) => (\n                    <div\n                      key={index}\n                      className=\"border rounded-lg p-4  min-w-max\"\n                    >\n                      <div className=\"flex items-center space-x-4\">\n                        <Skeleton className=\"h-4 w-4\" />\n                        <Skeleton className=\"h-4 w-20\" />\n                        <Skeleton className=\"h-8 w-8 rounded-full\" />\n                        <Skeleton className=\"h-4 w-32\" />\n                        <Skeleton className=\"h-4 w-24\" />\n                        <Skeleton className=\"h-4 w-20\" />\n                        <Skeleton className=\"h-4 w-16\" />\n                        <Skeleton className=\"h-4 w-16\" />\n                        <Skeleton className=\"h-4 w-20\" />\n                        <Skeleton className=\"h-4 w-8\" />\n                      </div>\n                    </div>\n                  ))\n                ) : ordersData.length === 0 ? (\n                  <div className=\"text-center py-8 text-gray-500\">\n                    No orders found\n                  </div>\n                ) : (\n                  ordersData.map((order) => (\n                    <div\n                      key={order.id}\n                      className=\"border rounded-lg bg-white shadow-sm min-w-max\"\n                    >\n                      {/* Order Row */}\n                      <div\n                        className=\"flex items-center p-4 cursor-pointer hover:bg-gray-50\"\n                        onClick={() => toggleExpandOrder(order.id)}\n                      >\n                        <div className=\"flex items-center space-x-4 flex-1\">\n                          {/* Expand/Collapse Button */}\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\"\n                            className=\"w-6 h-6 p-0\"\n                          >\n                            <ChevronDown\n                              className={`h-4 w-4 transition-transform ${\n                                expandedOrders.has(order.id) ? \"rotate-180\" : \"\"\n                              }`}\n                            />\n                          </Button>\n\n                          {/* Order ID */}\n                          <div className=\"min-w-[100px]\">\n                            <span className=\"font-medium\">\n                              ORD-{order.id.slice(-4)}\n                            </span>\n                          </div>\n\n                          {/* Customer */}\n                          <div className=\"flex items-center space-x-3 min-w-[200px]\">\n                            <Avatar className=\"h-8 w-8\">\n                              <AvatarImage\n                                src={\n                                  order.customerAvatar ||\n                                  \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=40&h=40\"\n                                }\n                                alt={order.customerName}\n                              />\n                              <AvatarFallback>\n                                {order.customerName\n                                  ?.split(\" \")\n                                  .map((n: string) => n[0])\n                                  .join(\"\") || \"U\"}\n                              </AvatarFallback>\n                            </Avatar>\n                            <span className=\"font-medium\">\n                              {order.customerName || \"Unknown\"}\n                            </span>\n                          </div>\n\n                          {/* Store */}\n                          <div className=\"flex items-center space-x-2 min-w-[120px]\">\n                            <div className=\"w-6 h-6 bg-blue-100 rounded flex items-center justify-center\">\n                              <Store className=\"h-3 w-3 text-blue-600\" />\n                            </div>\n                            <span>My Store</span>\n                          </div>\n\n                          {/* Status */}\n                          <div className=\"min-w-[100px]\">\n                            <Badge className={getStatusColor(order.status)}>\n                              {order.status}\n                            </Badge>\n                          </div>\n\n                          {/* Payment */}\n                          <div className=\"min-w-[80px]\">\n                            <Badge className=\"bg-green-100 text-green-700\">\n                              {t(\"order.paid\")}\n                            </Badge>\n                          </div>\n\n                          {/* Items */}\n                          <div className=\"min-w-[100px]\">\n                            <span className=\"text-gray-600\">\n                              3 {t(\"order.articles\")}\n                            </span>\n                          </div>\n\n                          {/* Amount */}\n                          <div className=\"min-w-[100px]\">\n                            <span className=\"font-semibold\">\n                              ${order.totalAmount}\n                            </span>\n                          </div>\n                        </div>\n\n                        {/* Actions */}\n                        <div\n                          className=\"ml-4\"\n                          onClick={(e) => e.stopPropagation()}\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => handleViewOrder(order)}\n                            >\n                              <Eye className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => handleApproveOrder(order)}\n                            >\n                              <Check className=\"h-4 w-4\" />\n                            </Button>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              onClick={() => handleDismissOrder(order)}\n                            >\n                              <X className=\"h-4 w-4 text-red-500\" />\n                            </Button>\n                          </div>\n                          {/* <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                data-testid={`dropdown-actions-${order.id}`}\n                              >\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\">\n                              <DropdownMenuItem\n                                onClick={() => handleViewOrder(order)}\n                              >\n                                <Eye className=\"h-4 w-4 mr-2\" />\n                                {t(\"order.viewDetails\")}\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => handleApproveOrder(order)}\n                              >\n                                <Check className=\"h-4 w-4 mr-2 text-green-600\" />\n                                {t(\"order.approve\")}\n                              </DropdownMenuItem>\n                              <DropdownMenuItem\n                                onClick={() => handleDismissOrder(order)}\n                              >\n                                <X className=\"h-4 w-4 mr-2 text-red-600\" />\n                                {t(\"order.reject\")}\n                              </DropdownMenuItem>\n                            </DropdownMenuContent>\n                          </DropdownMenu> */}\n                        </div>\n                      </div>\n\n                      {/* Expanded Content */}\n                      {expandedOrders.has(order.id) && (\n                        <div className=\"border-t bg-gray-50 p-6\">\n                          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                            {/* Customer Information */}\n                            <div className=\"space-y-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Users className=\"h-4 w-4 text-gray-500\" />\n                                <h3 className=\"font-medium\">\n                                  {t(\"order.customerInformation\")}\n                                </h3>\n                              </div>\n                              <div className=\"space-y-2 text-sm\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Avatar className=\"h-6 w-6\">\n                                    <AvatarImage src={order.customerAvatar} />\n                                    <AvatarFallback>\n                                      {order.customerName\n                                        ?.split(\" \")\n                                        .map((n: string) => n[0])\n                                        .join(\"\") || \"U\"}\n                                    </AvatarFallback>\n                                  </Avatar>\n                                  <span className=\"font-medium\">\n                                    {order.customerName || \"Unknown\"}\n                                  </span>\n                                </div>\n                                <p className=\"text-gray-600\">\n                                  {t(\"order.clientId\")} MD-{order.id.slice(-5)}\n                                </p>\n                                <p className=\"text-gray-600\">\n                                  {order.customerEmail ||\n                                    \"customer@example.com\"}\n                                </p>\n                                <p className=\"text-gray-600\">\n                                  📞 {order.customerPhone || \"0573456789\"}\n                                </p>\n                                <p className=\"text-xs text-gray-500 mt-2\">\n                                  {t(\"order.orderPlacedOn\")}{\" \"}\n                                  {formatDate(order.createdAt)}\n                                </p>\n                              </div>\n                            </div>\n\n                            {/* Products Ordered */}\n                            <div className=\"space-y-4\">\n                              <div className=\"flex items-center space-x-2\">\n                                <Package className=\"h-4 w-4 text-gray-500\" />\n                                <h3 className=\"font-medium\">\n                                  {t(\"order.productsOrdered\")} ( 3 )\n                                </h3>\n                              </div>\n                              <div className=\"space-y-3\">\n                                {/* Sample products - you would map over actual order items */}\n                                <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n                                  <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n                                    <ShoppingBag className=\"h-5 w-5 text-blue-600\" />\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <p className=\"font-medium text-sm\">\n                                      Protective shell\n                                    </p>\n                                    <p className=\"text-xs text-gray-500\">\n                                      Accessories\n                                    </p>\n                                    <p className=\"text-xs text-gray-500\">\n                                      SKU: SKU-2345-1\n                                    </p>\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <p className=\"text-sm\">Qty: 1</p>\n                                    <p className=\"text-sm font-medium\">\n                                      Price: $8.00\n                                    </p>\n                                    <p className=\"text-sm font-semibold text-green-600\">\n                                      $8.00 DA\n                                    </p>\n                                  </div>\n                                </div>\n\n                                <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n                                  <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n                                    <ShoppingBag className=\"h-5 w-5 text-blue-600\" />\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <p className=\"font-medium text-sm\">\n                                      Apple Watch Series 9\n                                    </p>\n                                    <p className=\"text-xs text-gray-500\">\n                                      Accessories\n                                    </p>\n                                    <p className=\"text-xs text-gray-500\">\n                                      SKU: SKU-2345-2\n                                    </p>\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <p className=\"text-sm\">Qty: 1</p>\n                                    <p className=\"text-sm font-medium\">\n                                      Price: $106.99\n                                    </p>\n                                    <p className=\"text-sm font-semibold text-green-600\">\n                                      $319.97 DA\n                                    </p>\n                                  </div>\n                                </div>\n\n                                <div className=\"flex items-center space-x-3 bg-white p-3 rounded border\">\n                                  <div className=\"w-10 h-10 bg-blue-100 rounded flex items-center justify-center\">\n                                    <ShoppingBag className=\"h-5 w-5 text-blue-600\" />\n                                  </div>\n                                  <div className=\"flex-1\">\n                                    <p className=\"font-medium text-sm\">\n                                      iPad Air tablet\n                                    </p>\n                                    <p className=\"text-xs text-gray-500\">\n                                      Electronics\n                                    </p>\n                                    <p className=\"text-xs text-gray-500\">\n                                      SKU: SKU-2345-3\n                                    </p>\n                                  </div>\n                                  <div className=\"text-right\">\n                                    <p className=\"text-sm\">Qty: 1</p>\n                                    <p className=\"text-sm font-medium\">\n                                      Price: $456.99\n                                    </p>\n                                    <p className=\"text-sm font-semibold text-green-600\">\n                                      $456.99 DA\n                                    </p>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n\n                            {/* Delivery & Financial Summary */}\n                            <div className=\"space-y-6\">\n                              {/* Delivery Information */}\n                              <div className=\"space-y-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <Truck className=\"h-4 w-4 text-gray-500\" />\n                                  <h3 className=\"font-medium\">\n                                    {t(\"order.delivery\")}\n                                  </h3>\n                                </div>\n                                <div className=\"space-y-2 text-sm\">\n                                  <div>\n                                    <p className=\"font-medium\">\n                                      {t(\"order.deliveryAddress\")}\n                                    </p>\n                                    <p className=\"text-gray-600\">\n                                      34 Independence Avenue\n                                    </p>\n                                    <p className=\"text-gray-600\">\n                                      Tlemcen, 13000\n                                    </p>\n                                    <p className=\"text-gray-600\">Algeria</p>\n                                  </div>\n                                  <div className=\"pt-2\">\n                                    <p className=\"font-medium\">\n                                      {t(\"order.method\")}\n                                    </p>\n                                    <p className=\"text-gray-600\">\n                                      {t(\"order.freeDelivery\")}\n                                    </p>\n                                    <p className=\"text-gray-600\">\n                                      {t(\"order.estimatedTime\")} 2-4{\" \"}\n                                      {t(\"order.workingDays\")}\n                                    </p>\n                                    <p className=\"text-gray-600\">\n                                      {t(\"order.status\")}{\" \"}\n                                      <span className=\"text-blue-600 font-medium\">\n                                        {t(\"order.shipped\")}\n                                      </span>\n                                    </p>\n                                  </div>\n                                </div>\n                              </div>\n\n                              {/* Financial Summary */}\n                              <div className=\"space-y-4\">\n                                <div className=\"flex items-center space-x-2\">\n                                  <CreditCard className=\"h-4 w-4 text-gray-500\" />\n                                  <h3 className=\"font-medium\">\n                                    {t(\"order.financialSummary\")}\n                                  </h3>\n                                </div>\n                                <div className=\"space-y-2 text-sm bg-white p-4 rounded border\">\n                                  <div className=\"flex justify-between\">\n                                    <span>\n                                      {t(\"order.subtotal\")} ( 3{\" \"}\n                                      {t(\"order.items\")} ):\n                                    </span>\n                                    <span>649.795 DA</span>\n                                  </div>\n                                  <div className=\"flex justify-between\">\n                                    <span>{t(\"order.deliveryCosts\")}</span>\n                                    <span className=\"text-green-600\">\n                                      {t(\"order.free\")}\n                                    </span>\n                                  </div>\n                                  <div className=\"flex justify-between\">\n                                    <span>{t(\"order.vat\")} (19%):</span>\n                                    <span>123.461.05 DA</span>\n                                  </div>\n                                  <hr className=\"my-2\" />\n                                  <div className=\"flex justify-between font-semibold text-base\">\n                                    <span>{t(\"order.total\")}</span>\n                                    <span className=\"text-green-600\">\n                                      773,256.05 DA\n                                    </span>\n                                  </div>\n                                  <div className=\"flex items-center space-x-2 mt-2\">\n                                    <Badge className=\"bg-green-100 text-green-700\">\n                                      {t(\"order.payment\")} {t(\"order.paid\")}\n                                    </Badge>\n                                  </div>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n\n      {/* Order Details Modal */}\n      {selectedOrder && (\n        <OrderDetailsModal\n          isOpen={isModalOpen}\n          onClose={() => setIsModalOpen(false)}\n          order={selectedOrder}\n        />\n      )}\n\n      {/* Dismiss Order Modal */}\n      <Dialog open={isDismissModalOpen} onOpenChange={setIsDismissModalOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Dismiss Order</DialogTitle>\n            <DialogDescription>\n              Please provide a reason for dismissing order {orderToDismiss?.id}\n            </DialogDescription>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"dismiss-reason\">Reason for dismissal</Label>\n              <Textarea\n                id=\"dismiss-reason\"\n                placeholder=\"Enter the reason for dismissing this order...\"\n                value={dismissReason}\n                onChange={(e) => setDismissReason(e.target.value)}\n                className=\"mt-2\"\n                rows={4}\n              />\n            </div>\n          </div>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsDismissModalOpen(false);\n                setDismissReason(\"\");\n                setOrderToDismiss(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={confirmDismissOrder}\n              disabled={!dismissReason.trim()}\n              className=\"bg-red-600 hover:bg-red-700\"\n            >\n              Dismiss Order\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n\n      {/* Add Product Form */}\n      {showAddProductForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4\">\n          <div className=\"bg-white rounded-lg max-w-7xl w-full max-h-[90vh] overflow-auto\">\n            <AdvancedAddProductForm\n              onSubmit={handleAddProduct}\n              onCancel={() => setShowAddProductForm(false)}\n              isLoading={isSubmittingProduct}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Product View Modal */}\n      <ProductViewModal\n        product={selectedProduct}\n        isOpen={showProductViewModal}\n        onClose={handleCloseProductViewModal}\n        categories={categories}\n        showActions={false}\n      />\n\n      {/* Product Edit Modal */}\n      <ProductEditModal\n        product={selectedProduct}\n        isOpen={showProductEditModal}\n        onClose={handleCloseProductEditModal}\n      />\n\n      {/* Delete Confirmation Modal */}\n      <Dialog open={showDeleteModal} onOpenChange={setShowDeleteModal}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Product</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete \"{productToDelete?.name}\"? This\n              action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setShowDeleteModal(false);\n                setProductToDelete(null);\n              }}\n              data-testid=\"button-cancel-delete\"\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={confirmDeleteProduct}\n              className=\"bg-red-600 hover:bg-red-700\"\n              data-testid=\"button-confirm-delete\"\n            >\n              Delete Product\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </DashboardLayout>\n  );\n}\n","size_bytes":119643},"client/src/pages/seller/products/edit.tsx":{"content":"import { useState } from \"react\";\nimport { useParams } from \"wouter\";\nimport { useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { AdvancedAddProductForm } from \"@/components/forms/advanced-add-product-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { ArrowLeft } from \"lucide-react\";\n\nexport default function EditProduct() {\n  const { id } = useParams();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n  const [isUpdatingProduct, setIsUpdatingProduct] = useState(false);\n\n  // Fetch product details for editing\n  const { data: product, isLoading, error } = useQuery({\n    queryKey: [\"/api/products\", id],\n    queryFn: async () => {\n      const response = await fetch(`/api/products/${id}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch product\");\n      return response.json();\n    },\n    enabled: !!id,\n  });\n\n  const handleProductUpdate = async (data: any) => {\n    setIsUpdatingProduct(true);\n    try {\n      const response = await fetch(`/api/products/${id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to update product\");\n      }\n\n      const updatedProduct = await response.json();\n      console.log(\"Product updated:\", updatedProduct);\n\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully!\",\n      });\n\n      // Invalidate queries to refresh data\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/seller/products\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/products\", id],\n      });\n\n      // Navigate back to products page\n      window.location.href = \"/dashboard/seller/products\";\n    } catch (error) {\n      console.error(\"Error updating product:\", error);\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product. Please try again.\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsUpdatingProduct(false);\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout>\n        <div className=\"space-y-6 p-6\">\n          <div className=\"flex items-center gap-4\">\n            <Skeleton className=\"h-10 w-10\" />\n            <div>\n              <Skeleton className=\"h-6 w-48 mb-2\" />\n              <Skeleton className=\"h-4 w-32\" />\n            </div>\n          </div>\n          <div className=\"space-y-4\">\n            <Skeleton className=\"h-12 w-full\" />\n            <Skeleton className=\"h-32 w-full\" />\n            <Skeleton className=\"h-12 w-full\" />\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  if (error || !product) {\n    return (\n      <DashboardLayout>\n        <div className=\"min-h-[400px] flex items-center justify-center\">\n          <div className=\"text-center\">\n            <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">\n              Product Not Found\n            </h1>\n            <p className=\"text-gray-600 mb-4\">\n              The product you're trying to edit doesn't exist or you don't have permission to edit it.\n            </p>\n            <Button onClick={() => window.location.href = \"/dashboard/seller/products\"}>\n              <ArrowLeft className=\"h-4 w-4 mr-2\" />\n              Back to Products\n            </Button>\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => window.location.href = \"/dashboard/seller/products\"}\n          >\n            <ArrowLeft className=\"h-4 w-4 mr-2\" />\n            Back to Products\n          </Button>\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\n              Edit Product\n            </h1>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400\">\n              Update your product information and settings\n            </p>\n          </div>\n        </div>\n\n        {/* Edit Form */}\n        <div className=\"bg-white dark:bg-gray-800 rounded-lg shadow-sm\">\n          <AdvancedAddProductForm\n            onSubmit={handleProductUpdate}\n            onCancel={() => window.location.href = \"/dashboard/seller/products\"}\n            isLoading={isUpdatingProduct}\n            editMode={true}\n            editProduct={product}\n          />\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":4908},"client/src/pages/seller/products/index.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { AdvancedAddProductForm } from \"@/components/forms/advanced-add-product-form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Search,\n  Grid3X3,\n  List,\n  Plus,\n  Edit,\n  Eye,\n  MoreHorizontal,\n  Filter,\n  Star,\n  Package,\n  AlertTriangle,\n  X,\n  ShoppingCart,\n  Heart,\n  Trash2,\n} from \"lucide-react\";\n\ninterface Product {\n  id: string;\n  name: string;\n  price: string;\n  originalPrice?: string;\n  stock: number;\n  images: string[];\n  isFeatured: boolean;\n  rating: number;\n  reviewCount: number;\n  vendorName: string;\n  categoryId: string;\n  sku: string;\n  brand: string;\n  status: \"active\" | \"inactive\";\n  translations?: {\n    [key: string]: {\n      name: string;\n      description: string;\n      highlights?: string;\n    };\n  };\n}\n\nexport default function SellerProducts() {\n  const { t, i18n } = useTranslation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"recent\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [showAddProductDialog, setShowAddProductDialog] = useState(false);\n  const [showPreviewDialog, setShowPreviewDialog] = useState(false);\n  const [previewProduct, setPreviewProduct] = useState<Product | null>(null);\n  const [showEditProductDialog, setShowEditProductDialog] = useState(false);\n  const [editProduct, setEditProduct] = useState<Product | null>(null);\n  const [showDeleteConfirmDialog, setShowDeleteConfirmDialog] = useState(false);\n  const [productToDelete, setProductToDelete] = useState<Product | null>(null);\n  const [isCreatingProduct, setIsCreatingProduct] = useState(false);\n\n  // Fetch seller's products\n  const {\n    data: products = [],\n    isLoading,\n    error,\n  } = useQuery({\n    queryKey: [\"/api/seller/products\", user?.id, i18n.language],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/seller/products?language=${i18n.language}`,\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\", i18n.language],\n    queryFn: async () => {\n      const response = await fetch(`/api/categories?language=${i18n.language}`);\n      if (!response.ok) throw new Error(\"Failed to fetch categories\");\n      return response.json();\n    },\n  });\n\n  // Type assertion for categories\n  const typedCategories = categories as any[];\n\n  // Seed dummy products mutation\n  const seedProductsMutation = useMutation({\n    mutationFn: async () => {\n      const response = await fetch(\"/api/seller/seed-products\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to seed products\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/seller/products\"] });\n    },\n  });\n\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const response = await fetch(`/api/products/${productId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to delete product\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/seller/products\"] });\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDeleteProduct = (productId: string) => {\n    const product = products.find((p: Product) => p.id === productId);\n    if (product) {\n      setProductToDelete(product);\n      setShowDeleteConfirmDialog(true);\n    }\n  };\n\n  const confirmDeleteProduct = () => {\n    if (productToDelete) {\n      deleteProductMutation.mutate(productToDelete.id);\n      setShowDeleteConfirmDialog(false);\n      setProductToDelete(null);\n    }\n  };\n\n  const cancelDeleteProduct = () => {\n    setShowDeleteConfirmDialog(false);\n    setProductToDelete(null);\n  };\n\n  const handleEditProduct = async (product: Product) => {\n    try {\n      const response = await fetch(`/api/seller/products/${product.id}/edit`, {\n        credentials: \"include\",\n      });\n\n      if (!response.ok) {\n        throw new Error(\"Failed to fetch product details\");\n      }\n\n      const productWithTranslations = await response.json();\n      setEditProduct(productWithTranslations);\n      setShowEditProductDialog(true);\n    } catch (error) {\n      console.error(\"Error fetching product for edit:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to load product details for editing\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Filter products based on search and filters\n  const filteredProducts = (products as Product[]).filter(\n    (product: Product) => {\n      const matchesSearch =\n        searchTerm === \"\" ||\n        product.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        product.sku.toLowerCase().includes(searchTerm.toLowerCase());\n\n      const matchesCategory =\n        selectedCategory === \"all\" || product.categoryId === selectedCategory;\n\n      const matchesStatus =\n        selectedStatus === \"all\" ||\n        (selectedStatus === \"active\" && product.stock > 0) ||\n        (selectedStatus === \"inactive\" && product.stock === 0);\n\n      return matchesSearch && matchesCategory && matchesStatus;\n    },\n  );\n\n  // Sort products\n  const sortedProducts = [...filteredProducts].sort(\n    (a: Product, b: Product) => {\n      switch (sortBy) {\n        case \"recent\":\n          return new Date(b.id).getTime() - new Date(a.id).getTime();\n        case \"name\":\n          return a.name.localeCompare(b.name);\n        case \"price-high\":\n          return parseFloat(b.price) - parseFloat(a.price);\n        case \"price-low\":\n          return parseFloat(a.price) - parseFloat(b.price);\n        default:\n          return 0;\n      }\n    },\n  );\n\n  const handleAddProduct = () => {\n    setShowAddProductDialog(true);\n  };\n\n  return (\n    <DashboardLayout title={t(\"header.heading\")}>\n      <div className=\"space-y-6 p-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-semibold text-gray-900 dark:text-white\">\n              {t(\"product.heading\")}\n            </h1>\n            <p className=\"text-sm text-gray-600 dark:text-gray-400 mt-1\">\n              {t(\"product.subheading\")}\n            </p>\n          </div>\n          <div className=\"flex gap-3\">\n            {/* {(products as Product[]).length === 0 && (\n              <Button\n                onClick={() => seedProductsMutation.mutate()}\n                disabled={seedProductsMutation.isPending}\n                variant=\"outline\"\n                className=\"border-green-600 text-green-600 hover:bg-green-50\"\n                data-testid=\"button-seed-products\"\n              >\n                <Package className=\"h-4 w-4 mr-2\" />\n                {seedProductsMutation.isPending\n                  ? \"Creating...\"\n                  : \"Add Sample Products\"}\n              </Button>\n            )} */}\n            <Button\n              onClick={handleAddProduct}\n              className=\"bg-indigo-600 hover:bg-indigo-700 text-white\"\n              data-testid=\"button-add-product\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              {t(\"product.actions.add\")}\n            </Button>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Package className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    {t(\"product.stats.total\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {sortedProducts.length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <Package className=\"h-5 w-5 text-green-600\" />\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    {t(\"product.stats.instock\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {sortedProducts.filter((p) => p.stock > 10).length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-red-100 rounded-lg\">\n                  <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    {t(\"product.stats.rupture\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {sortedProducts.filter((p) => p.stock === 0).length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                  <AlertTriangle className=\"h-5 w-5 text-yellow-600\" />\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    {t(\"product.stats.lowstock\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {\n                      sortedProducts.filter((p) => p.stock > 0 && p.stock <= 10)\n                        .length\n                    }\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <Star className=\"h-5 w-5 text-purple-600\" />\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    {t(\"product.stats.variants\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {sortedProducts.filter((p) => p.isFeatured).length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <Package className=\"h-5 w-5 text-orange-600\" />\n                </div>\n                <div className=\"ml-3\">\n                  <p className=\"text-sm font-medium text-gray-600\">\n                    {t(\"product.stats.promotions\")}\n                  </p>\n                  <p className=\"text-2xl font-bold text-gray-900\">\n                    {sortedProducts.filter((p) => p.originalPrice).length}\n                  </p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Summary Section */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg font-medium\">\n              {t(\"product.resume\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-1\">\n                  {t(\"product.resume.rating\")}\n                </p>\n                <div className=\"flex items-center justify-center\">\n                  <Star className=\"h-4 w-4 text-yellow-500 fill-current mr-1\" />\n                  <span className=\"text-lg font-semibold\">4.5</span>\n                </div>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-1\">\n                  {t(\"product.resume.value\")}\n                </p>\n                <p className=\"text-lg font-semibold text-green-600\">975 AND</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-1\">\n                  {t(\"product.resume.rate\")}\n                </p>\n                <p className=\"text-lg font-semibold\">100%</p>\n              </div>\n              <div className=\"text-center\">\n                <p className=\"text-sm text-gray-600 mb-1\">\n                  {t(\"product.resume.featured\")}\n                </p>\n                <p className=\"text-lg font-semibold text-purple-600\">50%</p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Filters and Search */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-base font-medium flex items-center gap-2\">\n              <Filter className=\"h-4 w-4\" />\n              {t(\"product.filter.heading\")}\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex flex-col md:flex-row gap-4 items-center\">\n              {/* Search */}\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder={t(\"product.search.placeholder\")}\n                  className=\"pl-10\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  data-testid=\"input-search\"\n                />\n              </div>\n\n              {/* Filters */}\n              <div className=\"flex gap-4 items-center\">\n                <Select\n                  value={selectedCategory}\n                  onValueChange={setSelectedCategory}\n                >\n                  <SelectTrigger className=\"w-40\" data-testid=\"select-category\">\n                    <SelectValue placeholder=\"All categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">\n                      {t(\"product.filters.category\")}\n                    </SelectItem>\n                    {(categories as any[]).map((category: any) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.name}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n\n                <Select\n                  value={selectedStatus}\n                  onValueChange={setSelectedStatus}\n                >\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-status\">\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">\n                      {t(\"product.filters.status\")}\n                    </SelectItem>\n                    <SelectItem value=\"active\">\n                      {t(\"product.status.active\")}\n                    </SelectItem>\n                    <SelectItem value=\"inactive\">\n                      {t(\"product.status.inactive\")}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n\n                <Select value={sortBy} onValueChange={setSortBy}>\n                  <SelectTrigger className=\"w-32\" data-testid=\"select-sort\">\n                    <SelectValue placeholder=\"Most recent\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"recent\">\n                      {t(\"product.filters.sort\")}\n                    </SelectItem>\n                    <SelectItem value=\"name\">\n                      {t(\"product.sort.name\")}\n                    </SelectItem>\n                    <SelectItem value=\"price-high\">\n                      {t(\"product.sort.price.asc\")}\n                    </SelectItem>\n                    <SelectItem value=\"price-low\">\n                      {t(\"product.sort.price.desc\")}\n                    </SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* Results count */}\n                <div className=\"text-sm text-gray-600\">\n                  {sortedProducts.length} {t(\"product.filters.foundproduct\")}\n                </div>\n\n                {/* View Toggle */}\n                <div className=\"flex border rounded-md\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    className=\"rounded-r-none border-r\"\n                    data-testid=\"button-grid-view\"\n                  >\n                    <Grid3X3 className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"ghost\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    className=\"rounded-l-none\"\n                    data-testid=\"button-list-view\"\n                  >\n                    <List className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Products Grid/List */}\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <div\n              className={\n                viewMode === \"grid\"\n                  ? \"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\"\n                  : \"space-y-4\"\n              }\n            >\n              {[...Array(8)].map((_, i) => (\n                <Card key={i}>\n                  <CardContent className=\"p-4\">\n                    <Skeleton className=\"w-full h-48 mb-4\" />\n                    <Skeleton className=\"h-4 w-3/4 mb-2\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : error ? (\n            <Card>\n              <CardContent className=\"flex items-center justify-center py-12\">\n                <div className=\"text-center\">\n                  <AlertTriangle className=\"h-12 w-12 text-red-500 mx-auto mb-4\" />\n                  <p className=\"text-black-600 dark:text-black-400\">\n                    There is no product available.\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ) : sortedProducts.length === 0 ? (\n            <Card>\n              <CardContent className=\"flex items-center justify-center py-12\">\n                <div className=\"text-center\">\n                  <Package className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <p className=\"text-gray-600 dark:text-gray-400 mb-4\">\n                    {(products as Product[]).length === 0\n                      ? \"No products found. Start by adding your first product!\"\n                      : \"No products match your filters.\"}\n                  </p>\n                  {(products as Product[]).length === 0 && (\n                    <Button\n                      onClick={handleAddProduct}\n                      className=\"bg-indigo-600 hover:bg-indigo-700 text-white\"\n                      data-testid=\"button-add-first-product\"\n                    >\n                      <Plus className=\"h-4 w-4 mr-2\" />\n                      Add your first product\n                    </Button>\n                  )}\n                </div>\n              </CardContent>\n            </Card>\n          ) : viewMode === \"list\" ? (\n            <Card>\n              <CardContent className=\"p-0\">\n                <div className=\"overflow-x-auto\">\n                  <table className=\"w-full\">\n                    <thead className=\"border-b bg-gray-50\">\n                      <tr>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.filters.image\")}\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.filters.name\")}\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.filters.price\")}\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.filters.stock\")}\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.filters.sku\")}\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.brand\")}\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.filters.Status\")}\n                        </th>\n                        <th className=\"text-left py-3 px-4 font-medium text-gray-900\">\n                          {t(\"product.filters.actions\")}\n                        </th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {sortedProducts.map((product: Product) => (\n                        <ProductTableRow\n                          key={product.id}\n                          product={product}\n                          setPreviewProduct={setPreviewProduct}\n                          setShowPreviewDialog={setShowPreviewDialog}\n                          setEditProduct={setEditProduct}\n                          setShowEditProductDialog={setShowEditProductDialog}\n                          onDelete={handleDeleteProduct}\n                          isDeleting={deleteProductMutation.isPending}\n                        />\n                      ))}\n                    </tbody>\n                  </table>\n                </div>\n              </CardContent>\n            </Card>\n          ) : (\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {sortedProducts.map((product: Product) => (\n                <ProductCard\n                  key={product.id}\n                  product={product}\n                  categories={typedCategories}\n                  setPreviewProduct={setPreviewProduct}\n                  setShowPreviewDialog={setShowPreviewDialog}\n                  setEditProduct={setEditProduct}\n                  setShowEditProductDialog={setShowEditProductDialog}\n                  handleEditProduct={handleEditProduct}\n                  t={t}\n                  onDelete={handleDeleteProduct}\n                  isDeleting={deleteProductMutation.isPending}\n                />\n              ))}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Add Product Dialog */}\n      <Dialog\n        open={showAddProductDialog}\n        onOpenChange={setShowAddProductDialog}\n      >\n        <DialogContent className=\"max-w-7xl max-h-[95vh] overflow-y-auto p-0\">\n          <AdvancedAddProductForm\n            onSubmit={async (data) => {\n              setIsCreatingProduct(true);\n              try {\n                const response = await fetch(\"/api/products\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  credentials: \"include\",\n                  body: JSON.stringify(data),\n                });\n\n                if (!response.ok) {\n                  const errorData = await response.json();\n                  throw new Error(\n                    errorData.error || \"Failed to create product\",\n                  );\n                }\n\n                const newProduct = await response.json();\n                console.log(\"Product created:\", newProduct);\n\n                toast({\n                  title: \"Success\",\n                  description: \"Product created successfully!\",\n                });\n\n                setShowAddProductDialog(false);\n                queryClient.invalidateQueries({\n                  queryKey: [\"/api/seller/products\"],\n                });\n              } catch (error) {\n                console.error(\"Error creating product:\", error);\n                toast({\n                  title: \"Error\",\n                  description:\n                    error.message ||\n                    \"Failed to create product. Please try again.\",\n                  variant: \"destructive\",\n                });\n              } finally {\n                setIsCreatingProduct(false);\n              }\n            }}\n            onCancel={() => setShowAddProductDialog(false)}\n            isLoading={isCreatingProduct}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Product Preview Dialog */}\n      <Dialog open={showPreviewDialog} onOpenChange={setShowPreviewDialog}>\n        <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n          <DialogHeader>\n            <DialogTitle>Product Preview - Customer View</DialogTitle>\n            <DialogDescription>\n              This is how your product appears to customers\n            </DialogDescription>\n          </DialogHeader>\n          {previewProduct && (\n            <ProductPreview\n              product={previewProduct}\n              categories={typedCategories}\n            />\n          )}\n        </DialogContent>\n      </Dialog>\n\n      {/* Edit Product Dialog */}\n      <Dialog\n        open={showEditProductDialog}\n        onOpenChange={(open) => {\n          if (!open) {\n            setShowEditProductDialog(false);\n            setEditProduct(null);\n          }\n        }}\n      >\n        <DialogContent className=\"max-w-7xl max-h-[95vh] overflow-y-auto p-0\">\n          <AdvancedAddProductForm\n            onSubmit={async (data) => {\n              try {\n                const response = await fetch(\n                  `/api/products/${editProduct?.id}`,\n                  {\n                    method: \"PUT\",\n                    headers: {\n                      \"Content-Type\": \"application/json\",\n                    },\n                    credentials: \"include\",\n                    body: JSON.stringify(data),\n                  },\n                );\n\n                if (!response.ok) {\n                  const errorText = await response.text();\n                  throw new Error(\"Failed to update product\");\n                }\n\n                const updatedProduct = await response.json();\n                console.log(\"Product updated:\", updatedProduct);\n\n                setShowEditProductDialog(false);\n                setEditProduct(null);\n                queryClient.invalidateQueries({\n                  queryKey: [\"/api/seller/products\"],\n                });\n\n                toast({\n                  title: \"Success\",\n                  description: \"Product updated successfully\",\n                });\n              } catch (error) {\n                console.error(\"Error updating product:\", error);\n                toast({\n                  title: \"Error\",\n                  description: \"Failed to update product. Please try again.\",\n                  variant: \"destructive\",\n                });\n              }\n            }}\n            onCancel={() => {\n              setShowEditProductDialog(false);\n              setEditProduct(null);\n            }}\n            isLoading={false}\n            editMode={true}\n            editProduct={editProduct}\n          />\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Modal */}\n      <AlertDialog\n        open={showDeleteConfirmDialog}\n        onOpenChange={setShowDeleteConfirmDialog}\n      >\n        <AlertDialogContent>\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Product</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{productToDelete?.name}\"? This\n              action cannot be undone and will permanently remove the product\n              from your store.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel onClick={cancelDeleteProduct}>\n              Cancel\n            </AlertDialogCancel>\n            <AlertDialogAction\n              onClick={confirmDeleteProduct}\n              disabled={deleteProductMutation.isPending}\n              className=\"bg-red-600 hover:bg-red-700 focus:ring-red-600\"\n            >\n              {deleteProductMutation.isPending\n                ? \"Deleting...\"\n                : \"Delete Product\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </DashboardLayout>\n  );\n}\n\n// Product Card Component for Grid View\nfunction ProductCard({\n  product,\n  categories,\n  setPreviewProduct,\n  setShowPreviewDialog,\n  setEditProduct,\n  setShowEditProductDialog,\n  handleEditProduct,\n  t,\n  onDelete,\n  isDeleting,\n}: {\n  product: Product;\n  categories: any[];\n  setPreviewProduct: (product: Product) => void;\n  setShowPreviewDialog: (show: boolean) => void;\n  setEditProduct: (product: Product) => void;\n  setShowEditProductDialog: (show: boolean) => void;\n  handleEditProduct: (product: Product) => void;\n  t: (key: string) => string;\n  onDelete: (productId: string) => void;\n  isDeleting: boolean;\n}) {\n  const category = categories.find((c) => c.id === product.categoryId);\n  const isOnSale =\n    product.originalPrice &&\n    parseFloat(product.originalPrice) > parseFloat(product.price);\n  const discountPercent = isOnSale\n    ? Math.round(\n        ((parseFloat(product.originalPrice!) - parseFloat(product.price)) /\n          parseFloat(product.originalPrice!)) *\n          100,\n      )\n    : 0;\n\n  return (\n    <Card className=\"relative group hover:shadow-lg transition-shadow overflow-hidden\">\n      {/* Badges */}\n      <div className=\"absolute top-2 left-2 z-10 flex flex-col gap-1\">\n        {product.isFeatured && (\n          <Badge className=\"bg-purple-600 text-white px-2 py-1 text-xs font-medium\">\n            ⭐ Star\n          </Badge>\n        )}\n        {isOnSale && (\n          <Badge className=\"bg-red-500 text-white px-2 py-1 text-xs font-medium rounded-full\">\n            -{discountPercent}%\n          </Badge>\n        )}\n      </div>\n\n      {/* New Badge */}\n      {Math.random() > 0.5 && (\n        <div className=\"absolute top-2 right-2 z-10\">\n          <Badge className=\"bg-blue-500 text-white px-2 py-1 text-xs font-medium\">\n            New\n          </Badge>\n        </div>\n      )}\n\n      <CardContent className=\"p-0\">\n        {/* Product Image */}\n        <div className=\"aspect-square bg-gray-100 overflow-hidden\">\n          {product.images?.[0] ? (\n            <img\n              src={\n                typeof product.images[0] === \"string\"\n                  ? product.images[0]\n                  : product.images[0]?.url || \"\"\n              }\n              alt={product.name}\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-transform\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center bg-gray-200\">\n              <Package className=\"h-12 w-12 text-gray-400\" />\n            </div>\n          )}\n        </div>\n\n        {/* Product Info */}\n        <div className=\"p-4 space-y-2\">\n          <div>\n            <h3 className=\"font-medium text-gray-900 line-clamp-2 mb-1\">\n              {product.name}\n            </h3>\n            <p className=\"text-xs text-gray-500\">\n              {category?.name || \"Footwear\"}\n            </p>\n            <div className=\"flex items-center text-xs text-gray-500 mt-1\">\n              <span>⭐ SKU: {product.sku}</span>\n            </div>\n          </div>\n\n          {/* Price */}\n          <div className=\"flex items-center gap-2\">\n            <span className=\"text-lg font-bold text-blue-600\">\n              {product.price} AND\n            </span>\n            {product.originalPrice && (\n              <span className=\"text-sm text-gray-500 line-through\">\n                {product.originalPrice} AND\n              </span>\n            )}\n          </div>\n\n          {/* Stock and Brand */}\n          <div className=\"flex justify-between text-sm\">\n            <div>\n              <span className=\"text-gray-600\">{t(\"product.stock.label\")}</span>\n              <span\n                className={`ml-1 px-2 py-1 rounded text-xs ${\n                  product.stock > 10\n                    ? \"bg-green-100 text-green-800\"\n                    : product.stock > 0\n                      ? \"bg-yellow-100 text-yellow-800\"\n                      : \"bg-red-100 text-red-800\"\n                }`}\n              >\n                {product.stock > 10\n                  ? \"A stock\"\n                  : product.stock > 0\n                    ? \"Low stock\"\n                    : \"Rupture\"}{\" \"}\n                {product.stock} units\n              </span>\n            </div>\n          </div>\n\n          <div className=\"text-sm\">\n            <span className=\"text-gray-600\">{t(\"product.brand\")}:</span>\n            <span className=\"ml-1 font-medium\">{product.brand}</span>\n          </div>\n\n          {/* Rating */}\n          <div className=\"flex items-center gap-1\">\n            <div className=\"flex text-yellow-400\">\n              {[...Array(5)].map((_, i) => (\n                <Star\n                  key={i}\n                  className={`h-3 w-3 ${\n                    i < Math.floor(product.rating) ? \"fill-current\" : \"\"\n                  }`}\n                />\n              ))}\n            </div>\n            <span className=\"text-xs text-gray-500\">\n              ({product.reviewCount})\n            </span>\n          </div>\n\n          {/* Sample text */}\n          <p className=\"text-xs text-gray-500 line-clamp-2\">\n            Sample dummy {product?.name?.toLowerCase() || \"product\"} for layout\n            test\n          </p>\n\n          {/* Action Buttons */}\n          <div className=\"flex gap-2 pt-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0\"\n              data-testid={`button-details-${product.id}`}\n              onClick={() => {\n                setPreviewProduct(product);\n                setShowPreviewDialog(true);\n              }}\n            >\n              <Eye className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              size=\"sm\"\n              className=\"h-8 w-8 p-0 bg-blue-600 hover:bg-blue-700 text-white\"\n              data-testid={`button-edit-${product.id}`}\n              onClick={() => handleEditProduct(product)}\n            >\n              <Edit className=\"h-4 w-4\" />\n            </Button>\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"h-8 w-8 p-0 border-red-200 text-red-600 hover:bg-red-50 hover:text-red-700\"\n              data-testid={`button-delete-${product.id}`}\n              onClick={() => onDelete(product.id)}\n              disabled={isDeleting}\n            >\n              <Trash2 className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n\n// Product Table Row Component for List View\nfunction ProductTableRow({\n  product,\n  setPreviewProduct,\n  setShowPreviewDialog,\n  setEditProduct,\n  setShowEditProductDialog,\n  onDelete,\n  isDeleting,\n}: {\n  product: Product;\n  setPreviewProduct: (product: Product) => void;\n  setShowPreviewDialog: (show: boolean) => void;\n  setEditProduct: (product: Product) => void;\n  setShowEditProductDialog: (show: boolean) => void;\n  onDelete: (productId: string) => void;\n  isDeleting: boolean;\n}) {\n  return (\n    <tr className=\"border-b hover:bg-gray-50\">\n      <td className=\"py-3 px-4\">\n        <div className=\"w-12 h-12 bg-gray-100 rounded overflow-hidden\">\n          {product.images?.[0] ? (\n            <img\n              src={\n                typeof product.images[0] === \"string\"\n                  ? product.images[0]\n                  : product.images[0]?.url || \"\"\n              }\n              alt={product.name}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center\">\n              <Package className=\"h-4 w-4 text-gray-400\" />\n            </div>\n          )}\n        </div>\n      </td>\n      <td className=\"py-3 px-4\">\n        <div className=\"font-medium text-gray-900\">{product.name}</div>\n      </td>\n      <td className=\"py-3 px-4\">\n        <div className=\"font-medium\">${product.price}</div>\n      </td>\n      <td className=\"py-3 px-4\">\n        <div>{product.stock}</div>\n      </td>\n      <td className=\"py-3 px-4\">\n        <div className=\"text-sm text-gray-600\">{product.sku}</div>\n      </td>\n      <td className=\"py-3 px-4\">\n        <div className=\"text-sm text-gray-600\">{product.brand}</div>\n      </td>\n      <td className=\"py-3 px-4\">\n        <Badge\n          className={`px-2 py-1 text-xs rounded-full ${\n            product.status === \"active\"\n              ? \"bg-green-100 text-green-800\"\n              : \"bg-gray-100 text-gray-800\"\n          }`}\n        >\n          {product.status === \"active\" ? \"Active\" : \"Inactive\"}\n        </Badge>\n      </td>\n      <td className=\"py-3 px-4\">\n        <div className=\"flex gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-8 w-8 p-0\"\n            data-testid={`button-view-${product.id}`}\n            onClick={() => {\n              setPreviewProduct(product);\n              setShowPreviewDialog(true);\n            }}\n          >\n            <Eye className=\"h-4 w-4 text-gray-600\" />\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-8 w-8 p-0\"\n            data-testid={`button-edit-${product.id}`}\n            onClick={() => handleEditProduct(product)}\n          >\n            <Edit className=\"h-4 w-4 text-gray-600\" />\n          </Button>\n          <Button\n            size=\"sm\"\n            variant=\"ghost\"\n            className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\n            data-testid={`button-delete-${product.id}`}\n            onClick={() => onDelete(product.id)}\n            disabled={isDeleting}\n          >\n            <Trash2 className=\"h-4 w-4\" />\n          </Button>\n        </div>\n      </td>\n    </tr>\n  );\n}\n\n// Product Preview Component - Shows how product appears to customers\nfunction ProductPreview({\n  product,\n  categories,\n}: {\n  product: Product;\n  categories: any[];\n}) {\n  const [currentLanguage, setCurrentLanguage] = useState<\"en\" | \"fr\" | \"ar\">(\n    \"en\",\n  );\n  const category = categories.find((c) => c.id === product.categoryId);\n  const SUPPORTED_LANGS = [\"en\", \"fr\", \"ar\"] as const;\n\n  const renderStars = (rating: number) => {\n    return [...Array(5)].map((_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating)\n            ? \"fill-yellow-400 text-yellow-400\"\n            : \"text-gray-300\"\n        }`}\n      />\n    ));\n  };\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8 p-4\">\n      {/* Product Images */}\n      <div className=\"space-y-4\">\n        <div className=\"aspect-square bg-white rounded-lg shadow-sm overflow-hidden border\">\n          {product.images?.[0] ? (\n            <img\n              src={product.images[0]}\n              alt={product.name}\n              className=\"w-full h-full object-cover\"\n            />\n          ) : (\n            <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n              <div className=\"text-center\">\n                <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                <p className=\"text-gray-500\">No image available</p>\n              </div>\n            </div>\n          )}\n        </div>\n\n        {/* Thumbnail Gallery */}\n        {product.images && product.images.length > 1 && (\n          <div className=\"grid grid-cols-4 gap-2\">\n            {product.images.slice(1, 5).map((image: string, index: number) => (\n              <div\n                key={index}\n                className=\"aspect-square bg-white rounded-lg shadow-sm overflow-hidden border\"\n              >\n                <img\n                  src={image}\n                  alt={`${product.name} ${index + 2}`}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n            ))}\n          </div>\n        )}\n      </div>\n\n      {/* Product Info */}\n      <div className=\"space-y-6\">\n        {/* Language Selection Tabs */}\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-2 mb-4\">\n            <label className=\"text-sm font-medium\">Language:</label>\n            <div className=\"flex bg-gray-100 rounded-lg p-1\">\n              {SUPPORTED_LANGS.map((lang) => {\n                const langLabels = {\n                  en: \"English\",\n                  fr: \"Français\",\n                  ar: \"العربية\",\n                };\n                return (\n                  <button\n                    key={lang}\n                    type=\"button\"\n                    onClick={() => setCurrentLanguage(lang)}\n                    className={`px-3 py-1 rounded text-sm font-medium ${currentLanguage === lang ? \"bg-white shadow-sm\" : \"text-gray-600\"}`}\n                  >\n                    {langLabels[lang]}\n                  </button>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n\n        <div>\n          <h1\n            className=\"text-2xl font-bold text-gray-900 mb-2\"\n            dir={currentLanguage === \"ar\" ? \"rtl\" : \"ltr\"}\n          >\n            {product.translations?.[currentLanguage]?.name ||\n              product.name ||\n              \"No name available\"}\n          </h1>\n          <p className=\"text-gray-600\">\n            • {category?.name || \"Uncategorized\"}\n            <br /> • SKU: {product.sku} <br />• Brand: {product.brand}\n          </p>\n        </div>\n\n        {/* Rating */}\n        <div className=\"flex items-center gap-3\">\n          <div className=\"flex items-center\">\n            {renderStars(product.rating || 0)}\n          </div>\n          <span className=\"text-sm text-gray-600\">\n            {product.rating || 0} ({product.reviewCount || 0} reviews)\n          </span>\n        </div>\n\n        {/* Price */}\n        <div className=\"flex items-center gap-3\">\n          <span className=\"text-2xl font-bold text-primary-600\">\n            {product.price} AND\n          </span>\n          {product.originalPrice && (\n            <span className=\"text-lg text-gray-500 line-through\">\n              {product.originalPrice} AND\n            </span>\n          )}\n        </div>\n\n        {/* Stock Status */}\n        <div className=\"flex items-center gap-2\">\n          <Badge\n            className={`${\n              product.stock > 10\n                ? \"bg-green-100 text-green-800\"\n                : product.stock > 0\n                  ? \"bg-yellow-100 text-yellow-800\"\n                  : \"bg-red-100 text-red-800\"\n            }`}\n          >\n            {product.stock > 10\n              ? \"In Stock\"\n              : product.stock > 0\n                ? \"Low Stock\"\n                : \"Out of Stock\"}\n          </Badge>\n          <span className=\"text-sm text-gray-600\">\n            {product.stock} units available\n          </span>\n        </div>\n\n        {/* Multilingual Description */}\n        <div>\n          <h3 className=\"font-semibold text-gray-900 mb-2\">Description</h3>\n          <div\n            className=\"text-gray-700 space-y-4\"\n            dir={currentLanguage === \"ar\" ? \"rtl\" : \"ltr\"}\n          >\n            <div className=\"prose prose-sm max-w-none\">\n              <div\n                dangerouslySetInnerHTML={{\n                  __html:\n                    product.translations?.[currentLanguage]?.description ||\n                    \"No description available\",\n                }}\n              />\n            </div>\n          </div>\n        </div>\n\n        {/* Multilingual Highlights */}\n        {product.translations?.[currentLanguage]?.highlights && (\n          <div>\n            <h3 className=\"font-semibold text-gray-900 mb-2\">Key Features</h3>\n            <div\n              className=\"text-gray-700\"\n              dir={currentLanguage === \"ar\" ? \"rtl\" : \"ltr\"}\n            >\n              <div className=\"prose prose-sm max-w-none\">\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html: product.translations[currentLanguage].highlights,\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Action Buttons - Customer View */}\n        <div className=\"flex gap-4\">\n          <Button size=\"lg\" className=\"flex-1\" disabled={product.stock === 0}>\n            <ShoppingCart className=\"h-5 w-5 mr-2\" />\n            Add to Cart\n          </Button>\n          <Button size=\"lg\" variant=\"outline\">\n            <Heart className=\"h-5 w-5\" />\n          </Button>\n        </div>\n\n        {/* Vendor Info */}\n        <Card className=\"p-4\">\n          <h3 className=\"font-semibold text-gray-900 mb-2\">Sold by</h3>\n          <p className=\"text-gray-700\">{product.vendorName || \"Your Store\"}</p>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":47839},"client/src/pages/shared/auth/index.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Redirect, useLocation } from \"wouter\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Store, Users, ShoppingBag, Shield } from \"lucide-react\";\n\nconst loginSchema = z.object({\n  username: z.string().min(1, \"Username is required\"),\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n});\n\nconst registerSchema = z\n  .object({\n    username: z.string().min(3, \"Username must be at least 3 characters\"),\n    email: z.string().email(\"Invalid email address\"),\n    password: z.string().min(6, \"Password must be at least 6 characters\"),\n    firstName: z.string().min(1, \"First name is required\"),\n    lastName: z.string().min(1, \"Last name is required\"),\n    role: z.enum([\"client\", \"seller\"]).default(\"client\"),\n    // Seller-specific fields (conditional)\n    storeName: z.string().optional(),\n    storeDescription: z.string().optional(),\n    businessType: z.enum([\"individual\", \"company\", \"partnership\"]).optional(),\n    businessAddress: z.string().optional(),\n    businessPhone: z.string().optional(),\n    businessWebsite: z.string().url().optional().or(z.literal(\"\")),\n    taxId: z.string().optional(),\n    avatar: z.any().optional(), // For file upload\n  })\n  .refine(\n    (data) => {\n      if (data.role === \"seller\") {\n        return data.storeName && data.storeName.length > 0;\n      }\n      return true;\n    },\n    {\n      message: \"Store name is required for sellers\",\n      path: [\"storeName\"],\n    },\n  );\n\nconst forgotPasswordSchema = z.object({\n  email: z.string().email(\"Invalid email address\"),\n});\n\nconst resetPasswordSchema = z\n  .object({\n    password: z.string().min(6, \"Password must be at least 6 characters\"),\n    confirmPassword: z\n      .string()\n      .min(6, \"Password must be at least 6 characters\"),\n  })\n  .refine((data) => data.password === data.confirmPassword, {\n    message: \"Passwords don't match\",\n    path: [\"confirmPassword\"],\n  });\n\ntype LoginFormData = z.infer<typeof loginSchema>;\ntype RegisterFormData = z.infer<typeof registerSchema>;\ntype ForgotPasswordFormData = z.infer<typeof forgotPasswordSchema>;\ntype ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;\n\nexport default function AuthPage() {\n  const { t } = useTranslation();\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [activeTab, setActiveTab] = useState(\"login\");\n  const [, setLocation] = useLocation();\n  const [forgotPasswordMessage, setForgotPasswordMessage] = useState(\"\");\n  const [resetPasswordMessage, setResetPasswordMessage] = useState(\"\");\n  const [resetPasswordError, setResetPasswordError] = useState(\"\");\n  const [registrationMessage, setRegistrationMessage] = useState(\"\");\n  const [isRegistering, setIsRegistering] = useState(false);\n  // Get reset token from URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const resetToken = urlParams.get(\"token\");\n\n  // Forgot password mutation\n  const forgotPasswordMutation = useMutation({\n    mutationFn: async (data: ForgotPasswordFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/forgot-password\", data);\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setForgotPasswordMessage(data.message);\n      forgotPasswordForm.reset();\n    },\n    onError: (error: any) => {\n      setForgotPasswordMessage(error.message || \"Failed to send reset email\");\n    },\n  });\n\n  // Reset password mutation\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (data: ResetPasswordFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/reset-password\", {\n        token: resetToken,\n        password: data.password,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setResetPasswordMessage(data.message);\n      setResetPasswordError(\"\");\n      resetPasswordForm.reset();\n      // Redirect to login after successful reset\n      setTimeout(() => {\n        setActiveTab(\"login\");\n        setLocation(\"/auth\");\n      }, 2000);\n    },\n    onError: (error: any) => {\n      setResetPasswordError(error.message || \"Failed to reset password\");\n      setResetPasswordMessage(\"\");\n    },\n  });\n\n  const loginForm = useForm<LoginFormData>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerForm = useForm<RegisterFormData>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: \"\",\n      email: \"\",\n      password: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      role: \"client\",\n      storeName: \"\",\n      storeDescription: \"\",\n      businessType: \"individual\",\n      businessAddress: \"\",\n      businessPhone: \"\",\n      businessWebsite: \"\",\n      taxId: \"\",\n    },\n  });\n\n  const forgotPasswordForm = useForm<ForgotPasswordFormData>({\n    resolver: zodResolver(forgotPasswordSchema),\n    defaultValues: {\n      email: \"\",\n    },\n  });\n\n  const resetPasswordForm = useForm<ResetPasswordFormData>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Check if this is a password reset URL\n  useEffect(() => {\n    if (resetToken) {\n      setActiveTab(\"reset-password\");\n    }\n  }, [resetToken]);\n\n  // Redirect if user is already logged in\n  useEffect(() => {\n    if (user) {\n      let redirectPath = \"/\";\n\n      switch (user.role) {\n        case \"seller\":\n          redirectPath = \"/dashboard/seller\";\n          break;\n        case \"admin\":\n          redirectPath = \"/dashboard/admin\";\n          break;\n        case \"client\":\n        default:\n          redirectPath = \"/\";\n          break;\n      }\n\n      setLocation(redirectPath);\n    }\n  }, [user, setLocation]);\n\n  if (user) {\n    return null; // Don't render anything while redirecting\n  }\n\n  const onLogin = (data: LoginFormData) => {\n    loginMutation.mutate(data);\n  };\n\n  const onRegister = (data: RegisterFormData) => {\n    setIsRegistering(true);\n    // Create FormData for file upload support\n    const formData = new FormData();\n\n    // Add all form fields to FormData\n    Object.entries(data).forEach(([key, value]) => {\n      if (key === \"avatar\" && value instanceof File) {\n        formData.append(key, value);\n      } else if (value !== undefined && value !== null && value !== \"\") {\n        formData.append(key, String(value));\n      }\n    });\n\n    // Use fetch for FormData instead of the mutation (which expects JSON)\n    const submitRegistration = async () => {\n      try {\n        const response = await fetch(\"/api/register\", {\n          method: \"POST\",\n          body: formData,\n          credentials: \"include\",\n        });\n\n        const result = await response.json();\n\n        if (response.ok) {\n          // Reset the registration form\n          registerForm.reset();\n          // Switch to login tab\n          setActiveTab(\"login\");\n          // Show success message\n          setRegistrationMessage(\n            \"Registration successful! Please check your email to verify your account.\",\n          );\n          // Clear any previous registration message after a delay\n          setTimeout(() => {\n            setRegistrationMessage(\"\");\n          }, 5000);\n        } else {\n          throw new Error(result.error || \"Registration failed\");\n        }\n      } catch (error) {\n        console.error(\"Registration error:\", error);\n        setRegistrationMessage(\"\");\n        // Handle error - you might want to show error in the form\n      } finally {\n        setIsRegistering(false);\n      }\n    };\n\n    submitRegistration();\n  };\n\n  const onForgotPassword = (data: ForgotPasswordFormData) => {\n    forgotPasswordMutation.mutate(data);\n  };\n\n  const onResetPassword = (data: ResetPasswordFormData) => {\n    resetPasswordMutation.mutate(data);\n  };\n\n  const getRoleIcon = (role: string) => {\n    switch (role) {\n      case \"seller\":\n        return <Store className=\"h-4 w-4\" />;\n      case \"admin\":\n        return <Shield className=\"h-4 w-4\" />;\n      default:\n        return <ShoppingBag className=\"h-4 w-4\" />;\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex\">\n      {/* Left side - Forms */}\n      <div className=\"flex-1 flex items-center justify-center p-8\">\n        <div className=\"w-full max-w-md\">\n          <div className=\"text-center mb-8\">\n            <div className=\"flex items-center justify-center mb-4\">\n              <div className=\"h-12 w-12 bg-gradient-to-br from-primary-500 to-primary-700 rounded-lg flex items-center justify-center\">\n                <Store className=\"text-white h-6 w-6\" />\n              </div>\n              <span className=\"ml-3 text-2xl font-bold text-gray-900\">\n                CEBLEU\n              </span>\n            </div>\n            <p className=\"text-gray-600\">\n              {activeTab === \"login\"\n                ? t(\"auth.welcome\")\n                : t(\"auth.createAccount\")}\n            </p>\n          </div>\n\n          <Tabs\n            value={activeTab}\n            onValueChange={setActiveTab}\n            className=\"w-full\"\n          >\n            {resetToken ? (\n              // Show only reset password tab when token is present\n              <div className=\"mb-6\">\n                <h2 className=\"text-center text-lg font-semibold text-gray-900\">\n                  Reset Password\n                </h2>\n              </div>\n            ) : (\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\" data-testid=\"tab-login\">\n                  {t(\"auth.login\")}\n                </TabsTrigger>\n                <TabsTrigger value=\"register\" data-testid=\"tab-register\">\n                  {t(\"auth.register\")}\n                </TabsTrigger>\n              </TabsList>\n            )}\n\n            {/* Login Form */}\n            <TabsContent value=\"login\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    {t(\"auth.welcome\")}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form\n                    onSubmit={loginForm.handleSubmit(onLogin)}\n                    className=\"space-y-4\"\n                  >\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-username\">\n                        {t(\"auth.username\")}\n                      </Label>\n                      <Input\n                        id=\"login-username\"\n                        {...loginForm.register(\"username\")}\n                        placeholder={t(\"auth.username\")}\n                        data-testid=\"input-login-username\"\n                      />\n                      {loginForm.formState.errors.username && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-login-username\"\n                        >\n                          {loginForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"login-password\">\n                        {t(\"auth.password\")}\n                      </Label>\n                      <Input\n                        id=\"login-password\"\n                        type=\"password\"\n                        {...loginForm.register(\"password\")}\n                        placeholder={t(\"auth.password\")}\n                        data-testid=\"input-login-password\"\n                      />\n                      {loginForm.formState.errors.password && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-login-password\"\n                        >\n                          {loginForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    {loginMutation.error && (\n                      <Alert variant=\"destructive\">\n                        <AlertDescription data-testid=\"error-login-general\">\n                          {loginMutation.error.message}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                      disabled={loginMutation.isPending}\n                      data-testid=\"button-login-submit\"\n                    >\n                      {loginMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          {t(\"common.loading\")}\n                        </>\n                      ) : (\n                        t(\"auth.loginButton\")\n                      )}\n                    </Button>\n\n                    <div className=\"text-center space-y-2\">\n                      <button\n                        type=\"button\"\n                        onClick={() => setActiveTab(\"forgot-password\")}\n                        className=\"text-sm text-primary-600 hover:text-primary-700 block mx-auto\"\n                        data-testid=\"link-forgot-password\"\n                      >\n                        Forgot Password?\n                      </button>\n                      <button\n                        type=\"button\"\n                        onClick={() => setActiveTab(\"register\")}\n                        className=\"text-sm text-primary-600 hover:text-primary-700\"\n                        data-testid=\"link-switch-to-register\"\n                      >\n                        {t(\"auth.switchToRegister\")}\n                      </button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Register Form */}\n            <TabsContent value=\"register\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    {t(\"auth.createAccount\")}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form\n                    onSubmit={registerForm.handleSubmit(onRegister)}\n                    className=\"space-y-4\"\n                  >\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-firstName\">\n                          {t(\"auth.firstName\")}\n                        </Label>\n                        <Input\n                          id=\"register-firstName\"\n                          {...registerForm.register(\"firstName\")}\n                          placeholder={t(\"auth.firstName\")}\n                          data-testid=\"input-register-firstName\"\n                        />\n                        {registerForm.formState.errors.firstName && (\n                          <p\n                            className=\"text-sm text-red-600\"\n                            data-testid=\"error-register-firstName\"\n                          >\n                            {registerForm.formState.errors.firstName.message}\n                          </p>\n                        )}\n                      </div>\n\n                      <div className=\"space-y-2\">\n                        <Label htmlFor=\"register-lastName\">\n                          {t(\"auth.lastName\")}\n                        </Label>\n                        <Input\n                          id=\"register-lastName\"\n                          {...registerForm.register(\"lastName\")}\n                          placeholder={t(\"auth.lastName\")}\n                          data-testid=\"input-register-lastName\"\n                        />\n                        {registerForm.formState.errors.lastName && (\n                          <p\n                            className=\"text-sm text-red-600\"\n                            data-testid=\"error-register-lastName\"\n                          >\n                            {registerForm.formState.errors.lastName.message}\n                          </p>\n                        )}\n                      </div>\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-username\">\n                        {t(\"auth.username\")}\n                      </Label>\n                      <Input\n                        id=\"register-username\"\n                        {...registerForm.register(\"username\")}\n                        placeholder={t(\"auth.username\")}\n                        data-testid=\"input-register-username\"\n                      />\n                      {registerForm.formState.errors.username && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-register-username\"\n                        >\n                          {registerForm.formState.errors.username.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-email\">{t(\"auth.email\")}</Label>\n                      <Input\n                        id=\"register-email\"\n                        type=\"email\"\n                        {...registerForm.register(\"email\")}\n                        placeholder={t(\"auth.email\")}\n                        data-testid=\"input-register-email\"\n                      />\n                      {registerForm.formState.errors.email && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-register-email\"\n                        >\n                          {registerForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-password\">\n                        {t(\"auth.password\")}\n                      </Label>\n                      <Input\n                        id=\"register-password\"\n                        type=\"password\"\n                        {...registerForm.register(\"password\")}\n                        placeholder={t(\"auth.password\")}\n                        data-testid=\"input-register-password\"\n                      />\n                      {registerForm.formState.errors.password && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-register-password\"\n                        >\n                          {registerForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"register-role\">{t(\"auth.role\")}</Label>\n                      <Select\n                        value={registerForm.watch(\"role\")}\n                        onValueChange={(value) =>\n                          registerForm.setValue(\n                            \"role\",\n                            value as \"client\" | \"seller\",\n                          )\n                        }\n                      >\n                        <SelectTrigger data-testid=\"select-register-role\">\n                          <SelectValue placeholder={t(\"auth.role\")} />\n                        </SelectTrigger>\n                        <SelectContent>\n                          <SelectItem\n                            value=\"client\"\n                            data-testid=\"option-role-client\"\n                          >\n                            <div className=\"flex items-center\">\n                              {getRoleIcon(\"client\")}\n                              <span className=\"ml-2\">{t(\"auth.client\")}</span>\n                            </div>\n                          </SelectItem>\n                          <SelectItem\n                            value=\"seller\"\n                            data-testid=\"option-role-seller\"\n                          >\n                            <div className=\"flex items-center\">\n                              {getRoleIcon(\"seller\")}\n                              <span className=\"ml-2\">{t(\"auth.seller\")}</span>\n                            </div>\n                          </SelectItem>\n                        </SelectContent>\n                      </Select>\n                      {registerForm.formState.errors.role && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-register-role\"\n                        >\n                          {registerForm.formState.errors.role.message}\n                        </p>\n                      )}\n                    </div>\n\n                    {/* Seller-specific fields - only show when seller role is selected */}\n                    {registerForm.watch(\"role\") === \"seller\" && (\n                      <div className=\"space-y-4 p-4 border rounded-lg bg-blue-50\">\n                        <h4 className=\"font-medium text-blue-900 flex items-center\">\n                          <Store className=\"mr-2 h-4 w-4\" />\n                          Seller Information\n                        </h4>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-storeName\">\n                            Store Name *\n                          </Label>\n                          <Input\n                            id=\"register-storeName\"\n                            {...registerForm.register(\"storeName\")}\n                            placeholder=\"Your store/business name\"\n                            data-testid=\"input-register-storeName\"\n                          />\n                          {registerForm.formState.errors.storeName && (\n                            <p\n                              className=\"text-sm text-red-600\"\n                              data-testid=\"error-register-storeName\"\n                            >\n                              {registerForm.formState.errors.storeName.message}\n                            </p>\n                          )}\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-avatar\">\n                            Store Logo/Avatar\n                          </Label>\n                          <Input\n                            id=\"register-avatar\"\n                            type=\"file\"\n                            accept=\"image/*\"\n                            onChange={(e) => {\n                              const file = e.target.files?.[0];\n                              registerForm.setValue(\"avatar\", file);\n                            }}\n                            className=\"file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\n                            data-testid=\"input-register-avatar\"\n                          />\n                          <p className=\"text-xs text-gray-500\">\n                            Optional: Upload a logo or avatar for your store\n                            (JPG, PNG, max 5MB)\n                          </p>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-storeDescription\">\n                            Store Description\n                          </Label>\n                          <textarea\n                            id=\"register-storeDescription\"\n                            {...registerForm.register(\"storeDescription\")}\n                            placeholder=\"Brief description of your business\"\n                            className=\"w-full p-2 border rounded-md\"\n                            rows={3}\n                            data-testid=\"input-register-storeDescription\"\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-businessType\">\n                              Business Type\n                            </Label>\n                            <Select\n                              value={registerForm.watch(\"businessType\")}\n                              onValueChange={(value) =>\n                                registerForm.setValue(\n                                  \"businessType\",\n                                  value as\n                                    | \"individual\"\n                                    | \"company\"\n                                    | \"partnership\",\n                                )\n                              }\n                            >\n                              <SelectTrigger data-testid=\"select-register-businessType\">\n                                <SelectValue placeholder=\"Select business type\" />\n                              </SelectTrigger>\n                              <SelectContent>\n                                <SelectItem value=\"individual\">\n                                  Individual\n                                </SelectItem>\n                                <SelectItem value=\"company\">Company</SelectItem>\n                                <SelectItem value=\"partnership\">\n                                  Partnership\n                                </SelectItem>\n                              </SelectContent>\n                            </Select>\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-businessPhone\">\n                              Business Phone\n                            </Label>\n                            <Input\n                              id=\"register-businessPhone\"\n                              {...registerForm.register(\"businessPhone\")}\n                              placeholder=\"+1-555-123-4567\"\n                              data-testid=\"input-register-businessPhone\"\n                            />\n                          </div>\n                        </div>\n\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"register-businessAddress\">\n                            Business Address\n                          </Label>\n                          <Input\n                            id=\"register-businessAddress\"\n                            {...registerForm.register(\"businessAddress\")}\n                            placeholder=\"Your business address\"\n                            data-testid=\"input-register-businessAddress\"\n                          />\n                        </div>\n\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-businessWebsite\">\n                              Website (Optional)\n                            </Label>\n                            <Input\n                              id=\"register-businessWebsite\"\n                              {...registerForm.register(\"businessWebsite\")}\n                              placeholder=\"https://yourwebsite.com\"\n                              data-testid=\"input-register-businessWebsite\"\n                            />\n                          </div>\n\n                          <div className=\"space-y-2\">\n                            <Label htmlFor=\"register-taxId\">\n                              Tax ID (Optional)\n                            </Label>\n                            <Input\n                              id=\"register-taxId\"\n                              {...registerForm.register(\"taxId\")}\n                              placeholder=\"Your tax identification number\"\n                              data-testid=\"input-register-taxId\"\n                            />\n                          </div>\n                        </div>\n                      </div>\n                    )}\n\n                    {registerMutation.error && (\n                      <Alert variant=\"destructive\">\n                        <AlertDescription data-testid=\"error-register-general\">\n                          {registerMutation.error.message}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    {registrationMessage && (\n                      <Alert>\n                        <AlertDescription data-testid=\"message-registration-success\">\n                          {registrationMessage}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                      disabled={registerMutation.isPending}\n                      data-testid=\"button-register-submit\"\n                    >\n                      {isRegistering ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          {t(\"common.loading\")}\n                        </>\n                      ) : (\n                        t(\"auth.registerButton\")\n                      )}\n                    </Button>\n\n                    <div className=\"text-center\">\n                      <button\n                        type=\"button\"\n                        onClick={() => setActiveTab(\"login\")}\n                        className=\"text-sm text-primary-600 hover:text-primary-700\"\n                        data-testid=\"link-switch-to-login\"\n                      >\n                        {t(\"auth.switchToLogin\")}\n                      </button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Forgot Password Form */}\n            <TabsContent value=\"forgot-password\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">Forgot Password</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form\n                    onSubmit={forgotPasswordForm.handleSubmit(onForgotPassword)}\n                    className=\"space-y-4\"\n                  >\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"forgot-email\">Email Address</Label>\n                      <Input\n                        id=\"forgot-email\"\n                        type=\"email\"\n                        {...forgotPasswordForm.register(\"email\")}\n                        placeholder=\"Enter your email address\"\n                        data-testid=\"input-forgot-email\"\n                      />\n                      {forgotPasswordForm.formState.errors.email && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-forgot-email\"\n                        >\n                          {forgotPasswordForm.formState.errors.email.message}\n                        </p>\n                      )}\n                    </div>\n\n                    {forgotPasswordMessage && (\n                      <Alert>\n                        <AlertDescription data-testid=\"message-forgot-password\">\n                          {forgotPasswordMessage}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                      disabled={forgotPasswordMutation.isPending}\n                      data-testid=\"button-forgot-submit\"\n                    >\n                      {forgotPasswordMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Sending...\n                        </>\n                      ) : (\n                        \"Send Reset Email\"\n                      )}\n                    </Button>\n\n                    <div className=\"text-center\">\n                      <button\n                        type=\"button\"\n                        onClick={() => setActiveTab(\"login\")}\n                        className=\"text-sm text-primary-600 hover:text-primary-700\"\n                        data-testid=\"link-back-to-login\"\n                      >\n                        Back to Login\n                      </button>\n                    </div>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n\n            {/* Reset Password Form */}\n            <TabsContent value=\"reset-password\">\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"text-center\">\n                    Set New Password\n                  </CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <form\n                    onSubmit={resetPasswordForm.handleSubmit(onResetPassword)}\n                    className=\"space-y-4\"\n                  >\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"reset-password\">New Password</Label>\n                      <Input\n                        id=\"reset-password\"\n                        type=\"password\"\n                        {...resetPasswordForm.register(\"password\")}\n                        placeholder=\"Enter new password\"\n                        data-testid=\"input-reset-password\"\n                      />\n                      {resetPasswordForm.formState.errors.password && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-reset-password\"\n                        >\n                          {resetPasswordForm.formState.errors.password.message}\n                        </p>\n                      )}\n                    </div>\n\n                    <div className=\"space-y-2\">\n                      <Label htmlFor=\"reset-confirm-password\">\n                        Confirm New Password\n                      </Label>\n                      <Input\n                        id=\"reset-confirm-password\"\n                        type=\"password\"\n                        {...resetPasswordForm.register(\"confirmPassword\")}\n                        placeholder=\"Confirm new password\"\n                        data-testid=\"input-reset-confirm-password\"\n                      />\n                      {resetPasswordForm.formState.errors.confirmPassword && (\n                        <p\n                          className=\"text-sm text-red-600\"\n                          data-testid=\"error-reset-confirm-password\"\n                        >\n                          {\n                            resetPasswordForm.formState.errors.confirmPassword\n                              .message\n                          }\n                        </p>\n                      )}\n                    </div>\n\n                    {resetPasswordMessage && (\n                      <Alert>\n                        <AlertDescription data-testid=\"message-reset-success\">\n                          {resetPasswordMessage}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    {resetPasswordError && (\n                      <Alert variant=\"destructive\">\n                        <AlertDescription data-testid=\"error-reset-password-general\">\n                          {resetPasswordError}\n                        </AlertDescription>\n                      </Alert>\n                    )}\n\n                    <Button\n                      type=\"submit\"\n                      className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                      disabled={resetPasswordMutation.isPending}\n                      data-testid=\"button-reset-submit\"\n                    >\n                      {resetPasswordMutation.isPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Resetting...\n                        </>\n                      ) : (\n                        \"Reset Password\"\n                      )}\n                    </Button>\n                  </form>\n                </CardContent>\n              </Card>\n            </TabsContent>\n          </Tabs>\n        </div>\n      </div>\n\n      {/* Right side - Hero */}\n      <div className=\"hidden lg:flex flex-1 bg-gradient-to-br from-primary-600 to-primary-800 text-white items-center justify-center p-8\">\n        <div className=\"max-w-md text-center\">\n          <div className=\"mb-8\">\n            <Users className=\"h-24 w-24 mx-auto mb-4 opacity-90\" />\n            <h2 className=\"text-4xl font-bold mb-4\">{t(\"hero.title\")}</h2>\n            <p className=\"text-xl text-primary-100\">{t(\"hero.subtitle\")}</p>\n          </div>\n\n          <div className=\"space-y-4 text-left\">\n            <div className=\"flex items-center space-x-3\">\n              <ShoppingBag className=\"h-6 w-6 flex-shrink-0\" />\n              <span className=\"text-primary-100\">\n                Shop from thousands of trusted vendors\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Store className=\"h-6 w-6 flex-shrink-0\" />\n              <span className=\"text-primary-100\">\n                Sell your products to global customers\n              </span>\n            </div>\n            <div className=\"flex items-center space-x-3\">\n              <Shield className=\"h-6 w-6 flex-shrink-0\" />\n              <span className=\"text-primary-100\">\n                Secure payments and fast shipping\n              </span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":38764},"client/src/pages/shared/auth/reset-password.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Loader2, Store } from \"lucide-react\";\n\nconst resetPasswordSchema = z.object({\n  password: z.string().min(6, \"Password must be at least 6 characters\"),\n  confirmPassword: z.string().min(6, \"Password must be at least 6 characters\"),\n}).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\ntype ResetPasswordFormData = z.infer<typeof resetPasswordSchema>;\n\nexport default function ResetPasswordPage() {\n  const [, setLocation] = useLocation();\n  const [message, setMessage] = useState(\"\");\n  const [error, setError] = useState(\"\");\n\n  // Get reset token from URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const resetToken = urlParams.get('token');\n\n  const form = useForm<ResetPasswordFormData>({\n    resolver: zodResolver(resetPasswordSchema),\n    defaultValues: {\n      password: \"\",\n      confirmPassword: \"\",\n    },\n  });\n\n  // Reset password mutation\n  const resetPasswordMutation = useMutation({\n    mutationFn: async (data: ResetPasswordFormData) => {\n      const response = await apiRequest(\"POST\", \"/api/reset-password\", {\n        token: resetToken,\n        password: data.password,\n      });\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setMessage(data.message);\n      setError(\"\");\n      form.reset();\n      // Redirect to login after successful reset\n      setTimeout(() => {\n        setLocation(\"/auth\");\n      }, 3000);\n    },\n    onError: (error: any) => {\n      setError(error.message || \"Failed to reset password\");\n      setMessage(\"\");\n    },\n  });\n\n  // Redirect if no token\n  useEffect(() => {\n    if (!resetToken) {\n      setLocation(\"/auth\");\n    }\n  }, [resetToken, setLocation]);\n\n  const onSubmit = (data: ResetPasswordFormData) => {\n    resetPasswordMutation.mutate(data);\n  };\n\n  if (!resetToken) {\n    return null;\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-8\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"h-12 w-12 bg-gradient-to-br from-primary-500 to-primary-700 rounded-lg flex items-center justify-center\">\n              <Store className=\"text-white h-6 w-6\" />\n            </div>\n            <span className=\"ml-3 text-2xl font-bold text-gray-900\">MultiMarket</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Reset Your Password</h1>\n          <p className=\"text-gray-600\">Enter your new password below</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center\">Set New Password</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"password\">New Password</Label>\n                <Input\n                  id=\"password\"\n                  type=\"password\"\n                  {...form.register(\"password\")}\n                  placeholder=\"Enter new password\"\n                  data-testid=\"input-new-password\"\n                />\n                {form.formState.errors.password && (\n                  <p className=\"text-sm text-red-600\" data-testid=\"error-new-password\">\n                    {form.formState.errors.password.message}\n                  </p>\n                )}\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"confirmPassword\">Confirm New Password</Label>\n                <Input\n                  id=\"confirmPassword\"\n                  type=\"password\"\n                  {...form.register(\"confirmPassword\")}\n                  placeholder=\"Confirm new password\"\n                  data-testid=\"input-confirm-password\"\n                />\n                {form.formState.errors.confirmPassword && (\n                  <p className=\"text-sm text-red-600\" data-testid=\"error-confirm-password\">\n                    {form.formState.errors.confirmPassword.message}\n                  </p>\n                )}\n              </div>\n\n              {message && (\n                <Alert>\n                  <AlertDescription data-testid=\"message-success\">\n                    {message}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              {error && (\n                <Alert variant=\"destructive\">\n                  <AlertDescription data-testid=\"error-reset\">\n                    {error}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                disabled={resetPasswordMutation.isPending}\n                data-testid=\"button-reset-password\"\n              >\n                {resetPasswordMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Resetting Password...\n                  </>\n                ) : (\n                  \"Reset Password\"\n                )}\n              </Button>\n\n              <div className=\"text-center\">\n                <button\n                  type=\"button\"\n                  onClick={() => setLocation(\"/auth\")}\n                  className=\"text-sm text-primary-600 hover:text-primary-700\"\n                  data-testid=\"link-back-to-auth\"\n                >\n                  Back to Login\n                </button>\n              </div>\n            </form>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6269},"client/src/pages/shared/auth/verify-email.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Store, CheckCircle, XCircle } from \"lucide-react\";\n\nexport default function VerifyEmailPage() {\n  const [, setLocation] = useLocation();\n  const [isVerifying, setIsVerifying] = useState(true);\n  const [verificationResult, setVerificationResult] = useState<{\n    success: boolean;\n    message: string;\n    user?: any;\n  } | null>(null);\n\n  // Get verification token from URL\n  const urlParams = new URLSearchParams(window.location.search);\n  const verificationToken = urlParams.get('token');\n\n  useEffect(() => {\n    const verifyEmail = async () => {\n      if (!verificationToken) {\n        setVerificationResult({\n          success: false,\n          message: \"Invalid verification link. No token provided.\"\n        });\n        setIsVerifying(false);\n        return;\n      }\n\n      try {\n        const response = await fetch(`/api/verify-email?token=${verificationToken}`, {\n          method: 'GET',\n          credentials: 'include',\n        });\n\n        const data = await response.json();\n\n        if (response.ok) {\n          setVerificationResult({\n            success: true,\n            message: data.message,\n            user: data.user\n          });\n          \n          // Redirect to login after 3 seconds\n          setTimeout(() => {\n            setLocation(\"/auth\");\n          }, 3000);\n        } else {\n          setVerificationResult({\n            success: false,\n            message: data.error || \"Verification failed\"\n          });\n        }\n      } catch (error) {\n        console.error(\"Email verification error:\", error);\n        setVerificationResult({\n          success: false,\n          message: \"An error occurred during verification. Please try again.\"\n        });\n      } finally {\n        setIsVerifying(false);\n      }\n    };\n\n    // Auto-verify on component mount\n    verifyEmail();\n  }, [verificationToken, setLocation]);\n\n  const handleGoToLogin = () => {\n    setLocation(\"/auth\");\n  };\n\n  const handleResendVerification = async () => {\n    // This would need the user's email - for now just redirect to auth\n    setLocation(\"/auth\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50 flex items-center justify-center p-8\">\n      <div className=\"w-full max-w-md\">\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center mb-4\">\n            <div className=\"h-12 w-12 bg-gradient-to-br from-primary-500 to-primary-700 rounded-lg flex items-center justify-center\">\n              <Store className=\"text-white h-6 w-6\" />\n            </div>\n            <span className=\"ml-3 text-2xl font-bold text-gray-900\">MultiMarket</span>\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-2\">Email Verification</h1>\n          <p className=\"text-gray-600\">Verifying your email address...</p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-center flex items-center justify-center\">\n              {isVerifying ? (\n                <>\n                  <Loader2 className=\"mr-2 h-5 w-5 animate-spin\" />\n                  Verifying Your Email\n                </>\n              ) : verificationResult?.success ? (\n                <>\n                  <CheckCircle className=\"mr-2 h-5 w-5 text-green-600\" />\n                  Email Verified!\n                </>\n              ) : (\n                <>\n                  <XCircle className=\"mr-2 h-5 w-5 text-red-600\" />\n                  Verification Failed\n                </>\n              )}\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {isVerifying ? (\n              <div className=\"text-center py-8\">\n                <Loader2 className=\"h-8 w-8 animate-spin mx-auto mb-4 text-primary-600\" />\n                <p className=\"text-gray-600\">Please wait while we verify your email address...</p>\n              </div>\n            ) : (\n              <>\n                <Alert variant={verificationResult?.success ? \"default\" : \"destructive\"}>\n                  <AlertDescription data-testid={verificationResult?.success ? \"message-success\" : \"message-error\"}>\n                    {verificationResult?.message}\n                  </AlertDescription>\n                </Alert>\n\n                {verificationResult?.success ? (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-600 mb-4\">\n                        Your email has been successfully verified!\n                        {verificationResult.user?.role === \"seller\" && (\n                          <><br />Your seller application is now pending admin approval.</>\n                        )}\n                        <br />\n                        <span className=\"font-medium\">Redirecting to login in 3 seconds...</span>\n                      </p>\n                    </div>\n                    <Button\n                      onClick={handleGoToLogin}\n                      className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                      data-testid=\"button-go-to-login\"\n                    >\n                      Go to Login Now\n                    </Button>\n                  </div>\n                ) : (\n                  <div className=\"space-y-4\">\n                    <div className=\"text-center\">\n                      <p className=\"text-sm text-gray-600 mb-4\">\n                        The verification link may be invalid or expired.\n                      </p>\n                    </div>\n                    <div className=\"space-y-2\">\n                      <Button\n                        onClick={handleGoToLogin}\n                        className=\"w-full bg-primary-600 hover:bg-primary-700\"\n                        data-testid=\"button-back-to-auth\"\n                      >\n                        Back to Login\n                      </Button>\n                      <Button\n                        onClick={handleResendVerification}\n                        variant=\"outline\"\n                        className=\"w-full\"\n                        data-testid=\"button-resend-verification\"\n                      >\n                        Request New Verification Email\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </>\n            )}\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}","size_bytes":6684},"client/src/pages/shared/home/index.tsx":{"content":"// import { useTranslation } from \"react-i18next\";\n// import { useQuery } from \"@tanstack/react-query\";\n// import { useEffect } from \"react\";\n// import { useLocation } from \"wouter\";\n// import { useAuth } from \"@/hooks/use-auth\";\n// import { Header } from \"@/components/layout/header\";\n// import { Footer } from \"@/components/layout/footer\";\n// import { CategoryGrid } from \"@/components/categories/category-grid\";\n// import { ProductCard } from \"@/components/products/product-card\";\n// import { VendorCard } from \"@/components/vendors/vendor-card\";\n// import { Button } from \"@/components/ui/button\";\n// import {\n//   Select,\n//   SelectContent,\n//   SelectItem,\n//   SelectTrigger,\n//   SelectValue,\n// } from \"@/components/ui/select\";\n// import { Skeleton } from \"@/components/ui/skeleton\";\n// import { User, Store, Settings } from \"lucide-react\";\n// import { Link } from \"wouter\";\n\n// export default function HomePage() {\n//   const { t } = useTranslation();\n//   const { user } = useAuth();\n//   const [, setLocation] = useLocation();\n\n//   // Redirect sellers and admins to their dashboards\n//   useEffect(() => {\n//     if (user) {\n//       if (user.role === \"seller\") {\n//         setLocation(\"/dashboard/seller\");\n//         return;\n//       }\n//       if (user.role === \"admin\") {\n//         setLocation(\"/dashboard/admin\");\n//         return;\n//       }\n//     }\n//   }, [user, setLocation]);\n\n//   // Fetch all active products\n//   const { data: products, isLoading: productsLoading } = useQuery({\n//     queryKey: [\"/api/products\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/products\");\n//       if (!response.ok) throw new Error(\"Failed to fetch products\");\n//       return response.json();\n//     },\n//   });\n\n//   // Fetch categories\n//   const { data: categories, isLoading: categoriesLoading } = useQuery({\n//     queryKey: [\"/api/categories\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/categories\");\n//       if (!response.ok) throw new Error(\"Failed to fetch categories\");\n//       return response.json();\n//     },\n//   });\n\n//   // Fetch vendors\n//   const { data: vendors, isLoading: vendorsLoading } = useQuery({\n//     queryKey: [\"/api/vendors\"],\n//     queryFn: async () => {\n//       const response = await fetch(\"/api/vendors?limit=3\");\n//       if (!response.ok) throw new Error(\"Failed to fetch vendors\");\n//       return response.json();\n//     },\n//   });\n\n//   // Mock data for demonstration if API fails\n//   const mockProducts = [\n//     {\n//       id: \"1\",\n//       name: \"Premium Wireless Headphones\",\n//       description:\n//         \"High-quality wireless headphones with noise cancellation and premium sound\",\n//       price: 199.99,\n//       originalPrice: 249.99,\n//       images: [\n//         \"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?ixlib=rb-4.0.3&w=400&h=300\",\n//       ],\n//       rating: 4.5,\n//       reviewCount: 124,\n//       vendorName: \"TechWorld Electronics\",\n//       isFeatured: true,\n//       discount: 20,\n//       features: [\"Fast Shipping\"],\n//     },\n//     {\n//       id: \"2\",\n//       name: 'Gaming Laptop Pro 15\"',\n//       description:\n//         \"High-performance gaming laptop with RTX graphics and fast SSD storage\",\n//       price: 1299.99,\n//       originalPrice: 1599.99,\n//       images: [\n//         \"https://images.unsplash.com/photo-1593642702821-c8da6771f0c6?ixlib=rb-4.0.3&w=400&h=300\",\n//       ],\n//       rating: 4.0,\n//       reviewCount: 89,\n//       vendorName: \"GameTech Store\",\n//       isHotDeal: true,\n//       discount: 19,\n//       features: [\"Free Shipping\"],\n//     },\n//     {\n//       id: \"3\",\n//       name: \"Smart Fitness Watch\",\n//       description:\n//         \"Advanced fitness tracking with heart rate monitoring and GPS navigation\",\n//       price: 299.99,\n//       images: [\n//         \"https://images.unsplash.com/photo-1546868871-7041f2a55e12?ixlib=rb-4.0.3&w=400&h=300\",\n//       ],\n//       rating: 5.0,\n//       reviewCount: 203,\n//       vendorName: \"FitTech Wearables\",\n//       isNew: true,\n//       features: [\"Best Seller\"],\n//     },\n//     {\n//       id: \"4\",\n//       name: \"Professional Camera Kit\",\n//       description:\n//         \"Complete camera bundle with lens, tripod, and professional accessories\",\n//       price: 899.99,\n//       originalPrice: 1199.99,\n//       images: [\n//         \"https://images.unsplash.com/photo-1502920917128-1aa500764cbd?ixlib=rb-4.0.3&w=400&h=300\",\n//       ],\n//       rating: 4.5,\n//       reviewCount: 156,\n//       vendorName: \"PhotoPro Equipment\",\n//       isBundle: true,\n//       discount: 25,\n//       features: [\"2Y Warranty\"],\n//     },\n//   ];\n\n//   const mockVendors = [\n//     {\n//       id: \"1\",\n//       name: \"TechWorld Electronics\",\n//       description: \"Premium electronics and gadgets from Silicon Valley\",\n//       avatar:\n//         \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=80&h=80\",\n//       rating: 4.8,\n//       productCount: 1.2,\n//     },\n//     {\n//       id: \"2\",\n//       name: \"Fashion Forward Boutique\",\n//       description: \"Trendy clothing and accessories for modern lifestyle\",\n//       avatar:\n//         \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=80&h=80\",\n//       rating: 4.9,\n//       productCount: 0.856,\n//     },\n//     {\n//       id: \"3\",\n//       name: \"Home & Garden Paradise\",\n//       description: \"Beautiful home decor and garden essentials\",\n//       avatar:\n//         \"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&w=80&h=80\",\n//       rating: 4.7,\n//       productCount: 2.1,\n//     },\n//   ];\n\n//   const displayProducts = products || [];\n//   const displayVendors = vendors?.length ? vendors : mockVendors;\n\n//   return (\n//     <div className=\"min-h-screen bg-gray-50\">\n//       <Header />\n\n//       {/* Hero Section */}\n//       <section className=\"relative hero-overlay text-white overflow-hidden\">\n//         <div\n//           className=\"absolute inset-0 bg-black bg-opacity-20\"\n//           style={{\n//             backgroundImage:\n//               \"url('https://images.unsplash.com/photo-1556742049-0cfed4f6a45d?ixlib=rb-4.0.3&w=1920&h=600')\",\n//             backgroundSize: \"cover\",\n//             backgroundPosition: \"center\",\n//             backgroundBlendMode: \"overlay\",\n//           }}\n//         ></div>\n\n//         <div className=\"relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-24 lg:py-32\">\n//           <div className=\"max-w-3xl animate-fade-in\">\n//             <h1\n//               className=\"text-4xl lg:text-6xl font-bold mb-6 leading-tight\"\n//               data-testid=\"text-hero-title\"\n//             >\n//               {t(\"hero.title\")}\n//             </h1>\n//             <p\n//               className=\"text-xl lg:text-2xl mb-8 text-purple-100\"\n//               data-testid=\"text-hero-subtitle\"\n//             >\n//               {t(\"hero.subtitle\")}\n//             </p>\n//             <div className=\"flex flex-col sm:flex-row gap-4\">\n//               <Button\n//                 size=\"lg\"\n//                 className=\"bg-white text-primary-700 px-8 py-4 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n//                 data-testid=\"button-start-shopping\"\n//               >\n//                 {t(\"hero.startShopping\")}\n//               </Button>\n//               <Button\n//                 size=\"lg\"\n//                 variant=\"outline\"\n//                 className=\"bg-white text-primary-700 px-8 py-4 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n//                 data-testid=\"button-become-seller\"\n//               >\n//                 {t(\"hero.becomeSeller\")}\n//               </Button>\n//             </div>\n//           </div>\n//         </div>\n//       </section>\n\n//       <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n//         {/* Categories */}\n//         <CategoryGrid categories={categories} />\n\n//         {/* Featured Products */}\n//         <section className=\"py-12\">\n//           <div className=\"flex items-center justify-between mb-8\">\n//             <div>\n//               <h2\n//                 className=\"text-3xl font-bold text-gray-900 mb-2\"\n//                 data-testid=\"text-products-title\"\n//               >\n//                 {t(\"products.title\")}\n//               </h2>\n//               <p className=\"text-gray-600\" data-testid=\"text-products-subtitle\">\n//                 {t(\"products.subtitle\")}\n//               </p>\n//             </div>\n//             <div className=\"flex items-center space-x-4\">\n//               <div className=\"flex items-center space-x-2\">\n//                 <label className=\"text-sm font-medium text-gray-700\">\n//                   {t(\"products.sortBy\")}\n//                 </label>\n//                 <Select defaultValue=\"featured\">\n//                   <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n//                     <SelectValue />\n//                   </SelectTrigger>\n//                   <SelectContent>\n//                     <SelectItem value=\"featured\">\n//                       {t(\"products.featured\")}\n//                     </SelectItem>\n//                     <SelectItem value=\"price-low\">\n//                       {t(\"products.priceLowHigh\")}\n//                     </SelectItem>\n//                     <SelectItem value=\"price-high\">\n//                       {t(\"products.priceHighLow\")}\n//                     </SelectItem>\n//                     <SelectItem value=\"newest\">\n//                       {t(\"products.newest\")}\n//                     </SelectItem>\n//                     <SelectItem value=\"rating\">\n//                       {t(\"products.bestRating\")}\n//                     </SelectItem>\n//                   </SelectContent>\n//                 </Select>\n//               </div>\n//             </div>\n//           </div>\n\n//           <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n//             {productsLoading\n//               ? // Loading skeletons\n//                 Array.from({ length: 4 }).map((_, i) => (\n//                   <div key={i} className=\"bg-white rounded-xl shadow-sm p-4\">\n//                     <Skeleton className=\"h-48 w-full mb-4 rounded-lg\" />\n//                     <Skeleton className=\"h-4 w-3/4 mb-2\" />\n//                     <Skeleton className=\"h-3 w-full mb-4\" />\n//                     <Skeleton className=\"h-6 w-1/2 mb-4\" />\n//                     <Skeleton className=\"h-10 w-full\" />\n//                   </div>\n//                 ))\n//               : displayProducts.map((product: any) => (\n//                   <ProductCard key={product.id} product={product} />\n//                 ))}\n//           </div>\n\n//           <div className=\"text-center mt-12\">\n//             <Link href=\"/products\">\n//               <Button\n//                 size=\"lg\"\n//                 className=\"bg-primary-600 text-white px-8 py-3 rounded-lg hover:bg-primary-700 transition-colors font-medium\"\n//                 data-testid=\"button-view-all-products\"\n//               >\n//                 View All Products\n//               </Button>\n//             </Link>\n//           </div>\n//         </section>\n\n//         {/* Vendor Spotlight */}\n//         <section className=\"py-12 bg-gradient-to-r from-gray-50 to-gray-100 -mx-4 sm:-mx-6 lg:-mx-8 px-4 sm:px-6 lg:px-8\">\n//           <div className=\"max-w-7xl mx-auto\">\n//             <div className=\"text-center mb-12\">\n//               <h2\n//                 className=\"text-3xl font-bold text-gray-900 mb-4\"\n//                 data-testid=\"text-vendors-title\"\n//               >\n//                 {t(\"vendors.title\")}\n//               </h2>\n//               <p\n//                 className=\"text-lg text-gray-600 max-w-2xl mx-auto\"\n//                 data-testid=\"text-vendors-subtitle\"\n//               >\n//                 {t(\"vendors.subtitle\")}\n//               </p>\n//             </div>\n\n//             <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n//               {vendorsLoading\n//                 ? Array.from({ length: 3 }).map((_, i) => (\n//                     <div\n//                       key={i}\n//                       className=\"bg-white rounded-xl shadow-sm p-6 text-center\"\n//                     >\n//                       <Skeleton className=\"w-20 h-20 rounded-full mx-auto mb-4\" />\n//                       <Skeleton className=\"h-6 w-3/4 mx-auto mb-2\" />\n//                       <Skeleton className=\"h-4 w-full mb-4\" />\n//                       <Skeleton className=\"h-10 w-full\" />\n//                     </div>\n//                   ))\n//                 : displayVendors.map((vendor: any) => (\n//                     <VendorCard key={vendor.id} vendor={vendor} />\n//                   ))}\n//             </div>\n//           </div>\n//         </section>\n\n//         {/* Dashboard Preview Section */}\n//         <section className=\"py-16\">\n//           <div className=\"text-center mb-12\">\n//             <h2\n//               className=\"text-3xl font-bold text-gray-900 mb-4\"\n//               data-testid=\"text-dashboards-title\"\n//             >\n//               {t(\"dashboards.title\")}\n//             </h2>\n//             <p\n//               className=\"text-lg text-gray-600 max-w-2xl mx-auto\"\n//               data-testid=\"text-dashboards-subtitle\"\n//             >\n//               {t(\"dashboards.subtitle\")}\n//             </p>\n//           </div>\n\n//           <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n//             {/* Customer Dashboard Preview */}\n//             <div\n//               className=\"bg-gradient-to-br from-primary-500 to-primary-700 rounded-xl p-8 text-white\"\n//               data-testid=\"card-dashboard-customer\"\n//             >\n//               <div className=\"flex items-center mb-6\">\n//                 <div className=\"w-12 h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center\">\n//                   <User className=\"h-6 w-6\" />\n//                 </div>\n//                 <div className=\"ml-4\">\n//                   <h3\n//                     className=\"text-xl font-bold\"\n//                     data-testid=\"text-dashboard-customer-title\"\n//                   >\n//                     {t(\"dashboard.customer.title\")}\n//                   </h3>\n//                   <p\n//                     className=\"text-primary-100\"\n//                     data-testid=\"text-dashboard-customer-subtitle\"\n//                   >\n//                     {t(\"dashboard.customer.subtitle\")}\n//                   </p>\n//                 </div>\n//               </div>\n//               <div className=\"space-y-3 mb-6\">\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.customer.orders\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-customer-orders\"\n//                   >\n//                     12\n//                   </span>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.customer.wishlist\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-customer-wishlist\"\n//                   >\n//                     24\n//                   </span>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.customer.reviews\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-customer-reviews\"\n//                   >\n//                     8\n//                   </span>\n//                 </div>\n//               </div>\n//               <Button\n//                 className=\"w-full bg-white text-primary-700 py-2 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n//                 data-testid=\"button-customer-demo\"\n//               >\n//                 {t(\"dashboard.customer.demo\")}\n//               </Button>\n//             </div>\n\n//             {/* Seller Dashboard Preview */}\n//             <div\n//               className=\"bg-gradient-to-br from-green-500 to-green-700 rounded-xl p-8 text-white\"\n//               data-testid=\"card-dashboard-seller\"\n//             >\n//               <div className=\"flex items-center mb-6\">\n//                 <div className=\"w-12 h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center\">\n//                   <Store className=\"h-6 w-6\" />\n//                 </div>\n//                 <div className=\"ml-4\">\n//                   <h3\n//                     className=\"text-xl font-bold\"\n//                     data-testid=\"text-dashboard-seller-title\"\n//                   >\n//                     {t(\"dashboard.seller.title\")}\n//                   </h3>\n//                   <p\n//                     className=\"text-green-100\"\n//                     data-testid=\"text-dashboard-seller-subtitle\"\n//                   >\n//                     {t(\"dashboard.seller.subtitle\")}\n//                   </p>\n//                 </div>\n//               </div>\n//               <div className=\"space-y-3 mb-6\">\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.seller.products\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-seller-products\"\n//                   >\n//                     156\n//                   </span>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.seller.sales\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-seller-sales\"\n//                   >\n//                     $2.4k\n//                   </span>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.seller.customers\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-seller-customers\"\n//                   >\n//                     89\n//                   </span>\n//                 </div>\n//               </div>\n//               <Button\n//                 className=\"w-full bg-white text-green-700 py-2 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n//                 data-testid=\"button-seller-demo\"\n//               >\n//                 {t(\"dashboard.seller.demo\")}\n//               </Button>\n//             </div>\n\n//             {/* Admin Dashboard Preview */}\n//             <div\n//               className=\"bg-gradient-to-br from-orange-500 to-orange-700 rounded-xl p-8 text-white\"\n//               data-testid=\"card-dashboard-admin\"\n//             >\n//               <div className=\"flex items-center mb-6\">\n//                 <div className=\"w-12 h-12 bg-white bg-opacity-20 rounded-lg flex items-center justify-center\">\n//                   <Settings className=\"h-6 w-6\" />\n//                 </div>\n//                 <div className=\"ml-4\">\n//                   <h3\n//                     className=\"text-xl font-bold\"\n//                     data-testid=\"text-dashboard-admin-title\"\n//                   >\n//                     {t(\"dashboard.admin.title\")}\n//                   </h3>\n//                   <p\n//                     className=\"text-orange-100\"\n//                     data-testid=\"text-dashboard-admin-subtitle\"\n//                   >\n//                     {t(\"dashboard.admin.subtitle\")}\n//                   </p>\n//                 </div>\n//               </div>\n//               <div className=\"space-y-3 mb-6\">\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.admin.totalUsers\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-admin-users\"\n//                   >\n//                     1.2k\n//                   </span>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.admin.vendors\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-admin-vendors\"\n//                   >\n//                     45\n//                   </span>\n//                 </div>\n//                 <div className=\"flex items-center justify-between\">\n//                   <span className=\"flex items-center\">\n//                     {t(\"dashboard.admin.revenue\")}\n//                   </span>\n//                   <span\n//                     className=\"bg-white bg-opacity-20 px-2 py-1 rounded text-sm\"\n//                     data-testid=\"text-admin-revenue\"\n//                   >\n//                     $45k\n//                   </span>\n//                 </div>\n//               </div>\n//               <Button\n//                 className=\"w-full bg-white text-orange-700 py-2 rounded-lg font-semibold hover:bg-gray-50 transition-colors\"\n//                 data-testid=\"button-admin-demo\"\n//               >\n//                 {t(\"dashboard.admin.demo\")}\n//               </Button>\n//             </div>\n//           </div>\n//         </section>\n//       </div>\n\n//       <Footer />\n//     </div>\n//   );\n// }\n\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { CategoryGrid } from \"@/components/categories/category-grid\";\nimport { ProductCard } from \"@/components/products/product-card\";\nimport { VendorCard } from \"@/components/vendors/vendor-card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport { User, Store, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport HeaderC from \"@/components/layout/headerC\";\nimport TrendingCategories from \"@/components/SubComponents/TrendingCategories\";\nimport MainLayout from \"@/components/home/MainLayout\";\nimport ProductShowcase from \"@/DummyData/products/ProductShowcase\";\nimport ProductGroups from \"@/DummyData/products/ProductGroups\";\nimport CartComponent from \"@/components/home/CartComponent\";\n\nexport default function HomePage() {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  // Redirect sellers and admins to their dashboards\n  useEffect(() => {\n    if (user) {\n      if (user.role === \"seller\") {\n        setLocation(\"/dashboard/seller\");\n        return;\n      }\n      if (user.role === \"admin\") {\n        setLocation(\"/dashboard/admin\");\n        return;\n      }\n    }\n  }, [user, setLocation]);\n\n  // Fetch all active products\n  // const { data: products, isLoading: productsLoading } = useQuery({\n  //   queryKey: [\"/api/products\"],\n  //   queryFn: async () => {\n  //     const response = await fetch(\"/api/products\");\n  //     if (!response.ok) throw new Error(\"Failed to fetch products\");\n  //     return response.json();\n  //   },\n  // });\n\n  // Fetch categories\n  // const { data: categories, isLoading: categoriesLoading } = useQuery({\n  //   queryKey: [\"/api/categories\"],\n  //   queryFn: async () => {\n  //     const response = await fetch(\"/api/categories\");\n  //     if (!response.ok) throw new Error(\"Failed to fetch categories\");\n  //     return response.json();\n  //   },\n  // });\n\n  // Fetch vendors\n  // const { data: vendors, isLoading: vendorsLoading } = useQuery({\n  //   queryKey: [\"/api/vendors\"],\n  //   queryFn: async () => {\n  //     const response = await fetch(\"/api/vendors?limit=3\");\n  //     if (!response.ok) throw new Error(\"Failed to fetch vendors\");\n  //     return response.json();\n  //   },\n  // });\n\n  // Mock data for demonstration if API fails\n\n  // const mockVendors = [\n  //   {\n  //     id: \"1\",\n  //     name: \"TechWorld Electronics\",\n  //     description: \"Premium electronics and gadgets from Silicon Valley\",\n  //     avatar:\n  //       \"https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?ixlib=rb-4.0.3&w=80&h=80\",\n  //     rating: 4.8,\n  //     productCount: 1.2,\n  //   },\n  //   {\n  //     id: \"2\",\n  //     name: \"Fashion Forward Boutique\",\n  //     description: \"Trendy clothing and accessories for modern lifestyle\",\n  //     avatar:\n  //       \"https://images.unsplash.com/photo-1494790108755-2616b332c902?ixlib=rb-4.0.3&w=80&h=80\",\n  //     rating: 4.9,\n  //     productCount: 0.856,\n  //   },\n  //   {\n  //     id: \"3\",\n  //     name: \"Home & Garden Paradise\",\n  //     description: \"Beautiful home decor and garden essentials\",\n  //     avatar:\n  //       \"https://images.unsplash.com/photo-1560250097-0b93528c311a?ixlib=rb-4.0.3&w=80&h=80\",\n  //     rating: 4.7,\n  //     productCount: 2.1,\n  //   },\n  // ];\n\n  // const displayProducts = products || [];\n  // const displayVendors = vendors?.length ? vendors : mockVendors;\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* <Header /> */}\n      <HeaderC />\n      {/* Hero Section */}\n      <main className=\"flex-grow w-full mx-auto px-3 sm:px-4 py-4 sm:py-6 max-w-[1920px]\">\n        <TrendingCategories />\n\n        <MainLayout />\n      </main>\n\n      <ProductShowcase />\n      <ProductGroups />\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":26688},"client/src/pages/seller/inventory/overview.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { exportToExcel, formatCurrency, formatDate, formatBoolean } from \"@/utils/excel-export\";\nimport {\n  Search,\n  Package,\n  AlertTriangle,\n  TrendingDown,\n  Repeat,\n  BarChart3,\n  Download,\n  Settings,\n  Plus,\n  Minus,\n} from \"lucide-react\";\n\ninterface Product {\n  id: string;\n  sku: string;\n  price: string;\n  stock: number;\n  status: \"active\" | \"inactive\";\n  brand: string;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description: string;\n      highlights?: string;\n    };\n  };\n}\n\ninterface StockAdjustment {\n  productId: string;\n  adjustmentType: \"increase\" | \"decrease\";\n  quantity: number;\n  reason: string;\n  notes?: string;\n  alsoPriceAdjust?: boolean;\n  newPrice?: number;\n}\n\nexport default function InventoryOverview() {\n  const { t, i18n } = useTranslation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const { toast } = useToast();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterStatus, setFilterStatus] = useState(\"all\");\n  const [showAdjustModal, setShowAdjustModal] = useState(false);\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [adjustmentType, setAdjustmentType] = useState<\"increase\" | \"decrease\">(\n    \"increase\",\n  );\n  const [adjustmentQuantity, setAdjustmentQuantity] = useState();\n  const [adjustmentReason, setAdjustmentReason] = useState(\"\");\n  const [adjustmentNotes, setAdjustmentNotes] = useState(\"\");\n  const [alsoPriceAdjust, setAlsoPriceAdjust] = useState(false);\n\n  // Fetch seller's products\n  const { data: products = [], isLoading } = useQuery({\n    queryKey: [\"/api/seller/products\", user?.id, i18n.language],\n    queryFn: async () => {\n      const response = await fetch(\n        `/api/seller/products?language=${i18n.language}`,\n        {\n          credentials: \"include\",\n        },\n      );\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n    enabled: !!user?.id,\n  });\n\n  // Calculate inventory statistics\n  const inventoryStats = useMemo(() => {\n    const totalProducts = products.length;\n    const outOfStock = products.filter((p: Product) => p.stock === 0).length;\n    const lowStock = products.filter(\n      (p: Product) => p.stock > 0 && p.stock <= 5,\n    ).length;\n    const toBeRestocked = products.filter((p: Product) => p.stock <= 10).length;\n    const totalValue = products.reduce((sum: number, p: Product) => {\n      return sum + parseFloat(p.price) * p.stock;\n    }, 0);\n\n    return {\n      totalProducts,\n      outOfStock,\n      lowStock,\n      toBeRestocked,\n      totalValue: totalValue.toFixed(2),\n    };\n  }, [products]);\n\n  // Filter products\n  const filteredProducts = useMemo(() => {\n    return products.filter((product: Product) => {\n      const productName =\n        product.translations?.[i18n.language]?.name ||\n        product.translations?.en?.name ||\n        \"\";\n      const matchesSearch =\n        productName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        product.sku.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        product.brand.toLowerCase().includes(searchTerm.toLowerCase());\n\n      let matchesFilter = true;\n      if (filterStatus === \"breakup\") {\n        matchesFilter = product.stock === 0;\n      } else if (filterStatus === \"low-stock\") {\n        matchesFilter = product.stock > 0 && product.stock <= 5;\n      } else if (filterStatus === \"restock\") {\n        matchesFilter = product.stock <= 10;\n      }\n\n      return matchesSearch && matchesFilter;\n    });\n  }, [products, searchTerm, filterStatus, i18n.language]);\n\n  // Stock adjustment mutation\n  const adjustStockMutation = useMutation({\n    mutationFn: async (adjustment: StockAdjustment) => {\n      return apiRequest(\n        \"PATCH\",\n        `/api/seller/products/${adjustment.productId}/adjust-stock`,\n        adjustment,\n      );\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/seller/products\"] });\n      toast({\n        title: \"Stock adjusted successfully\",\n        description: \"Product stock has been updated\",\n      });\n      setShowAdjustModal(false);\n      resetAdjustmentForm();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error adjusting stock\",\n        description: error.message || \"Failed to adjust stock\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const resetAdjustmentForm = () => {\n    setSelectedProduct(null);\n    setAdjustmentType(\"increase\");\n    setAdjustmentQuantity(0);\n    setAdjustmentReason(\"\");\n    setAdjustmentNotes(\"\");\n    setAlsoPriceAdjust(false);\n  };\n\n  const handleAdjustStock = (product: Product) => {\n    setSelectedProduct(product);\n    setShowAdjustModal(true);\n  };\n\n  const handleConfirmAdjustment = () => {\n    if (!selectedProduct || adjustmentQuantity <= 0 || !adjustmentReason) {\n      toast({\n        title: \"Validation error\",\n        description: \"Please fill in all required fields\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    adjustStockMutation.mutate({\n      productId: selectedProduct.id,\n      adjustmentType,\n      quantity: adjustmentQuantity,\n      reason: adjustmentReason,\n      notes: adjustmentNotes,\n      alsoPriceAdjust,\n      newPrice: alsoPriceAdjust ? parseFloat(selectedProduct.price) : undefined,\n    });\n  };\n\n  const getStatusBadge = (stock: number) => {\n    if (stock === 0) {\n      return (\n        <Badge variant=\"destructive\" data-testid=\"status-out-of-stock\">\n          Breakup\n        </Badge>\n      );\n    } else if (stock <= 5) {\n      return (\n        <Badge variant=\"secondary\" data-testid=\"status-restock\">\n          Restock\n        </Badge>\n      );\n    } else {\n      return (\n        <Badge\n          variant=\"default\"\n          className=\"bg-green-100 text-green-800\"\n          data-testid=\"status-in-stock\"\n        >\n          In stock\n        </Badge>\n      );\n    }\n  };\n\n  const calculateNewStock = () => {\n    if (!selectedProduct) return 0;\n\n    if (adjustmentType === \"increase\") {\n      return selectedProduct.stock + adjustmentQuantity;\n    } else {\n      return Math.max(0, selectedProduct.stock - adjustmentQuantity);\n    }\n  };\n\n  const handleExportInventory = () => {\n    if (!filteredProducts.length) {\n      alert('No inventory data to export');\n      return;\n    }\n\n    const columns = [\n      { key: 'sku', label: 'SKU' },\n      { key: 'translations.en.name', label: 'Product Name' },\n      { key: 'brand', label: 'Brand' },\n      { key: 'price', label: 'Price', format: formatCurrency },\n      { key: 'stock', label: 'Current Stock' },\n      { key: 'status', label: 'Status' },\n      { key: 'createdAt', label: 'Created Date', format: formatDate },\n      { key: 'updatedAt', label: 'Last Updated', format: formatDate },\n    ];\n\n    const success = exportToExcel({\n      filename: `inventory-${new Date().toISOString().split('T')[0]}`,\n      sheetName: 'Inventory',\n      columns,\n      data: filteredProducts,\n    });\n\n    if (success) {\n      console.log('Inventory exported successfully');\n    } else {\n      alert('Failed to export inventory. Please try again.');\n    }\n  };\n\n  return (\n    <DashboardLayout title={t(\"header.heading\")}>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"flex items-center gap-2\">\n              <Package className=\"h-6 w-6 text-gray-600\" />\n              <h1 className=\"text-2xl font-semibold text-gray-900\">\n                {t(\"inventory.title\")}\n              </h1>\n            </div>\n            <p className=\"text-gray-600 mt-1\">{t(\"inventory.subtitle\")}</p>\n          </div>\n          <Button\n            variant=\"outline\"\n            className=\"gap-2\"\n            onClick={handleExportInventory}\n            data-testid=\"button-export\"\n          >\n            <Download className=\"h-4 w-4\" />\n            {t(\"inventory.export\")}\n          </Button>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                {t(\"inventory.totalProducts\")}\n              </CardTitle>\n              <Package className=\"h-4 w-4 text-gray-400\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold\"\n                data-testid=\"stat-total-products\"\n              >\n                {inventoryStats.totalProducts}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                {t(\"inventory.outOfStock\")}\n              </CardTitle>\n              <AlertTriangle className=\"h-4 w-4 text-red-400\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold text-red-600\"\n                data-testid=\"stat-out-of-stock\"\n              >\n                {inventoryStats.outOfStock}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                {t(\"inventory.lowStock\")}\n              </CardTitle>\n              <TrendingDown className=\"h-4 w-4 text-orange-400\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold text-orange-600\"\n                data-testid=\"stat-low-stock\"\n              >\n                {inventoryStats.lowStock}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                {t(\"inventory.toBeRestocked\")}\n              </CardTitle>\n              <Repeat className=\"h-4 w-4 text-yellow-400\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold text-yellow-600\"\n                data-testid=\"stat-to-be-restocked\"\n              >\n                {inventoryStats.toBeRestocked}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium text-gray-600\">\n                {t(\"inventory.stockValue\")}\n              </CardTitle>\n              <BarChart3 className=\"h-4 w-4 text-blue-400\" />\n            </CardHeader>\n            <CardContent>\n              <div\n                className=\"text-2xl font-bold text-blue-600\"\n                data-testid=\"stat-stock-value\"\n              >\n                {inventoryStats.totalValue} DA\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filters */}\n        <div className=\"flex items-center gap-4\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n            <Input\n              placeholder={t(\"inventory.search\")}\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search\"\n            />\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant={filterStatus === \"all\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilterStatus(\"all\")}\n              data-testid=\"filter-all\"\n            >\n              {t(\"inventory.filter.all\")}\n            </Button>\n            <Button\n              variant={filterStatus === \"breakup\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilterStatus(\"breakup\")}\n              data-testid=\"filter-breakup\"\n            >\n              {t(\"inventory.filter.breakup\")}\n            </Button>\n            <Button\n              variant={filterStatus === \"low-stock\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilterStatus(\"low-stock\")}\n              data-testid=\"filter-low-stock\"\n            >\n              {t(\"inventory.filter.lowStock\")}\n            </Button>\n            <Button\n              variant={filterStatus === \"restock\" ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setFilterStatus(\"restock\")}\n              data-testid=\"filter-restock\"\n            >\n              {t(\"inventory.filter.restock\")}\n            </Button>\n          </div>\n        </div>\n\n        {/* Products Table */}\n        <Card>\n          <CardContent className=\"p-0\">\n            <Table>\n              <TableHeader>\n                <TableRow className=\"bg-gray-50\">\n                  <TableHead className=\"font-medium\">\n                    {t(\"inventory.table.product\")}\n                  </TableHead>\n                  <TableHead className=\"font-medium\">\n                    {t(\"inventory.table.sku\")}\n                  </TableHead>\n                  <TableHead className=\"font-medium\">\n                    {t(\"inventory.table.totalStock\")}\n                  </TableHead>\n                  <TableHead className=\"font-medium\">\n                    {t(\"inventory.table.available\")}\n                  </TableHead>\n                  <TableHead className=\"font-medium\">\n                    {t(\"inventory.table.status\")}\n                  </TableHead>\n                  <TableHead className=\"font-medium\">\n                    {t(\"inventory.table.price\")}\n                  </TableHead>\n                  <TableHead className=\"font-medium\">\n                    {t(\"inventory.table.actions\")}\n                  </TableHead>\n                </TableRow>\n              </TableHeader>\n              <TableBody>\n                {isLoading ? (\n                  <TableRow>\n                    <TableCell colSpan={7} className=\"text-center py-8\">\n                      {t(\"inventory.loading\")}\n                    </TableCell>\n                  </TableRow>\n                ) : filteredProducts.length === 0 ? (\n                  <TableRow>\n                    <TableCell\n                      colSpan={7}\n                      className=\"text-center py-8 text-gray-500\"\n                    >\n                      {t(\"inventory.table.noProducts\")}\n                    </TableCell>\n                  </TableRow>\n                ) : (\n                  filteredProducts.map((product: Product) => (\n                    <TableRow\n                      key={product.id}\n                      data-testid={`row-product-${product.id}`}\n                    >\n                      <TableCell>\n                        <div>\n                          <div\n                            className=\"font-medium\"\n                            data-testid={`text-product-name-${product.id}`}\n                          >\n                            {product.translations?.[i18n.language]?.name ||\n                              product.translations?.en?.name ||\n                              t(\"inventory.unnamedProduct\")}\n                          </div>\n                          <div className=\"text-sm text-gray-500\">\n                            {product.brand}\n                          </div>\n                        </div>\n                      </TableCell>\n                      <TableCell\n                        className=\"font-mono text-sm\"\n                        data-testid={`text-sku-${product.id}`}\n                      >\n                        {product.sku}\n                      </TableCell>\n                      <TableCell data-testid={`text-total-stock-${product.id}`}>\n                        {product.stock}\n                      </TableCell>\n                      <TableCell\n                        data-testid={`text-available-stock-${product.id}`}\n                      >\n                        {product.stock}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(product.stock)}</TableCell>\n                      <TableCell data-testid={`text-price-${product.id}`}>\n                        {product.price} DA\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"ghost\"\n                          size=\"sm\"\n                          onClick={() => handleAdjustStock(product)}\n                          data-testid={`button-adjust-${product.id}`}\n                        >\n                          {t(\"inventory.table.adjustment\")}\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))\n                )}\n              </TableBody>\n            </Table>\n          </CardContent>\n        </Card>\n\n        {/* Stock Adjustment Modal */}\n        <Dialog open={showAdjustModal} onOpenChange={setShowAdjustModal}>\n          <DialogContent className=\"max-w-lg\" data-testid=\"modal-adjust-stock\">\n            <DialogHeader>\n              <div className=\"flex items-center gap-2\">\n                <Settings className=\"h-5 w-5\" />\n                <DialogTitle>{t(\"adjustment.title\")}</DialogTitle>\n              </div>\n            </DialogHeader>\n\n            {selectedProduct && (\n              <div className=\"space-y-6\">\n                {/* Product Info */}\n                <div className=\"flex items-center justify-between\">\n                  <div>\n                    <h3\n                      className=\"font-medium\"\n                      data-testid=\"text-selected-product-name\"\n                    >\n                      {selectedProduct.translations?.[i18n.language]?.name ||\n                        selectedProduct.translations?.en?.name ||\n                        t(\"inventory.unnamedProduct\")}\n                    </h3>\n                    <p className=\"text-sm text-gray-500\">\n                      SKU: {selectedProduct.sku}\n                    </p>\n                  </div>\n                  {getStatusBadge(selectedProduct.stock)}\n                </div>\n\n                <div className=\"grid grid-cols-2 gap-4 text-sm\">\n                  <div>\n                    <span className=\"text-gray-600\">\n                      {t(\"adjustment.available\")}{\" \"}\n                    </span>\n                    <span data-testid=\"text-current-stock\">\n                      {selectedProduct.stock}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">\n                      {t(\"adjustment.currentStock\")}{\" \"}\n                    </span>\n                    <span data-testid=\"text-current-stock-value\">\n                      {selectedProduct.stock}\n                    </span>\n                  </div>\n                  <div>\n                    <span className=\"text-gray-600\">\n                      {t(\"adjustment.threshold\")}{\" \"}\n                    </span>\n                    <span>10</span>\n                  </div>\n                </div>\n\n                {/* Adjustment Type */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium\">\n                    {t(\"adjustment.type\")}\n                  </label>\n                  <Select\n                    value={adjustmentType}\n                    onValueChange={(value: \"increase\" | \"decrease\") =>\n                      setAdjustmentType(value)\n                    }\n                  >\n                    <SelectTrigger data-testid=\"select-adjustment-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"increase\">\n                        <div className=\"flex items-center gap-2\">\n                          <Plus className=\"h-4 w-4 text-green-600\" />\n                          {t(\"adjustment.increase\")}\n                        </div>\n                      </SelectItem>\n                      <SelectItem value=\"decrease\">\n                        <div className=\"flex items-center gap-2\">\n                          <Minus className=\"h-4 w-4 text-red-600\" />\n                          {t(\"adjustment.decrease\")}\n                        </div>\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Quantity */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium\">\n                    {t(\"adjustment.quantity\")}\n                  </label>\n                  <Input\n                    type=\"number\"\n                    min=\"1\"\n                    value={adjustmentQuantity}\n                    onChange={(e) =>\n                      setAdjustmentQuantity(parseInt(e.target.value) || 0)\n                    }\n                    placeholder=\"0\"\n                    data-testid=\"input-adjustment-quantity\"\n                  />\n                </div>\n\n                {/* New Stock Preview */}\n                <div className=\"bg-blue-50 p-4 rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-gray-600\">\n                      {t(\"adjustment.newStock\")}\n                    </span>\n                    <div className=\"flex items-center gap-2\">\n                      <span\n                        className=\"font-medium text-lg\"\n                        data-testid=\"text-new-stock\"\n                      >\n                        {calculateNewStock()}\n                      </span>\n                      {getStatusBadge(calculateNewStock())}\n                    </div>\n                  </div>\n                </div>\n\n                {/* Reason */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium\">\n                    {t(\"adjustment.reason\")}\n                  </label>\n                  <Select\n                    value={adjustmentReason}\n                    onValueChange={setAdjustmentReason}\n                  >\n                    <SelectTrigger data-testid=\"select-adjustment-reason\">\n                      <SelectValue placeholder={t(\"adjustment.selectReason\")} />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"purchase\">\n                        {t(\"adjustment.purchase\")}\n                      </SelectItem>\n                      <SelectItem value=\"sale\">\n                        {t(\"adjustment.sale\")}\n                      </SelectItem>\n                      <SelectItem value=\"return\">\n                        {t(\"adjustment.return\")}\n                      </SelectItem>\n                      <SelectItem value=\"damage\">\n                        {t(\"adjustment.damage\")}\n                      </SelectItem>\n                      <SelectItem value=\"loss\">\n                        {t(\"adjustment.loss\")}\n                      </SelectItem>\n                      <SelectItem value=\"correction\">\n                        {t(\"adjustment.correction\")}\n                      </SelectItem>\n                      <SelectItem value=\"other\">\n                        {t(\"adjustment.other\")}\n                      </SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                {/* Notes */}\n                <div className=\"space-y-3\">\n                  <label className=\"text-sm font-medium\">\n                    {t(\"adjustment.notes\")}\n                  </label>\n                  <Textarea\n                    value={adjustmentNotes}\n                    onChange={(e) => setAdjustmentNotes(e.target.value)}\n                    placeholder={t(\"adjustment.notesPlaceholder\")}\n                    data-testid=\"textarea-adjustment-notes\"\n                  />\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"flex gap-3\">\n                  <Button\n                    variant=\"outline\"\n                    onClick={() => setShowAdjustModal(false)}\n                    className=\"flex-1\"\n                    data-testid=\"button-cancel-adjustment\"\n                  >\n                    {t(\"adjustment.cancel\")}\n                  </Button>\n                  <Button\n                    onClick={handleConfirmAdjustment}\n                    disabled={adjustStockMutation.isPending}\n                    className=\"flex-1\"\n                    data-testid=\"button-confirm-adjustment\"\n                  >\n                    {adjustStockMutation.isPending\n                      ? t(\"adjustment.adjusting\")\n                      : t(\"adjustment.confirm\")}\n                  </Button>\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":26241},"client/src/pages/client/products/index.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Search,\n  Filter,\n  Heart,\n  ShoppingCart,\n  Star,\n  Eye,\n  ChevronDown,\n} from \"lucide-react\";\nimport { ProductViewModal } from \"@/components/modals/product-view-modal\";\n\ninterface Product {\n  id: string;\n  sku: string;\n  price: string;\n  stock: number;\n  status: \"active\" | \"inactive\";\n  brand: string;\n  category: string;\n  images: string[];\n  rating: number;\n  reviewCount: number;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description: string;\n      highlights?: string;\n    };\n  };\n}\n\ninterface Category {\n  id: string;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description: string;\n    };\n  };\n}\n\nexport default function ProductsPage() {\n  const { t, i18n } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [showProductModal, setShowProductModal] = useState(false);\n\n  // Fetch products\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", i18n.language],\n    queryFn: async () => {\n      const response = await fetch(`/api/products?language=${i18n.language}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n  });\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\", i18n.language],\n    queryFn: async () => {\n      const response = await fetch(`/api/categories?language=${i18n.language}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch categories\");\n      return response.json();\n    },\n  });\n\n  // Filter and sort products\n  const filteredProducts = useMemo(() => {\n    let filtered = products.filter((product: Product) => {\n      const name = product.translations?.[i18n.language]?.name || \n                   product.translations?.en?.name || \"Unnamed Product\";\n      const matchesSearch = name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           product.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           product.sku.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory = selectedCategory === \"all\" || \n                             product.category === selectedCategory;\n      const isActive = product.status === \"active\";\n      \n      return matchesSearch && matchesCategory && isActive;\n    });\n\n    // Sort products\n    filtered.sort((a: Product, b: Product) => {\n      switch (sortBy) {\n        case \"name\":\n          const nameA = a.translations?.[i18n.language]?.name || \n                       a.translations?.en?.name || \"Unnamed Product\";\n          const nameB = b.translations?.[i18n.language]?.name || \n                       b.translations?.en?.name || \"Unnamed Product\";\n          return nameA.localeCompare(nameB);\n        case \"price-low\":\n          return parseFloat(a.price) - parseFloat(b.price);\n        case \"price-high\":\n          return parseFloat(b.price) - parseFloat(a.price);\n        case \"rating\":\n          return (b.rating || 0) - (a.rating || 0);\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [products, searchTerm, selectedCategory, sortBy, i18n.language]);\n\n  const renderStars = (rating: number) => {\n    return [...Array(5)].map((_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) \n            ? \"fill-yellow-400 text-yellow-400\" \n            : \"text-gray-300\"\n        }`}\n      />\n    ));\n  };\n\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat(i18n.language === 'ar' ? 'ar-DZ' : 'en-US', {\n      style: 'currency',\n      currency: 'DZD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n  };\n\n  const getStockBadge = (stock: number) => {\n    if (stock === 0) {\n      return <Badge variant=\"destructive\">Out of stock</Badge>;\n    } else if (stock <= 5) {\n      return <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">\n        Only {stock} left in stock\n      </Badge>;\n    } else {\n      return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n        In stock\n      </Badge>;\n    }\n  };\n\n  const handleViewProduct = (product: Product) => {\n    setSelectedProduct(product);\n    setShowProductModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowProductModal(false);\n    setSelectedProduct(null);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Header */}\n      <div className=\"bg-white border-b\">\n        <div className=\"max-w-7xl mx-auto px-6 py-6\">\n          <div className=\"mb-6\">\n            <h1 className=\"text-3xl font-bold text-gray-900 mb-2\">Our Products</h1>\n            <p className=\"text-gray-600\">\n              Discover our selection of products with customer reviews, questions and answers and detailed ratings.\n            </p>\n          </div>\n\n          {/* Search and Filters */}\n          <div className=\"flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search for a product...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-products\"\n              />\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\n              {/* Category Filter */}\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"h-4 w-4 text-gray-500\" />\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-category\">\n                    <SelectValue placeholder=\"All categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All categories</SelectItem>\n                    {categories.map((category: Category) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.translations?.[i18n.language]?.name ||\n                         category.translations?.en?.name ||\n                         \"Unnamed Category\"}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Sort */}\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Name (A-Z)\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n                  <SelectItem value=\"price-low\">Price (Low to High)</SelectItem>\n                  <SelectItem value=\"price-high\">Price (High to Low)</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* Products Grid */}\n      <div className=\"max-w-7xl mx-auto px-6 py-8\">\n        {productsLoading ? (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <Card key={i} className=\"overflow-hidden\">\n                <Skeleton className=\"aspect-square\" />\n                <CardContent className=\"p-4 space-y-2\">\n                  <Skeleton className=\"h-4 w-3/4\" />\n                  <Skeleton className=\"h-4 w-1/2\" />\n                  <Skeleton className=\"h-6 w-1/3\" />\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : filteredProducts.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <div className=\"text-gray-400 mb-4\">\n              <Search className=\"h-16 w-16 mx-auto\" />\n            </div>\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products found</h3>\n            <p className=\"text-gray-600\">\n              Try adjusting your search or filter criteria\n            </p>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredProducts.map((product: Product) => {\n              const productName = product.translations?.[i18n.language]?.name ||\n                                 product.translations?.en?.name ||\n                                 \"Unnamed Product\";\n              const productDescription = product.translations?.[i18n.language]?.description ||\n                                        product.translations?.en?.description ||\n                                        \"\";\n\n              return (\n                <Card key={product.id} className=\"group overflow-hidden hover:shadow-lg transition-shadow duration-200\">\n                  <div className=\"relative\">\n                    {/* Product Image */}\n                    <div className=\"aspect-square bg-gray-100 relative overflow-hidden\">\n                      {product.images && product.images.length > 0 ? (\n                        <img\n                          src={product.images[0]}\n                          alt={productName}\n                          className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n                        />\n                      ) : (\n                        <div className=\"w-full h-full flex items-center justify-center text-gray-400\">\n                          <div className=\"text-center\">\n                            <div className=\"text-4xl mb-2\">📦</div>\n                            <span className=\"text-sm\">No image</span>\n                          </div>\n                        </div>\n                      )}\n                    </div>\n\n                    {/* Badges */}\n                    <div className=\"absolute top-2 left-2 flex flex-col gap-1\">\n                      {product.stock <= 5 && product.stock > 0 && (\n                        <Badge className=\"bg-orange-500 text-white text-xs\">\n                          {product.stock <= 3 ? \"Few left\" : \"Low stock\"}\n                        </Badge>\n                      )}\n                    </div>\n\n                    {/* Wishlist Button */}\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      className=\"absolute top-2 right-2 h-8 w-8 p-0 bg-white/80 hover:bg-white opacity-0 group-hover:opacity-100 transition-opacity\"\n                      data-testid={`button-wishlist-${product.id}`}\n                    >\n                      <Heart className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n\n                  <CardContent className=\"p-4\">\n                    {/* Product Name and Brand */}\n                    <div className=\"mb-2\">\n                      <h3 \n                        className=\"font-medium text-gray-900 line-clamp-2 mb-1\" \n                        data-testid={`text-product-name-${product.id}`}\n                      >\n                        {productName}\n                      </h3>\n                      <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                        <span>{product.brand}</span>\n                        <span>{product.category}</span>\n                      </div>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        Serial No.: {product.sku}\n                      </div>\n                    </div>\n\n                    {/* Rating */}\n                    {product.rating && (\n                      <div className=\"flex items-center gap-1 mb-2\">\n                        <div className=\"flex\">\n                          {renderStars(product.rating)}\n                        </div>\n                        <span className=\"text-sm text-gray-600\">\n                          ({product.reviewCount || 0} reviews)\n                        </span>\n                      </div>\n                    )}\n\n                    {/* Price */}\n                    <div className=\"mb-3\">\n                      <div className=\"text-lg font-bold text-gray-900\">\n                        {formatPrice(product.price)}\n                      </div>\n                    </div>\n\n                    {/* Stock Status */}\n                    <div className=\"mb-3\">\n                      {getStockBadge(product.stock)}\n                    </div>\n\n                    {/* Action Buttons */}\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"sm\"\n                        className=\"flex-1\"\n                        data-testid={`button-view-details-${product.id}`}\n                        onClick={() => handleViewProduct(product)}\n                      >\n                        <Eye className=\"h-4 w-4 mr-2\" />\n                        View Details\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        className=\"bg-blue-600 hover:bg-blue-700\"\n                        disabled={product.stock === 0}\n                        data-testid={`button-add-to-cart-${product.id}`}\n                      >\n                        <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                        Add\n                      </Button>\n                    </div>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        )}\n      </div>\n\n      {/* Product View Modal */}\n      <ProductViewModal\n        product={selectedProduct}\n        isOpen={showProductModal}\n        onClose={handleCloseModal}\n        categories={categories}\n        showActions={true}\n      />\n    </div>\n  );\n}","size_bytes":14920},"client/src/pages/client/products/dashboard.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Link } from \"wouter\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Skeleton } from \"@/components/ui/skeleton\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Search,\n  Filter,\n  Heart,\n  ShoppingCart,\n  Star,\n  Eye,\n} from \"lucide-react\";\nimport { ProductViewModal } from \"@/components/modals/product-view-modal\";\n\ninterface Product {\n  id: string;\n  sku: string;\n  price: string;\n  stock: number;\n  status: \"active\" | \"inactive\";\n  brand: string;\n  category: string;\n  images: string[];\n  rating: number;\n  reviewCount: number;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description: string;\n      highlights?: string;\n    };\n  };\n}\n\ninterface Category {\n  id: string;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description: string;\n    };\n  };\n}\n\nexport default function ClientProductsDashboard() {\n  const { t, i18n } = useTranslation();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const [showProductModal, setShowProductModal] = useState(false);\n\n  // Fetch products\n  const { data: products = [], isLoading: productsLoading } = useQuery({\n    queryKey: [\"/api/products\", i18n.language],\n    queryFn: async () => {\n      const response = await fetch(`/api/products?language=${i18n.language}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch products\");\n      return response.json();\n    },\n  });\n\n  // Fetch categories\n  const { data: categories = [] } = useQuery({\n    queryKey: [\"/api/categories\", i18n.language],\n    queryFn: async () => {\n      const response = await fetch(`/api/categories?language=${i18n.language}`, {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch categories\");\n      return response.json();\n    },\n  });\n\n  // Filter and sort products\n  const filteredProducts = useMemo(() => {\n    let filtered = products.filter((product: Product) => {\n      const name = product.translations?.[i18n.language]?.name || \n                   product.translations?.en?.name || \"Unnamed Product\";\n      const matchesSearch = name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           product.brand.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                           product.sku.toLowerCase().includes(searchTerm.toLowerCase());\n      const matchesCategory = selectedCategory === \"all\" || \n                             product.category === selectedCategory;\n      // Server already filters for active products, no need to filter again\n      return matchesSearch && matchesCategory;\n    });\n\n    // Sort products\n    filtered.sort((a: Product, b: Product) => {\n      switch (sortBy) {\n        case \"name\":\n          const nameA = a.translations?.[i18n.language]?.name || \n                       a.translations?.en?.name || \"Unnamed Product\";\n          const nameB = b.translations?.[i18n.language]?.name || \n                       b.translations?.en?.name || \"Unnamed Product\";\n          return nameA.localeCompare(nameB);\n        case \"price-low\":\n          return parseFloat(a.price) - parseFloat(b.price);\n        case \"price-high\":\n          return parseFloat(b.price) - parseFloat(a.price);\n        case \"rating\":\n          return (b.rating || 0) - (a.rating || 0);\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [products, searchTerm, selectedCategory, sortBy, i18n.language]);\n\n  const renderStars = (rating: number) => {\n    return [...Array(5)].map((_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating) \n            ? \"fill-yellow-400 text-yellow-400\" \n            : \"text-gray-300\"\n        }`}\n      />\n    ));\n  };\n\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat(i18n.language === 'ar' ? 'ar-DZ' : 'en-US', {\n      style: 'currency',\n      currency: 'DZD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n  };\n\n  const getStockBadge = (stock: number) => {\n    if (stock === 0) {\n      return <Badge variant=\"destructive\">Out of stock</Badge>;\n    } else if (stock <= 5) {\n      return <Badge variant=\"secondary\" className=\"bg-orange-100 text-orange-800\">\n        Only {stock} left in stock\n      </Badge>;\n    } else {\n      return <Badge variant=\"secondary\" className=\"bg-green-100 text-green-800\">\n        In stock\n      </Badge>;\n    }\n  };\n\n  const handleViewProduct = (product: Product) => {\n    setSelectedProduct(product);\n    setShowProductModal(true);\n  };\n\n  const handleCloseModal = () => {\n    setShowProductModal(false);\n    setSelectedProduct(null);\n  };\n\n  return (\n    <DashboardLayout title=\"Our Products\" subtitle=\"Discover our selection of products with customer reviews, questions and answers and detailed ratings.\">\n      <div className=\"space-y-6\">\n        {/* Search and Filters */}\n        <div className=\"bg-white p-6 rounded-lg border\">\n          <div className=\"flex flex-col lg:flex-row gap-4 items-start lg:items-center justify-between\">\n            {/* Search */}\n            <div className=\"relative flex-1 max-w-md\">\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"Search for a product...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pl-10\"\n                data-testid=\"input-search-products\"\n              />\n            </div>\n\n            <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center\">\n              {/* Category Filter */}\n              <div className=\"flex items-center gap-2\">\n                <Filter className=\"h-4 w-4 text-gray-500\" />\n                <Select value={selectedCategory} onValueChange={setSelectedCategory}>\n                  <SelectTrigger className=\"w-48\" data-testid=\"select-category\">\n                    <SelectValue placeholder=\"All categories\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All categories</SelectItem>\n                    {categories.map((category: Category) => (\n                      <SelectItem key={category.id} value={category.id}>\n                        {category.translations?.[i18n.language]?.name ||\n                         category.translations?.en?.name ||\n                         \"Unnamed Category\"}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n              </div>\n\n              {/* Sort */}\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Name (A-Z)\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"name\">Name (A-Z)</SelectItem>\n                  <SelectItem value=\"price-low\">Price (Low to High)</SelectItem>\n                  <SelectItem value=\"price-high\">Price (High to Low)</SelectItem>\n                  <SelectItem value=\"rating\">Highest Rated</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        </div>\n\n        {/* Products Grid */}\n        <div className=\"bg-white p-6 rounded-lg border\">\n          {productsLoading ? (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {[...Array(8)].map((_, i) => (\n                <Card key={i} className=\"overflow-hidden\">\n                  <Skeleton className=\"aspect-square\" />\n                  <CardContent className=\"p-4 space-y-2\">\n                    <Skeleton className=\"h-4 w-3/4\" />\n                    <Skeleton className=\"h-4 w-1/2\" />\n                    <Skeleton className=\"h-6 w-1/3\" />\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          ) : filteredProducts.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <div className=\"text-gray-400 mb-4\">\n                <Search className=\"h-16 w-16 mx-auto\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No products found</h3>\n              <p className=\"text-gray-600\">\n                Try adjusting your search or filter criteria\n              </p>\n            </div>\n          ) : (\n            <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n              {filteredProducts.map((product: Product) => {\n                const productName = product.translations?.[i18n.language]?.name ||\n                                   product.translations?.en?.name ||\n                                   \"Unnamed Product\";\n                const productDescription = product.translations?.[i18n.language]?.description ||\n                                          product.translations?.en?.description ||\n                                          \"\";\n\n                return (\n                  <Card key={product.id} className=\"group overflow-hidden hover:shadow-lg transition-shadow duration-200\">\n                    <div className=\"relative\">\n                      {/* Product Image */}\n                      <div className=\"aspect-square bg-gray-100 relative overflow-hidden\">\n                        {product.images && product.images.length > 0 ? (\n                          <img\n                            src={product.images[0]}\n                            alt={productName}\n                            className=\"w-full h-full object-cover group-hover:scale-105 transition-transform duration-200\"\n                          />\n                        ) : (\n                          <div className=\"w-full h-full flex items-center justify-center text-gray-400\">\n                            <div className=\"text-center\">\n                              <div className=\"text-4xl mb-2\">📦</div>\n                              <span className=\"text-sm\">No image</span>\n                            </div>\n                          </div>\n                        )}\n                      </div>\n\n                      {/* Badges */}\n                      <div className=\"absolute top-2 left-2 flex flex-col gap-1\">\n                        {product.stock <= 5 && product.stock > 0 && (\n                          <Badge className=\"bg-orange-500 text-white text-xs\">\n                            {product.stock <= 3 ? \"Few left\" : \"Low stock\"}\n                          </Badge>\n                        )}\n                      </div>\n\n                      {/* Wishlist Button */}\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        className=\"absolute top-2 right-2 h-8 w-8 p-0 bg-white/80 hover:bg-white opacity-0 group-hover:opacity-100 transition-opacity\"\n                        data-testid={`button-wishlist-${product.id}`}\n                      >\n                        <Heart className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n\n                    <CardContent className=\"p-4\">\n                      {/* Product Name and Brand */}\n                      <div className=\"mb-2\">\n                        <h3 \n                          className=\"font-medium text-gray-900 line-clamp-2 mb-1\" \n                          data-testid={`text-product-name-${product.id}`}\n                        >\n                          {productName}\n                        </h3>\n                        <div className=\"flex items-center justify-between text-sm text-gray-600\">\n                          <span>{product.brand}</span>\n                          <span>{product.category}</span>\n                        </div>\n                        <div className=\"text-xs text-gray-500 mt-1\">\n                          Serial No.: {product.sku}\n                        </div>\n                      </div>\n\n                      {/* Rating */}\n                      {product.rating && (\n                        <div className=\"flex items-center gap-1 mb-2\">\n                          <div className=\"flex\">\n                            {renderStars(product.rating)}\n                          </div>\n                          <span className=\"text-sm text-gray-600\">\n                            ({product.reviewCount || 0} reviews)\n                          </span>\n                        </div>\n                      )}\n\n                      {/* Price */}\n                      <div className=\"mb-3\">\n                        <div className=\"text-lg font-bold text-gray-900\">\n                          {formatPrice(product.price)}\n                        </div>\n                      </div>\n\n                      {/* Stock Status */}\n                      <div className=\"mb-3\">\n                        {getStockBadge(product.stock)}\n                      </div>\n\n                      {/* Action Buttons */}\n                      <div className=\"flex gap-2\">\n                        <Button\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"flex-1\"\n                          data-testid={`button-view-details-${product.id}`}\n                          onClick={() => handleViewProduct(product)}\n                        >\n                          <Eye className=\"h-4 w-4 mr-2\" />\n                          View Details\n                        </Button>\n                        <Button\n                          size=\"sm\"\n                          className=\"bg-blue-600 hover:bg-blue-700\"\n                          disabled={product.stock === 0}\n                          data-testid={`button-add-to-cart-${product.id}`}\n                        >\n                          <ShoppingCart className=\"h-4 w-4 mr-2\" />\n                          Add\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          )}\n        </div>\n      </div>\n\n      {/* Product View Modal */}\n      <ProductViewModal\n        product={selectedProduct}\n        isOpen={showProductModal}\n        onClose={handleCloseModal}\n        categories={categories}\n        showActions={true}\n      />\n    </DashboardLayout>\n  );\n}","size_bytes":15059},"client/src/components/modals/product-view-modal.tsx":{"content":"import { useState } from \"react\";\nimport { Star, Package, ShoppingCart, Heart, Share2, ChevronDown, ChevronUp } from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\n\ninterface ProductViewModalProps {\n  product: any;\n  isOpen: boolean;\n  onClose: () => void;\n  categories?: any[];\n  showActions?: boolean; // Whether to show Add to Cart and other action buttons\n}\n\nexport function ProductViewModal({\n  product,\n  isOpen,\n  onClose,\n  categories = [],\n  showActions = true,\n}: ProductViewModalProps) {\n  const [currentLanguage, setCurrentLanguage] = useState<\"en\" | \"fr\" | \"ar\">(\"en\");\n  const [expandedSections, setExpandedSections] = useState<Record<string, boolean>>({\n    specifications: false,\n    faqs: false,\n  });\n\n  const category = categories.find((c) => c.id === product?.categoryId);\n  const SUPPORTED_LANGS = [\"en\", \"fr\", \"ar\"] as const;\n\n  const toggleSection = (section: string) => {\n    setExpandedSections(prev => ({\n      ...prev,\n      [section]: !prev[section]\n    }));\n  };\n\n  const renderStars = (rating: number) => {\n    return [...Array(5)].map((_, i) => (\n      <Star\n        key={i}\n        className={`h-4 w-4 ${\n          i < Math.floor(rating)\n            ? \"fill-yellow-400 text-yellow-400\"\n            : \"text-gray-300\"\n        }`}\n      />\n    ));\n  };\n\n  const formatPrice = (price: string) => {\n    return new Intl.NumberFormat('en-DZ', {\n      style: 'currency',\n      currency: 'DZD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(parseFloat(price));\n  };\n\n  if (!product) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-6xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>Product Details</DialogTitle>\n          <DialogDescription>\n            Complete product information and specifications\n          </DialogDescription>\n        </DialogHeader>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          {/* Product Images */}\n          <div className=\"space-y-4\">\n            <div className=\"aspect-square bg-white rounded-lg shadow-sm overflow-hidden border\">\n              {product.images?.[0] ? (\n                <img\n                  src={product.images[0]}\n                  alt={product.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              ) : (\n                <div className=\"w-full h-full flex items-center justify-center bg-gray-100\">\n                  <div className=\"text-center\">\n                    <Package className=\"h-16 w-16 text-gray-400 mx-auto mb-2\" />\n                    <p className=\"text-gray-500\">No image available</p>\n                  </div>\n                </div>\n              )}\n            </div>\n\n            {/* Thumbnail Gallery */}\n            {product.images && product.images.length > 1 && (\n              <div className=\"grid grid-cols-4 gap-2\">\n                {product.images.slice(1, 5).map((image: string, index: number) => (\n                  <div\n                    key={index}\n                    className=\"aspect-square bg-white rounded-lg shadow-sm overflow-hidden border\"\n                  >\n                    <img\n                      src={image}\n                      alt={`${product.name} ${index + 2}`}\n                      className=\"w-full h-full object-cover\"\n                    />\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n\n          {/* Product Info */}\n          <div className=\"space-y-6\">\n            {/* Language Selection Tabs */}\n            <div className=\"mb-6\">\n              <div className=\"flex items-center gap-2 mb-4\">\n                <label className=\"text-sm font-medium\">Language:</label>\n                <div className=\"flex bg-gray-100 rounded-lg p-1\">\n                  {SUPPORTED_LANGS.map((lang) => {\n                    const langLabels = {\n                      en: \"English\",\n                      fr: \"Français\",\n                      ar: \"العربية\",\n                    };\n                    return (\n                      <button\n                        key={lang}\n                        type=\"button\"\n                        onClick={() => setCurrentLanguage(lang)}\n                        className={`px-3 py-1 rounded text-sm font-medium transition-colors ${\n                          currentLanguage === lang \n                            ? \"bg-white shadow-sm text-gray-900\" \n                            : \"text-gray-600 hover:text-gray-900\"\n                        }`}\n                      >\n                        {langLabels[lang]}\n                      </button>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n\n            {/* Product Title and Basic Info */}\n            <div>\n              <h1\n                className=\"text-2xl font-bold text-gray-900 mb-2\"\n                dir={currentLanguage === \"ar\" ? \"rtl\" : \"ltr\"}\n              >\n                {product.translations?.[currentLanguage]?.name ||\n                  product.name ||\n                  \"No name available\"}\n              </h1>\n              <div className=\"text-gray-600 space-y-1\">\n                <p>{category?.name || \"Uncategorized\"}</p>\n                <p>SKU: {product.sku} • Brand: {product.brand}</p>\n              </div>\n            </div>\n\n            {/* Rating */}\n            <div className=\"flex items-center gap-3\">\n              <div className=\"flex items-center\">\n                {renderStars(product.rating || 0)}\n              </div>\n              <span className=\"text-sm text-gray-600\">\n                {product.rating || 0} ({product.reviewCount || 0} reviews)\n              </span>\n            </div>\n\n            {/* Price */}\n            <div className=\"flex items-center gap-3\">\n              <span className=\"text-3xl font-bold text-primary-600\">\n                {formatPrice(product.price)}\n              </span>\n              {product.originalPrice && (\n                <span className=\"text-lg text-gray-500 line-through\">\n                  {formatPrice(product.originalPrice)}\n                </span>\n              )}\n            </div>\n\n            {/* Stock Status */}\n            <div className=\"flex items-center gap-2\">\n              <Badge\n                className={`${\n                  product.stock > 10\n                    ? \"bg-green-100 text-green-800\"\n                    : product.stock > 0\n                      ? \"bg-yellow-100 text-yellow-800\"\n                      : \"bg-red-100 text-red-800\"\n                }`}\n              >\n                {product.stock > 10\n                  ? \"In Stock\"\n                  : product.stock > 0\n                    ? \"Low Stock\"\n                    : \"Out of Stock\"}\n              </Badge>\n              <span className=\"text-sm text-gray-600\">\n                {product.stock} units available\n              </span>\n            </div>\n\n            {/* Action Buttons */}\n            {showActions && (\n              <div className=\"flex gap-4\">\n                <Button \n                  size=\"lg\" \n                  className=\"flex-1\" \n                  disabled={product.stock === 0}\n                  data-testid=\"button-add-to-cart\"\n                >\n                  <ShoppingCart className=\"h-5 w-5 mr-2\" />\n                  Add to Cart\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" data-testid=\"button-wishlist\">\n                  <Heart className=\"h-5 w-5\" />\n                </Button>\n                <Button size=\"lg\" variant=\"outline\" data-testid=\"button-share\">\n                  <Share2 className=\"h-5 w-5\" />\n                </Button>\n              </div>\n            )}\n\n            {/* Vendor Info */}\n            <Card>\n              <CardHeader className=\"pb-3\">\n                <CardTitle className=\"text-lg\">Sold by</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-gray-700 font-medium\">{product.vendorName || \"Store Owner\"}</p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n\n        {/* Product Details Sections */}\n        <div className=\"mt-8 space-y-6\">\n          <Separator />\n\n          {/* Description */}\n          <div>\n            <h3 className=\"font-semibold text-gray-900 mb-4 text-lg\">Description</h3>\n            <div\n              className=\"text-gray-700\"\n              dir={currentLanguage === \"ar\" ? \"rtl\" : \"ltr\"}\n            >\n              <div className=\"prose prose-sm max-w-none\">\n                <div\n                  dangerouslySetInnerHTML={{\n                    __html:\n                      product.translations?.[currentLanguage]?.description ||\n                      \"No description available\",\n                  }}\n                />\n              </div>\n            </div>\n          </div>\n\n          {/* Highlights */}\n          {product.translations?.[currentLanguage]?.highlights && (\n            <div>\n              <h3 className=\"font-semibold text-gray-900 mb-4 text-lg\">Key Features</h3>\n              <div\n                className=\"text-gray-700\"\n                dir={currentLanguage === \"ar\" ? \"rtl\" : \"ltr\"}\n              >\n                <div className=\"prose prose-sm max-w-none\">\n                  <div\n                    dangerouslySetInnerHTML={{\n                      __html: product.translations[currentLanguage].highlights,\n                    }}\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {/* Specifications */}\n          {product.specifications && product.specifications.length > 0 && (\n            <Collapsible \n              open={expandedSections.specifications} \n              onOpenChange={() => toggleSection('specifications')}\n            >\n              <CollapsibleTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-between p-0 h-auto font-semibold text-lg text-gray-900\"\n                  data-testid=\"button-toggle-specifications\"\n                >\n                  Specifications\n                  {expandedSections.specifications ? (\n                    <ChevronUp className=\"h-5 w-5\" />\n                  ) : (\n                    <ChevronDown className=\"h-5 w-5\" />\n                  )}\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"mt-4\">\n                <Card>\n                  <CardContent className=\"p-4\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                      {product.specifications.map((spec: any, index: number) => (\n                        <div key={index} className=\"border-b border-gray-100 pb-2 last:border-b-0\">\n                          <div className=\"font-medium text-gray-900\">{spec.featureName}</div>\n                          <div className=\"text-gray-600\">{spec.featureValue}</div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </CollapsibleContent>\n            </Collapsible>\n          )}\n\n          {/* FAQs */}\n          {product.faqs && product.faqs.length > 0 && (\n            <Collapsible \n              open={expandedSections.faqs} \n              onOpenChange={() => toggleSection('faqs')}\n            >\n              <CollapsibleTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-between p-0 h-auto font-semibold text-lg text-gray-900\"\n                  data-testid=\"button-toggle-faqs\"\n                >\n                  Frequently Asked Questions\n                  {expandedSections.faqs ? (\n                    <ChevronUp className=\"h-5 w-5\" />\n                  ) : (\n                    <ChevronDown className=\"h-5 w-5\" />\n                  )}\n                </Button>\n              </CollapsibleTrigger>\n              <CollapsibleContent className=\"mt-4\">\n                <div className=\"space-y-4\">\n                  {product.faqs.map((faq: any, index: number) => (\n                    <Card key={index}>\n                      <CardContent className=\"p-4\">\n                        <div className=\"font-medium text-gray-900 mb-2\">{faq.question}</div>\n                        <div className=\"text-gray-600\">{faq.answer}</div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </CollapsibleContent>\n            </Collapsible>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":13071},"client/src/components/modals/product-edit-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { AdvancedAddProductForm } from \"@/components/forms/advanced-add-product-form\";\nimport { Loader2, X } from \"lucide-react\";\n\ninterface ProductEditModalProps {\n  product: any;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function ProductEditModal({\n  product,\n  isOpen,\n  onClose,\n}: ProductEditModalProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const updateProductMutation = useMutation({\n    mutationFn: async (data: any) => {\n      const response = await fetch(`/api/products/${product.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify(data),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.error || \"Failed to update product\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully!\",\n      });\n\n      // Invalidate relevant queries\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/seller/products\"],\n      });\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/products\"],\n      });\n\n      onClose();\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Error\",\n        description:\n          error.message || \"Failed to update product. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleProductUpdate = (data: any) => {\n    updateProductMutation.mutate(data);\n  };\n\n  const handleCancel = () => {\n    onClose();\n  };\n\n  if (!product) return null;\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-7xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader className=\"flex flex-row items-center justify-between\">\n          <div>\n            <DialogTitle>Edit Product</DialogTitle>\n            <DialogDescription>\n              Update product information, specifications, and content\n            </DialogDescription>\n          </div>\n        </DialogHeader>\n\n        <div>\n          {updateProductMutation.isPending ? (\n            <div className=\"flex items-center justify-center py-12\">\n              <Loader2 className=\"h-8 w-8 animate-spin text-primary-600\" />\n              <span className=\"ml-2 text-gray-600\">Updating product...</span>\n            </div>\n          ) : (\n            <AdvancedAddProductForm\n              onSubmit={handleProductUpdate}\n              onCancel={handleCancel}\n              isLoading={updateProductMutation.isPending}\n              editMode={true}\n              editProduct={product}\n            />\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":3107},"client/src/utils/excel-export.ts":{"content":"import * as XLSX from 'xlsx';\nimport { saveAs } from 'file-saver';\n\nexport interface ExportColumn {\n  key: string;\n  label: string;\n  format?: (value: any) => string;\n}\n\nexport interface ExportOptions {\n  filename: string;\n  sheetName?: string;\n  columns: ExportColumn[];\n  data: any[];\n}\n\n/**\n * Export data to Excel file\n */\nexport function exportToExcel({ filename, sheetName = 'Sheet1', columns, data }: ExportOptions) {\n  try {\n    // Transform data according to column configuration\n    const transformedData = data.map(row => {\n      const transformedRow: any = {};\n      columns.forEach(column => {\n        const value = getNestedValue(row, column.key);\n        transformedRow[column.label] = column.format ? column.format(value) : value;\n      });\n      return transformedRow;\n    });\n\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(transformedData);\n\n    // Auto-size columns\n    const colWidths = columns.map(column => {\n      const maxLength = Math.max(\n        column.label.length,\n        ...transformedData.map(row => String(row[column.label] || '').length)\n      );\n      return { wch: Math.min(maxLength + 2, 50) }; // Max width of 50 characters\n    });\n    worksheet['!cols'] = colWidths;\n\n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, sheetName);\n\n    // Generate Excel file and save\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    \n    saveAs(blob, `${filename}.xlsx`);\n    return true;\n  } catch (error) {\n    console.error('Error exporting to Excel:', error);\n    return false;\n  }\n}\n\n/**\n * Get nested value from object using dot notation\n */\nfunction getNestedValue(obj: any, path: string): any {\n  return path.split('.').reduce((current, key) => {\n    return current && current[key] !== undefined ? current[key] : '';\n  }, obj);\n}\n\n/**\n * Format currency value\n */\nexport function formatCurrency(value: any): string {\n  if (value === null || value === undefined || value === '') return '';\n  const numValue = typeof value === 'string' ? parseFloat(value) : value;\n  return isNaN(numValue) ? '' : `$${numValue.toFixed(2)}`;\n}\n\n/**\n * Format date value\n */\nexport function formatDate(value: any): string {\n  if (!value) return '';\n  try {\n    const date = new Date(value);\n    return date.toLocaleDateString();\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Format boolean value\n */\nexport function formatBoolean(value: any): string {\n  if (value === null || value === undefined) return '';\n  return value ? 'Yes' : 'No';\n}\n\n/**\n * Format array to comma-separated string\n */\nexport function formatArray(value: any): string {\n  if (!Array.isArray(value)) return '';\n  return value.join(', ');\n}\n\n/**\n * Capitalize first letter of each word\n */\nexport function formatTitle(value: any): string {\n  if (!value) return '';\n  return String(value).replace(/\\w\\S*/g, (txt) => \n    txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase()\n  );\n}","size_bytes":3136},"client/src/pages/admin/products-management.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport {\n  ChevronDown,\n  ChevronRight,\n  Search,\n  Plus,\n  Upload,\n  MoreHorizontal,\n  Eye,\n  Edit,\n  Trash2,\n  Package,\n  Store,\n} from \"lucide-react\";\nimport AddProductModal from \"@/components/modals/add-product-modal\";\nimport ViewProductModal from \"@/components/modals/view-product-modal\";\nimport EditProductModal from \"@/components/modals/edit-product-modal\";\n\ninterface Store {\n  id: string;\n  name: string;\n  description?: string;\n  email?: string;\n  phone?: string;\n  status: \"active\" | \"suspended\" | \"pending\";\n  userId: string;\n  user?: {\n    username: string;\n    email: string;\n  };\n  products?: Product[];\n  _count?: {\n    products: number;\n  };\n}\n\ninterface Seller {\n  id: string;\n  name: string;\n  firstName?: string;\n  lastName?: string;\n  username: string;\n  email: string;\n  status: \"active\" | \"suspended\" | \"pending\";\n  storeName?: string;\n  productCount?: number;\n}\n\ninterface Product {\n  id: string;\n  name: string;\n  sku: string;\n  price: string;\n  stock: number;\n  category: string;\n  categoryId?: string;\n  categoryName?: string;\n  sellerId?: string;\n  status: \"active\" | \"inactive\";\n  isActive: boolean;\n  description?: string;\n  shortDescription?: string;\n  images?: string[];\n  specifications?: Array<{ name: string; value: string }>;\n  faqs?: Array<{ question: string; answer: string }>;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description?: string;\n    };\n  };\n}\n\nexport default function AdminProductsManagement() {\n  const { t, i18n } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());\n  const [searchTerms, setSearchTerms] = useState<Record<string, string>>({});\n  const [sellerProducts, setSellerProducts] = useState<\n    Record<string, Product[]>\n  >({});\n  const [productsLoading, setProductsLoading] = useState<\n    Record<string, boolean>\n  >({});\n  const [deleteDialog, setDeleteDialog] = useState<{\n    open: boolean;\n    type: \"product\" | \"store\";\n    id: string;\n    name: string;\n  }>({ open: false, type: \"product\", id: \"\", name: \"\" });\n  const [showAddModal, setShowAddModal] = useState(false);\n  const [viewProduct, setViewProduct] = useState<Product | null>(null);\n  const [editProduct, setEditProduct] = useState<Product | null>(null);\n  const [csvUploading, setCsvUploading] = useState(false);\n\n  // Fetch sellers with their products\n  const { data: rawSellers = [], isLoading: sellersLoading } = useQuery<\n    Seller[]\n  >({\n    queryKey: [\"/api/admin/sellers-with-products\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/sellers-with-products\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch sellers\");\n      return response.json();\n    },\n  });\n\n  // Deduplicate sellers to avoid duplicate keys\n  const sellers = rawSellers.filter(\n    (seller, index, array) =>\n      array.findIndex((s) => s.id === seller.id) === index,\n  );\n\n  // Delete product mutation\n  const deleteProductMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const response = await fetch(`/api/admin/products/${productId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to delete product\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/admin/sellers-with-products\"],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Product deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to delete product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Toggle row expansion\n  const toggleRow = (sellerId: string) => {\n    const newExpanded = new Set(expandedRows);\n    if (newExpanded.has(sellerId)) {\n      newExpanded.delete(sellerId);\n    } else {\n      newExpanded.add(sellerId);\n    }\n    setExpandedRows(newExpanded);\n  };\n\n  // Fetch products for expanded sellers\n  useEffect(() => {\n    const fetchProductsForSeller = async (sellerId: string) => {\n      if (productsLoading[sellerId] || sellerProducts[sellerId]) {\n        return; // Already loading or already have products\n      }\n\n      setProductsLoading((prev) => ({ ...prev, [sellerId]: true }));\n\n      try {\n        const response = await fetch(\n          `/api/admin/sellers/${sellerId}/products`,\n          {\n            credentials: \"include\",\n          },\n        );\n\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch products\");\n        }\n\n        const products = await response.json();\n        setSellerProducts((prev) => ({ ...prev, [sellerId]: products || [] }));\n      } catch (error) {\n        console.error(\n          `Failed to fetch products for seller ${sellerId}:`,\n          error,\n        );\n        setSellerProducts((prev) => ({ ...prev, [sellerId]: [] }));\n      } finally {\n        setProductsLoading((prev) => ({ ...prev, [sellerId]: false }));\n      }\n    };\n\n    // Fetch products for all expanded rows\n    expandedRows.forEach((sellerId) => {\n      fetchProductsForSeller(sellerId);\n    });\n  }, [expandedRows, sellerProducts, productsLoading]);\n\n  // Handle search within seller products\n  const handleSellerSearch = (sellerId: string, term: string) => {\n    setSearchTerms((prev) => ({ ...prev, [sellerId]: term }));\n  };\n\n  // Filter products based on search term\n  const filterProducts = (products: Product[], searchTerm: string) => {\n    if (!searchTerm) return products;\n\n    return products.filter((product) => {\n      const name =\n        product.translations?.[i18n.language]?.name ||\n        product.translations?.en?.name ||\n        product.name ||\n        \"\";\n      const sku = product.sku || \"\";\n      const category = product.categoryName || \"\";\n\n      return (\n        name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        sku.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        category.toLowerCase().includes(searchTerm.toLowerCase())\n      );\n    });\n  };\n\n  // Handle delete confirmation\n  const handleDeleteConfirm = () => {\n    if (deleteDialog.type === \"product\") {\n      deleteProductMutation.mutate(deleteDialog.id);\n    }\n    setDeleteDialog({ open: false, type: \"product\", id: \"\", name: \"\" });\n  };\n\n  // Download CSV template with all required fields\n  const downloadCSVTemplate = () => {\n    const csvHeaders = [\n      \"name\", // Product name (required)\n      \"description\", // Product description (required)\n      \"shortDescription\", // Brief description for listings (optional)\n      \"sku\", // Stock Keeping Unit (required, must be unique)\n      \"price\", // Product price in DZD (required, format: 1000.00)\n      \"originalPrice\", // Original price if discounted (optional, format: 1200.00)\n      \"stock\", // Stock quantity (required, format: 100)\n      \"categoryId\", // Category ID from categories API (required)\n      \"vendorId\", // Seller ID from sellers API (required)\n      \"brand\", // Product brand (optional)\n      \"images\", // Image URLs separated by semicolon (optional, format: url1;url2;url3)\n      \"isFeatured\", // Featured product flag (optional, format: true/false)\n      \"isActive\", // Active product flag (optional, format: true/false, default: true)\n      \"specifications_name\", // Specification names separated by semicolon (optional)\n      \"specifications_value\", // Specification values separated by semicolon (optional)\n      \"faqs_question\", // FAQ questions separated by semicolon (optional)\n      \"faqs_answer\", // FAQ answers separated by semicolon (optional)\n      \"translations_en_name\", // English product name (required)\n      \"translations_en_description\", // English description (required)\n      \"translations_en_shortDescription\", // English short description (optional)\n      \"translations_fr_name\", // French product name (optional)\n      \"translations_fr_description\", // French description (optional)\n      \"translations_fr_shortDescription\", // French short description (optional)\n      \"translations_ar_name\", // Arabic product name (optional)\n      \"translations_ar_description\", // Arabic description (optional)\n      \"translations_ar_shortDescription\", // Arabic short description (optional)\n    ];\n\n    const csvExample = [\n      \"Gaming Laptop\", // name\n      \"High-performance gaming laptop with RTX graphics card\", // description\n      \"Gaming laptop for professionals and gamers\", // shortDescription\n      \"GAMING-001\", // sku\n      \"120000.00\", // price\n      \"150000.00\", // originalPrice\n      \"10\", // stock\n      \"category-id-here\", // categoryId (get from categories API)\n      \"seller-id-here\", // vendorId (get from sellers API)\n      \"ASUS\", // brand\n      \"https://example.com/image1.jpg;https://example.com/image2.jpg\", // images\n      \"true\", // isFeatured\n      \"true\", // isActive\n      \"Processor;RAM;Storage\", // specifications_name\n      \"Intel i7-12700H;16GB DDR5;1TB SSD\", // specifications_value\n      \"What is the warranty?;Does it support gaming?\", // faqs_question\n      \"2 years international warranty;Yes, with RTX graphics\", // faqs_answer\n      \"Gaming Laptop\", // translations_en_name\n      \"High-performance gaming laptop with RTX graphics card\", // translations_en_description\n      \"Gaming laptop for professionals and gamers\", // translations_en_shortDescription\n      \"Ordinateur Portable Gaming\", // translations_fr_name\n      \"Ordinateur portable haute performance avec carte graphique RTX\", // translations_fr_description\n      \"Ordinateur portable gaming pour professionnels et joueurs\", // translations_fr_shortDescription\n      \"حاسوب محمول للألعاب\", // translations_ar_name\n      \"حاسوب محمول عالي الأداء مع كرت رسومات RTX\", // translations_ar_description\n      \"حاسوب محمول للألعاب للمحترفين واللاعبين\", // translations_ar_shortDescription\n    ];\n\n    const csvContent = [csvHeaders.join(\",\"), csvExample.join(\",\")].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", \"products-template.csv\");\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"CSV Template Downloaded\",\n      description:\n        \"Use this template to bulk upload products. Fill in your product data and upload the completed file.\",\n    });\n  };\n\n  // Handle CSV file upload\n  const handleCSVUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const file = event.target.files?.[0];\n    if (!file) return;\n\n    // Validate file type\n    if (!file.name.endsWith(\".csv\") && !file.name.endsWith(\".xlsx\")) {\n      toast({\n        title: \"Error\",\n        description: \"Please select a CSV or Excel file\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    setCsvUploading(true);\n\n    try {\n      const formData = new FormData();\n      formData.append(\"csvFile\", file);\n\n      const response = await fetch(\"/api/admin/products/bulk-upload\", {\n        method: \"POST\",\n        credentials: \"include\",\n        body: formData,\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to upload CSV\");\n      }\n\n      const result = await response.json();\n\n      toast({\n        title: \"Success\",\n        description: `${result.created} products created successfully${result.errors?.length ? `. ${result.errors.length} errors occurred.` : \"\"}`,\n      });\n\n      // Refresh the data\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/admin/sellers-with-products\"],\n      });\n\n      // Log errors if any\n      if (result.errors?.length) {\n        console.warn(\"CSV Upload Errors:\", result.errors);\n      }\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to upload CSV file\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setCsvUploading(false);\n      // Reset the input\n      event.target.value = \"\";\n    }\n  };\n\n  // Get status badge\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"active\":\n        return <Badge className=\"bg-green-100 text-green-800\">Active</Badge>;\n      case \"inactive\":\n        return <Badge variant=\"secondary\">Inactive</Badge>;\n      case \"suspended\":\n        return <Badge variant=\"destructive\">Suspended</Badge>;\n      case \"pending\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Pending</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  if (sellersLoading) {\n    return (\n      <DashboardLayout>\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-3xl font-bold\">Products Management</h1>\n          </div>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-12\">\n                Loading stores and products...\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n              Products Management\n            </h1>\n            <p className=\"text-gray-600\">\n              Manage all seller products from one centralized dashboard\n            </p>\n          </div>\n\n          <div className=\"flex gap-3\">\n            <Button\n              onClick={() => setShowAddModal(true)}\n              className=\"bg-blue-600 hover:bg-blue-700\"\n              data-testid=\"button-add-product\"\n            >\n              <Plus className=\"h-4 w-4 mr-2\" />\n              Add Product\n            </Button>\n            <div className=\"relative\">\n              <input\n                type=\"file\"\n                id=\"csv-upload\"\n                accept=\".csv,.xlsx\"\n                onChange={handleCSVUpload}\n                className=\"hidden\"\n              />\n              <Button\n                variant=\"outline\"\n                className=\"border-green-600 text-green-600 hover:bg-green-50\"\n                onClick={() => document.getElementById(\"csv-upload\")?.click()}\n                disabled={csvUploading}\n                data-testid=\"button-upload-csv\"\n              >\n                <Upload className=\"h-4 w-4 mr-2\" />\n                {csvUploading ? \"Uploading...\" : \"Upload CSV\"}\n              </Button>\n            </div>\n            <Button\n              variant=\"outline\"\n              className=\"border-blue-600 text-blue-600 hover:bg-blue-50\"\n              onClick={downloadCSVTemplate}\n              data-testid=\"button-download-template\"\n            >\n              <Upload className=\"h-4 w-4 mr-2\" />\n              Download CSV Template\n            </Button>\n          </div>\n        </div>\n\n        {/* Statistics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Total Stores\n              </CardTitle>\n              <Store className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">{sellers.length}</div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Total Products\n              </CardTitle>\n              <Package className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {sellers.reduce(\n                  (total, seller) => total + (seller.productCount || 0),\n                  0,\n                )}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Active Stores\n              </CardTitle>\n              <Store className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {sellers.filter((seller) => seller.status === \"active\").length}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">\n                Active Products\n              </CardTitle>\n              <Package className=\"h-4 w-4 text-green-600\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\">\n                {sellers.reduce(\n                  (total: number, seller: Seller) =>\n                    total + (seller.productCount || 0),\n                  0,\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Stores and Products Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Sellers & Products</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-8\"></TableHead>\n                    <TableHead>Store Name</TableHead>\n                    <TableHead>Owner</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Products</TableHead>\n                    <TableHead>Active Products</TableHead>\n                    <TableHead>Contact</TableHead>\n                    {/* <TableHead>Actions</TableHead> */}\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {sellers.map((seller: Seller) => {\n                    const isExpanded = expandedRows.has(seller.id);\n                    const products = sellerProducts[seller.id] || [];\n                    const isLoadingProducts =\n                      productsLoading[seller.id] || false;\n\n                    const filteredProducts = filterProducts(\n                      products,\n                      searchTerms[seller.id] || \"\",\n                    );\n                    const activeProductsCount = products.filter(\n                      (p) => p.isActive,\n                    ).length;\n\n                    return (\n                      <React.Fragment key={seller.id}>\n                        {/* Seller Row */}\n                        <TableRow\n                          className=\"hover:bg-gray-50\"\n                          data-testid={`row-seller-${seller.id}`}\n                        >\n                          <TableCell>\n                            <Button\n                              variant=\"ghost\"\n                              size=\"sm\"\n                              onClick={() => toggleRow(seller.id)}\n                              className=\"p-1\"\n                              data-testid={`button-expand-${seller.id}`}\n                            >\n                              {isExpanded ? (\n                                <ChevronDown className=\"h-4 w-4\" />\n                              ) : (\n                                <ChevronRight className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </TableCell>\n                          <TableCell className=\"font-medium\">\n                            <div>\n                              <div className=\"font-semibold\">{seller.name}</div>\n                              <div className=\"text-sm text-gray-600\">\n                                {seller.storeName\n                                  ? \"Store: \" + seller.storeName\n                                  : \"Personal Account\"}\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>\n                            <div>\n                              <div className=\"font-medium\">\n                                {seller.username}\n                              </div>\n                              <div className=\"text-sm text-gray-600\">\n                                {seller.email}\n                              </div>\n                            </div>\n                          </TableCell>\n                          <TableCell>{getStatusBadge(seller.status)}</TableCell>\n                          <TableCell>\n                            <Badge\n                              variant=\"outline\"\n                              className=\"bg-blue-50 text-blue-700\"\n                            >\n                              {seller.productCount || 0}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <Badge\n                              variant=\"outline\"\n                              className=\"bg-green-50 text-green-700\"\n                            >\n                              {activeProductsCount}\n                            </Badge>\n                          </TableCell>\n                          <TableCell>\n                            <div className=\"text-sm\">\n                              <div>{seller.email}</div>\n                              {seller.firstName && seller.lastName && (\n                                <div>\n                                  {seller.firstName} {seller.lastName}\n                                </div>\n                              )}\n                            </div>\n                          </TableCell>\n                          {/* <TableCell>\n                            <DropdownMenu>\n                              <DropdownMenuTrigger asChild>\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  data-testid={`button-seller-actions-${seller.id}`}\n                                >\n                                  <MoreHorizontal className=\"h-4 w-4\" />\n                                </Button>\n                              </DropdownMenuTrigger>\n                              <DropdownMenuContent align=\"end\">\n                                <DropdownMenuItem>\n                                  <Eye className=\"h-4 w-4 mr-2\" />\n                                  View Seller\n                                </DropdownMenuItem>\n                                <DropdownMenuItem>\n                                  <Edit className=\"h-4 w-4 mr-2\" />\n                                  Edit Seller\n                                </DropdownMenuItem>\n                              </DropdownMenuContent>\n                            </DropdownMenu>\n                          </TableCell> */}\n                        </TableRow>\n\n                        {/* Expanded Products Section */}\n                        {isExpanded && (\n                          <TableRow key={`products-${seller.id}`}>\n                            <TableCell colSpan={8} className=\"p-0\">\n                              <div className=\"bg-gray-50 p-4 border-t\">\n                                <div className=\"space-y-4\">\n                                  {/* Search Bar for Products */}\n                                  <div className=\"flex items-center gap-4\">\n                                    <div className=\"relative flex-1 max-w-md\">\n                                      <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                                      <Input\n                                        placeholder={`Search products for ${seller.name}...`}\n                                        value={searchTerms[seller.id] || \"\"}\n                                        onChange={(e) =>\n                                          handleSellerSearch(\n                                            seller.id,\n                                            e.target.value,\n                                          )\n                                        }\n                                        className=\"pl-10\"\n                                        data-testid={`input-search-products-${seller.id}`}\n                                      />\n                                    </div>\n                                    <Badge variant=\"outline\">\n                                      {filteredProducts.length} of{\" \"}\n                                      {products.length} products\n                                    </Badge>\n                                  </div>\n\n                                  {/* Products List */}\n                                  {isLoadingProducts ? (\n                                    <div className=\"text-center py-8 text-gray-500\">\n                                      Loading products...\n                                    </div>\n                                  ) : filteredProducts.length > 0 ? (\n                                    <div className=\"bg-white rounded-lg border\">\n                                      <Table>\n                                        <TableHeader>\n                                          <TableRow>\n                                            <TableHead>Product Name</TableHead>\n                                            <TableHead>SKU</TableHead>\n                                            <TableHead>Category</TableHead>\n                                            <TableHead>Price</TableHead>\n                                            <TableHead>Stock</TableHead>\n                                            <TableHead>Status</TableHead>\n                                            <TableHead>Actions</TableHead>\n                                          </TableRow>\n                                        </TableHeader>\n                                        <TableBody>\n                                          {filteredProducts.map((product) => {\n                                            const productName =\n                                              product.translations?.[\n                                                i18n.language\n                                              ]?.name ||\n                                              product.translations?.en?.name ||\n                                              product.name;\n\n                                            return (\n                                              <TableRow\n                                                key={product.id}\n                                                data-testid={`row-product-${product.id}`}\n                                              >\n                                                <TableCell className=\"font-medium\">\n                                                  {productName}\n                                                </TableCell>\n                                                <TableCell className=\"font-mono text-sm\">\n                                                  {product.sku}\n                                                </TableCell>\n                                                <TableCell>\n                                                  <Badge\n                                                    variant=\"outline\"\n                                                    className=\"text-xs\"\n                                                  >\n                                                    {product.categoryName}\n                                                  </Badge>\n                                                </TableCell>\n                                                <TableCell className=\"font-semibold\">\n                                                  {new Intl.NumberFormat(\n                                                    \"en-US\",\n                                                    {\n                                                      style: \"currency\",\n                                                      currency: \"DZD\",\n                                                      minimumFractionDigits: 0,\n                                                    },\n                                                  ).format(\n                                                    parseFloat(product.price),\n                                                  )}\n                                                </TableCell>\n                                                <TableCell>\n                                                  <Badge\n                                                    variant={\n                                                      product.stock > 0\n                                                        ? \"outline\"\n                                                        : \"destructive\"\n                                                    }\n                                                    className={\n                                                      product.stock > 0\n                                                        ? \"text-green-700 bg-green-50\"\n                                                        : \"\"\n                                                    }\n                                                  >\n                                                    {product.stock > 0\n                                                      ? `${product.stock} in stock`\n                                                      : \"Out of stock\"}\n                                                  </Badge>\n                                                </TableCell>\n                                                <TableCell>\n                                                  {getStatusBadge(\n                                                    product.isActive\n                                                      ? \"active\"\n                                                      : \"inactive\",\n                                                  )}\n                                                </TableCell>\n                                                <TableCell>\n                                                  <DropdownMenu>\n                                                    <DropdownMenuTrigger\n                                                      asChild\n                                                    >\n                                                      <Button\n                                                        variant=\"ghost\"\n                                                        size=\"sm\"\n                                                        data-testid={`button-product-actions-${product.id}`}\n                                                      >\n                                                        <MoreHorizontal className=\"h-4 w-4\" />\n                                                      </Button>\n                                                    </DropdownMenuTrigger>\n                                                    <DropdownMenuContent align=\"end\">\n                                                      <DropdownMenuItem\n                                                        onClick={() =>\n                                                          setViewProduct(\n                                                            product,\n                                                          )\n                                                        }\n                                                      >\n                                                        <Eye className=\"h-4 w-4 mr-2\" />\n                                                        View Product\n                                                      </DropdownMenuItem>\n                                                      <DropdownMenuItem\n                                                        onClick={() =>\n                                                          setEditProduct(\n                                                            product,\n                                                          )\n                                                        }\n                                                      >\n                                                        <Edit className=\"h-4 w-4 mr-2\" />\n                                                        Edit Product\n                                                      </DropdownMenuItem>\n                                                      <DropdownMenuItem\n                                                        className=\"text-red-600\"\n                                                        onClick={() =>\n                                                          setDeleteDialog({\n                                                            open: true,\n                                                            type: \"product\",\n                                                            id: product.id,\n                                                            name:\n                                                              productName ||\n                                                              product.sku,\n                                                          })\n                                                        }\n                                                      >\n                                                        <Trash2 className=\"h-4 w-4 mr-2\" />\n                                                        Delete Product\n                                                      </DropdownMenuItem>\n                                                    </DropdownMenuContent>\n                                                  </DropdownMenu>\n                                                </TableCell>\n                                              </TableRow>\n                                            );\n                                          })}\n                                        </TableBody>\n                                      </Table>\n                                    </div>\n                                  ) : (\n                                    <div className=\"text-center py-8 text-gray-500\">\n                                      {searchTerms[seller.id]\n                                        ? \"No products found matching your search.\"\n                                        : \"No products for this seller yet.\"}\n                                    </div>\n                                  )}\n                                </div>\n                              </div>\n                            </TableCell>\n                          </TableRow>\n                        )}\n                      </React.Fragment>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n\n            {sellers.length === 0 && (\n              <div className=\"text-center py-12\">\n                <Store className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\n                  No sellers found\n                </h3>\n                <p className=\"text-gray-600\">\n                  There are no sellers registered in the system yet.\n                </p>\n              </div>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog\n          open={deleteDialog.open}\n          onOpenChange={(open) =>\n            setDeleteDialog((prev) => ({ ...prev, open }))\n          }\n        >\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirm Deletion</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to delete \"{deleteDialog.name}\"? This\n                action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction\n                onClick={handleDeleteConfirm}\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n\n        {/* Add Product Modal */}\n        <AddProductModal\n          isOpen={showAddModal}\n          onClose={() => setShowAddModal(false)}\n        />\n\n        <AddProductModal\n          isOpen={!!editProduct}\n          onClose={() => setEditProduct(null)}\n          isEdit\n          initialData={editProduct || undefined}\n        />\n\n        {/* View Product Modal */}\n        <ViewProductModal\n          product={viewProduct}\n          onClose={() => setViewProduct(null)}\n        />\n\n        {/* Edit Product Modal */}\n        {/* <EditProductModal\n          product={editProduct}\n          onClose={() => setEditProduct(null)}\n        /> */}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":38785},"client/src/components/modals/add-product-modal.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Plus, X, Package, Store, Upload } from \"lucide-react\";\n\nconst addProductSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  shortDescription: z.string().optional(),\n  sku: z.string().min(1, \"SKU is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  originalPrice: z.string().optional(),\n  stock: z.number().min(0, \"Stock cannot be negative\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  vendorId: z.string().min(1, \"Store is required\"),\n  brand: z.string().optional(),\n  images: z.array(z.string()).default([]),\n  isFeatured: z.boolean().default(false),\n  isActive: z.boolean().default(true),\n  specifications: z\n    .array(\n      z.object({\n        name: z.string(),\n        value: z.string(),\n      }),\n    )\n    .default([]),\n  faqs: z\n    .array(\n      z.object({\n        question: z.string(),\n        answer: z.string(),\n      }),\n    )\n    .default([]),\n  translations: z\n    .object({\n      en: z\n        .object({\n          name: z.string().optional(),\n          description: z.string().optional(),\n          shortDescription: z.string().optional(),\n        })\n        .optional(),\n      fr: z\n        .object({\n          name: z.string().optional(),\n          description: z.string().optional(),\n          shortDescription: z.string().optional(),\n        })\n        .optional(),\n      ar: z\n        .object({\n          name: z.string().optional(),\n          description: z.string().optional(),\n          shortDescription: z.string().optional(),\n        })\n        .optional(),\n    })\n    .partial()\n    .optional(),\n\n  // translations: z\n  //   .object({\n  //     en: z.object({\n  //       name: z.string(),\n  //       description: z.string(),\n  //       shortDescription: z.string().optional(),\n  //     }),\n  //     fr: z.object({\n  //       name: z.string().optional(),\n  //       description: z.string().optional(),\n  //       shortDescription: z.string().optional(),\n  //     }),\n  //     ar: z.object({\n  //       name: z.string().optional(),\n  //       description: z.string().optional(),\n  //       shortDescription: z.string().optional(),\n  //     }),\n  //   })\n  //   .optional(),\n});\n\ntype AddProductFormData = z.infer<typeof addProductSchema>;\n\ninterface AddProductModalProps {\n  isOpen: boolean;\n  onClose: () => void;\n  isEdit?: boolean; // NEW\n  initialData?: Partial<AddProductFormData> & { id: string };\n}\n\ninterface Store {\n  id: string;\n  name: string;\n  ownerId: string;\n  status: string;\n  user?: {\n    username: string;\n    email: string;\n  };\n}\n\ninterface Category {\n  id: string;\n  type: string;\n  slug: string;\n  icon: string;\n  translations: {\n    [key: string]: {\n      name: string;\n      description?: string;\n    };\n  };\n}\n\nexport default function AddProductModal({\n  isOpen,\n  onClose,\n  isEdit = false,\n  initialData,\n}: AddProductModalProps) {\n  const { t, i18n } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [imageUrls, setImageUrls] = useState<string[]>(\n    initialData?.images || [],\n  );\n  const [specifications, setSpecifications] = useState(\n    initialData?.specifications || [],\n  );\n  const [faqs, setFaqs] = useState(initialData?.faqs || []);\n  const [currentStep, setCurrentStep] = useState(1);\n  // const [imageUrls, setImageUrls] = useState<string[]>([]);\n  // const [specifications, setSpecifications] = useState<\n  //   Array<{ name: string; value: string }>\n  // >([]);\n  // const [faqs, setFaqs] = useState<Array<{ question: string; answer: string }>>(\n  //   [],\n  // );\n  // const [currentStep, setCurrentStep] = useState(1);\n\n  // const form = useForm<AddProductFormData>({\n  //   resolver: zodResolver(addProductSchema),\n  //   defaultValues: {\n  //     name: \"\",\n  //     description: \"\",\n  //     shortDescription: \"\",\n  //     sku: \"\",\n  //     price: \"\",\n  //     originalPrice: \"\",\n  //     stock: 0,\n  //     categoryId: \"\",\n  //     vendorId: \"\",\n  //     brand: \"\",\n  //     images: [],\n  //     isFeatured: false,\n  //     isActive: true,\n  //     specifications: [],\n  //     faqs: [],\n  //   },\n  // });\n\n  const form = useForm<AddProductFormData>({\n    resolver: zodResolver(addProductSchema),\n    defaultValues: isEdit\n      ? {\n          ...initialData,\n          name: initialData?.translations?.en?.name || initialData?.name || \"\",\n          description:\n            initialData?.translations?.en?.description ||\n            initialData?.description ||\n            \"\",\n          shortDescription:\n            initialData?.translations?.en?.shortDescription ||\n            initialData?.shortDescription ||\n            \"\",\n        }\n      : {\n          name: \"\",\n          description: \"\",\n          shortDescription: \"\",\n          sku: \"\",\n          price: \"\",\n          originalPrice: \"\",\n          stock: 0,\n          categoryId: \"\",\n          vendorId: \"\",\n          brand: \"\",\n          images: [],\n          isFeatured: false,\n          isActive: true,\n          specifications: [],\n          faqs: [],\n        },\n  });\n\n  // Fetch sellers from users table (role: seller)\n  const { data: sellers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/admin/users?role=seller\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users?role=seller\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch sellers\");\n      return response.json();\n    },\n    enabled: isOpen,\n  });\n\n  // Fetch only subcategories (exclude supercategories)\n  // const { data: categories = [] } = useQuery({\n  //   queryKey: [\"/api/admin/categories\", i18n.language],\n  //   queryFn: async () => {\n  //     const response = await fetch(\"/api/admin/categories\", {\n  //       credentials: \"include\",\n  //     });\n  //     if (!response.ok) throw new Error(\"Failed to fetch categories\");\n  //     return response.json();\n  //   },\n  //   enabled: isOpen,\n  // });\n\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/admin/categories\"],\n    enabled: isOpen,\n  });\n\n  // Create product mutation\n  // const createProductMutation = useMutation({\n  //   mutationFn: async (data: AddProductFormData) => {\n  //     const response = await fetch(\"/api/admin/products\", {\n  //       method: \"POST\",\n  //       headers: {\n  //         \"Content-Type\": \"application/json\",\n  //       },\n  //       credentials: \"include\",\n  //       body: JSON.stringify({\n  //         ...data,\n  //         images: imageUrls,\n  //         specifications,\n  //         faqs,\n  //         translations: {\n  //           en: {\n  //             name: data.name,\n  //             description: data.description,\n  //             shortDescription: data.shortDescription,\n  //           },\n  //         },\n  //       }),\n  //     });\n\n  //     if (!response.ok) {\n  //       const error = await response.json();\n  //       throw new Error(error.error || \"Failed to create product\");\n  //     }\n\n  //     return response.json();\n  //   },\n  //   onSuccess: () => {\n  //     queryClient.invalidateQueries({\n  //       queryKey: [\"/api/admin/sellers-with-products\"],\n  //     });\n  //     toast({\n  //       title: \"Success\",\n  //       description: \"Product created successfully\",\n  //     });\n  //     handleClose();\n  //   },\n  //   onError: (error: any) => {\n  //     toast({\n  //       title: \"Error\",\n  //       description: error.message || \"Failed to create product\",\n  //       variant: \"destructive\",\n  //     });\n  //   },\n  // });\n\n  const mutation = useMutation({\n    mutationFn: async (data: AddProductFormData) => {\n      const payload = {\n        ...data,\n        images: imageUrls,\n        specifications,\n        faqs,\n        translations: {\n          en: {\n            name: data.name,\n            description: data.description,\n            shortDescription: data.shortDescription,\n          },\n        },\n      };\n\n      const url = isEdit\n        ? `/api/admin/products/${initialData?.id}`\n        : \"/api/admin/products\";\n\n      const method = isEdit ? \"PUT\" : \"POST\";\n\n      const response = await fetch(url, {\n        method,\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(payload),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to save product\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/admin/sellers-with-products\"],\n      });\n      toast({\n        title: \"Success\",\n        description: isEdit\n          ? \"Product updated successfully\"\n          : \"Product created successfully\",\n      });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to save product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    form.reset();\n    setImageUrls([]);\n    setSpecifications([]);\n    setFaqs([]);\n    setCurrentStep(1);\n    onClose();\n  };\n\n  // const onSubmit = (data: AddProductFormData) => {\n  //   createProductMutation.mutate(data);\n  // };\n\n  const onSubmit = (data: AddProductFormData) => {\n    mutation.mutate(data);\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    const formData = new FormData();\n    Array.from(files).forEach((file) => {\n      formData.append(\"images\", file);\n    });\n\n    try {\n      const response = await fetch(\"/api/upload/images\", {\n        method: \"POST\",\n        credentials: \"include\",\n        body: formData,\n      });\n\n      if (!response.ok) throw new Error(\"Failed to upload images\");\n\n      const result = await response.json();\n      const newUrls = result.files.map((file: any) => file.path);\n      setImageUrls([...imageUrls, ...newUrls]);\n\n      toast({\n        title: \"Success\",\n        description: `${result.files.length} image(s) uploaded successfully`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload images\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addImageUrl = () => {\n    const newUrl = prompt(\"Enter image URL:\");\n    if (newUrl && newUrl.trim()) {\n      setImageUrls([...imageUrls, newUrl.trim()]);\n    }\n  };\n\n  const removeImageUrl = (index: number) => {\n    setImageUrls(imageUrls.filter((_, i) => i !== index));\n  };\n\n  const addSpecification = () => {\n    setSpecifications([...specifications, { name: \"\", value: \"\" }]);\n  };\n\n  const updateSpecification = (\n    index: number,\n    field: \"name\" | \"value\",\n    value: string,\n  ) => {\n    const updated = [...specifications];\n    updated[index][field] = value;\n    setSpecifications(updated);\n  };\n\n  const removeSpecification = (index: number) => {\n    setSpecifications(specifications.filter((_, i) => i !== index));\n  };\n\n  const addFaq = () => {\n    setFaqs([...faqs, { question: \"\", answer: \"\" }]);\n  };\n\n  const updateFaq = (\n    index: number,\n    field: \"question\" | \"answer\",\n    value: string,\n  ) => {\n    const updated = [...faqs];\n    updated[index][field] = value;\n    setFaqs(updated);\n  };\n\n  const removeFaq = (index: number) => {\n    setFaqs(faqs.filter((_, i) => i !== index));\n  };\n\n  const getStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <Package className=\"mx-auto h-12 w-12 text-blue-600 mb-2\" />\n              <h3 className=\"text-lg font-semibold\">Basic Information</h3>\n              <p className=\"text-sm text-gray-600\">\n                Enter the main product details\n              </p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"name\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Product Name *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter product name\"\n                        {...field}\n                        data-testid=\"input-product-name\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"sku\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>SKU *</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter product SKU\"\n                        {...field}\n                        data-testid=\"input-product-sku\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"price\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Price (DZD) *</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        data-testid=\"input-product-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"originalPrice\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Original Price (DZD)</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...field}\n                        data-testid=\"input-product-original-price\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"stock\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Stock Quantity</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"number\"\n                        min=\"0\"\n                        placeholder=\"0\"\n                        {...field}\n                        onChange={(e) =>\n                          field.onChange(parseInt(e.target.value) || 0)\n                        }\n                        data-testid=\"input-product-stock\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"brand\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Brand</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter brand name\"\n                        {...field}\n                        data-testid=\"input-product-brand\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            <FormField\n              control={form.control}\n              name=\"shortDescription\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Short Description</FormLabel>\n                  <FormControl>\n                    <Input\n                      placeholder=\"Brief description for listings\"\n                      {...field}\n                      data-testid=\"input-product-short-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"description\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Description *</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      placeholder=\"Enter detailed product description\"\n                      rows={4}\n                      {...field}\n                      data-testid=\"textarea-product-description\"\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n        );\n\n      case 2:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <Store className=\"mx-auto h-12 w-12 text-blue-600 mb-2\" />\n              <h3 className=\"text-lg font-semibold\">Store & Category</h3>\n              <p className=\"text-sm text-gray-600\">Select store and category</p>\n            </div>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"vendorId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Seller *</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-seller\">\n                          <SelectValue placeholder=\"Select a seller\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {sellers\n                          .filter((seller: any) => seller.role === \"seller\")\n                          .map((seller: any) => (\n                            <SelectItem key={seller.id} value={seller.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <Store className=\"h-4 w-4\" />\n                                <div>\n                                  <div className=\"font-medium\">\n                                    {`${seller.firstName} ${seller.lastName}`.trim() ||\n                                      seller.username}\n                                  </div>\n                                  <div className=\"text-xs text-gray-500\">\n                                    {seller.username} • {seller.email}\n                                  </div>\n                                </div>\n                              </div>\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"categoryId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Category *</FormLabel>\n                    <Select\n                      onValueChange={field.onChange}\n                      defaultValue={field.value}\n                    >\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-category\">\n                          <SelectValue placeholder=\"Select a category\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        {categories\n                          .filter((cat: Category) => cat.type === \"standard\")\n                          .map((category: Category) => (\n                            <SelectItem key={category.id} value={category.id}>\n                              <div className=\"flex items-center gap-2\">\n                                <span>{category.icon}</span>\n                                <span>\n                                  {category.translations?.[i18n.language]\n                                    ?.name ||\n                                    category.translations?.en?.name ||\n                                    category.slug}\n                                </span>\n                              </div>\n                            </SelectItem>\n                          ))}\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Product Options */}\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <FormField\n                control={form.control}\n                name=\"isFeatured\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">\n                        Featured Product\n                      </FormLabel>\n                      <FormDescription>\n                        Display this product prominently\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-featured\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"isActive\"\n                render={({ field }) => (\n                  <FormItem className=\"flex flex-row items-center justify-between rounded-lg border p-4\">\n                    <div className=\"space-y-0.5\">\n                      <FormLabel className=\"text-base\">\n                        Active Product\n                      </FormLabel>\n                      <FormDescription>\n                        Product is visible to customers\n                      </FormDescription>\n                    </div>\n                    <FormControl>\n                      <Switch\n                        checked={field.value}\n                        onCheckedChange={field.onChange}\n                        data-testid=\"switch-active\"\n                      />\n                    </FormControl>\n                  </FormItem>\n                )}\n              />\n            </div>\n\n            {/* Images Section */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Product Images</Label>\n                <div className=\"flex gap-2\">\n                  <div className=\"relative\">\n                    <Input\n                      type=\"file\"\n                      multiple\n                      accept=\"image/*\"\n                      onChange={handleFileUpload}\n                      className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n                    />\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      data-testid=\"button-upload-image\"\n                    >\n                      <Upload className=\"h-4 w-4 mr-2\" />\n                      Upload Images\n                    </Button>\n                  </div>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={addImageUrl}\n                    data-testid=\"button-add-image-url\"\n                  >\n                    <Plus className=\"h-4 w-4 mr-2\" />\n                    Add URL\n                  </Button>\n                </div>\n              </div>\n\n              {imageUrls.length > 0 && (\n                <div className=\"grid grid-cols-2 md:grid-cols-3 gap-3\">\n                  {imageUrls.map((url, index) => (\n                    <div key={index} className=\"relative group\">\n                      <img\n                        src={url}\n                        alt={`Product image ${index + 1}`}\n                        className=\"w-full h-24 object-cover rounded-lg border\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        className=\"absolute top-1 right-1 h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity\"\n                        onClick={() => removeImageUrl(index)}\n                      >\n                        <X className=\"h-3 w-3\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        );\n\n      case 3:\n        return (\n          <div className=\"space-y-6\">\n            <div className=\"text-center mb-6\">\n              <Package className=\"mx-auto h-12 w-12 text-blue-600 mb-2\" />\n              <h3 className=\"text-lg font-semibold\">Additional Details</h3>\n              <p className=\"text-sm text-gray-600\">Specifications and FAQs</p>\n            </div>\n\n            {/* Specifications */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Specifications</Label>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addSpecification}\n                  data-testid=\"button-add-specification\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add Specification\n                </Button>\n              </div>\n\n              {specifications.map((spec, index) => (\n                <div key={index} className=\"flex gap-2\">\n                  <Input\n                    placeholder=\"Name\"\n                    value={spec.name}\n                    onChange={(e) =>\n                      updateSpecification(index, \"name\", e.target.value)\n                    }\n                    className=\"flex-1\"\n                  />\n                  <Input\n                    placeholder=\"Value\"\n                    value={spec.value}\n                    onChange={(e) =>\n                      updateSpecification(index, \"value\", e.target.value)\n                    }\n                    className=\"flex-1\"\n                  />\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={() => removeSpecification(index)}\n                  >\n                    <X className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              ))}\n            </div>\n\n            {/* FAQs */}\n            <div className=\"space-y-4\">\n              <div className=\"flex items-center justify-between\">\n                <Label>Frequently Asked Questions</Label>\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={addFaq}\n                  data-testid=\"button-add-faq\"\n                >\n                  <Plus className=\"h-4 w-4 mr-2\" />\n                  Add FAQ\n                </Button>\n              </div>\n\n              {faqs.map((faq, index) => (\n                <div key={index} className=\"space-y-2 p-4 border rounded-lg\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label>FAQ {index + 1}</Label>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={() => removeFaq(index)}\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                  <Input\n                    placeholder=\"Question\"\n                    value={faq.question}\n                    onChange={(e) =>\n                      updateFaq(index, \"question\", e.target.value)\n                    }\n                  />\n                  <Textarea\n                    placeholder=\"Answer\"\n                    value={faq.answer}\n                    onChange={(e) => updateFaq(index, \"answer\", e.target.value)}\n                    rows={2}\n                  />\n                </div>\n              ))}\n            </div>\n          </div>\n        );\n\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle>\n            {isEdit ? \"Edit Product\" : \"Add New Product\"}\n          </DialogTitle>\n          <DialogDescription>\n            {isEdit\n              ? \"Update the product details below.\"\n              : \"Create a new product for the marketplace. Fill in all required information across the steps.\"}\n          </DialogDescription>\n\n          {/* <DialogTitle data-testid=\"text-modal-title\">\n            Add New Product\n          </DialogTitle>\n          <DialogDescription>\n            Create a new product for the marketplace. Fill in all required\n            information across the steps.\n          </DialogDescription> */}\n        </DialogHeader>\n\n        <Form {...form}>\n          <form\n            onSubmit={(e) => {\n              e.preventDefault();\n              if (currentStep === 3) {\n                form.handleSubmit(onSubmit)(e);\n              }\n            }}\n            className=\"space-y-6\"\n          >\n            {/* Progress Steps */}\n            <div className=\"flex items-center justify-center space-x-4 mb-6\">\n              {[1, 2, 3].map((step) => (\n                <div key={step} className=\"flex items-center\">\n                  <div\n                    className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${\n                      step === currentStep\n                        ? \"bg-blue-600 text-white\"\n                        : step < currentStep\n                          ? \"bg-green-600 text-white\"\n                          : \"bg-gray-200 text-gray-600\"\n                    }`}\n                  >\n                    {step}\n                  </div>\n                  {step < 3 && (\n                    <div\n                      className={`w-16 h-0.5 mx-2 ${\n                        step < currentStep ? \"bg-green-600\" : \"bg-gray-200\"\n                      }`}\n                    />\n                  )}\n                </div>\n              ))}\n            </div>\n\n            {getStepContent()}\n\n            <DialogFooter className=\"flex justify-between\">\n              <div className=\"flex gap-2\">\n                {currentStep > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => setCurrentStep(currentStep - 1)}\n                    data-testid=\"button-previous\"\n                  >\n                    Previous\n                  </Button>\n                )}\n              </div>\n\n              <div className=\"flex gap-2\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  onClick={handleClose}\n                  data-testid=\"button-cancel\"\n                >\n                  Cancel\n                </Button>\n\n                {currentStep < 3 ? (\n                  <Button\n                    type=\"button\"\n                    onClick={() => setCurrentStep(currentStep + 1)}\n                    data-testid=\"button-next\"\n                  >\n                    Next\n                  </Button>\n                ) : (\n                  // <Button\n                  //   type=\"submit\"\n                  //   disabled={createProductMutation.isPending}\n                  //   data-testid=\"button-create\"\n                  // >\n                  //   {createProductMutation.isPending\n                  //     ? \"Creating...\"\n                  //     : \"Create Product\"}\n                  // </Button>\n                  <Button\n                    type=\"submit\"\n                    disabled={mutation.isPending}\n                    data-testid=\"button-save\"\n                  >\n                    {mutation.isPending\n                      ? isEdit\n                        ? \"Updating...\"\n                        : \"Creating...\"\n                      : isEdit\n                        ? \"Update Product\"\n                        : \"Create Product\"}\n                  </Button>\n                )}\n              </div>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":34398},"client/src/pages/admin/order-management.tsx":{"content":"import React, { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n} from \"@/components/ui/alert-dialog\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Search,\n  MoreHorizontal,\n  Eye,\n  Package,\n  Truck,\n  CheckCircle,\n  XCircle,\n  Clock,\n  FileDown,\n  Filter,\n  ChevronDown,\n  ChevronRight,\n  User,\n  Mail,\n  Phone,\n  MapPin,\n  Calendar,\n  CreditCard,\n} from \"lucide-react\";\nimport { OrderDetailsModal } from \"@/components/ui/order-details-modal\";\n\ninterface Order {\n  id: string;\n  orderNumber: string;\n  userId: string;\n  status: \"pending\" | \"in_preparation\" | \"in_delivery\" | \"delivered\" | \"cancelled\";\n  paymentStatus: \"pending\" | \"paid\" | \"failed\" | \"refunded\";\n  paymentMethod: string;\n  totalAmount: string;\n  vendorName: string;\n  itemCount: number;\n  trackingNumber: string;\n  deliveryDate: string | null;\n  shippingAddress: {\n    street: string;\n    city: string;\n    state: string;\n    zipCode: string;\n    country: string;\n  };\n  createdAt: string;\n  updatedAt: string;\n  user?: {\n    username: string;\n    email: string;\n    firstName?: string;\n    lastName?: string;\n  };\n  items?: {\n    id: string;\n    productId: string;\n    quantity: number;\n    unitPrice: string;\n    totalPrice: string;\n    product?: {\n      name: string;\n      sku: string;\n    };\n  }[];\n}\n\nexport default function AdminOrderManagement() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [selectedOrder, setSelectedOrder] = useState<any>(null);\n  const [showOrderDetails, setShowOrderDetails] = useState(false);\n  const [expandedRows, setExpandedRows] = useState<Set<string>>(new Set());\n  const [deleteDialog, setDeleteDialog] = useState({\n    open: false,\n    orderId: \"\",\n    orderNumber: \"\",\n  });\n\n  // Fetch all orders (admin can see all orders)\n  const { data: orders = [], isLoading } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\", \"admin\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/orders\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch orders\");\n      return response.json();\n    },\n  });\n\n  // Update order status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: async ({ orderId, status }: { orderId: string; status: string }) => {\n      const response = await fetch(`/api/orders/${orderId}/status`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ status }),\n      });\n      if (!response.ok) throw new Error(\"Failed to update order status\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/orders\"] });\n      toast({\n        title: \"Order Updated\",\n        description: \"Order status has been updated successfully.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update order status.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Filter orders based on search term and status\n  const filteredOrders = orders.filter((order: Order) => {\n    const matchesSearch = \n      order.id.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.user?.username?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.user?.email?.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      order.totalAmount.includes(searchTerm);\n    \n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  // Get status badge with appropriate styling\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return (\n          <Badge className=\"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\">\n            <Clock className=\"w-3 h-3 mr-1\" />\n            Pending\n          </Badge>\n        );\n      case \"confirmed\":\n        return (\n          <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-200\">\n            <CheckCircle className=\"w-3 h-3 mr-1\" />\n            Confirmed\n          </Badge>\n        );\n      case \"shipped\":\n        return (\n          <Badge className=\"bg-purple-100 text-purple-800 hover:bg-purple-200\">\n            <Truck className=\"w-3 h-3 mr-1\" />\n            Shipped\n          </Badge>\n        );\n      case \"delivered\":\n        return (\n          <Badge className=\"bg-green-100 text-green-800 hover:bg-green-200\">\n            <Package className=\"w-3 h-3 mr-1\" />\n            Delivered\n          </Badge>\n        );\n      case \"cancelled\":\n        return (\n          <Badge className=\"bg-red-100 text-red-800 hover:bg-red-200\">\n            <XCircle className=\"w-3 h-3 mr-1\" />\n            Cancelled\n          </Badge>\n        );\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  // Handle order status update\n  const handleStatusUpdate = (orderId: string, newStatus: string) => {\n    updateStatusMutation.mutate({ orderId, status: newStatus });\n  };\n\n  // Handle toggle row expansion\n  const toggleRow = (orderId: string) => {\n    const newExpandedRows = new Set(expandedRows);\n    if (newExpandedRows.has(orderId)) {\n      newExpandedRows.delete(orderId);\n    } else {\n      newExpandedRows.add(orderId);\n    }\n    setExpandedRows(newExpandedRows);\n  };\n\n  // Handle view order details\n  const handleViewOrder = (order: Order) => {\n    // Transform order data to match OrderDetailsModal interface\n    const transformedOrder = {\n      id: order.id,\n      date: order.createdAt,\n      customer: {\n        name: order.user?.firstName && order.user?.lastName \n          ? `${order.user.firstName} ${order.user.lastName}`\n          : order.user?.username || \"Unknown User\",\n        avatar: \"\", // Default empty avatar\n      },\n      orderItems: order.items?.map(item => ({\n        id: item.id,\n        name: item.product?.name || \"Unknown Product\",\n        description: item.product?.sku || \"\",\n        quantity: item.quantity,\n        price: item.unitPrice,\n      })) || [],\n      totalAmount: order.totalAmount,\n      status: order.status,\n      paymentStatus: order.status === \"delivered\" ? \"Paid\" : \n                    order.status === \"cancelled\" ? \"Refunded\" : \"Pending\",\n      notes: `Shipping Address: ${order.shippingAddress.street}, ${order.shippingAddress.city}, ${order.shippingAddress.country}`,\n    };\n    \n    setSelectedOrder(transformedOrder as any);\n    setShowOrderDetails(true);\n  };\n\n  // Export orders to CSV\n  const handleExportCSV = () => {\n    const csvHeaders = [\n      \"Order ID\",\n      \"Customer\",\n      \"Email\", \n      \"Status\",\n      \"Total Amount\",\n      \"Order Date\",\n      \"Shipping Address\"\n    ];\n\n    const csvRows = filteredOrders.map((order: Order) => [\n      order.id.slice(-8),\n      order.user?.username || \"\",\n      order.user?.email || \"\",\n      order.status,\n      `$${order.totalAmount}`,\n      new Date(order.createdAt).toLocaleDateString(),\n      `${order.shippingAddress.street}, ${order.shippingAddress.city}, ${order.shippingAddress.country}`\n    ]);\n\n    const csvContent = [\n      csvHeaders.join(\",\"),\n      ...csvRows.map(row => row.join(\",\"))\n    ].join(\"\\n\");\n\n    const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n    const link = document.createElement(\"a\");\n    const url = URL.createObjectURL(blob);\n    link.setAttribute(\"href\", url);\n    link.setAttribute(\"download\", `orders-export-${new Date().toISOString().split('T')[0]}.csv`);\n    link.style.visibility = \"hidden\";\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n\n    toast({\n      title: \"Export Complete\",\n      description: \"Orders data has been exported to CSV.\",\n    });\n  };\n\n  if (isLoading) {\n    return (\n      <DashboardLayout>\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <h1 className=\"text-3xl font-bold\">Order Management</h1>\n          </div>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center py-12\">Loading orders...</div>\n            </CardContent>\n          </Card>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold\" data-testid=\"text-page-title\">\n              Orders\n            </h1>\n            <p className=\"text-gray-600\">\n              Manage and track all customer orders\n            </p>\n          </div>\n          \n          <Button\n            onClick={handleExportCSV}\n            className=\"bg-green-600 hover:bg-green-700\"\n            data-testid=\"button-export-orders\"\n          >\n            <FileDown className=\"h-4 w-4 mr-2\" />\n            Export\n          </Button>\n        </div>\n\n        {/* Filters and Search */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg flex items-center\">\n              <Filter className=\"h-5 w-5 mr-2\" />\n              Filters and Search\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <div className=\"flex flex-col lg:flex-row gap-4\">\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                  <Input\n                    placeholder=\"Search for an order...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10\"\n                    data-testid=\"input-search-orders\"\n                  />\n                </div>\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger className=\"w-full lg:w-48\" data-testid=\"select-status-filter\">\n                  <SelectValue placeholder=\"All statuses\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"confirmed\">Confirmed</SelectItem>\n                  <SelectItem value=\"shipped\">Shipped</SelectItem>\n                  <SelectItem value=\"delivered\">Delivered</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Orders Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              List of commands\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <input type=\"checkbox\" className=\"rounded\" />\n                    </TableHead>\n                    <TableHead>Order No.</TableHead>\n                    <TableHead>Customer</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Payment</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Shipping Method</TableHead>\n                    <TableHead className=\"w-12\"></TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredOrders.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={10} className=\"text-center py-12\">\n                        <Package className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders found</h3>\n                        <p className=\"text-gray-600\">\n                          {statusFilter !== \"all\" \n                            ? `No orders with status \"${statusFilter}\" found.`\n                            : \"There are no orders in the system yet.\"\n                          }\n                        </p>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredOrders.map((order: Order) => {\n                      const isExpanded = expandedRows.has(order.id);\n                      \n                      return (\n                        <React.Fragment key={order.id}>\n                          {/* Main Order Row */}\n                          <TableRow className=\"hover:bg-gray-50\" data-testid={`row-order-${order.id}`}>\n                            <TableCell>\n                              <input type=\"checkbox\" className=\"rounded\" />\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-2\">\n                                <Button\n                                  variant=\"ghost\"\n                                  size=\"sm\"\n                                  onClick={() => toggleRow(order.id)}\n                                  className=\"p-1 h-6 w-6\"\n                                  data-testid={`button-expand-${order.id}`}\n                                >\n                                  {isExpanded ? (\n                                    <ChevronDown className=\"h-4 w-4\" />\n                                  ) : (\n                                    <ChevronRight className=\"h-4 w-4\" />\n                                  )}\n                                </Button>\n                                <div>\n                                  <div className=\"font-mono text-sm font-medium\">\n                                    WORD-{order.id.slice(-5)}\n                                  </div>\n                                  <div className=\"text-xs text-gray-500\">\n                                    {order.items?.length || 0} articles\n                                  </div>\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"space-y-1\">\n                                <div className=\"font-medium\">\n                                  {order.user?.firstName && order.user?.lastName \n                                    ? `${order.user.firstName} ${order.user.lastName}`\n                                    : order.user?.username || \"Unknown User\"\n                                  }\n                                </div>\n                                <div className=\"text-sm text-gray-500\">\n                                  {order.user?.email || \"No email\"}\n                                </div>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Badge \n                                className={\n                                  order.status === \"pending\" ? \"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\" :\n                                  order.status === \"confirmed\" ? \"bg-blue-100 text-blue-800 hover:bg-blue-200\" :\n                                  order.status === \"shipped\" ? \"bg-purple-100 text-purple-800 hover:bg-purple-200\" :\n                                  order.status === \"delivered\" ? \"bg-green-100 text-green-800 hover:bg-green-200\" :\n                                  order.status === \"cancelled\" ? \"bg-red-100 text-red-800 hover:bg-red-200\" :\n                                  \"bg-gray-100 text-gray-800\"\n                                }\n                              >\n                                {order.status === \"pending\" ? \"On hold\" :\n                                 order.status === \"confirmed\" ? \"In processing\" :\n                                 order.status === \"shipped\" ? \"Shipped\" :\n                                 order.status === \"delivered\" ? \"Book\" :\n                                 order.status === \"cancelled\" ? \"Cancelled\" :\n                                 order.status}\n                              </Badge>\n                            </TableCell>\n                            <TableCell>\n                              <Badge \n                                className={\n                                  order.status === \"delivered\" ? \"bg-green-100 text-green-800 hover:bg-green-200\" :\n                                  order.status === \"cancelled\" ? \"bg-blue-100 text-blue-800 hover:bg-blue-200\" :\n                                  \"bg-yellow-100 text-yellow-800 hover:bg-yellow-200\"\n                                }\n                              >\n                                {order.status === \"delivered\" ? \"Paid\" : \n                                 order.status === \"cancelled\" ? \"Refunded\" : \n                                 order.status === \"pending\" ? \"On hold\" : \"Paid\"}\n                              </Badge>\n                            </TableCell>\n                            <TableCell className=\"font-semibold\">\n                              {order.totalAmount} €\n                            </TableCell>\n                            <TableCell className=\"text-sm text-gray-600\">\n                              <div className=\"flex items-center space-x-1\">\n                                <Calendar className=\"h-3 w-3\" />\n                                <span>\n                                  {new Date(order.createdAt).toLocaleDateString(\"en-GB\", {\n                                    day: \"2-digit\",\n                                    month: \"short\",\n                                    year: \"numeric\"\n                                  })}\n                                </span>\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <div className=\"flex items-center space-x-1\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {order.status === \"shipped\" || order.status === \"delivered\" ? \"Express\" : \"Standard\"}\n                                </Badge>\n                                <ChevronDown className=\"h-3 w-3\" />\n                              </div>\n                            </TableCell>\n                            <TableCell>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => toggleRow(order.id)}\n                                className=\"text-gray-400\"\n                              >\n                                ›\n                              </Button>\n                            </TableCell>\n                            <TableCell>\n                              <DropdownMenu>\n                                <DropdownMenuTrigger asChild>\n                                  <Button \n                                    variant=\"ghost\" \n                                    size=\"sm\"\n                                    data-testid={`button-order-actions-${order.id}`}\n                                  >\n                                    <MoreHorizontal className=\"h-4 w-4\" />\n                                  </Button>\n                                </DropdownMenuTrigger>\n                                <DropdownMenuContent align=\"end\">\n                                  <DropdownMenuItem onClick={() => handleViewOrder(order)}>\n                                    <Eye className=\"h-4 w-4 mr-2\" />\n                                    View Details\n                                  </DropdownMenuItem>\n                                  {order.status === \"pending\" && (\n                                    <DropdownMenuItem \n                                      onClick={() => handleStatusUpdate(order.id, \"confirmed\")}\n                                    >\n                                      <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                      Confirm Order\n                                    </DropdownMenuItem>\n                                  )}\n                                  {order.status === \"confirmed\" && (\n                                    <DropdownMenuItem \n                                      onClick={() => handleStatusUpdate(order.id, \"shipped\")}\n                                    >\n                                      <Truck className=\"h-4 w-4 mr-2\" />\n                                      Mark as Shipped\n                                    </DropdownMenuItem>\n                                  )}\n                                  {order.status === \"shipped\" && (\n                                    <DropdownMenuItem \n                                      onClick={() => handleStatusUpdate(order.id, \"delivered\")}\n                                    >\n                                      <Package className=\"h-4 w-4 mr-2\" />\n                                      Mark as Delivered\n                                    </DropdownMenuItem>\n                                  )}\n                                  {[\"pending\", \"confirmed\"].includes(order.status) && (\n                                    <DropdownMenuItem \n                                      onClick={() => handleStatusUpdate(order.id, \"cancelled\")}\n                                      className=\"text-red-600\"\n                                    >\n                                      <XCircle className=\"h-4 w-4 mr-2\" />\n                                      Cancel Order\n                                    </DropdownMenuItem>\n                                  )}\n                                </DropdownMenuContent>\n                              </DropdownMenu>\n                            </TableCell>\n                          </TableRow>\n\n                          {/* Expanded Details Row */}\n                          {isExpanded && (\n                            <TableRow>\n                              <TableCell colSpan={10}>\n                                <div className=\"bg-gray-50 p-6 rounded-lg\">\n                                  <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n                                    {/* Customer Information */}\n                                    <div className=\"space-y-4\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        <User className=\"h-4 w-4 text-blue-600\" />\n                                        <h3 className=\"font-semibold\">Customer information</h3>\n                                      </div>\n                                      <div className=\"space-y-2\">\n                                        <div className=\"flex items-center space-x-2\">\n                                          <User className=\"h-3 w-3 text-gray-400\" />\n                                          <span className=\"text-sm\">\n                                            {order.user?.firstName && order.user?.lastName \n                                              ? `${order.user.firstName} ${order.user.lastName}`\n                                              : order.user?.username || \"Unknown User\"\n                                            }\n                                          </span>\n                                        </div>\n                                        <div className=\"text-sm text-gray-600\">\n                                          Client #{order.id.slice(-6)}\n                                        </div>\n                                        <div className=\"flex items-center space-x-2\">\n                                          <Mail className=\"h-3 w-3 text-gray-400\" />\n                                          <span className=\"text-sm\">{order.user?.email || \"No email\"}</span>\n                                        </div>\n                                        <div className=\"flex items-center space-x-2\">\n                                          <Phone className=\"h-3 w-3 text-gray-400\" />\n                                          <span className=\"text-sm\">0123456789</span>\n                                        </div>\n                                        <div className=\"text-xs text-gray-500 mt-2\">\n                                          Order placed on: {new Date(order.createdAt).toLocaleDateString(\"en-GB\")}\n                                        </div>\n                                      </div>\n                                    </div>\n\n                                    {/* Products Ordered */}\n                                    <div className=\"space-y-4\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        <Package className=\"h-4 w-4 text-blue-600\" />\n                                        <h3 className=\"font-semibold\">Products ordered ( {order.items?.length || 0} )</h3>\n                                      </div>\n                                      <div className=\"space-y-3\">\n                                        {order.items?.slice(0, 2).map((item, index) => (\n                                          <div key={item.id} className=\"flex items-center space-x-3 p-3 bg-white rounded border\">\n                                            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                                              <Package className=\"h-4 w-4 text-blue-600\" />\n                                            </div>\n                                            <div className=\"flex-1\">\n                                              <div className=\"font-medium text-sm\">\n                                                {item.product?.name || \"Unknown Product\"}\n                                              </div>\n                                              <div className=\"text-xs text-gray-500\">\n                                                Accessories • SKU: {item.product?.sku || \"N/A\"}\n                                              </div>\n                                              <div className=\"text-xs text-gray-600 mt-1\">\n                                                Qty: {item.quantity}\n                                              </div>\n                                            </div>\n                                            <div className=\"text-right\">\n                                              <div className=\"font-semibold text-sm\">\n                                                Price: {item.unitPrice}\n                                              </div>\n                                              <div className=\"text-xs text-green-600 font-medium\">\n                                                {parseFloat(item.totalPrice).toLocaleString()} €\n                                              </div>\n                                            </div>\n                                          </div>\n                                        ))}\n                                      </div>\n                                    </div>\n\n                                    {/* Delivery */}\n                                    <div className=\"space-y-4\">\n                                      <div className=\"flex items-center space-x-2\">\n                                        <Truck className=\"h-4 w-4 text-blue-600\" />\n                                        <h3 className=\"font-semibold\">Delivery</h3>\n                                      </div>\n                                      <div className=\"space-y-2\">\n                                        <div className=\"flex items-start space-x-2\">\n                                          <MapPin className=\"h-3 w-3 text-gray-400 mt-1\" />\n                                          <div className=\"text-sm\">\n                                            <div className=\"font-medium\">Delivery address</div>\n                                            <div className=\"text-gray-600\">\n                                              {order.shippingAddress ? (\n                                                <>\n                                                  {order.shippingAddress.street}<br/>\n                                                  {order.shippingAddress.city}, {order.shippingAddress.zipCode}<br/>\n                                                  {order.shippingAddress.country}\n                                                </>\n                                              ) : (\n                                                \"Address not available\"\n                                              )}\n                                            </div>\n                                          </div>\n                                        </div>\n                                        <div className=\"mt-3\">\n                                          <div className=\"text-xs font-medium\">Method:</div>\n                                          <div className=\"text-xs text-right\">Free delivery</div>\n                                          <div className=\"text-xs font-medium\">Estimated time:</div>\n                                          <div className=\"text-xs text-right\">2-4 working days</div>\n                                          <div className=\"text-xs font-medium\">Status:</div>\n                                          <div className=\"text-xs text-right\">\n                                            <Badge \n                                              size=\"sm\"\n                                              className={\n                                                order.status === \"pending\" ? \"bg-yellow-100 text-yellow-800\" :\n                                                order.status === \"shipped\" ? \"bg-blue-100 text-blue-800\" :\n                                                order.status === \"delivered\" ? \"bg-green-100 text-green-800\" :\n                                                \"bg-gray-100 text-gray-800\"\n                                              }\n                                            >\n                                              {order.status === \"pending\" ? \"On hold\" :\n                                               order.status === \"shipped\" ? \"Shipped\" :\n                                               order.status === \"delivered\" ? \"Delivered\" :\n                                               order.status}\n                                            </Badge>\n                                          </div>\n                                        </div>\n                                        \n                                        {/* Financial Summary */}\n                                        <div className=\"mt-4 p-3 bg-white rounded border\">\n                                          <div className=\"flex items-center space-x-2 mb-3\">\n                                            <CreditCard className=\"h-4 w-4 text-blue-600\" />\n                                            <h4 className=\"font-semibold text-sm\">Financial Summary</h4>\n                                          </div>\n                                          <div className=\"space-y-1 text-xs\">\n                                            <div className=\"flex justify-between\">\n                                              <span>Sous-total ({order.items?.length || 0} articles):</span>\n                                              <span>{(parseFloat(order.totalAmount) * 0.85).toFixed(2)} €</span>\n                                            </div>\n                                            <div className=\"flex justify-between\">\n                                              <span>Delivery costs:</span>\n                                              <span className=\"text-green-600\">Free</span>\n                                            </div>\n                                            <div className=\"flex justify-between\">\n                                              <span>VAT (19%):</span>\n                                              <span>{(parseFloat(order.totalAmount) * 0.15).toFixed(2)} €</span>\n                                            </div>\n                                            <hr className=\"my-2\" />\n                                            <div className=\"flex justify-between font-semibold text-lg\">\n                                              <span>Total:</span>\n                                              <span className=\"text-green-600\">{parseFloat(order.totalAmount).toFixed(2)} €</span>\n                                            </div>\n                                            <div className=\"flex justify-between items-center mt-2\">\n                                              <span>Payment:</span>\n                                              <Badge \n                                                className={\n                                                  order.status === \"delivered\" ? \"bg-green-100 text-green-800\" :\n                                                  order.status === \"cancelled\" ? \"bg-blue-100 text-blue-800\" :\n                                                  \"bg-yellow-100 text-yellow-800\"\n                                                }\n                                              >\n                                                {order.status === \"delivered\" ? \"Paid\" : \n                                                 order.status === \"cancelled\" ? \"Refunded\" : \n                                                 \"On hold\"}\n                                              </Badge>\n                                            </div>\n                                          </div>\n                                        </div>\n                                      </div>\n                                    </div>\n                                  </div>\n                                </div>\n                              </TableCell>\n                            </TableRow>\n                          )}\n                        </React.Fragment>\n                      );\n                    })\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Order Details Modal */}\n        {selectedOrder && (\n          <OrderDetailsModal\n            isOpen={showOrderDetails}\n            onClose={() => {\n              setShowOrderDetails(false);\n              setSelectedOrder(null);\n            }}\n            order={selectedOrder}\n          />\n        )}\n\n        {/* Delete Confirmation Dialog */}\n        <AlertDialog \n          open={deleteDialog.open} \n          onOpenChange={(open) => setDeleteDialog(prev => ({ ...prev, open }))}\n        >\n          <AlertDialogContent>\n            <AlertDialogHeader>\n              <AlertDialogTitle>Confirm Deletion</AlertDialogTitle>\n              <AlertDialogDescription>\n                Are you sure you want to delete order \"{deleteDialog.orderNumber}\"? \n                This action cannot be undone.\n              </AlertDialogDescription>\n            </AlertDialogHeader>\n            <AlertDialogFooter>\n              <AlertDialogCancel>Cancel</AlertDialogCancel>\n              <AlertDialogAction\n                className=\"bg-red-600 hover:bg-red-700\"\n              >\n                Delete\n              </AlertDialogAction>\n            </AlertDialogFooter>\n          </AlertDialogContent>\n        </AlertDialog>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":36806},"client/src/pages/seller/replenishment.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ShoppingCart,\n  AlertTriangle,\n  Info,\n  TrendingUp,\n  CheckCircle,\n  FileText,\n  Eye,\n  RotateCcw,\n} from \"lucide-react\";\n\ninterface ReplenishmentProduct {\n  id: string;\n  name: string;\n  supplier: string;\n  currentStock: number;\n  minThreshold: number;\n  suggestedQty: number;\n  unitCost: number;\n  totalCost: number;\n  status: 'on_hold' | 'order';\n}\n\n// Mock data matching the image\nconst mockProducts: ReplenishmentProduct[] = [\n  {\n    id: \"1\",\n    name: \"NextGen Game Console\",\n    supplier: \"TechDistrib\",\n    currentStock: 3,\n    minThreshold: 10,\n    suggestedQty: 20,\n    unitCost: 45000,\n    totalCost: 900000,\n    status: 'on_hold'\n  },\n  {\n    id: \"2\", \n    name: \"Smart TV 4K 55\\\"\",\n    supplier: \"ElectroMax\",\n    currentStock: 8,\n    minThreshold: 10,\n    suggestedQty: 15,\n    unitCost: 65000,\n    totalCost: 975000,\n    status: 'on_hold'\n  },\n  {\n    id: \"3\",\n    name: \"Bluetooth headset\",\n    supplier: \"AudioPlus\",\n    currentStock: 5,\n    minThreshold: 15,\n    suggestedQty: 30,\n    unitCost: 18000,\n    totalCost: 540000,\n    status: 'order'\n  }\n];\n\nexport default function ReplenishmentPage() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [selectedProducts, setSelectedProducts] = useState<Set<string>>(new Set());\n  const [selectAll, setSelectAll] = useState(false);\n\n  // Filter products that need restocking\n  const productsToRestock = mockProducts.filter(product => \n    product.currentStock <= product.minThreshold\n  );\n\n  // Calculate metrics\n  const totalSelected = selectedProducts.size;\n  const totalSelectedCost = mockProducts\n    .filter(product => selectedProducts.has(product.id))\n    .reduce((sum, product) => sum + product.totalCost, 0);\n  const currentOrders = mockProducts.filter(product => product.status === 'order').length;\n\n  // Handle select all\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedProducts(new Set(productsToRestock.map(p => p.id)));\n    } else {\n      setSelectedProducts(new Set());\n    }\n    setSelectAll(checked);\n  };\n\n  // Handle individual product selection\n  const handleProductSelect = (productId: string, checked: boolean) => {\n    const newSelected = new Set(selectedProducts);\n    if (checked) {\n      newSelected.add(productId);\n    } else {\n      newSelected.delete(productId);\n    }\n    setSelectedProducts(newSelected);\n    setSelectAll(newSelected.size === productsToRestock.length);\n  };\n\n  // Handle create order\n  const handleCreateOrder = () => {\n    if (selectedProducts.size === 0) {\n      toast({\n        title: \"No products selected\",\n        description: \"Please select products to create an order.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    toast({\n      title: \"Order created successfully\",\n      description: `Created order for ${selectedProducts.size} product(s)`,\n    });\n    \n    // Reset selection\n    setSelectedProducts(new Set());\n    setSelectAll(false);\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"flex items-center space-x-2\">\n              <ShoppingCart className=\"h-6 w-6\" />\n              <h1 className=\"text-2xl font-bold\">Replenishment</h1>\n            </div>\n            <p className=\"text-gray-600 mt-1\">Manage replenishment orders</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" className=\"flex items-center space-x-2\">\n              <FileText className=\"h-4 w-4\" />\n              <span>Historical</span>\n            </Button>\n            <Button className=\"flex items-center space-x-2\">\n              <span>Create order (</span>\n              <span>{totalSelected}</span>\n              <span>)</span>\n            </Button>\n          </div>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Products to be restocked</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">{productsToRestock.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\n                  <Info className=\"h-4 w-4 text-blue-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Selected</p>\n                  <p className=\"text-2xl font-bold text-blue-600\">{totalSelected}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\n                  <TrendingUp className=\"h-4 w-4 text-purple-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Estimated cost</p>\n                  <p className=\"text-2xl font-bold\">{totalSelectedCost.toLocaleString()} AND</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-green-100 rounded-lg\">\n                  <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Current orders</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{currentOrders}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Products Requiring Replenishment */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>Products requiring replenishment</span>\n              <div className=\"flex items-center space-x-2\">\n                <Checkbox \n                  id=\"select-all\"\n                  checked={selectAll}\n                  onCheckedChange={handleSelectAll}\n                />\n                <label htmlFor=\"select-all\" className=\"text-sm font-medium\">\n                  Select all\n                </label>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\"></TableHead>\n                    <TableHead>Product</TableHead>\n                    <TableHead>Current stock</TableHead>\n                    <TableHead>Min threshold.</TableHead>\n                    <TableHead>Suggested Qty</TableHead>\n                    <TableHead>Unit cost</TableHead>\n                    <TableHead>Total cost</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead className=\"w-12\"></TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {productsToRestock.map((product) => (\n                    <TableRow key={product.id} className=\"hover:bg-gray-50\">\n                      <TableCell>\n                        <Checkbox \n                          checked={selectedProducts.has(product.id)}\n                          onCheckedChange={(checked) => \n                            handleProductSelect(product.id, checked as boolean)\n                          }\n                        />\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <div className=\"font-medium\">{product.name}</div>\n                          <div className=\"text-sm text-gray-500\">Supplier: {product.supplier}</div>\n                        </div>\n                      </TableCell>\n                      <TableCell>\n                        <span className={`font-semibold ${\n                          product.currentStock <= product.minThreshold \n                            ? 'text-red-600' \n                            : 'text-green-600'\n                        }`}>\n                          {product.currentStock}\n                        </span>\n                      </TableCell>\n                      <TableCell className=\"text-center\">{product.minThreshold}</TableCell>\n                      <TableCell className=\"text-center font-semibold text-blue-600\">\n                        {product.suggestedQty}\n                      </TableCell>\n                      <TableCell>{product.unitCost.toLocaleString()} JPY</TableCell>\n                      <TableCell className=\"font-semibold\">\n                        {product.totalCost.toLocaleString()} JPY\n                      </TableCell>\n                      <TableCell>\n                        <Badge \n                          variant={product.status === 'on_hold' ? 'secondary' : 'default'}\n                          className={\n                            product.status === 'on_hold' \n                              ? 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200'\n                              : 'bg-blue-100 text-blue-800 hover:bg-blue-200'\n                          }\n                        >\n                          {product.status === 'on_hold' ? 'On hold' : 'Order'}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <Eye className=\"h-4 w-4\" />\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":11016},"client/src/pages/seller/stock-alerts.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Bell,\n  AlertTriangle,\n  AlertCircle,\n  Info,\n  Settings,\n  TrendingDown,\n  RefreshCw,\n  Trash2,\n  CheckCircle,\n} from \"lucide-react\";\n\ninterface StockAlert {\n  id: string;\n  productName: string;\n  alertType: 'critical' | 'important' | 'medium';\n  message: string;\n  currentStock: number;\n  timestamp: string;\n  status: 'active' | 'resolved';\n}\n\n// Mock data matching the images\nconst mockAlerts: StockAlert[] = [\n  {\n    id: \"1\",\n    productName: \"NextGen Game Console\",\n    alertType: 'important',\n    message: \"Critical stock: only 3 units remaining\",\n    currentStock: 3,\n    timestamp: \"9/2/2025, 8:02:29 PM\",\n    status: 'active'\n  },\n  {\n    id: \"2\", \n    productName: \"USB-C cable\",\n    alertType: 'critical',\n    message: \"Completely out of stock\",\n    currentStock: 0,\n    timestamp: \"8/2/2025, 7:02:29 PM\",\n    status: 'active'\n  },\n  {\n    id: \"3\",\n    productName: \"Smart TV 4K 55\\\"\",\n    alertType: 'medium',\n    message: \"Low stock: below the recommended threshold\",\n    currentStock: 8,\n    timestamp: \"9/2/2025, 6:02:29 PM\",\n    status: 'active'\n  }\n];\n\nexport default function StockAlertsPage() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  \n  const [activeTab, setActiveTab] = useState<string>(\"active\");\n\n  // Filter alerts by type\n  const criticalAlerts = mockAlerts.filter(alert => alert.alertType === 'critical');\n  const importantAlerts = mockAlerts.filter(alert => alert.alertType === 'important');\n  const mediumAlerts = mockAlerts.filter(alert => alert.alertType === 'medium');\n  const activeAlerts = mockAlerts.filter(alert => alert.status === 'active');\n  const resolvedAlerts = mockAlerts.filter(alert => alert.status === 'resolved');\n\n  // Handle solve alert\n  const handleSolveAlert = (alertId: string) => {\n    toast({\n      title: \"Alert resolved\",\n      description: \"The alert has been marked as resolved.\",\n    });\n  };\n\n  // Handle delete alert\n  const handleDeleteAlert = (alertId: string) => {\n    toast({\n      title: \"Alert deleted\",\n      description: \"The alert has been permanently removed.\",\n    });\n  };\n\n  // Get alert icon and colors\n  const getAlertConfig = (type: string) => {\n    switch (type) {\n      case 'critical':\n        return {\n          icon: <AlertCircle className=\"h-4 w-4\" />,\n          bgColor: 'bg-red-50 border-l-red-500',\n          textColor: 'text-red-800',\n          badgeColor: 'bg-red-100 text-red-800'\n        };\n      case 'important':\n        return {\n          icon: <AlertTriangle className=\"h-4 w-4\" />,\n          bgColor: 'bg-orange-50 border-l-orange-500',\n          textColor: 'text-orange-800',\n          badgeColor: 'bg-orange-100 text-orange-800'\n        };\n      case 'medium':\n        return {\n          icon: <Info className=\"h-4 w-4\" />,\n          bgColor: 'bg-yellow-50 border-l-yellow-500',\n          textColor: 'text-yellow-800',\n          badgeColor: 'bg-yellow-100 text-yellow-800'\n        };\n      default:\n        return {\n          icon: <Bell className=\"h-4 w-4\" />,\n          bgColor: 'bg-gray-50 border-l-gray-500',\n          textColor: 'text-gray-800',\n          badgeColor: 'bg-gray-100 text-gray-800'\n        };\n    }\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <div className=\"flex items-center space-x-2\">\n              <Bell className=\"h-6 w-6\" />\n              <h1 className=\"text-2xl font-bold\">Stock Alerts</h1>\n            </div>\n            <p className=\"text-gray-600 mt-1\">Monitor critical stock levels</p>\n          </div>\n          <Button className=\"flex items-center space-x-2\" variant=\"outline\">\n            <Settings className=\"h-4 w-4\" />\n            <span>Configure alerts</span>\n          </Button>\n        </div>\n\n        {/* Alert Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-red-100 rounded-lg\">\n                  <AlertCircle className=\"h-4 w-4 text-red-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Critical alerts</p>\n                  <p className=\"text-2xl font-bold text-red-600\">{criticalAlerts.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\n                  <AlertTriangle className=\"h-4 w-4 text-orange-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Important alerts</p>\n                  <p className=\"text-2xl font-bold text-orange-600\">{importantAlerts.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-yellow-100 rounded-lg\">\n                  <TrendingDown className=\"h-4 w-4 text-yellow-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Medium alerts</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">{mediumAlerts.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"p-2 bg-gray-100 rounded-lg\">\n                  <Bell className=\"h-4 w-4 text-gray-600\" />\n                </div>\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total actives</p>\n                  <p className=\"text-2xl font-bold\">{activeAlerts.length}</p>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Alert Management */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Alert management</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Tabs value={activeTab} onValueChange={setActiveTab}>\n              <TabsList>\n                <TabsTrigger value=\"active\" className=\"flex items-center space-x-2\">\n                  <span>Active alerts</span>\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {activeAlerts.length}\n                  </Badge>\n                </TabsTrigger>\n                <TabsTrigger value=\"resolved\" className=\"flex items-center space-x-2\">\n                  <span>Resolved</span>\n                  <Badge variant=\"secondary\" className=\"ml-2\">\n                    {resolvedAlerts.length}\n                  </Badge>\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent value=\"active\" className=\"mt-6\">\n                <div className=\"space-y-4\">\n                  {activeAlerts.map((alert) => {\n                    const config = getAlertConfig(alert.alertType);\n                    \n                    return (\n                      <div\n                        key={alert.id}\n                        className={`p-4 rounded-lg border-l-4 ${config.bgColor}`}\n                      >\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex-1\">\n                            <div className=\"flex items-center space-x-3\">\n                              <div className={config.textColor}>\n                                {config.icon}\n                              </div>\n                              <div className=\"flex-1\">\n                                <h3 className=\"font-semibold text-lg\">{alert.productName}</h3>\n                                <p className={`text-sm ${config.textColor}`}>\n                                  {config.icon} {alert.message}\n                                </p>\n                                <div className=\"flex items-center space-x-4 mt-2\">\n                                  <Badge \n                                    variant=\"secondary\" \n                                    className=\"text-xs\"\n                                  >\n                                    {alert.alertType === 'critical' ? 'Rupture de stock' : \n                                     alert.alertType === 'important' ? 'Low stock' : \n                                     'Low stock'}\n                                  </Badge>\n                                  <span className=\"text-xs text-gray-500\">\n                                    {alert.timestamp}\n                                  </span>\n                                </div>\n                              </div>\n                            </div>\n                          </div>\n                          \n                          <div className=\"flex items-center space-x-4\">\n                            <div className=\"text-right\">\n                              <div className=\"text-sm text-gray-600\">Current stock</div>\n                              <div className=\"text-2xl font-bold\">{alert.currentStock}</div>\n                            </div>\n                            \n                            <div className=\"flex items-center space-x-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => handleSolveAlert(alert.id)}\n                                className=\"flex items-center space-x-1\"\n                              >\n                                <RefreshCw className=\"h-3 w-3\" />\n                                <span>Solve</span>\n                              </Button>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => handleDeleteAlert(alert.id)}\n                                className=\"text-red-600 hover:text-red-700\"\n                              >\n                                <Trash2 className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                    );\n                  })}\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"resolved\" className=\"mt-6\">\n                <div className=\"text-center py-12\">\n                  <CheckCircle className=\"mx-auto h-12 w-12 text-green-400 mb-4\" />\n                  <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No resolved alerts</h3>\n                  <p className=\"text-gray-600\">\n                    Resolved alerts will appear here once you solve active alerts.\n                  </p>\n                </div>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":11677},"client/src/pages/seller/orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { \n  Table, \n  TableBody, \n  TableCell, \n  TableHead, \n  TableHeader, \n  TableRow \n} from \"@/components/ui/table\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  ShoppingCart,\n  Search,\n  FileDown,\n  MoreHorizontal,\n  CheckCircle,\n  Repeat,\n  Snowflake,\n  CreditCard,\n  MessageCircle,\n  Phone,\n  Eye,\n  AlertTriangle,\n  X,\n  Ban,\n  User,\n} from \"lucide-react\";\n\ninterface SellerOrder {\n  id: string;\n  orderNumber: string;\n  articles: number;\n  productTypes: string;\n  client: {\n    name: string;\n    email: string;\n    avatar?: string;\n  };\n  status: 'on_hold' | 'in_processing' | 'shipped' | 'delivered' | 'cancelled';\n  payment: 'on_hold' | 'paid' | 'failed' | 'refunded';\n  carrier: string;\n  amount: number;\n  date: string;\n  actions: {\n    canValidate: boolean;\n    canRepay: boolean;\n    canFreeze: boolean;\n    canUnlock: boolean;\n    canContact: boolean;\n    canCall: boolean;\n    canViewHistory: boolean;\n    canReport: boolean;\n    canCancel: boolean;\n  };\n}\n\n// Mock data matching the image\nconst mockOrders: SellerOrder[] = [\n  {\n    id: \"1\",\n    orderNumber: \"CMD-2024-001\",\n    articles: 2,\n    productTypes: \"2 types of product\",\n    client: {\n      name: \"Ahmed Benali\",\n      email: \"ahmed.benali@email.com\"\n    },\n    status: 'on_hold',\n    payment: 'on_hold',\n    carrier: \"Not assigned\",\n    amount: 1299.99,\n    date: \"02/09/2025\",\n    actions: {\n      canValidate: true,\n      canRepay: false,\n      canFreeze: false,\n      canUnlock: false,\n      canContact: true,\n      canCall: true,\n      canViewHistory: true,\n      canReport: false,\n      canCancel: true\n    }\n  },\n  {\n    id: \"2\",\n    orderNumber: \"CMD-2024-002\",\n    articles: 1,\n    productTypes: \"1 type of product\",\n    client: {\n      name: \"Fatima Kadi\",\n      email: \"fatima.kadi@email.com\"\n    },\n    status: 'in_processing',\n    payment: 'paid',\n    carrier: \"Not assigned\",\n    amount: 249.50,\n    date: \"01/09/2025\",\n    actions: {\n      canValidate: false,\n      canRepay: true,\n      canFreeze: true,\n      canUnlock: false,\n      canContact: true,\n      canCall: true,\n      canViewHistory: true,\n      canReport: false,\n      canCancel: false\n    }\n  },\n  {\n    id: \"3\",\n    orderNumber: \"CMD-2024-003\",\n    articles: 3,\n    productTypes: \"2 types of product\",\n    client: {\n      name: \"Karim Meziane\",\n      email: \"karim.meziane@email.com\"\n    },\n    status: 'shipped',\n    payment: 'paid',\n    carrier: \"On hold\",\n    amount: 789.99,\n    date: \"31/08/2025\",\n    actions: {\n      canValidate: false,\n      canRepay: false,\n      canFreeze: false,\n      canUnlock: true,\n      canContact: true,\n      canCall: true,\n      canViewHistory: true,\n      canReport: false,\n      canCancel: false\n    }\n  },\n  {\n    id: \"4\",\n    orderNumber: \"CMD-2024-004\",\n    articles: 1,\n    productTypes: \"1 type of product\",\n    client: {\n      name: \"Amina Bounedjika\",\n      email: \"amina.bounedjika@email.com\"\n    },\n    status: 'delivered',\n    payment: 'paid',\n    carrier: \"On hold\",\n    amount: 159.99,\n    date: \"30/08/2025\",\n    actions: {\n      canValidate: false,\n      canRepay: false,\n      canFreeze: false,\n      canUnlock: false,\n      canContact: true,\n      canCall: true,\n      canViewHistory: true,\n      canReport: false,\n      canCancel: false\n    }\n  },\n  {\n    id: \"5\",\n    orderNumber: \"CMD-2024-005\",\n    articles: 1,\n    productTypes: \"1 type of product\",\n    client: {\n      name: \"Yacine Brahimi\",\n      email: \"yacine.brahimi@email.com\"\n    },\n    status: 'cancelled',\n    payment: 'refunded',\n    carrier: \"Not assigned\",\n    amount: 349.99,\n    date: \"29/08/2025\",\n    actions: {\n      canValidate: false,\n      canRepay: false,\n      canFreeze: false,\n      canUnlock: false,\n      canContact: true,\n      canCall: true,\n      canViewHistory: true,\n      canReport: true,\n      canCancel: false\n    }\n  }\n];\n\nexport default function SellerOrdersPage() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [paymentFilter, setPaymentFilter] = useState<string>(\"all\");\n\n  // Filter orders based on search and filters\n  const filteredOrders = mockOrders.filter(order => {\n    const matchesSearch = !searchQuery || \n      order.orderNumber.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      order.client.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      order.client.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || order.status === statusFilter;\n    const matchesPayment = paymentFilter === \"all\" || order.payment === paymentFilter;\n    \n    return matchesSearch && matchesStatus && matchesPayment;\n  });\n\n  // Get status badge configuration\n  const getStatusBadge = (status: string) => {\n    const configs: Record<string, { text: string; className: string }> = {\n      'on_hold': { text: 'On hold', className: 'bg-orange-100 text-orange-800 hover:bg-orange-200' },\n      'in_processing': { text: 'In processing', className: 'bg-blue-100 text-blue-800 hover:bg-blue-200' },\n      'shipped': { text: 'Shipped', className: 'bg-purple-100 text-purple-800 hover:bg-purple-200' },\n      'delivered': { text: 'Delivered', className: 'bg-green-100 text-green-800 hover:bg-green-200' },\n      'cancelled': { text: 'Cancelled', className: 'bg-red-100 text-red-800 hover:bg-red-200' }\n    };\n    \n    const config = configs[status] || { text: status, className: 'bg-gray-100 text-gray-800' };\n    return <Badge className={config.className}>{config.text}</Badge>;\n  };\n\n  // Get payment badge configuration\n  const getPaymentBadge = (payment: string) => {\n    const configs: Record<string, { text: string; className: string }> = {\n      'on_hold': { text: 'On hold', className: 'bg-orange-100 text-orange-800 hover:bg-orange-200' },\n      'paid': { text: 'Paid', className: 'bg-green-100 text-green-800 hover:bg-green-200' },\n      'failed': { text: 'Failed', className: 'bg-red-100 text-red-800 hover:bg-red-200' },\n      'refunded': { text: 'Refunded', className: 'bg-blue-100 text-blue-800 hover:bg-blue-200' }\n    };\n    \n    const config = configs[payment] || { text: payment, className: 'bg-gray-100 text-gray-800' };\n    return <Badge className={config.className}>{config.text}</Badge>;\n  };\n\n  // Handle order actions\n  const handleOrderAction = (action: string, orderId: string) => {\n    const actionMessages: Record<string, string> = {\n      'validate': 'Order validated successfully',\n      'repay': 'Payment retry initiated',\n      'freeze': 'Order funds frozen',\n      'unlock': 'Withdrawal unlocked',\n      'contact': 'Opening contact form',\n      'call': 'Initiating call',\n      'history': 'Opening customer history',\n      'report': 'Reporting as suspicious',\n      'cancel': 'Order cancelled'\n    };\n\n    toast({\n      title: \"Action completed\",\n      description: actionMessages[action] || `Action ${action} completed`,\n    });\n  };\n\n  // Handle export\n  const handleExport = () => {\n    toast({\n      title: \"Export started\",\n      description: \"Your orders data is being exported to CSV\",\n    });\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold\">Orders</h1>\n            <p className=\"text-gray-600 mt-1\">Manage all your orders in one place</p>\n          </div>\n          <Button onClick={handleExport} variant=\"outline\" className=\"flex items-center space-x-2\">\n            <FileDown className=\"h-4 w-4\" />\n            <span>Exporter</span>\n          </Button>\n        </div>\n\n        {/* Orders Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center justify-between\">\n              <span>List of commands ({filteredOrders.length})</span>\n              <div className=\"flex items-center space-x-4\">\n                {/* Search */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search by number, customer or email...\"\n                    className=\"pl-10 w-80\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n                \n                {/* Status Filter */}\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"All statuses\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All statuses</SelectItem>\n                    <SelectItem value=\"on_hold\">On hold</SelectItem>\n                    <SelectItem value=\"in_processing\">In processing</SelectItem>\n                    <SelectItem value=\"shipped\">Shipped</SelectItem>\n                    <SelectItem value=\"delivered\">Delivered</SelectItem>\n                    <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                  </SelectContent>\n                </Select>\n\n                {/* Payment Filter */}\n                <Select value={paymentFilter} onValueChange={setPaymentFilter}>\n                  <SelectTrigger className=\"w-48\">\n                    <SelectValue placeholder=\"All payments\" />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"all\">All payments</SelectItem>\n                    <SelectItem value=\"paid\">Paid</SelectItem>\n                    <SelectItem value=\"on_hold\">On hold</SelectItem>\n                    <SelectItem value=\"failed\">Failed</SelectItem>\n                    <SelectItem value=\"refunded\">Refunded</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Order</TableHead>\n                    <TableHead>Client</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Payment</TableHead>\n                    <TableHead>Carrier</TableHead>\n                    <TableHead>Amount</TableHead>\n                    <TableHead>Date</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredOrders.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={8} className=\"text-center py-12\">\n                        <ShoppingCart className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n                        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No orders found</h3>\n                        <p className=\"text-gray-600\">\n                          {searchQuery ? \"Try adjusting your search terms.\" : \"No orders match the current filters.\"}\n                        </p>\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredOrders.map((order) => (\n                      <TableRow key={order.id} className=\"hover:bg-gray-50\">\n                        <TableCell>\n                          <div>\n                            <div className=\"font-medium\">{order.orderNumber}</div>\n                            <div className=\"text-sm text-gray-500\">{order.productTypes}</div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center space-x-3\">\n                            <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\n                              <User className=\"h-4 w-4 text-blue-600\" />\n                            </div>\n                            <div>\n                              <div className=\"font-medium\">{order.client.name}</div>\n                              <div className=\"text-sm text-gray-500\">{order.client.email}</div>\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          {getStatusBadge(order.status)}\n                        </TableCell>\n                        <TableCell>\n                          {getPaymentBadge(order.payment)}\n                        </TableCell>\n                        <TableCell>\n                          <span className={order.carrier === \"Not assigned\" ? \"text-gray-500\" : \"text-orange-600\"}>\n                            {order.carrier}\n                          </span>\n                        </TableCell>\n                        <TableCell className=\"font-semibold\">\n                          {order.amount.toLocaleString()} €\n                        </TableCell>\n                        <TableCell className=\"text-sm text-gray-600\">\n                          {order.date}\n                        </TableCell>\n                        <TableCell>\n                          <DropdownMenu>\n                            <DropdownMenuTrigger asChild>\n                              <Button variant=\"ghost\" size=\"sm\">\n                                <MoreHorizontal className=\"h-4 w-4\" />\n                              </Button>\n                            </DropdownMenuTrigger>\n                            <DropdownMenuContent align=\"end\" className=\"w-56\">\n                              {order.actions.canValidate && (\n                                <DropdownMenuItem onClick={() => handleOrderAction('validate', order.id)}>\n                                  <CheckCircle className=\"h-4 w-4 mr-2\" />\n                                  Validate the order\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canRepay && (\n                                <DropdownMenuItem onClick={() => handleOrderAction('repay', order.id)}>\n                                  <Repeat className=\"h-4 w-4 mr-2\" />\n                                  Repay\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canFreeze && (\n                                <DropdownMenuItem onClick={() => handleOrderAction('freeze', order.id)}>\n                                  <Snowflake className=\"h-4 w-4 mr-2\" />\n                                  Freeze funds\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canUnlock && (\n                                <DropdownMenuItem onClick={() => handleOrderAction('unlock', order.id)}>\n                                  <CreditCard className=\"h-4 w-4 mr-2\" />\n                                  Unlock withdrawal\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canContact && (\n                                <DropdownMenuItem onClick={() => handleOrderAction('contact', order.id)}>\n                                  <MessageCircle className=\"h-4 w-4 mr-2\" />\n                                  Contact the customer\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canCall && (\n                                <DropdownMenuItem onClick={() => handleOrderAction('call', order.id)}>\n                                  <Phone className=\"h-4 w-4 mr-2\" />\n                                  Call the customer\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canViewHistory && (\n                                <DropdownMenuItem onClick={() => handleOrderAction('history', order.id)}>\n                                  <Eye className=\"h-4 w-4 mr-2\" />\n                                  View customer history\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canReport && (\n                                <DropdownMenuItem \n                                  onClick={() => handleOrderAction('report', order.id)}\n                                  className=\"text-red-600\"\n                                >\n                                  <AlertTriangle className=\"h-4 w-4 mr-2\" />\n                                  Report as suspicious\n                                </DropdownMenuItem>\n                              )}\n                              {order.actions.canCancel && (\n                                <DropdownMenuItem \n                                  onClick={() => handleOrderAction('cancel', order.id)}\n                                  className=\"text-red-600\"\n                                >\n                                  <X className=\"h-4 w-4 mr-2\" />\n                                  Cancel order\n                                </DropdownMenuItem>\n                              )}\n                            </DropdownMenuContent>\n                          </DropdownMenu>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":18425},"client/src/pages/seller/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useTranslation } from \"react-i18next\";\nimport { DashboardLayout } from \"@/components/layout/dashboard-layout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Users,\n  UserCheck,\n  TrendingUp,\n  Star,\n  Search,\n  Plus,\n  User,\n} from \"lucide-react\";\n\ninterface Customer {\n  id: string;\n  fullName: string;\n  email: string;\n  phone?: string;\n  address?: string;\n  status: 'active' | 'inactive';\n  totalOrders: number;\n  totalSpent: number;\n  averageBasket: number;\n  joinDate: string;\n}\n\ninterface CustomerStats {\n  totalClients: number;\n  activeCustomers: number;\n  totalTurnover: number;\n  averageBasket: number;\n}\n\n// Mock data - in reality this would come from the API\nconst mockStats: CustomerStats = {\n  totalClients: 0,\n  activeCustomers: 0,\n  totalTurnover: 0,\n  averageBasket: 0,\n};\n\nconst mockCustomers: Customer[] = [];\n\nexport default function SellerCustomersPage() {\n  const { t } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState<string>(\"all\");\n  const [isAddCustomerOpen, setIsAddCustomerOpen] = useState(false);\n  const [newCustomer, setNewCustomer] = useState({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    address: \"\",\n    status: \"active\" as \"active\" | \"inactive\",\n  });\n\n  // Filter customers based on search and filters\n  const filteredCustomers = mockCustomers.filter(customer => {\n    const matchesSearch = !searchQuery || \n      customer.fullName.toLowerCase().includes(searchQuery.toLowerCase()) ||\n      customer.email.toLowerCase().includes(searchQuery.toLowerCase());\n    \n    const matchesStatus = statusFilter === \"all\" || customer.status === statusFilter;\n    \n    return matchesSearch && matchesStatus;\n  });\n\n  // Handle add customer\n  const handleAddCustomer = () => {\n    if (!newCustomer.fullName || !newCustomer.email) {\n      toast({\n        title: \"Error\",\n        description: \"Full name and email are required\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n\n    // In a real app, this would make an API call\n    toast({\n      title: \"Customer added\",\n      description: `${newCustomer.fullName} has been added successfully`,\n    });\n\n    // Reset form and close modal\n    setNewCustomer({\n      fullName: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      status: \"active\",\n    });\n    setIsAddCustomerOpen(false);\n  };\n\n  // Handle cancel\n  const handleCancel = () => {\n    setNewCustomer({\n      fullName: \"\",\n      email: \"\",\n      phone: \"\",\n      address: \"\",\n      status: \"active\",\n    });\n    setIsAddCustomerOpen(false);\n  };\n\n  return (\n    <DashboardLayout>\n      <div className=\"space-y-6\">\n        {/* Page Header */}\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-2xl font-bold flex items-center space-x-2\">\n              <Users className=\"h-6 w-6\" />\n              <span>Customer Management</span>\n            </h1>\n            <p className=\"text-gray-600 mt-1\">Manage and track your customers</p>\n          </div>\n          \n          <Dialog open={isAddCustomerOpen} onOpenChange={setIsAddCustomerOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"flex items-center space-x-2\">\n                <Plus className=\"h-4 w-4\" />\n                <span>Add a customer</span>\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"sm:max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Add a new customer</DialogTitle>\n              </DialogHeader>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"fullName\">Full name *</Label>\n                  <Input\n                    id=\"fullName\"\n                    value={newCustomer.fullName}\n                    onChange={(e) => setNewCustomer({ ...newCustomer, fullName: e.target.value })}\n                    placeholder=\"Enter customer's full name\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"email\">Email *</Label>\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    value={newCustomer.email}\n                    onChange={(e) => setNewCustomer({ ...newCustomer, email: e.target.value })}\n                    placeholder=\"Enter customer's email\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"phone\">Phone</Label>\n                  <Input\n                    id=\"phone\"\n                    value={newCustomer.phone}\n                    onChange={(e) => setNewCustomer({ ...newCustomer, phone: e.target.value })}\n                    placeholder=\"Enter phone number\"\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"address\">Address</Label>\n                  <Textarea\n                    id=\"address\"\n                    value={newCustomer.address}\n                    onChange={(e) => setNewCustomer({ ...newCustomer, address: e.target.value })}\n                    placeholder=\"Enter customer's address\"\n                    rows={3}\n                  />\n                </div>\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"status\">Status</Label>\n                  <Select\n                    value={newCustomer.status}\n                    onValueChange={(value: \"active\" | \"inactive\") => \n                      setNewCustomer({ ...newCustomer, status: value })\n                    }\n                  >\n                    <SelectTrigger>\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"active\">Active</SelectItem>\n                      <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n              </div>\n              <div className=\"flex justify-end space-x-3 mt-6\">\n                <Button variant=\"outline\" onClick={handleCancel}>\n                  Cancel\n                </Button>\n                <Button onClick={handleAddCustomer}>\n                  Create the client\n                </Button>\n              </div>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Statistics Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total Clients</p>\n                  <p className=\"text-2xl font-bold\">{mockStats.totalClients}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <Users className=\"h-6 w-6 text-blue-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Active Customers</p>\n                  <p className=\"text-2xl font-bold\">{mockStats.activeCustomers}</p>\n                </div>\n                <div className=\"w-12 h-12 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <UserCheck className=\"h-6 w-6 text-green-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Total turnover</p>\n                  <p className=\"text-2xl font-bold\">{mockStats.totalTurnover.toFixed(2)} YES</p>\n                </div>\n                <div className=\"w-12 h-12 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <Star className=\"h-6 w-6 text-yellow-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm text-gray-600\">Average basket</p>\n                  <p className=\"text-2xl font-bold\">{mockStats.averageBasket.toFixed(2)} YES</p>\n                </div>\n                <div className=\"w-12 h-12 bg-purple-100 rounded-lg flex items-center justify-center\">\n                  <Star className=\"h-6 w-6 text-purple-600\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Search and Filter Section */}\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-4\">\n                {/* Search */}\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n                  <Input\n                    placeholder=\"Search by name or email...\"\n                    className=\"pl-10 w-80\"\n                    value={searchQuery}\n                    onChange={(e) => setSearchQuery(e.target.value)}\n                  />\n                </div>\n              </div>\n              \n              {/* Filter Buttons */}\n              <div className=\"flex items-center space-x-2\">\n                <Button\n                  variant={statusFilter === \"all\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"all\")}\n                >\n                  All\n                </Button>\n                <Button\n                  variant={statusFilter === \"active\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"active\")}\n                >\n                  Assets\n                </Button>\n                <Button\n                  variant={statusFilter === \"inactive\" ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setStatusFilter(\"inactive\")}\n                >\n                  Inactive\n                </Button>\n              </div>\n            </div>\n          </CardHeader>\n          <CardContent>\n            {/* Empty State */}\n            <div className=\"flex flex-col items-center justify-center py-12\">\n              <div className=\"w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\n                <User className=\"h-8 w-8 text-gray-400\" />\n              </div>\n              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No customers found</h3>\n              <p className=\"text-gray-500 text-center max-w-sm\">\n                {searchQuery \n                  ? \"Try adjusting your search terms to find the customers you're looking for.\"\n                  : \"You haven't added any customers yet. Start by adding your first customer.\"\n                }\n              </p>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}","size_bytes":12130},"client/src/components/modals/edit-product-modal.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Plus,\n  X,\n  Package,\n  Store,\n  Upload,\n  ChevronLeft,\n  ChevronRight,\n  Check,\n} from \"lucide-react\";\n\nconst editProductSchema = z.object({\n  name: z.string().min(1, \"Product name is required\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  shortDescription: z.string().optional(),\n  sku: z.string().min(1, \"SKU is required\"),\n  price: z.string().min(1, \"Price is required\"),\n  originalPrice: z.string().optional(),\n  stock: z.number().min(0, \"Stock cannot be negative\"),\n  categoryId: z.string().min(1, \"Category is required\"),\n  vendorId: z.string().min(1, \"Store is required\"),\n  brand: z.string().optional(),\n  images: z.array(z.string()).default([]),\n  isFeatured: z.boolean().default(false),\n  isActive: z.boolean().default(true),\n  specifications: z\n    .array(\n      z.object({\n        name: z.string(),\n        value: z.string(),\n      }),\n    )\n    .default([]),\n  faqs: z\n    .array(\n      z.object({\n        question: z.string(),\n        answer: z.string(),\n      }),\n    )\n    .default([]),\n});\n\ntype EditProductFormData = z.infer<typeof editProductSchema>;\n\ninterface Product {\n  id: string;\n  name: string;\n  sku: string;\n  price: string;\n  stock: number;\n  category: string;\n  categoryId?: string;\n  categoryName?: string;\n  vendorId?: string;\n  status: \"active\" | \"inactive\";\n  isActive: boolean;\n  description?: string;\n  shortDescription?: string;\n  images?: string[];\n  specifications?: Array<{ name: string; value: string }>;\n  faqs?: Array<{ question: string; answer: string }>;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description?: string;\n      shortDescription?: string;\n    };\n  };\n}\n\ninterface EditProductModalProps {\n  product: Product | null;\n  onClose: () => void;\n}\n\nexport default function EditProductModal({\n  product,\n  onClose,\n}: EditProductModalProps) {\n  const { t, i18n } = useTranslation();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [imageUrls, setImageUrls] = useState<string[]>([]);\n  const [specifications, setSpecifications] = useState<\n    Array<{ name: string; value: string }>\n  >([]);\n  const [faqs, setFaqs] = useState<Array<{ question: string; answer: string }>>(\n    [],\n  );\n  const [currentStep, setCurrentStep] = useState(1);\n\n  const form = useForm<EditProductFormData>({\n    resolver: zodResolver(editProductSchema),\n    defaultValues: {\n      name: \"\",\n      description: \"\",\n      shortDescription: \"\",\n      sku: \"\",\n      price: \"\",\n      originalPrice: \"\",\n      stock: 0,\n      categoryId: \"\",\n      vendorId: \"\",\n      brand: \"\",\n      images: [],\n      isFeatured: false,\n      isActive: true,\n      specifications: [],\n      faqs: [],\n    },\n  });\n\n  // Fetch sellers from users table (role: seller)\n  const { data: sellers = [] } = useQuery<any[]>({\n    queryKey: [\"/api/admin/users?role=seller\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/admin/users?role=seller\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch sellers\");\n      return response.json();\n    },\n    enabled: !!product,\n  });\n\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/admin/categories\"],\n    enabled: !!product,\n  });\n\n  // Initialize form when product changes\n  useEffect(() => {\n    if (product) {\n      form.reset({\n        name: product.translations?.en?.name || \"\",\n        description: product.translations?.en?.description || \"\",\n        shortDescription: product.translations?.en?.shortDescription || \"\",\n        sku: product.sku || \"\",\n        price: product.price || \"\",\n        originalPrice: \"\",\n        stock: product.stock || 0,\n        categoryId: product.categoryId || \"\",\n        vendorId: product.vendorId || \"\",\n        brand: \"\",\n        images: product.images || [],\n        isFeatured: false,\n        isActive: product.isActive || true,\n        specifications: product.specifications || [],\n        faqs: product.faqs || [],\n      });\n\n      setImageUrls(product.images || []);\n      setSpecifications(product.specifications || []);\n      setFaqs(product.faqs || []);\n      setCurrentStep(1);\n    }\n  }, [product, form]);\n\n  // Update product mutation\n  const updateProductMutation = useMutation({\n    mutationFn: async (data: EditProductFormData) => {\n      if (!product) throw new Error(\"No product to update\");\n\n      const response = await fetch(`/api/admin/products/${product.id}`, {\n        method: \"PUT\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        credentials: \"include\",\n        body: JSON.stringify({\n          ...data,\n          images: imageUrls,\n          specifications,\n          faqs,\n          translations: {\n            en: {\n              name: data.name,\n              description: data.description,\n              shortDescription: data.shortDescription,\n            },\n          },\n        }),\n      });\n\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.error || \"Failed to update product\");\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [\"/api/admin/sellers-with-products\"],\n      });\n      toast({\n        title: \"Success\",\n        description: \"Product updated successfully\",\n      });\n      handleClose();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.message || \"Failed to update product\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleClose = () => {\n    form.reset();\n    setImageUrls([]);\n    setSpecifications([]);\n    setFaqs([]);\n    setCurrentStep(1);\n    onClose();\n  };\n\n  const onSubmit = (data: EditProductFormData) => {\n    updateProductMutation.mutate(data);\n  };\n\n  // Handle file upload\n  const handleFileUpload = async (\n    event: React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    const files = event.target.files;\n    if (!files) return;\n\n    const formData = new FormData();\n    Array.from(files).forEach((file) => {\n      formData.append(\"images\", file);\n    });\n\n    try {\n      const response = await fetch(\"/api/upload/images\", {\n        method: \"POST\",\n        credentials: \"include\",\n        body: formData,\n      });\n\n      if (!response.ok) throw new Error(\"Failed to upload images\");\n\n      const result = await response.json();\n      const newUrls = result.files.map((file: any) => file.path);\n      setImageUrls([...imageUrls, ...newUrls]);\n\n      toast({\n        title: \"Success\",\n        description: `${result.files.length} image(s) uploaded successfully`,\n      });\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to upload images\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const addImageUrl = () => {\n    const newUrl = prompt(\"Enter image URL:\");\n    if (newUrl && newUrl.trim()) {\n      setImageUrls([...imageUrls, newUrl.trim()]);\n    }\n  };\n\n  const removeImageUrl = (index: number) => {\n    setImageUrls(imageUrls.filter((_, i) => i !== index));\n  };\n\n  const addSpecification = () => {\n    setSpecifications([...specifications, { name: \"\", value: \"\" }]);\n  };\n\n  const removeSpecification = (index: number) => {\n    setSpecifications(specifications.filter((_, i) => i !== index));\n  };\n\n  const updateSpecification = (\n    index: number,\n    field: \"name\" | \"value\",\n    value: string,\n  ) => {\n    const updated = specifications.map((spec, i) =>\n      i === index ? { ...spec, [field]: value } : spec,\n    );\n    setSpecifications(updated);\n  };\n\n  const addFaq = () => {\n    setFaqs([...faqs, { question: \"\", answer: \"\" }]);\n  };\n\n  const removeFaq = (index: number) => {\n    setFaqs(faqs.filter((_, i) => i !== index));\n  };\n\n  const updateFaq = (\n    index: number,\n    field: \"question\" | \"answer\",\n    value: string,\n  ) => {\n    const updated = faqs.map((faq, i) =>\n      i === index ? { ...faq, [field]: value } : faq,\n    );\n    setFaqs(updated);\n  };\n\n  const nextStep = () => {\n    if (currentStep < 3) {\n      setCurrentStep(currentStep + 1);\n    }\n  };\n\n  const prevStep = () => {\n    if (currentStep > 1) {\n      setCurrentStep(currentStep - 1);\n    }\n  };\n\n  const canProceedToStep2 = () => {\n    const basicFields = form.getValues();\n    return (\n      basicFields.name &&\n      basicFields.description &&\n      basicFields.sku &&\n      basicFields.price &&\n      basicFields.categoryId &&\n      basicFields.vendorId\n    );\n  };\n\n  const canSubmit = () => {\n    return canProceedToStep2() && currentStep === 3;\n  };\n\n  const getFilteredCategories = () => {\n    return categories.filter((cat) => cat.type === \"standard\");\n  };\n\n  if (!product) return null;\n\n  return (\n    <Dialog open={!!product} onOpenChange={handleClose}>\n      <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"flex items-center gap-2\">\n            <Package className=\"h-5 w-5\" />\n            Edit Product\n          </DialogTitle>\n          <DialogDescription>\n            Update product information, images, and details. Step {currentStep}{\" \"}\n            of 3.\n          </DialogDescription>\n        </DialogHeader>\n\n        {/* Progress Steps */}\n        <div className=\"flex items-center justify-between mb-6 px-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div\n              className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                currentStep >= 1\n                  ? \"bg-blue-600 text-white\"\n                  : \"bg-gray-200 text-gray-600\"\n              }`}\n            >\n              {currentStep > 1 ? <Check className=\"h-4 w-4\" /> : \"1\"}\n            </div>\n            <div className=\"flex-1 h-1 bg-gray-200\">\n              <div\n                className={`h-full ${currentStep >= 2 ? \"bg-blue-600\" : \"bg-gray-200\"} transition-all duration-300`}\n              />\n            </div>\n            <div\n              className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                currentStep >= 2\n                  ? \"bg-blue-600 text-white\"\n                  : \"bg-gray-200 text-gray-600\"\n              }`}\n            >\n              {currentStep > 2 ? <Check className=\"h-4 w-4\" /> : \"2\"}\n            </div>\n            <div className=\"flex-1 h-1 bg-gray-200\">\n              <div\n                className={`h-full ${currentStep >= 3 ? \"bg-blue-600\" : \"bg-gray-200\"} transition-all duration-300`}\n              />\n            </div>\n            <div\n              className={`flex items-center justify-center w-8 h-8 rounded-full ${\n                currentStep >= 3\n                  ? \"bg-blue-600 text-white\"\n                  : \"bg-gray-200 text-gray-600\"\n              }`}\n            >\n              3\n            </div>\n          </div>\n        </div>\n\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            {/* Step 1: Basic Information */}\n            {currentStep === 1 && (\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Package className=\"h-5 w-5\" />\n                  Basic Information\n                </h3>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Product Name *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Enter product name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"sku\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>SKU *</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"Enter SKU\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <FormField\n                  control={form.control}\n                  name=\"description\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Description *</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Enter product description\"\n                          rows={4}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"shortDescription\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Short Description</FormLabel>\n                      <FormControl>\n                        <Textarea\n                          {...field}\n                          placeholder=\"Enter short description\"\n                          rows={2}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"price\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Price *</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter price\"\n                            type=\"number\"\n                            step=\"0.01\"\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"stock\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Stock Quantity</FormLabel>\n                        <FormControl>\n                          <Input\n                            {...field}\n                            placeholder=\"Enter stock quantity\"\n                            type=\"number\"\n                            onChange={(e) =>\n                              field.onChange(parseInt(e.target.value) || 0)\n                            }\n                          />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"categoryId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category *</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {getFilteredCategories().map((category) => (\n                              <SelectItem key={category.id} value={category.id}>\n                                {/* {category.translations?.[i18n.language]?.name ||\n                                  category.translations?.en?.name ||\n                                  \"Unnamed Category\"} */}\n                                {category.translations?.[i18n.language]?.name ||\n                                  category.translations?.en?.name ||\n                                  category.slug}\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"vendorId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Store *</FormLabel>\n                        <Select\n                          onValueChange={field.onChange}\n                          value={field.value}\n                        >\n                          <FormControl>\n                            <SelectTrigger>\n                              <SelectValue placeholder=\"Select store\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            {sellers.map((seller) => (\n                              <SelectItem key={seller.id} value={seller.id}>\n                                {seller.storeName || seller.username} (\n                                {seller.email})\n                              </SelectItem>\n                            ))}\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"isActive\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex flex-row items-center justify-between\">\n                        <div className=\"space-y-0.5\">\n                          <FormLabel>Active Status</FormLabel>\n                          <FormDescription>\n                            Enable or disable this product\n                          </FormDescription>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value}\n                            onCheckedChange={field.onChange}\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n            )}\n\n            {/* Step 2: Images */}\n            {currentStep === 2 && (\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold flex items-center gap-2\">\n                  <Upload className=\"h-5 w-5\" />\n                  Product Images\n                </h3>\n\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center gap-4\">\n                    <div>\n                      <Label htmlFor=\"image-upload\" className=\"cursor-pointer\">\n                        <div className=\"flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 transition-colors\">\n                          <Upload className=\"h-4 w-4\" />\n                          Upload Images\n                        </div>\n                      </Label>\n                      <Input\n                        id=\"image-upload\"\n                        type=\"file\"\n                        multiple\n                        accept=\"image/*\"\n                        className=\"hidden\"\n                        onChange={handleFileUpload}\n                      />\n                    </div>\n                    <Button\n                      type=\"button\"\n                      variant=\"outline\"\n                      onClick={addImageUrl}\n                    >\n                      Add Image URL\n                    </Button>\n                  </div>\n\n                  {imageUrls.length > 0 && (\n                    <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4\">\n                      {imageUrls.map((url, index) => (\n                        <div key={index} className=\"relative group\">\n                          <img\n                            src={url}\n                            alt={`Product image ${index + 1}`}\n                            className=\"w-full h-32 object-cover rounded-lg border\"\n                          />\n                          <Button\n                            type=\"button\"\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\"\n                            onClick={() => removeImageUrl(index)}\n                          >\n                            <X className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n\n            {/* Step 3: Specifications & FAQs */}\n            {currentStep === 3 && (\n              <div className=\"space-y-6\">\n                <h3 className=\"text-lg font-semibold\">Specifications & FAQs</h3>\n\n                {/* Specifications */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-base font-medium\">\n                      Specifications\n                    </Label>\n                    <Button type=\"button\" onClick={addSpecification} size=\"sm\">\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Add Specification\n                    </Button>\n                  </div>\n\n                  {specifications.map((spec, index) => (\n                    <div key={index} className=\"flex items-center gap-4\">\n                      <Input\n                        placeholder=\"Specification name\"\n                        value={spec.name}\n                        onChange={(e) =>\n                          updateSpecification(index, \"name\", e.target.value)\n                        }\n                        className=\"flex-1\"\n                      />\n                      <Input\n                        placeholder=\"Specification value\"\n                        value={spec.value}\n                        onChange={(e) =>\n                          updateSpecification(index, \"value\", e.target.value)\n                        }\n                        className=\"flex-1\"\n                      />\n                      <Button\n                        type=\"button\"\n                        variant=\"destructive\"\n                        size=\"sm\"\n                        onClick={() => removeSpecification(index)}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                  ))}\n                </div>\n\n                {/* FAQs */}\n                <div className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    <Label className=\"text-base font-medium\">FAQs</Label>\n                    <Button type=\"button\" onClick={addFaq} size=\"sm\">\n                      <Plus className=\"h-4 w-4 mr-1\" />\n                      Add FAQ\n                    </Button>\n                  </div>\n\n                  {faqs.map((faq, index) => (\n                    <div\n                      key={index}\n                      className=\"space-y-2 p-4 border rounded-lg\"\n                    >\n                      <div className=\"flex items-center justify-between\">\n                        <Label>FAQ {index + 1}</Label>\n                        <Button\n                          type=\"button\"\n                          variant=\"destructive\"\n                          size=\"sm\"\n                          onClick={() => removeFaq(index)}\n                        >\n                          <X className=\"h-4 w-4\" />\n                        </Button>\n                      </div>\n                      <Input\n                        placeholder=\"Question\"\n                        value={faq.question}\n                        onChange={(e) =>\n                          updateFaq(index, \"question\", e.target.value)\n                        }\n                      />\n                      <Textarea\n                        placeholder=\"Answer\"\n                        value={faq.answer}\n                        onChange={(e) =>\n                          updateFaq(index, \"answer\", e.target.value)\n                        }\n                        rows={2}\n                      />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            )}\n\n            <DialogFooter className=\"flex justify-between\">\n              <div className=\"flex gap-2\">\n                {currentStep > 1 && (\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={prevStep}\n                    className=\"flex items-center gap-2\"\n                  >\n                    <ChevronLeft className=\"h-4 w-4\" />\n                    Previous\n                  </Button>\n                )}\n                <Button type=\"button\" variant=\"outline\" onClick={handleClose}>\n                  Cancel\n                </Button>\n              </div>\n\n              <div className=\"flex gap-2\">\n                {currentStep < 3 && (\n                  <Button\n                    type=\"button\"\n                    onClick={nextStep}\n                    disabled={currentStep === 1 && !canProceedToStep2()}\n                    className=\"flex items-center gap-2\"\n                  >\n                    Next\n                    <ChevronRight className=\"h-4 w-4\" />\n                  </Button>\n                )}\n                {currentStep === 3 && (\n                  <Button\n                    type=\"submit\"\n                    disabled={updateProductMutation.isPending || !canSubmit()}\n                    className=\"flex items-center gap-2\"\n                  >\n                    {updateProductMutation.isPending\n                      ? \"Updating...\"\n                      : \"Update Product\"}\n                    <Check className=\"h-4 w-4\" />\n                  </Button>\n                )}\n              </div>\n            </DialogFooter>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":28027},"client/src/components/modals/view-product-modal.tsx":{"content":"import { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useTranslation } from \"react-i18next\";\n\ninterface Product {\n  id: string;\n  name: string;\n  sku: string;\n  price: string;\n  stock: number;\n  category: string;\n  categoryName?: string;\n  status: \"active\" | \"inactive\";\n  isActive: boolean;\n  description?: string;\n  shortDescription?: string;\n  images?: string[];\n  specifications?: Array<{ name: string; value: string }>;\n  faqs?: Array<{ question: string; answer: string }>;\n  translations?: {\n    [key: string]: {\n      name: string;\n      description?: string;\n    };\n  };\n}\n\ninterface ViewProductModalProps {\n  product: Product | null;\n  onClose: () => void;\n}\n\nexport default function ViewProductModal({ product, onClose }: ViewProductModalProps) {\n  const { t, i18n } = useTranslation();\n\n  if (!product) return null;\n\n  const productName = product.translations?.[i18n.language]?.name || \n                     product.translations?.en?.name || \n                     product.name;\n\n  const productDescription = product.translations?.[i18n.language]?.description || \n                            product.translations?.en?.description || \n                            product.description;\n\n  return (\n    <Dialog open={!!product} onOpenChange={() => onClose()}>\n      <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\n        <DialogHeader>\n          <DialogTitle data-testid=\"text-view-product-title\">\n            {productName}\n          </DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-6\">\n          {/* Basic Information */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg\">Basic Information</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid grid-cols-2 gap-4\">\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Product Name</label>\n                  <p className=\"font-medium\">{productName}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">SKU</label>\n                  <p className=\"font-mono text-sm\">{product.sku}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Category</label>\n                  <Badge variant=\"outline\">{product.categoryName || product.category}</Badge>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Status</label>\n                  <Badge className={product.isActive ? \"bg-green-100 text-green-800\" : \"bg-gray-100 text-gray-800\"}>\n                    {product.isActive ? \"Active\" : \"Inactive\"}\n                  </Badge>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Price</label>\n                  <p className=\"font-semibold text-lg\">\n                    {new Intl.NumberFormat(\"en-US\", {\n                      style: \"currency\",\n                      currency: \"DZD\",\n                      minimumFractionDigits: 0,\n                    }).format(parseFloat(product.price))}\n                  </p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Stock</label>\n                  <Badge variant={product.stock > 0 ? \"outline\" : \"destructive\"} \n                         className={product.stock > 0 ? \"text-green-700 bg-green-50\" : \"\"}>\n                    {product.stock > 0 ? `${product.stock} in stock` : \"Out of stock\"}\n                  </Badge>\n                </div>\n              </div>\n              \n              {productDescription && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Description</label>\n                  <p className=\"mt-1 text-gray-900\">{productDescription}</p>\n                </div>\n              )}\n\n              {product.shortDescription && (\n                <div>\n                  <label className=\"text-sm font-medium text-gray-600\">Short Description</label>\n                  <p className=\"mt-1 text-gray-900\">{product.shortDescription}</p>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Images */}\n          {product.images && product.images.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Product Images</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-3 md:grid-cols-4 gap-4\">\n                  {product.images.map((image, index) => (\n                    <div key={index} className=\"aspect-square\">\n                      <img\n                        src={image}\n                        alt={`${productName} ${index + 1}`}\n                        className=\"w-full h-full object-cover rounded-lg border\"\n                      />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* Specifications */}\n          {product.specifications && product.specifications.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Specifications</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {product.specifications.map((spec, index) => (\n                    <div key={index} className=\"flex justify-between py-2 border-b last:border-0\">\n                      <span className=\"font-medium text-gray-600\">{spec.name}</span>\n                      <span className=\"text-gray-900\">{spec.value}</span>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n\n          {/* FAQs */}\n          {product.faqs && product.faqs.length > 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-lg\">Frequently Asked Questions</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-4\">\n                  {product.faqs.map((faq, index) => (\n                    <div key={index} className=\"space-y-2\">\n                      <h4 className=\"font-medium text-gray-900\">{faq.question}</h4>\n                      <p className=\"text-gray-600 leading-relaxed\">{faq.answer}</p>\n                      {index < product.faqs!.length - 1 && <Separator />}\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          )}\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}","size_bytes":6980},"client/src/DummyData/categoryData/CategoryData.tsx":{"content":"import React from \"react\";\nimport {\n  Smartphone,\n  Tv,\n  Monitor,\n  Home,\n  ShoppingBag,\n  Shirt,\n  Heart,\n  Gamepad2,\n  Wrench,\n  Dumbbell,\n  Baby,\n  CircleEllipsis,\n  Car,\n  Book,\n  Music,\n  Gift,\n  Plane,\n  Coffee,\n  Utensils,\n  Clapperboard,\n  Globe,\n  Gem,\n  Briefcase,\n  Brush,\n  Camera,\n  Cast,\n  Cloud,\n  Headphones,\n  Laptop,\n  Leaf,\n  Palette,\n  Pizza,\n  Scissors,\n  PiggyBank,\n  Printer,\n  Cookie,\n  Microscope,\n  Smartphone as PhoneIcon,\n  Ticket,\n  Watch,\n  Hammer,\n  FileText,\n  LayoutGrid,\n  Flame,\n  Luggage,\n} from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { CategoryItemData } from \"./CategoryList\";\n\nexport const useCategoryData = (): CategoryItemData[] => {\n  const { t } = useTranslation();\n\n  // Extended list of categories with their icons and item counts\n  const categories: CategoryItemData[] = [\n    {\n      icon: <Smartphone size={18} />,\n      label: t(\"categories.phoneTablets\"),\n      count: `4,352 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Tv size={18} />,\n      label: t(\"categories.tvTech\"),\n      count: `2,817 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Monitor size={18} />,\n      label: t(\"categories.computers\"),\n      count: `3,219 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Home size={18} />,\n      label: t(\"categories.homeKitchenOffice\"),\n      count: `5,704 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <ShoppingBag size={18} />,\n      label: t(\"categories.appliances\"),\n      count: `1,532 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Shirt size={18} />,\n      label: t(\"categories.clothingShoes\"),\n      count: `8,932 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Heart size={18} />,\n      label: t(\"categories.healthBeauty\"),\n      count: `4,251 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Gamepad2 size={18} />,\n      label: t(\"categories.videoGamesConsoles\"),\n      count: `907 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Wrench size={18} />,\n      label: t(\"categories.diy\"),\n      count: `3,175 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Dumbbell size={18} />,\n      label: t(\"categories.sportsLeisure\"),\n      count: `2,654 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Baby size={18} />,\n      label: t(\"categories.babyToys\"),\n      count: `1,849 ${t(\"categories.items\")}`,\n    },\n    // New categories\n    {\n      icon: <Wrench size={18} />,\n      label: t(\"categories.bricolage\"),\n      count: `2,345 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Hammer size={18} />,\n      label: t(\"categories.hardware\"),\n      count: `1,780 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Briefcase size={18} />,\n      label: t(\"categories.office\"),\n      count: `2,120 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <LayoutGrid size={18} />,\n      label: t(\"categories.furniture\"),\n      count: `3,450 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <FileText size={18} />,\n      label: t(\"categories.stationery\"),\n      count: `1,890 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Brush size={18} />,\n      label: t(\"categories.housekeeping\"),\n      count: `2,230 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <LayoutGrid size={18} />,\n      label: t(\"categories.pool\"),\n      count: `950 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Flame size={18} />,\n      label: t(\"categories.heating\"),\n      count: `1,340 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Luggage size={18} />,\n      label: t(\"categories.luggage\"),\n      count: `2,780 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Book size={18} />,\n      label: t(\"common.categories.books\"),\n      count: `3,850 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Music size={18} />,\n      label: t(\"common.categories.music\"),\n      count: `2,142 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Car size={18} />,\n      label: t(\"common.categories.automotive\"),\n      count: `1,580 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Gift size={18} />,\n      label: t(\"common.categories.gifts\"),\n      count: `4,350 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Plane size={18} />,\n      label: t(\"common.categories.travel\"),\n      count: `720 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Coffee size={18} />,\n      label: t(\"common.categories.coffee\"),\n      count: `950 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Utensils size={18} />,\n      label: t(\"common.categories.kitchenware\"),\n      count: `3,250 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Clapperboard size={18} />,\n      label: t(\"common.categories.movies\"),\n      count: `1,820 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Globe size={18} />,\n      label: t(\"common.categories.outdoors\"),\n      count: `2,130 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Gem size={18} />,\n      label: t(\"common.categories.jewelry\"),\n      count: `1,540 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Briefcase size={18} />,\n      label: t(\"common.categories.business\"),\n      count: `1,270 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Brush size={18} />,\n      label: t(\"common.categories.art\"),\n      count: `2,980 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Camera size={18} />,\n      label: t(\"common.categories.photography\"),\n      count: `1,850 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <PiggyBank size={18} />,\n      label: t(\"common.categories.finance.short\"),\n      count: `1,320 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Printer size={18} />,\n      label: t(\"common.categories.printing.short\"),\n      count: `950 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Cookie size={18} />,\n      label: t(\"common.categories.bakery.short\"),\n      count: `1,180 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Microscope size={18} />,\n      label: t(\"common.categories.science.short\"),\n      count: `875 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <PhoneIcon size={18} />,\n      label: t(\"common.categories.accessories.short\"),\n      count: `4,210 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Ticket size={18} />,\n      label: t(\"common.categories.events.short\"),\n      count: `630 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <Watch size={18} />,\n      label: t(\"common.categories.watches.short\"),\n      count: `1,420 ${t(\"categories.items\")}`,\n    },\n    {\n      icon: <CircleEllipsis size={18} />,\n      label: t(\"categories.otherCategories.short\"),\n      count: `10,000+ ${t(\"categories.items\")}`,\n    },\n  ];\n\n  return categories;\n};\n","size_bytes":6587},"client/src/DummyData/categoryData/CategoryItem.tsx":{"content":"import React from \"react\";\nimport * as Icons from \"lucide-react\";\nimport { LucideProps } from \"lucide-react\";\nexport type IconName = keyof typeof Icons;\ninterface CategoryItemProps {\n  icon: IconName;\n  label: string;\n  count: string;\n}\n\nconst CategoryItem = ({ icon, label, count }: CategoryItemProps) => {\n  function capitalizeFirst(str: any) {\n    str = String(str || \"\");\n    return str.charAt(0).toUpperCase() + str.slice(1);\n  }\n  const iconName = capitalizeFirst(icon) as keyof typeof Icons;\n  const IconComponent = Icons[iconName] as React.FC<LucideProps>;\n  return (\n    <div className=\"flex items-center justify-between py-1.5 px-3 rounded-lg cursor-pointer transition-all duration-200 hover:bg-cebleu-purple-50 group\">\n      <div className=\"flex items-center gap-3\">\n        <div className=\"w-6 h-6 flex items-center justify-center rounded-full bg-gradient-to-br from-cebleu-purple-50 to-white shadow-sm border border-cebleu-purple-100 group-hover:bg-cebleu-purple-100 group-hover:text-cebleu-purple transition-colors\">\n          {IconComponent && (\n            <IconComponent size={14} className=\"text-cebleu-purple-600\" />\n          )}\n        </div>\n        <span className=\"text-xs font-medium text-cebleu-purple-800 group-hover:text-cebleu-purple-900\">\n          {label}\n        </span>\n      </div>\n      <span className=\"text-[10px] font-medium text-cebleu-purple-400 group-hover:text-cebleu-purple-500\">\n        {count}\n      </span>\n    </div>\n  );\n};\n\nexport default CategoryItem;\n","size_bytes":1502},"client/src/DummyData/categoryData/CategoryList.tsx":{"content":"import React from \"react\";\nimport CategoryItem from \"./CategoryItem\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport type { IconName } from \"./CategoryItem\";\nexport interface CategoryItemData {\n  icon: IconName;\n  label: string;\n  count: string;\n}\n\ninterface CategoryListProps {\n  categories: CategoryItemData[];\n}\n\nconst CategoryList = ({ categories }: CategoryListProps) => {\n  return (\n    <ScrollArea className=\"py-2 px-1.5 h-[calc(100%-44px)]\">\n      <div className=\"grid grid-cols-1 gap-1\">\n        {categories.map((category, index) => (\n          <CategoryItem\n            key={index}\n            icon={category.icon}\n            label={category.label}\n            count={category.count}\n          />\n        ))}\n      </div>\n    </ScrollArea>\n  );\n};\n\nexport default CategoryList;\n","size_bytes":807},"client/src/DummyData/data/products.ts":{"content":"\nimport { Product } from '@/types/product';\n\nexport const products: Product[] = [\n  {\n    id: 1,\n    name: \"Gaming Monitor 32\\\" UHD\",\n    shopName: \"TechPro Store\",\n    rating: 4.8,\n    reviews: 245,\n    category: \"Electronics\",\n    image: \"https://images.unsplash.com/photo-1616711906333-23cf1306b3e9?w=500&q=80\",\n    price: \"399.99\",\n    currency: \"€\",\n    description: \"32-inch 4K UHD gaming monitor with 144Hz refresh rate and 1ms response time.\",\n    badges: [\"New\", \"Gaming\"],\n    delivery: \"Express\",\n  },\n  {\n    id: 2,\n    name: \"Pro Travel Backpack\",\n    shopName: \"Adventure Gear\",\n    rating: 4.9,\n    reviews: 189,\n    category: \"Travel\",\n    image: \"https://images.unsplash.com/photo-1622560480605-d83c853bc5c3?w=500&q=80\",\n    price: \"89.99\",\n    currency: \"€\",\n    description: \"Waterproof travel backpack with laptop compartment and USB charging port.\",\n    badges: [\"Bestseller\", \"Travel\"],\n    delivery: \"Standard\",\n  },\n  {\n    id: 3,\n    name: \"Wireless Gaming Headset\",\n    shopName: \"GameZone\",\n    rating: 4.7,\n    reviews: 312,\n    category: \"Gaming\",\n    image: \"https://images.unsplash.com/photo-1618366712010-f4ae9c647dcb?w=500&q=80\",\n    price: \"159.99\",\n    currency: \"€\",\n    description: \"Premium wireless gaming headset with 7.1 surround sound and noise cancellation.\",\n    badges: [\"Gaming\", \"Wireless\"],\n    delivery: \"Express\",\n  },\n  {\n    id: 4,\n    name: \"Smart Mini Fridge\",\n    shopName: \"Home Tech\",\n    rating: 4.6,\n    reviews: 156,\n    category: \"Appliances\",\n    image: \"https://images.unsplash.com/photo-1610416481686-c3468da9f293?w=500&q=80\",\n    price: \"299.99\",\n    currency: \"€\",\n    description: \"Compact smart refrigerator with temperature control and app connectivity.\",\n    badges: [\"Smart Home\", \"New\"],\n    delivery: \"Standard\",\n  },\n  {\n    id: 5,\n    name: \"Ergonomic Office Chair\",\n    shopName: \"WorkSpace Pro\",\n    rating: 4.8,\n    reviews: 203,\n    category: \"Furniture\",\n    image: \"https://images.unsplash.com/photo-1589384267710-7a25bc5b68bb?w=500&q=80\",\n    price: \"249.99\",\n    currency: \"€\",\n    description: \"Premium ergonomic office chair with lumbar support and adjustable features.\",\n    badges: [\"Ergonomic\", \"Office\"],\n    delivery: \"Premium\",\n  },\n  {\n    id: 6,\n    name: \"Mechanical Gaming Keyboard\",\n    shopName: \"Gaming Gear Pro\",\n    rating: 4.7,\n    reviews: 178,\n    category: \"Gaming\",\n    image: \"https://images.unsplash.com/photo-1644933891402-2e5ea8fd3abc?w=500&q=80\",\n    price: \"129.99\",\n    currency: \"€\",\n    description: \"RGB mechanical gaming keyboard with custom switches and programmable keys.\",\n    badges: [\"Gaming\", \"RGB\"],\n    delivery: \"Express\",\n  },\n  {\n    id: 7,\n    name: \"4K Webcam Pro\",\n    shopName: \"StreamTech\",\n    rating: 4.9,\n    reviews: 267,\n    category: \"Electronics\",\n    image: \"https://images.unsplash.com/photo-1629429407756-28d453c7fcc7?w=500&q=80\",\n    price: \"199.99\",\n    currency: \"€\",\n    description: \"Professional 4K webcam with auto-focus and low light correction.\",\n    badges: [\"Streaming\", \"4K\"],\n    delivery: \"Standard\",\n  },\n  {\n    id: 8,\n    name: \"Wireless Gaming Mouse\",\n    shopName: \"GameZone\",\n    rating: 4.7,\n    reviews: 389,\n    category: \"Gaming\",\n    image: \"https://images.unsplash.com/photo-1615663245857-ac93bb7c39e7?w=500&q=80\",\n    price: \"79.99\",\n    currency: \"€\",\n    description: \"Ultra-light wireless gaming mouse with 25K DPI sensor.\",\n    badges: [\"Gaming\", \"Wireless\"],\n    delivery: \"Express\",\n  }\n];\n","size_bytes":3481},"client/src/DummyData/products/ProductCard.tsx":{"content":"import React, { useState, useCallback } from \"react\";\nimport {\n  Store,\n  Star,\n  ShoppingCart,\n  Heart,\n  Share,\n  Facebook,\n  Twitter,\n  Linkedin,\n  Instagram,\n  ImageOff,\n} from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Card,\n  CardContent,\n  CardFooter,\n  CardHeader,\n} from \"@/components/ui/card\";\nimport { toast } from \"@/hooks/use-toast\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { useTranslation } from \"react-i18next\";\nimport { Product } from \"./interface/product\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n// interface Product {\n//   id: number;\n//   name: string;\n//   brand: string;\n//   rating: number;\n//   reviews: number;\n//   category: string;\n//   categoryName: string;\n//   image: string;\n//   images?: { url: string }[];\n//   price: string;\n//   currency: string;\n//   description: string;\n//   badges: string[];\n//   delivery: string;\n// }\n\ninterface ProductCardProps {\n  product: Product;\n  onSelect?: (product: Product) => void;\n  compact?: boolean;\n}\n\nconst ProductCard = ({\n  product,\n  onSelect,\n  compact = false,\n}: ProductCardProps) => {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n  const [imageError, setImageError] = useState(false);\n  const [imageSrc, setImageSrc] = useState(\n    product.images?.[0]?.url || product.image,\n  );\n  type WishlistCheckResponse = {\n    inWishlist: boolean;\n  };\n  // Check if product is in wishlist\n  const { data: wishlistStatus } = useQuery<WishlistCheckResponse>({\n    queryKey: [`/api/wishlist/${product.id}/check`],\n    enabled: !!user,\n  });\n\n  const isInWishlist = wishlistStatus?.inWishlist || false;\n\n  // Wishlist mutations\n  // const addToWishlistMutation = useMutation({\n  //   mutationFn: () => apiRequest(`/api/wishlist/${product.id}`, { method: \"POST\" }),\n  //   onSuccess: () => {\n  //     queryClient.invalidateQueries({ queryKey: [`/api/wishlist/${product.id}/check`] });\n  //     queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n  //     toast({\n  //       title: t(\"products.addedToWishlist\"),\n  //       description: product.name,\n  //       duration: 3000,\n  //     });\n  //   },\n  //   onError: () => {\n  //     toast({\n  //       title: \"Error\",\n  //       description: \"Failed to add to wishlist\",\n  //       variant: \"destructive\",\n  //       duration: 3000,\n  //     });\n  //   },\n  // });\n\n  const addToWishlistMutation = useMutation({\n    mutationFn: () => apiRequest(\"POST\", `/api/wishlist/${product.id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [`/api/wishlist/${product.id}/check`],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: t(\"products.addedToWishlist\"),\n        description: product.name,\n        duration: 3000,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add to wishlist\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: () => apiRequest(\"DELETE\", `/api/wishlist/${product.id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: [`/api/wishlist/${product.id}/check`],\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: \"Removed from wishlist\",\n        description: product.name,\n        duration: 3000,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove from wishlist\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  // Cart mutation\n  const addToCartMutation = useMutation({\n    mutationFn: () =>\n      apiRequest(\n        \"POST\", // method\n        `/api/cart/${product.id}`, // URL\n        { quantity: 1 }, // data (will be JSON.stringified inside apiRequest)\n      ),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart/count\"] });\n      toast({\n        title: t(\"products.addedToCart\"),\n        description: product.name,\n        duration: 3000,\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to add to cart\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n    },\n  });\n\n  // const addToCartMutation = useMutation({\n  //   mutationFn: () =>\n  //     apiRequest(`/api/cart/${product.id}`, {\n  //       method: \"POST\",\n  //       body: JSON.stringify({ quantity: 1 }),\n  //       headers: { \"Content-Type\": \"application/json\" },\n  //     }),\n  //   onSuccess: () => {\n  //     queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n  //     queryClient.invalidateQueries({ queryKey: [\"/api/cart/count\"] });\n  //     toast({\n  //       title: t(\"products.addedToCart\"),\n  //       description: product.name,\n  //       duration: 3000,\n  //     });\n  //   },\n  //   onError: () => {\n  //     toast({\n  //       title: \"Error\",\n  //       description: \"Failed to add to cart\",\n  //       variant: \"destructive\",\n  //       duration: 3000,\n  //     });\n  //   },\n  // });\n\n  // Fallback images for different product categories\n  const fallbackImages = [\n    \"https://images.unsplash.com/photo-1518770660439-4636190af475?w=800&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1531297484001-80022131f5a1?w=800&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1498049794561-7780e7231661?w=800&q=80&auto=format&fit=crop\",\n  ];\n\n  // Only generate the fallback URL when needed, don't call setState during render\n  const getFallbackImage = useCallback(() => {\n    if (product.category) {\n      const categoryHash = product.category\n        .split(\"\")\n        .reduce((a, b) => a + b.charCodeAt(0), 0);\n      const fallbackIndex = categoryHash % fallbackImages.length;\n      return fallbackImages[fallbackIndex];\n    }\n    return fallbackImages[0];\n  }, [product.category, fallbackImages]);\n\n  const handleCardClick = (e: React.MouseEvent) => {\n    if (onSelect) onSelect(product);\n  };\n\n  const handleImageError = (e: React.SyntheticEvent<HTMLImageElement>) => {\n    const target = e.target as HTMLImageElement;\n    target.onerror = null; // Prevent infinite loop\n\n    if (!imageError) {\n      // First fallback attempt\n      const fallback = getFallbackImage();\n      setImageSrc(fallback);\n      setImageError(true);\n    } else {\n      // If we already tried a fallback and it failed, try a different one\n      const fallbackIndex = (product.id || 0) % fallbackImages.length;\n      setImageSrc(fallbackImages[fallbackIndex]);\n    }\n  };\n\n  const handleCartClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!user) {\n      toast({\n        title: \"Please log in\",\n        description: \"You need to be logged in to add items to cart\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n      return;\n    }\n    addToCartMutation.mutate();\n  };\n\n  const handleWishlistClick = (e: React.MouseEvent) => {\n    e.stopPropagation();\n    if (!user) {\n      toast({\n        title: \"Please log in\",\n        description: \"You need to be logged in to use wishlist\",\n        variant: \"destructive\",\n        duration: 3000,\n      });\n      return;\n    }\n\n    if (isInWishlist) {\n      removeFromWishlistMutation.mutate();\n    } else {\n      addToWishlistMutation.mutate();\n    }\n  };\n\n  const handleShare = (platform: string, e: React.MouseEvent) => {\n    e.stopPropagation();\n\n    // In a real app, you would generate the actual URL for the product\n    const productUrl = `https://cebleu.fr/product/${product.id}`;\n\n    let shareUrl = \"\";\n    switch (platform) {\n      case \"facebook\":\n        shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(\n          productUrl,\n        )}`;\n        break;\n      case \"twitter\":\n        shareUrl = `https://twitter.com/intent/tweet?text=${encodeURIComponent(\n          product.name,\n        )}&url=${encodeURIComponent(productUrl)}`;\n        break;\n      case \"linkedin\":\n        shareUrl = `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(\n          productUrl,\n        )}`;\n        break;\n      case \"instagram\":\n        // Instagram doesn't have a direct sharing URL, but we'll include it for UI completeness\n        toast({\n          title: t(\"products.shareOnInstagram\"),\n          description: t(\"products.instagramShareDescription\"),\n          duration: 3000,\n        });\n        setIsPopoverOpen(false);\n        return;\n    }\n\n    // Open share URL in a new window\n    if (shareUrl) {\n      window.open(shareUrl, \"_blank\", \"noopener,noreferrer\");\n    }\n\n    toast({\n      title: t(\"products.shared\"),\n      description: t(\"products.sharedOn\") + \" \" + platform,\n      duration: 2000,\n    });\n\n    setIsPopoverOpen(false);\n  };\n\n  return (\n    <Card\n      className=\"group hover:shadow-lg transition-all duration-300 border-cebleu-purple-200 h-full flex flex-col overflow-hidden cursor-pointer\"\n      onClick={handleCardClick}\n    >\n      <CardHeader className=\"p-0\">\n        <div className=\"relative h-36 sm:h-40 md:h-48 overflow-hidden rounded-t-lg\">\n          <img\n            src={imageSrc}\n            alt={product.name}\n            className=\"w-full h-full object-cover object-center transition-transform duration-300 group-hover:scale-105\"\n            onError={handleImageError}\n          />\n\n          {/* Image error overlay that shows if all attempts fail */}\n          {imageError && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-cebleu-purple-50/80 opacity-50\">\n              <div className=\"text-center\">\n                <ImageOff className=\"h-8 w-8 text-cebleu-purple-300 mx-auto mb-1\" />\n                <p className=\"text-xs text-cebleu-purple-400 font-medium\">\n                  {product.name}\n                </p>\n              </div>\n            </div>\n          )}\n\n          {/* <div className=\"absolute top-2 left-2 flex gap-1 flex-wrap\">\n            {product.badges.map((badge, index) => (\n              <Badge\n                key={index}\n                variant=\"secondary\"\n                className=\"bg-white/90 text-cebleu-purple-800 backdrop-blur-sm border border-cebleu-purple-200 text-[10px] sm:text-xs\"\n              >\n                {badge}\n              </Badge>\n            ))}\n          </div> */}\n          <div className=\"absolute top-2 right-2 flex gap-1\">\n            <Popover open={isPopoverOpen} onOpenChange={setIsPopoverOpen}>\n              <PopoverTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"h-7 w-7 rounded-full bg-white/80 hover:bg-white border border-cebleu-purple-100 text-cebleu-purple-700 hover:text-cebleu-purple-900 backdrop-blur-sm opacity-70 group-hover:opacity-100 transition-opacity\"\n                  onClick={(e) => {\n                    e.stopPropagation();\n                  }}\n                >\n                  <Share className=\"h-4 w-4\" />\n                </Button>\n              </PopoverTrigger>\n              <PopoverContent className=\"w-auto p-2\" align=\"end\">\n                <div className=\"flex gap-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 rounded-full text-[#1877F2] hover:bg-[#1877F2]/10\"\n                    onClick={(e) => handleShare(\"facebook\", e)}\n                  >\n                    <Facebook className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 rounded-full text-[#1DA1F2] hover:bg-[#1DA1F2]/10\"\n                    onClick={(e) => handleShare(\"twitter\", e)}\n                  >\n                    <Twitter className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 rounded-full text-[#0A66C2] hover:bg-[#0A66C2]/10\"\n                    onClick={(e) => handleShare(\"linkedin\", e)}\n                  >\n                    <Linkedin className=\"h-4 w-4\" />\n                  </Button>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    className=\"h-8 w-8 rounded-full text-[#E4405F] hover:bg-[#E4405F]/10\"\n                    onClick={(e) => handleShare(\"instagram\", e)}\n                  >\n                    <Instagram className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n              </PopoverContent>\n            </Popover>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"h-7 w-7 rounded-full bg-white/80 hover:bg-white border border-cebleu-purple-100 text-cebleu-purple-700 hover:text-cebleu-purple-900 backdrop-blur-sm opacity-70 group-hover:opacity-100 transition-opacity\"\n              onClick={handleWishlistClick}\n            >\n              <Heart\n                className={`h-4 w-4 ${\n                  isInWishlist\n                    ? \"fill-red-500 text-red-500\"\n                    : \"text-cebleu-purple-700 hover:text-red-500\"\n                }`}\n              />\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n\n      <CardContent\n        className={`flex-grow ${compact ? \"p-2 sm:p-3\" : \"p-3 sm:p-4\"}`}\n      >\n        <div className=\"mb-1.5\">\n          <Badge\n            variant=\"outline\"\n            className=\"bg-cebleu-purple-50 text-cebleu-purple-700 text-[10px] sm:text-xs\"\n          >\n            {product.categoryName}\n          </Badge>\n        </div>\n\n        <h3\n          className={`font-semibold ${\n            compact ? \"text-xs sm:text-sm\" : \"text-sm sm:text-base\"\n          } mb-1.5 text-cebleu-purple-900 line-clamp-2`}\n        >\n          {product.name}\n        </h3>\n\n        <div className=\"flex items-center gap-2 mb-1.5\">\n          <div className=\"flex items-center\">\n            <Star className=\"h-3.5 w-3.5 text-cebleu-gold fill-cebleu-gold\" />\n            <span className=\"font-medium text-xs ml-1\">{product.rating}</span>\n          </div>\n          <span className=\"text-[10px] sm:text-xs text-cebleu-purple-600\">\n            ({product.reviews} {t(\"products.reviews\")})\n          </span>\n        </div>\n\n        {!compact && (\n          <p className=\"text-xs text-cebleu-purple-600 mb-3 line-clamp-2\">\n            {product.description}\n          </p>\n        )}\n\n        <div className=\"flex items-center gap-1 text-[10px] sm:text-xs\">\n          <Store className=\"h-3 w-3 text-cebleu-purple-600\" />\n          <span className=\"font-medium text-cebleu-purple-700\">\n            {product.brand}\n          </span>\n        </div>\n      </CardContent>\n\n      <CardFooter\n        className={`${compact ? \"p-2 sm:p-3\" : \"p-3 sm:p-4\"} pt-0 mt-auto`}\n      >\n        <div className=\"w-full space-y-2\">\n          <div className=\"flex items-center justify-between\">\n            <span className=\"font-bold text-sm sm:text-base text-cebleu-purple-800\">\n              {product.currency}\n              {product.price}\n            </span>\n            <span className=\"text-[10px] sm:text-xs text-cebleu-purple-600 italic\">\n              {product.delivery}\n            </span>\n          </div>\n\n          <Button\n            className=\"w-full h-9 text-xs sm:text-sm bg-gradient-to-r from-cebleu-gold to-cebleu-gold-light text-cebleu-dark hover:from-cebleu-gold-light hover:to-cebleu-gold font-medium rounded-md flex items-center justify-center shadow-md\"\n            onClick={handleCartClick}\n          >\n            <ShoppingCart className=\"h-3.5 w-3.5 mr-2\" />\n            <span>{t(\"products.addToCart\")}</span>\n          </Button>\n\n          {!compact && (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              className=\"w-full h-8 text-xs bg-gradient-to-r from-cebleu-purple-400 to-cebleu-purple-600 hover:from-cebleu-purple-500 hover:to-cebleu-purple-700 text-white border-0 hover:text-white\"\n              onClick={(e) => {\n                e.stopPropagation();\n                // View shop functionality\n                toast({\n                  title: t(\"products.viewingShop\"),\n                  description: product.brand,\n                });\n              }}\n            >\n              <Store className=\"h-3 w-3 mr-1\" />\n              <span className=\"truncate\">{t(\"products.viewShopBtn\")}</span>\n            </Button>\n          )}\n        </div>\n      </CardFooter>\n    </Card>\n  );\n};\n\nexport default ProductCard;\n","size_bytes":17099},"client/src/DummyData/products/ProductDetails.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  X,\n  ChevronLeft,\n  ShoppingCart,\n  Heart,\n  Share2,\n  Star,\n  Store,\n  Check,\n  Truck,\n} from \"lucide-react\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\n// import { Product } from \"@/types/product\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport ProductQA from \"./ProductQA\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Product } from \"./interface/product\";\n// interface Product {\n//   id: number;\n//   name: string;\n//   shopName: string;\n//   rating: number;\n//   reviews: number;\n//   category: string;\n//   image: string;\n//   images?: { url: string }[]; // Added optional images array\n//   price: string;\n//   currency: string;\n//   description: string;\n//   badges: string[];\n//   delivery: string;\n// }\ninterface ProductDetailsProps {\n  product: Product | null;\n  open: boolean;\n  onClose: () => void;\n}\n\nconst ProductDetails = ({ product, open, onClose }: ProductDetailsProps) => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n  const [quantity, setQuantity] = useState(1);\n\n  const incrementQuantity = () => setQuantity((prev) => prev + 1);\n  const decrementQuantity = () =>\n    setQuantity((prev) => (prev > 1 ? prev - 1 : 1));\n\n  if (!product) return null;\n  const getPlainText = (html: string) => {\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(html, \"text/html\");\n    return doc.body.textContent || \"\";\n  };\n  return (\n    <Dialog open={open} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-[90vw] max-h-[90vh] overflow-y-auto p-0\">\n        <DialogHeader className=\"p-4 border-b sticky top-0 bg-white z-10\">\n          <div className=\"flex items-center\">\n            <Button\n              variant=\"ghost\"\n              className=\"h-8 w-8 p-0 mr-2\"\n              onClick={onClose}\n            >\n              <ChevronLeft className=\"h-5 w-5\" />\n            </Button>\n            <DialogTitle className=\"text-lg line-clamp-1\">\n              {product.name}\n            </DialogTitle>\n          </div>\n        </DialogHeader>\n\n        <div className=\"p-4 lg:p-6\">\n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6 lg:gap-8\">\n            {/* Product Images Section */}\n            <div className=\"lg:col-span-2\">\n              <div className=\"aspect-square w-full max-w-2xl mx-auto relative rounded-lg overflow-hidden border border-cebleu-purple-200\">\n                <img\n                  src={\n                    product.images && product.images.length > 0\n                      ? product.images[0].url\n                      : product.image\n                  }\n                  alt={product.name}\n                  className=\"w-full h-full object-cover\"\n                />\n              </div>\n\n              {/* <div className=\"flex gap-2 mt-4 overflow-x-auto pb-2\">\n                <div className=\"w-20 h-20 border-2 border-cebleu-gold rounded-md overflow-hidden flex-shrink-0 cursor-pointer\">\n                  <img\n                    src={product.image}\n                    alt={product.name}\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n\n                {[1, 2, 3].map((idx) => (\n                  <div\n                    key={idx}\n                    className=\"w-20 h-20 border border-gray-200 rounded-md overflow-hidden flex-shrink-0 cursor-pointer hover:border-cebleu-purple-300\"\n                  >\n                    <img\n                      src={product.image}\n                      alt={product.name}\n                      className=\"w-full h-full object-cover opacity-80\"\n                    />\n                  </div>\n                ))}\n              </div> */}\n            </div>\n\n            {/* Product Info Section */}\n            <div className=\"lg:col-span-1\">\n              <div className=\"bg-white p-4 lg:p-6 rounded-lg border border-cebleu-purple-200 sticky top-20\">\n                <div className=\"flex justify-between items-start\">\n                  <h3 className=\"text-2xl font-bold text-cebleu-purple-900 mb-2\">\n                    {product.name}\n                  </h3>\n                  <div className=\"flex gap-1\">\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                      <Heart className=\"h-5 w-5 text-cebleu-purple-600\" />\n                    </Button>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                      <Share2 className=\"h-5 w-5 text-cebleu-purple-600\" />\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex items-center gap-2 mb-4\">\n                  <div className=\"flex items-center\">\n                    <Star className=\"h-5 w-5 text-cebleu-gold fill-cebleu-gold\" />\n                    <span className=\"font-medium text-base ml-1\">\n                      {product.rating}\n                    </span>\n                  </div>\n                  <span className=\"text-sm text-cebleu-purple-600\">\n                    ({product.reviews} {t(\"products.reviews\")})\n                  </span>\n                </div>\n\n                <div className=\"mb-6\">\n                  <span className=\"font-bold text-2xl text-cebleu-purple-900\">\n                    {product.currency}\n                    {product.price}\n                  </span>\n                </div>\n\n                <div className=\"space-y-6 mb-6\">\n                  {/* Product Options */}\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">\n                      {t(\"products.color\")}\n                    </h4>\n                    <RadioGroup\n                      defaultValue=\"black\"\n                      className=\"flex flex-wrap gap-2\"\n                    >\n                      <div className=\"flex flex-col items-center\">\n                        <RadioGroupItem\n                          value=\"black\"\n                          id=\"black\"\n                          className=\"sr-only\"\n                        />\n                        <label\n                          htmlFor=\"black\"\n                          className=\"w-10 h-10 rounded-full bg-black cursor-pointer border-2 border-transparent data-[state=checked]:border-cebleu-gold\"\n                        />\n                        <span className=\"text-xs mt-1\">Black</span>\n                      </div>\n                      <div className=\"flex flex-col items-center\">\n                        <RadioGroupItem\n                          value=\"white\"\n                          id=\"white\"\n                          className=\"sr-only\"\n                        />\n                        <label\n                          htmlFor=\"white\"\n                          className=\"w-10 h-10 rounded-full bg-white cursor-pointer border-2 border-gray-200 data-[state=checked]:border-cebleu-gold\"\n                        />\n                        <span className=\"text-xs mt-1\">White</span>\n                      </div>\n                      <div className=\"flex flex-col items-center\">\n                        <RadioGroupItem\n                          value=\"blue\"\n                          id=\"blue\"\n                          className=\"sr-only\"\n                        />\n                        <label\n                          htmlFor=\"blue\"\n                          className=\"w-10 h-10 rounded-full bg-blue-500 cursor-pointer border-2 border-transparent data-[state=checked]:border-cebleu-gold\"\n                        />\n                        <span className=\"text-xs mt-1\">Blue</span>\n                      </div>\n                    </RadioGroup>\n                  </div>\n\n                  {/* Quantity Selector */}\n                  <div>\n                    <h4 className=\"font-medium text-sm mb-2\">\n                      {t(\"products.quantity\")}\n                    </h4>\n                    <div className=\"flex items-center border border-cebleu-purple-200 rounded-md w-fit\">\n                      <button\n                        className=\"px-3 py-1 text-cebleu-purple-800 hover:bg-cebleu-purple-50\"\n                        onClick={decrementQuantity}\n                      >\n                        -\n                      </button>\n                      <span className=\"px-4 py-1 border-x border-cebleu-purple-200\">\n                        {quantity}\n                      </span>\n                      <button\n                        className=\"px-3 py-1 text-cebleu-purple-800 hover:bg-cebleu-purple-50\"\n                        onClick={incrementQuantity}\n                      >\n                        +\n                      </button>\n                    </div>\n                  </div>\n\n                  {/* Delivery Info - Replace TruckDelivery with Truck */}\n                  <div className=\"flex gap-2 items-start text-sm text-cebleu-purple-700\">\n                    <Truck className=\"h-5 w-5 text-cebleu-purple-700 mt-0.5\" />\n                    <div>\n                      <p className=\"font-semibold\">{product.delivery}</p>\n                      <p className=\"text-xs\">{t(\"products.deliveryNote\")}</p>\n                    </div>\n                  </div>\n\n                  {/* Availability */}\n                  <div className=\"flex items-center gap-2 text-sm\">\n                    <Check className=\"h-4 w-4 text-green-600\" />\n                    <span className=\"text-green-600 font-medium\">\n                      {t(\"products.inStock\")}\n                    </span>\n                  </div>\n                </div>\n\n                {/* Action Buttons */}\n                <div className=\"space-y-3\">\n                  <Button className=\"w-full bg-gradient-to-r from-cebleu-gold to-cebleu-gold-light text-cebleu-dark hover:from-cebleu-gold-light hover:to-cebleu-gold font-medium h-12 shadow-md\">\n                    <ShoppingCart className=\"mr-2 h-5 w-5\" />\n                    {t(\"products.addToCart\")}\n                  </Button>\n\n                  <Button\n                    variant=\"outline\"\n                    className=\"w-full border-cebleu-purple-300 text-cebleu-purple-800 h-11\"\n                  >\n                    <Store className=\"mr-2 h-5 w-5\" />\n                    {t(\"products.viewShop\")}\n                  </Button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Product Details Tabs */}\n          <div className=\"mt-8\">\n            <Tabs defaultValue=\"description\">\n              <TabsList className=\"w-full border-b mb-6\">\n                <TabsTrigger value=\"description\" className=\"text-base\">\n                  {t(\"products.description\")}\n                </TabsTrigger>\n                <TabsTrigger value=\"specifications\" className=\"text-base\">\n                  {t(\"products.specifications\")}\n                </TabsTrigger>\n                <TabsTrigger value=\"qa\" className=\"text-base\">\n                  {t(\"products.questionsAnswers\")}\n                </TabsTrigger>\n              </TabsList>\n\n              <TabsContent\n                value=\"description\"\n                className=\"text-cebleu-purple-700 space-y-4\"\n              >\n                <h3 className=\"text-xl font-semibold text-cebleu-purple-800\">\n                  {t(\"products.productDescription\")}\n                </h3>\n                <p>\n                  {getPlainText(product.translations?.en?.description || \"\")}\n                </p>\n                <p>\n                  {getPlainText(product.translations?.en?.description || \"\")}\n                </p>{\" \"}\n                {/* Repeated for demo purposes */}\n              </TabsContent>\n\n              <TabsContent\n                value=\"specifications\"\n                className=\"text-cebleu-purple-700\"\n              >\n                <h3 className=\"text-xl font-semibold text-cebleu-purple-800 mb-4\">\n                  {t(\"products.technicalDetails\")}\n                </h3>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex py-2 border-b border-cebleu-purple-100\">\n                      <span className=\"font-medium w-1/3\">\n                        {t(\"products.brand\")}\n                      </span>\n                      <span className=\"w-2/3\">{product.brand}</span>\n                    </div>\n                    <div className=\"flex py-2 border-b border-cebleu-purple-100\">\n                      <span className=\"font-medium w-1/3\">\n                        {t(\"products.category\")}\n                      </span>\n                      <span className=\"w-2/3\">{product.categoryName}</span>\n                    </div>\n                    <div className=\"flex py-2 border-b border-cebleu-purple-100\">\n                      <span className=\"font-medium w-1/3\">\n                        {t(\"products.model\")}\n                      </span>\n                      <span className=\"w-2/3\">XZ-1000</span>\n                    </div>\n                  </div>\n                  <div className=\"space-y-2\">\n                    <div className=\"flex py-2 border-b border-cebleu-purple-100\">\n                      <span className=\"font-medium w-1/3\">\n                        {t(\"products.warranty\")}\n                      </span>\n                      <span className=\"w-2/3\">12 {t(\"products.months\")}</span>\n                    </div>\n                    <div className=\"flex py-2 border-b border-cebleu-purple-100\">\n                      <span className=\"font-medium w-1/3\">\n                        {t(\"products.color\")}\n                      </span>\n                      <span className=\"w-2/3\">Black</span>\n                    </div>\n                    <div className=\"flex py-2 border-b border-cebleu-purple-100\">\n                      <span className=\"font-medium w-1/3\">\n                        {t(\"products.weight\")}\n                      </span>\n                      <span className=\"w-2/3\">0.5 kg</span>\n                    </div>\n                  </div>\n                </div>\n              </TabsContent>\n\n              <TabsContent value=\"qa\">\n                <ProductQA />\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default ProductDetails;\n","size_bytes":14520},"client/src/DummyData/products/ProductFilter.tsx":{"content":"import React, { useState } from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { Filter } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { ExpandedSectionsType } from \"./filters/types\";\nimport FilterSection from \"./filters/FilterSection\";\nimport RatingFilter from \"./filters/RatingFilter\";\nimport SortByFilter from \"./filters/SortByFilter\";\nimport AvailabilityFilter from \"./filters/AvailabilityFilter\";\nimport ShippingFilter from \"./filters/ShippingFilter\";\nimport DeliveryFilter from \"./filters/DeliveryFilter\";\nimport RefreshRateFilter from \"./filters/RefreshRateFilter\";\nimport PriceFilter from \"./filters/PriceFilter\";\nimport PromotionsFilter from \"./filters/PromotionsFilter\";\nimport ScreenSizeFilter from \"./filters/ScreenSizeFilter\";\nimport ResolutionFilter from \"./filters/ResolutionFilter\";\n\nconst ProductFilter = () => {\n  const [priceRange, setPriceRange] = useState([0, 12500]);\n  const [expandedSections, setExpandedSections] =\n    useState<ExpandedSectionsType>({\n      price: true,\n      shipping: true,\n      delivery: true,\n      rating: true,\n      refreshRate: false,\n      screenSize: false,\n      resolution: false,\n      promotions: false,\n      availability: false,\n      brand: false,\n      sort: true,\n    });\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  const toggleSection = (section: string) => {\n    setExpandedSections({\n      ...expandedSections,\n      [section]: !expandedSections[section as keyof typeof expandedSections],\n    });\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      <FilterSection\n        title={t(\"products.rating\")}\n        section=\"rating\"\n        isExpanded={expandedSections.rating}\n        toggleSection={toggleSection}\n      >\n        <RatingFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.sortBy\")}\n        section=\"sort\"\n        isExpanded={expandedSections.sort}\n        toggleSection={toggleSection}\n      >\n        <SortByFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.availability\")}\n        section=\"availability\"\n        isExpanded={expandedSections.availability}\n        toggleSection={toggleSection}\n      >\n        <AvailabilityFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.freeShipping\")}\n        section=\"shipping\"\n        isExpanded={expandedSections.shipping}\n        toggleSection={toggleSection}\n      >\n        <ShippingFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.deliveryDay\")}\n        section=\"delivery\"\n        isExpanded={expandedSections.delivery}\n        toggleSection={toggleSection}\n      >\n        <DeliveryFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.refreshRate\")}\n        section=\"refreshRate\"\n        isExpanded={expandedSections.refreshRate}\n        toggleSection={toggleSection}\n      >\n        <RefreshRateFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.price\")}\n        section=\"price\"\n        isExpanded={expandedSections.price}\n        toggleSection={toggleSection}\n      >\n        <PriceFilter priceRange={priceRange} setPriceRange={setPriceRange} />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.promotions\")}\n        section=\"promotions\"\n        isExpanded={expandedSections.promotions}\n        toggleSection={toggleSection}\n      >\n        <PromotionsFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.screenSize\")}\n        section=\"screenSize\"\n        isExpanded={expandedSections.screenSize}\n        toggleSection={toggleSection}\n      >\n        <ScreenSizeFilter />\n      </FilterSection>\n\n      <Separator className=\"bg-cebleu-purple-100/50\" />\n\n      <FilterSection\n        title={t(\"products.resolution\")}\n        section=\"resolution\"\n        isExpanded={expandedSections.resolution}\n        toggleSection={toggleSection}\n      >\n        <ResolutionFilter />\n      </FilterSection>\n\n      <div className=\"mt-6\">\n        <Button className=\"w-full bg-cebleu-purple-700 hover:bg-cebleu-purple-800 text-white font-medium shadow-sm hover:shadow-md transition-all duration-300\">\n          {t(\"products.apply\")}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductFilter;\n","size_bytes":4910},"client/src/DummyData/products/ProductGrid.tsx":{"content":"import React, { useState } from \"react\";\n// import { Product } from \"@/types/product\";\nimport ProductCard from \"./ProductCard\";\nimport ProductDetails from \"./ProductDetails\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { Product } from \"./interface/product\";\n// export interface Product {\n//   id: number;\n//   name: string;\n//   shopName: string;\n//   rating: number;\n//   reviews: number;\n//   category: string;\n//   image: string;\n//   images?: { url: string }[]; // Added optional images array\n//   price: string;\n//   currency: string;\n//   description: string;\n//   badges: string[];\n//   delivery: string;\n// }\n\ninterface ProductGridProps {\n  products: Product[];\n}\n\nexport const ProductGrid: React.FC<ProductGridProps> = ({ products }) => {\n  const [selectedProduct, setSelectedProduct] = useState<Product | null>(null);\n  const isMobile = useIsMobile();\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  const handleProductSelect = (product: Product) => {\n    setSelectedProduct(product);\n  };\n\n  const handleCloseDetails = () => {\n    setSelectedProduct(null);\n  };\n\n  // Prepare products with proper image arrays\n  // const productsWithImages = products.map((product) => ({\n  //   ...product,\n  //   images: product.images || [\n  //     product.image ||\n  //       `https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //     `https://images.unsplash.com/photo-1518770660439-4636190af475?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //     `https://images.unsplash.com/photo-1531297484001-80022131f5a1?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //     `https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //     `https://images.unsplash.com/photo-1498049794561-7780e7231661?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //     `https://images.unsplash.com/photo-1603302576837-37561b2e2302?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //     `https://images.unsplash.com/photo-1484788984921-03950022c9ef?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //     `https://images.unsplash.com/photo-1555421689-491a97ff2040?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n  //   ],\n  // }));\n\n  const productsWithImages = products.map((product) => ({\n    ...product,\n    images: product.images\n      ? product.images\n      : [\n          {\n            url:\n              product.image ||\n              `https://images.unsplash.com/photo-1488590528505-98d2b5aba04b?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n          {\n            url: `https://images.unsplash.com/photo-1518770660439-4636190af475?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n          {\n            url: `https://images.unsplash.com/photo-1531297484001-80022131f5a1?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n          {\n            url: `https://images.unsplash.com/photo-1460925895917-afdab827c52f?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n          {\n            url: `https://images.unsplash.com/photo-1498049794561-7780e7231661?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n          {\n            url: `https://images.unsplash.com/photo-1603302576837-37561b2e2302?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n          {\n            url: `https://images.unsplash.com/photo-1484788984921-03950022c9ef?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n          {\n            url: `https://images.unsplash.com/photo-1555421689-491a97ff2040?w=800&q=80&auto=format&fit=crop&random=${product.id}`,\n          },\n        ],\n  }));\n\n  return (\n    <>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-5 sm:gap-6 md:gap-7\">\n        {productsWithImages.map((product) => (\n          <div\n            key={product.id}\n            className=\"animate-fade-in transform hover:-translate-y-1 transition-transform duration-300\"\n          >\n            <ProductCard\n              product={product}\n              onSelect={handleProductSelect}\n              compact={isMobile}\n            />\n          </div>\n        ))}\n      </div>\n\n      <ProductDetails\n        product={selectedProduct}\n        open={!!selectedProduct}\n        onClose={handleCloseDetails}\n      />\n    </>\n  );\n};\n","size_bytes":4583},"client/src/DummyData/products/ProductGroups.tsx":{"content":"import React from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport ProductGroupsSection from \"./sections/ProductGroupsSection\";\nimport FeaturedPromotionsSection from \"./sections/FeaturedPromotionsSection\";\nimport ShoppingGridSection from \"./sections/ShoppingGridSection\";\nimport AdditionalSections from \"./sections/AdditionalSections\";\n\nconst ProductGroups = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n  const isMobile = useIsMobile();\n\n  return (\n    <>\n      {/* Product Groups Section */}\n      <ProductGroupsSection />\n\n      {/* Featured Promotions Section */}\n      <div className=\"bg-cebleu-purple-50/50 py-8 sm:py-12\">\n        <div className=\"container mx-auto px-3 sm:px-4\">\n          <FeaturedPromotionsSection />\n          <ShoppingGridSection />\n          <AdditionalSections />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default ProductGroups;\n","size_bytes":1025},"client/src/DummyData/products/ProductQA.tsx":{"content":"import React, { useState } from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from \"@/components/ui/accordion\";\nimport {\n  ThumbsUp,\n  Search,\n  User,\n  MessageCircle,\n  ChevronDown,\n  ChevronRight,\n} from \"lucide-react\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\nimport { Label } from \"@/components/ui/label\";\n\ninterface Question {\n  id: number;\n  text: string;\n  user: string;\n  date: string;\n  useful: number;\n  responses: Response[];\n}\n\ninterface Response {\n  id: number;\n  text: string;\n  user: string;\n  date: string;\n  useful: number;\n}\n\nconst mockQuestions: Question[] = [\n  {\n    id: 1,\n    text: \"Bonjour il y a t'il quelés des accessoires avec??? Si oui lesquels ?\",\n    user: \"Anna26\",\n    date: \"18/04/2023\",\n    useful: 17,\n    responses: [\n      {\n        id: 101,\n        text: \"non pas d'accessoire avec\",\n        user: \"didier\",\n        date: \"07/05/2023\",\n        useful: 5,\n      },\n    ],\n  },\n  {\n    id: 2,\n    text: \"Je souhaiterai savoir si le fil d'alimentation reste libre ou si l'appareil a un enrouleur automatique pour pouvoir tout ranger ?\",\n    user: \"Gomar\",\n    date: \"10/05/2023\",\n    useful: 10,\n    responses: [\n      {\n        id: 201,\n        text: \"oui, le fil à un enrouleur automatique\",\n        user: \"Emma\",\n        date: \"15/08/2023\",\n        useful: 1,\n      },\n    ],\n  },\n];\n\nconst ProductQA = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n  const [filter, setFilter] = useState(\"most-useful\");\n\n  return (\n    <div className=\"bg-white rounded-lg border border-cebleu-purple-200 overflow-hidden\">\n      <Accordion type=\"single\" collapsible className=\"w-full\">\n        <AccordionItem value=\"qa-section\" className=\"border-b-0\">\n          <AccordionTrigger className=\"px-6 py-4 hover:no-underline bg-cebleu-purple-50/50\">\n            <div className=\"flex items-center space-x-2\">\n              <h3 className=\"text-lg font-medium text-cebleu-purple-800\">\n                {t(\"products.questionsAnswers\")}{\" \"}\n                <span className=\"text-sm font-normal\">\n                  (14 {t(\"products.questions\")})\n                </span>\n              </h3>\n            </div>\n          </AccordionTrigger>\n          <AccordionContent className=\"py-0\">\n            <div className=\"p-6 pt-4 border-t border-cebleu-purple-200/50\">\n              <div className=\"flex gap-6\">\n                <div className=\"w-1/4\">\n                  <div className=\"bg-cebleu-purple-50/50 p-4 rounded-lg\">\n                    <div className=\"flex items-center text-cebleu-purple-700 mb-3\">\n                      <MessageCircle className=\"w-4 h-4 mr-2\" />\n                      <p className=\"text-sm font-medium\">\n                        14 {t(\"products.questions\")} {t(\"products.postedBy\")}{\" \"}\n                        {t(\"products.community\")} {t(\"products.with\")} 13{\" \"}\n                        {t(\"products.havingResponse\")}\n                      </p>\n                    </div>\n\n                    <h4 className=\"font-medium text-sm mb-2\">\n                      {t(\"products.sortQuestions\")}:\n                    </h4>\n                    <RadioGroup defaultValue=\"most-useful\" className=\"mb-4\">\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"most-useful\" id=\"most-useful\" />\n                        <Label htmlFor=\"most-useful\">\n                          {t(\"products.mostUseful\")}\n                        </Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem value=\"most-recent\" id=\"most-recent\" />\n                        <Label htmlFor=\"most-recent\">\n                          {t(\"products.mostRecent\")}\n                        </Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem\n                          value=\"with-answers\"\n                          id=\"with-answers\"\n                        />\n                        <Label htmlFor=\"with-answers\">\n                          {t(\"products.withAnswers\")}\n                        </Label>\n                      </div>\n                      <div className=\"flex items-center space-x-2\">\n                        <RadioGroupItem\n                          value=\"without-answers\"\n                          id=\"without-answers\"\n                        />\n                        <Label htmlFor=\"without-answers\">\n                          {t(\"products.withoutAnswers\")}\n                        </Label>\n                      </div>\n                    </RadioGroup>\n\n                    <Button className=\"w-full bg-cebleu-purple-600\">\n                      {t(\"products.askQuestion\")}\n                    </Button>\n                  </div>\n                </div>\n\n                <div className=\"flex-1\">\n                  <div className=\"relative mb-4\">\n                    <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                    <Input\n                      className=\"pl-10 pr-10 bg-white border-cebleu-purple-200\"\n                      placeholder={t(\"products.searchQuestion\")}\n                    />\n                    {/* X button would be here */}\n                  </div>\n\n                  <div className=\"space-y-8\">\n                    {mockQuestions.map((question) => (\n                      <div key={question.id} className=\"space-y-4\">\n                        <div className=\"bg-cebleu-purple-50/50 p-4 rounded-lg\">\n                          <div className=\"flex items-center justify-between mb-2\">\n                            <div className=\"flex items-center text-cebleu-purple-500 text-sm\">\n                              <ThumbsUp className=\"h-4 w-4 mr-1\" />\n                              {t(\"products.mostUsefulQuestion\")}\n                            </div>\n                            <div className=\"text-lg font-semibold text-cebleu-purple-800\">\n                              {question.responses.length}\n                              <span className=\"text-sm font-normal ml-1\">\n                                {t(\"products.answers\")}\n                              </span>\n                            </div>\n                          </div>\n                          <p className=\"text-cebleu-purple-800\">\n                            {question.text}\n                          </p>\n                        </div>\n\n                        <div className=\"pl-4 border-l-2 border-cebleu-purple-100\">\n                          <div className=\"flex items-center mb-2\">\n                            <User className=\"h-5 w-5 text-cebleu-purple-600 mr-2\" />\n                            <span className=\"text-sm text-cebleu-purple-700\">\n                              {t(\"products.questionPostedBy\")}{\" \"}\n                              <strong>{question.user}</strong>{\" \"}\n                              {t(\"products.on\")} {question.date}\n                            </span>\n                            <div className=\"ml-auto space-x-4\">\n                              <button className=\"text-sm text-cebleu-purple-600 hover:underline\">\n                                {t(\"products.report\")}\n                              </button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"h-7\"\n                              >\n                                <ThumbsUp className=\"h-3 w-3 mr-1\" />{\" \"}\n                                {question.useful}\n                              </Button>\n                            </div>\n                          </div>\n\n                          {question.responses.map((response) => (\n                            <div\n                              key={response.id}\n                              className=\"bg-cebleu-purple-50/30 p-4 rounded-lg mb-4\"\n                            >\n                              <div className=\"flex items-center text-cebleu-purple-500 text-sm mb-2\">\n                                <ThumbsUp className=\"h-4 w-4 mr-1\" />\n                                {t(\"products.mostUsefulAnswer\")}\n                              </div>\n                              <p className=\"text-cebleu-purple-800 mb-2\">\n                                {response.text}\n                              </p>\n                              <div className=\"flex items-center justify-between\">\n                                <span className=\"text-sm text-cebleu-purple-700\">\n                                  {t(\"products.answerPostedBy\")}{\" \"}\n                                  <strong>{response.user}</strong>{\" \"}\n                                  {t(\"products.on\")} {response.date}\n                                </span>\n                                <div className=\"space-x-4\">\n                                  <button className=\"text-sm text-cebleu-purple-600 hover:underline\">\n                                    {t(\"products.report\")}\n                                  </button>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"h-7\"\n                                  >\n                                    <ThumbsUp className=\"h-3 w-3 mr-1\" />{\" \"}\n                                    {response.useful}\n                                  </Button>\n                                </div>\n                              </div>\n                            </div>\n                          ))}\n\n                          <div className=\"flex justify-between text-sm text-cebleu-purple-600\">\n                            <button className=\"flex items-center hover:underline\">\n                              <ChevronDown className=\"h-4 w-4 mr-1\" />\n                              {t(\"products.viewAllAnswers\")}\n                            </button>\n                            <button className=\"flex items-center hover:underline\">\n                              <ChevronDown className=\"h-4 w-4 mr-1\" />\n                              {t(\"products.viewLessInfo\")}\n                            </button>\n                          </div>\n\n                          <div className=\"text-right mt-2\">\n                            <Button\n                              variant=\"outline\"\n                              className=\"text-cebleu-purple-700 border-cebleu-purple-300\"\n                            >\n                              {t(\"products.answerQuestion\")}\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </div>\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  );\n};\n\nexport default ProductQA;\n","size_bytes":11238},"client/src/DummyData/products/ProductShowcase.tsx":{"content":"import React, { useState, useEffect } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  ChevronRight,\n  Filter,\n  ShoppingBag,\n  Laptop,\n  Smartphone,\n  Home,\n  ShoppingCart,\n  Shirt,\n} from \"lucide-react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n// import { products } from \"@/DummyData/data/products\";\nimport { ProductGrid } from \"./ProductGrid\";\n// import ShopCategories from \"../shops/ShopCategories\";\nimport ProductFilter from \"./ProductFilter\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { useQuery } from \"@tanstack/react-query\";\n// Define additional categories\n// const { t } = useTranslation();\n// const additionalCategories = [\n//   { name: t(\"categories.electronics\"), icon: <Laptop className=\"w-5 h-5\" />, count: 4200 },\n//   {\n//     name: t(\"categories.smartphones\"),\n//     icon: <Smartphone className=\"w-5 h-5\" />,\n//     count: 3150,\n//   },\n//   { name: t(\"categories.homeGarden\"), icon: <Home className=\"w-5 h-5\" />, count: 5800 },\n//   { name: t(\"categories.fashion\"), icon: <Shirt className=\"w-5 h-5\" />, count: 7200 },\n//   { name:  t(\"categories.groceries\"), icon: <ShoppingBag className=\"w-5 h-5\" />, count: 2300 },\n//   {\n//     name: t(\"categories.allProducts\"),\n//     icon: <ShoppingCart className=\"w-5 h-5\" />,\n//     count: 24500,\n//   },\n// ];\n\nconst ProductShowcase = () => {\n  const { t } = useTranslation();\n  const isMobile = useIsMobile();\n  const additionalCategories = [\n    { name: t(\"categories.electronics\"), icon: <Laptop className=\"w-5 h-5\" />, count: 4200 },\n    {\n      name: t(\"categories.smartphones\"),\n      icon: <Smartphone className=\"w-5 h-5\" />,\n      count: 3150,\n    },\n    { name: t(\"categories.homeGarden\"), icon: <Home className=\"w-5 h-5\" />, count: 5800 },\n    { name: t(\"categories.fashion\"), icon: <Shirt className=\"w-5 h-5\" />, count: 7200 },\n    { name:  t(\"categories.groceries\"), icon: <ShoppingBag className=\"w-5 h-5\" />, count: 2300 },\n    {\n      name: t(\"categories.allProducts\"),\n      icon: <ShoppingCart className=\"w-5 h-5\" />,\n      count: 24500,\n    },\n  ];\n  \n  // const { t, language } = useLanguage();\n\n  const [filterHeight, setFilterHeight] = useState<number>(0);\n  const [selectedCategory, setSelectedCategory] = useState<string | null>(null);\n  const [activeFilters, setActiveFilters] = useState<number>(0);\n  const { data: products = [] } = useQuery<any[]>({\n    queryKey: [\"/api/products\"],\n    enabled: true,\n  });\n\n  const featuredProducts = products.filter((p) => p.isFeatured);\n  // Adjust filter height to match grid height\n  useEffect(() => {\n    const updateFilterHeight = () => {\n      const gridElement = document.querySelector(\".product-grid-container\");\n      if (gridElement) {\n        const gridHeight = gridElement.clientHeight;\n        setFilterHeight(gridHeight);\n      }\n    };\n\n    // Initial calculation after a slight delay to ensure products are rendered\n    const timer = setTimeout(() => {\n      updateFilterHeight();\n    }, 500);\n\n    // Update on window resize\n    window.addEventListener(\"resize\", updateFilterHeight);\n\n    return () => {\n      clearTimeout(timer);\n      window.removeEventListener(\"resize\", updateFilterHeight);\n    };\n  }, [products, isMobile]);\n\n  return (\n    <div className=\"bg-gradient-to-b from-white to-cebleu-purple-50/40 py-8 sm:py-10 md:py-12 overflow-hidden w-full\">\n      <div className=\"container mx-auto px-3 sm:px-4 max-w-full w-full\">\n        <div className=\"mb-8 md:mb-10 flex flex-col items-center\">\n          <h2 className=\"text-2xl md:text-3xl font-bold text-cebleu-purple-900 mb-3 relative group\">\n            <span className=\"relative inline-block\">\n              {t(\"products.featuredProducts\")}\n              <span className=\"absolute bottom-0 left-0 right-0 h-1 bg-gradient-to-r from-cebleu-gold to-cebleu-gold-light transform scale-x-100 group-hover:scale-x-110 transition-transform duration-300 ease-out\"></span>\n            </span>\n          </h2>\n          <p className=\"text-cebleu-purple-800 text-sm md:text-base max-w-2xl mx-auto text-center\">\n            {t(\"products.discoverUnique\")}\n          </p>\n        </div>\n\n        {/* Additional categories */}\n        <ScrollArea className=\"mb-8 overflow-x-auto pb-4\">\n          <div\n            className=\"flex gap-4 mx-auto\"\n            style={{\n              minWidth: \"max-content\",\n              paddingLeft: \"4px\",\n              paddingRight: \"4px\",\n            }}\n          >\n            {additionalCategories.map((cat, index) => (\n              <div\n                key={index}\n                onClick={() =>\n                  setSelectedCategory(\n                    cat.name === selectedCategory ? null : cat.name,\n                  )\n                }\n                className={`flex flex-col items-center px-4 py-3 rounded-lg cursor-pointer transition-all duration-300 min-w-[100px] \n                  ${\n                    selectedCategory === cat.name\n                      ? \"bg-cebleu-purple-100 text-cebleu-purple-900 shadow-md\"\n                      : \"bg-white hover:bg-cebleu-purple-50 text-cebleu-purple-800 shadow-sm\"\n                  }`}\n              >\n                <div\n                  className={`p-2 rounded-full mb-2 ${\n                    selectedCategory === cat.name\n                      ? \"bg-cebleu-purple-200\"\n                      : \"bg-cebleu-purple-50\"\n                  }`}\n                >\n                  {cat.icon}\n                </div>\n                <span className=\"text-sm font-medium\">{cat.name}</span>\n                <span className=\"text-xs text-cebleu-purple-700\">\n                  {cat.count}\n                </span>\n              </div>\n            ))}\n          </div>\n        </ScrollArea>\n\n        <div className=\"flex flex-col lg:flex-row gap-5 md:gap-6 w-full\">\n          {/* Filter sidebar */}\n          <div className=\"w-full lg:w-64 xl:w-72 flex-shrink-0\">\n            <div\n              className=\"lg:sticky lg:top-24\"\n              style={{\n                height:\n                  !isMobile && filterHeight ? `${filterHeight}px` : \"auto\",\n              }}\n            >\n              <div className=\"bg-white p-5 rounded-lg border border-cebleu-purple-100 shadow-sm hover:shadow-md transition-all duration-300\">\n                <div className=\"flex items-center justify-between mb-4 pb-2 border-b border-gray-100\">\n                  <div className=\"flex items-center\">\n                    <Filter className=\"w-5 h-5 text-cebleu-purple-800 mr-2\" />\n                    <h3 className=\"text-lg font-semibold text-cebleu-purple-900\">\n                      {t(\"products.filters\")}\n                    </h3>\n                  </div>\n                  {activeFilters > 0 && (\n                    <div className=\"bg-cebleu-purple-100 text-cebleu-purple-900 text-xs font-medium px-2 py-1 rounded-full\">\n                      {activeFilters} {t(\"products.filtersApplied\")}\n                    </div>\n                  )}\n                </div>\n                <div className=\"h-auto max-h-[calc(100vh-180px)]\">\n                  <ProductFilter />\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* Product grid */}\n          <div className=\"flex-grow min-w-0 product-grid-container w-full\">\n            <ProductGrid\n              products={\n                isMobile ? featuredProducts.slice(0, 6) : featuredProducts\n              }\n            />\n\n            <div className=\"mt-8 md:mt-10 text-center\">\n              <Button className=\"bg-cebleu-purple-900 hover:bg-cebleu-purple-900 text-white font-medium group px-6 py-2.5 h-11 rounded-lg shadow-sm hover:shadow-md transition-all\">\n                {t(\"products.exploreMore\")}\n                <ChevronRight className=\"ml-2 h-4 w-4 group-hover:translate-x-1 transition-transform\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductShowcase;\n","size_bytes":8056},"client/src/DummyData/products/data/productGroupsData.ts":{"content":"import { ReactNode } from \"react\";\nimport { LucideIcon } from \"lucide-react\";\n\nexport interface ProductGroupCardItem {\n  name: string;\n  image: string;\n  consultations?: number;\n}\n\nexport interface ProductGroup {\n  title: string;\n  iconName: \"shopping-bag\" | \"zap\" | \"folder-open\" | \"gift\";\n  items: ProductGroupCardItem[];\n}\n\nexport interface FeaturedSection {\n  title: string;\n  bgColor: string;\n  textColor: string;\n  image: string;\n  link: string;\n  linkText: string;\n}\n\nexport interface TrendingItem {\n  name: string;\n  image: string;\n  price: string;\n  oldPrice?: string;\n}\n\nexport const getProductGroups = (\n  t: (key: string) => string\n): ProductGroup[] => [\n  {\n    title: t(\"products.resumeShopping\"),\n    iconName: \"shopping-bag\",\n    items: [\n      {\n        name: t(\"products.miniRefrigerators\"),\n        image:\n          \"https://images.unsplash.com/photo-1584568694244-14e439b58f31?w=500&q=80&auto=format&fit=crop\",\n        consultations: 3,\n      },\n      {\n        name: t(\"products.smartphones\"),\n        image:\n          \"https://images.unsplash.com/photo-1511707171634-5f897ff02aa9?w=500&q=80&auto=format&fit=crop\",\n        consultations: 1,\n      },\n      {\n        name: t(\"products.officeChairs\"),\n        image:\n          \"https://images.unsplash.com/photo-1580480055273-228ff5388ef8?w=500&q=80&auto=format&fit=crop\",\n        consultations: 3,\n      },\n      {\n        name: t(\"products.books\"),\n        image:\n          \"https://images.unsplash.com/photo-1512820790803-83ca734da794?w=500&q=80&auto=format&fit=crop\",\n        consultations: 1,\n      },\n    ],\n  },\n  {\n    title: t(\"products.flashSales\"),\n    iconName: \"zap\",\n    items: [\n      {\n        name: t(\"products.gamingMonitor\"),\n        image:\n          \"https://images.unsplash.com/photo-1616763355603-6c41b1a4f30b?w=500&q=80&auto=format&fit=crop\",\n      },\n      {\n        name: t(\"products.gamingDesk\"),\n        image:\n          \"https://images.unsplash.com/photo-1605379399642-870262d3d051?w=500&q=80&auto=format&fit=crop\",\n      },\n      {\n        name: t(\"products.gamingMouse\"),\n        image:\n          \"https://images.unsplash.com/photo-1615663245857-ac93bb7c39e7?w=500&q=80&auto=format&fit=crop\",\n      },\n      {\n        name: t(\"products.gamingHeadphones\"),\n        image:\n          \"https://images.unsplash.com/photo-1583394838336-acd977736f90?w=500&q=80&auto=format&fit=crop\",\n      },\n    ],\n  },\n  {\n    title: t(\"products.categoriesToExplore\"),\n    iconName: \"folder-open\",\n    items: [\n      {\n        name: t(\"products.gamingMouse\"),\n        image:\n          \"https://images.unsplash.com/photo-1615663245857-ac93bb7c39e7?w=500&q=80&auto=format&fit=crop\",\n      },\n      {\n        name: t(\"products.motherboards\"),\n        image:\n          \"https://images.unsplash.com/photo-1518770660439-4636190af475?w=500&q=80&auto=format&fit=crop\",\n      },\n      {\n        name: t(\"products.ram\"),\n        image:\n          \"https://images.unsplash.com/photo-1562976540-1502c2145186?w=500&q=80&auto=format&fit=crop\",\n      },\n      {\n        name: t(\"products.internalStorage\"),\n        image:\n          \"https://images.unsplash.com/photo-1600348712459-d11aac4be94e?w=500&q=80&auto=format&fit=crop\",\n      },\n    ],\n  },\n];\n\nexport const getFeaturedSections = (t: (key: string) => string) => [\n  {\n    title: `${t(\"header.deals\")} - 25€ ${t(\"products.offersFor\")} 25000 ${t(\n      \"products.clients\"\n    )}`,\n    bgColor: \"bg-gradient-to-r from-indigo-700 to-indigo-600\",\n    textColor: \"text-white\",\n    image:\n      \"https://images.unsplash.com/photo-1556742502-ec7c0e9f34b1?w=500&q=80&auto=format&fit=crop\",\n    link: \"/deals\",\n    linkText: t(\"products.viewConditions\"),\n  },\n  {\n    title: `${t(\"products.flashSales\")} - 25 ${t(\"products.anniversary\")}`,\n    bgColor: \"bg-gradient-to-br from-white to-cebleu-purple-50\",\n    textColor: \"text-gray-800\",\n    image:\n      \"https://images.unsplash.com/photo-1555529669-e69e7aa0ba9a?w=500&q=80&auto=format&fit=crop\",\n    link: \"/anniversary\",\n    linkText: t(\"products.learnMore\"),\n  },\n  {\n    title: t(\"products.frenchShowcase\"),\n    bgColor: \"bg-gradient-to-r from-red-500 to-red-600\",\n    textColor: \"text-white\",\n    image:\n      \"https://images.unsplash.com/photo-1519741497674-611481863552?w=500&q=80&auto=format&fit=crop\",\n    link: \"/french-products\",\n    linkText: t(\"products.learnMore\"),\n  },\n];\n\nexport const getTrendingItems = (t: (key: string) => string) => [\n  {\n    name: 'KTC 32\" Gaming Monitor',\n    image:\n      \"https://images.unsplash.com/photo-1616763355548-1b606f439f86?w=500&q=80&auto=format&fit=crop\",\n    price: \"199.99€\",\n    oldPrice: \"249.99€\",\n  },\n  {\n    name: t(\"products.blackLeggings\"),\n    image:\n      \"https://images.unsplash.com/photo-1539185441755-769473a23570?w=500&q=80&auto=format&fit=crop\",\n    price: \"29.99€\",\n    oldPrice: \"39.99€\",\n  },\n  {\n    name: t(\"products.miniRefrigerator\"),\n    image:\n      \"https://images.unsplash.com/photo-1584568694244-14e439b58f31?w=500&q=80&auto=format&fit=crop\",\n    price: \"159.90€\",\n    oldPrice: \"189.90€\",\n  },\n  {\n    name: `BuyWeek Mini ${t(\"products.miniRefrigerator\")}`,\n    image:\n      \"https://images.unsplash.com/photo-1638864616275-9f0b291a2eb2?w=500&q=80&auto=format&fit=crop\",\n    price: \"30.99€\",\n    oldPrice: \"45.99€\",\n  },\n];\n\nexport const getSuggestionItems = (t: (key: string) => string) => [\n  {\n    name: t(\"products.blackBackpack\"),\n    image:\n      \"https://images.unsplash.com/photo-1553062407-98eeb64c6a62?w=500&q=80&auto=format&fit=crop\",\n  },\n  {\n    name: t(\"products.mathsBook\"),\n    image:\n      \"https://images.unsplash.com/photo-1621944190310-e3cca1564bd7?w=500&q=80&auto=format&fit=crop\",\n  },\n  {\n    name: t(\"products.bluetoothSpeaker\"),\n    image:\n      \"https://images.unsplash.com/photo-1589003077984-894e762f8a5e?w=500&q=80&auto=format&fit=crop\",\n  },\n  {\n    name: t(\"products.childrenBook\"),\n    image:\n      \"https://images.unsplash.com/photo-1594280813511-69170c9c271c?w=500&q=80&auto=format&fit=crop\",\n  },\n  {\n    name: t(\"products.cordlessVacuum\"),\n    image:\n      \"https://images.unsplash.com/photo-1558317374-067fb5f30001?w=500&q=80&auto=format&fit=crop\",\n  },\n  {\n    name: t(\"products.smartWatch\"),\n    image:\n      \"https://images.unsplash.com/photo-1579586337278-3befd40fd17a?w=500&q=80&auto=format&fit=crop\",\n  },\n  {\n    name: t(\"products.wirelessEarbuds\"),\n    image:\n      \"https://images.unsplash.com/photo-1590658268037-6bf12165a8df?w=500&q=80&auto=format&fit=crop\",\n  },\n  {\n    name: t(\"products.yogaMat\"),\n    image:\n      \"https://images.unsplash.com/photo-1601925260368-ae2f83cf8b7f?w=500&q=80&auto=format&fit=crop\",\n  },\n];\n","size_bytes":6631},"client/src/DummyData/products/filters/AvailabilityFilter.tsx":{"content":"import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst AvailabilityFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"flex items-start space-x-2 mb-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\">\n      <Checkbox\n        id=\"inStock\"\n        className=\"mt-0.5 data-[state=checked]:bg-cebleu-purple-600\"\n      />\n      <div className=\"grid gap-1.5\">\n        <label\n          htmlFor=\"inStock\"\n          className=\"text-xs font-medium leading-none cursor-pointer peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n        >\n          {t(\"products.inStock\")}\n        </label>\n      </div>\n    </div>\n  );\n};\n\nexport default AvailabilityFilter;\n","size_bytes":862},"client/src/DummyData/products/filters/DeliveryFilter.tsx":{"content":"import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Truck } from \"lucide-react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst DeliveryFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\">\n        <Checkbox\n          id=\"receiveTomorrow\"\n          className=\"data-[state=checked]:bg-cebleu-purple-600\"\n        />\n        <label\n          htmlFor=\"receiveTomorrow\"\n          className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n        >\n          {t(\"products.receiveTomorrow\")}\n        </label>\n      </div>\n\n      <div className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\">\n        <Checkbox\n          id=\"expressDelivery\"\n          className=\"data-[state=checked]:bg-cebleu-purple-600\"\n        />\n        <div className=\"flex items-center\">\n          <Truck className=\"h-3.5 w-3.5 text-cebleu-purple-600 mr-1\" />\n          <label\n            htmlFor=\"expressDelivery\"\n            className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n          >\n            {t(\"products.expressDelivery\")}\n          </label>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default DeliveryFilter;\n","size_bytes":1548},"client/src/DummyData/products/filters/FilterSection.tsx":{"content":"\nimport React from 'react';\nimport { FilterSectionProps } from './types';\nimport FilterSectionHeader from './FilterSectionHeader';\n\nconst FilterSection = ({ title, section, isExpanded, toggleSection, children }: FilterSectionProps) => {\n  return (\n    <div>\n      <FilterSectionHeader \n        title={title}\n        section={section}\n        isExpanded={isExpanded}\n        toggleSection={toggleSection}\n      />\n      {isExpanded && (\n        <div className=\"pt-2 pl-1 space-y-2\">\n          {children}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FilterSection;\n","size_bytes":577},"client/src/DummyData/products/filters/FilterSectionHeader.tsx":{"content":"\nimport React from 'react';\nimport { ChevronDown, ChevronUp } from 'lucide-react';\n\ninterface FilterSectionHeaderProps {\n  title: string;\n  section: string;\n  isExpanded: boolean;\n  toggleSection: (section: string) => void;\n}\n\nconst FilterSectionHeader = ({ title, section, isExpanded, toggleSection }: FilterSectionHeaderProps) => {\n  return (\n    <button\n      className=\"flex items-center justify-between w-full py-2.5 cursor-pointer hover:bg-cebleu-purple-50/50 px-2 rounded-md transition-colors duration-200\"\n      onClick={() => toggleSection(section)}\n    >\n      <span className=\"font-medium text-sm text-cebleu-purple-800\">\n        {title}\n      </span>\n      {isExpanded ? (\n        <ChevronUp className=\"h-4 w-4 text-cebleu-purple-600\" />\n      ) : (\n        <ChevronDown className=\"h-4 w-4 text-cebleu-purple-600\" />\n      )}\n    </button>\n  );\n};\n\nexport default FilterSectionHeader;\n","size_bytes":897},"client/src/DummyData/products/filters/PriceFilter.tsx":{"content":"import React from \"react\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\ninterface PriceFilterProps {\n  priceRange: number[];\n  setPriceRange: (value: number[]) => void;\n}\n\nconst PriceFilter = ({ priceRange, setPriceRange }: PriceFilterProps) => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <div className=\"mb-4 px-2\">\n        <Slider\n          defaultValue={[0, 12500]}\n          max={20000}\n          step={100}\n          value={priceRange}\n          onValueChange={setPriceRange}\n          className=\"my-6\"\n        />\n        <div className=\"flex justify-between mt-1\">\n          <span className=\"text-xs font-medium text-cebleu-purple-600\">\n            {priceRange[0]}€\n          </span>\n          <span className=\"text-xs font-medium text-cebleu-purple-600\">\n            {priceRange[1] === 12500\n              ? `12500€ ${t(\"products.andMore\")}`\n              : `${priceRange[1]}€`}\n          </span>\n        </div>\n      </div>\n\n      <div className=\"space-y-0.5\">\n        {[\n          { id: \"under25\", label: `${t(\"products.upTo\")} 25€` },\n          { id: \"25to50\", label: \"25€ - 50€\" },\n          { id: \"50to100\", label: \"50€ - 100€\" },\n          { id: \"100to200\", label: \"100€ - 200€\" },\n          { id: \"200plus\", label: `200€ ${t(\"products.andMore\")}` },\n        ].map((item) => (\n          <div\n            key={item.id}\n            className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\"\n          >\n            <Checkbox\n              id={item.id}\n              className=\"data-[state=checked]:bg-cebleu-purple-600\"\n            />\n            <label\n              htmlFor={item.id}\n              className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n            >\n              {item.label}\n            </label>\n          </div>\n        ))}\n      </div>\n    </>\n  );\n};\n\nexport default PriceFilter;\n","size_bytes":2184},"client/src/DummyData/products/filters/PromotionsFilter.tsx":{"content":"import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst PromotionsFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {[\n        { id: \"allDiscounts\", label: t(\"products.allDiscounts\") },\n        { id: \"flashSales\", label: t(\"products.flashSales\") },\n      ].map((item) => (\n        <div\n          key={item.id}\n          className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\"\n        >\n          <Checkbox\n            id={item.id}\n            className=\"data-[state=checked]:bg-cebleu-purple-600\"\n          />\n          <label\n            htmlFor={item.id}\n            className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n          >\n            {item.label}\n          </label>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default PromotionsFilter;\n","size_bytes":1053},"client/src/DummyData/products/filters/RatingFilter.tsx":{"content":"import React from \"react\";\nimport { Star } from \"lucide-react\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst RatingFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <RadioGroup defaultValue=\"all\">\n      {[5, 4, 3, 2, 1].map((rating) => (\n        <div\n          key={rating}\n          className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\"\n        >\n          <RadioGroupItem\n            value={`${rating}`}\n            id={`rating-${rating}`}\n            className=\"text-cebleu-purple-600\"\n          />\n          <label\n            htmlFor={`rating-${rating}`}\n            className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700 flex items-center\"\n          >\n            {Array(rating)\n              .fill(0)\n              .map((_, i) => (\n                <Star\n                  key={i}\n                  className=\"h-3.5 w-3.5 fill-cebleu-gold text-cebleu-gold mr-0.5\"\n                />\n              ))}\n            {Array(5 - rating)\n              .fill(0)\n              .map((_, i) => (\n                <Star key={i} className=\"h-3.5 w-3.5 text-gray-300 mr-0.5\" />\n              ))}\n            <span className=\"ml-1\">{t(\"products.andMore\")}</span>\n          </label>\n        </div>\n      ))}\n    </RadioGroup>\n  );\n};\n\nexport default RatingFilter;\n","size_bytes":1549},"client/src/DummyData/products/filters/RefreshRateFilter.tsx":{"content":"import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst RefreshRateFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {[60, 120, 144].map((rate) => (\n        <div\n          key={rate}\n          className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\"\n        >\n          <Checkbox\n            id={`${rate}hz`}\n            className=\"data-[state=checked]:bg-cebleu-purple-600\"\n          />\n          <label\n            htmlFor={`${rate}hz`}\n            className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n          >\n            {rate}Hz {t(\"products.andMore\")}\n          </label>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default RefreshRateFilter;\n","size_bytes":955},"client/src/DummyData/products/filters/ResolutionFilter.tsx":{"content":"import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst ResolutionFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {[\n        { id: \"hd\", label: \"720p HD\" },\n        { id: \"fullhd\", label: \"1080p Full HD\" },\n        { id: \"2k\", label: \"1440p QHD\" },\n        { id: \"4k\", label: \"4K UHD\" },\n      ].map((item) => (\n        <div\n          key={item.id}\n          className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\"\n        >\n          <Checkbox\n            id={item.id}\n            className=\"data-[state=checked]:bg-cebleu-purple-600\"\n          />\n          <label\n            htmlFor={item.id}\n            className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n          >\n            {item.label}\n          </label>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default ResolutionFilter;\n","size_bytes":1094},"client/src/DummyData/products/filters/ScreenSizeFilter.tsx":{"content":"import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst ScreenSizeFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {[21, 24, 27, 32].map((size) => (\n        <div\n          key={size}\n          className=\"flex items-center space-x-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\"\n        >\n          <Checkbox\n            id={`size${size}`}\n            className=\"data-[state=checked]:bg-cebleu-purple-600\"\n          />\n          <label\n            htmlFor={`size${size}`}\n            className=\"text-xs font-medium cursor-pointer leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n          >\n            {size}\" {t(\"products.andMore\")}\n          </label>\n        </div>\n      ))}\n    </>\n  );\n};\n\nexport default ScreenSizeFilter;\n","size_bytes":958},"client/src/DummyData/products/filters/ShippingFilter.tsx":{"content":"import React from \"react\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst ShippingFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"flex items-start space-x-2 mb-2 hover:bg-cebleu-purple-50/30 p-2 rounded-md transition-colors\">\n      <Checkbox\n        id=\"freeShipping\"\n        className=\"mt-0.5 data-[state=checked]:bg-cebleu-purple-600\"\n      />\n      <div className=\"grid gap-1.5\">\n        <label\n          htmlFor=\"freeShipping\"\n          className=\"text-xs font-medium leading-none cursor-pointer peer-disabled:cursor-not-allowed peer-disabled:opacity-70 text-cebleu-purple-700\"\n        >\n          {t(\"products.freeShippingFilter\")}\n        </label>\n        <p className=\"text-[10px] text-cebleu-purple-500\">\n          {t(\"products.freeShippingDestination\")}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default ShippingFilter;\n","size_bytes":997},"client/src/DummyData/products/filters/SortByFilter.tsx":{"content":"import React from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nconst SortByFilter = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Select>\n      <SelectTrigger className=\"w-full text-xs h-8\">\n        <SelectValue placeholder={t(\"products.sortByPopularity\")} />\n      </SelectTrigger>\n      <SelectContent>\n        <SelectItem value=\"popularity\">\n          {t(\"products.sortByPopularity\")}\n        </SelectItem>\n        <SelectItem value=\"newest\">{t(\"products.sortNewest\")}</SelectItem>\n        <SelectItem value=\"high-to-low\">\n          {t(\"products.sortHighToLow\")}\n        </SelectItem>\n        <SelectItem value=\"low-to-high\">\n          {t(\"products.sortLowToHigh\")}\n        </SelectItem>\n      </SelectContent>\n    </Select>\n  );\n};\n\nexport default SortByFilter;\n","size_bytes":968},"client/src/DummyData/products/filters/types.ts":{"content":"\nexport interface FilterSectionProps {\n  title: string;\n  section: string;\n  isExpanded: boolean;\n  toggleSection: (section: string) => void;\n  children: React.ReactNode;\n}\n\nexport type ExpandedSectionsType = {\n  price: boolean;\n  shipping: boolean;\n  delivery: boolean;\n  rating: boolean;\n  refreshRate: boolean;\n  screenSize: boolean;\n  resolution: boolean;\n  promotions: boolean;\n  availability: boolean;\n  brand: boolean;\n  sort: boolean;\n};\n","size_bytes":446},"client/src/DummyData/products/interface/product.tsx":{"content":"export interface Product {\n  id: number;\n  name: string;\n  brand: string;\n  rating: number;\n  reviews: number;\n  category: string;\n  categoryName: string;\n  image: string;\n  images?: { url: string }[];\n  price: string;\n  currency: string;\n  description: string;\n  badges: string[];\n  delivery: string;\n  translations: {\n    [key: string]: {\n      name: string;\n      description: string;\n      category: string;\n    };\n  };\n}\n","size_bytes":426},"client/src/DummyData/products/sections/AdditionalSections.tsx":{"content":"import React from \"react\";\nimport { Gift } from \"lucide-react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport GiftIdeas from \"./GiftIdeas\";\nimport ProductSuggestions from \"./ProductSuggestions\";\nimport { getSuggestionItems } from \"../data/productGroupsData\";\n\nconst AdditionalSections = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n  const suggestionItems = getSuggestionItems(t);\n\n  return (\n    <>\n      {/* Gift Ideas Section */}\n      <div className=\"mt-8\">\n        <GiftIdeas\n          items={suggestionItems.slice(0, 5)}\n          icon={<Gift className=\"h-5 w-5 text-cebleu-gold\" />}\n        />\n      </div>\n\n      {/* You Might Also Like Section */}\n      <div className=\"mt-8 mb-8\">\n        <ProductSuggestions />\n      </div>\n    </>\n  );\n};\n\nexport default AdditionalSections;\n","size_bytes":888},"client/src/DummyData/products/sections/CodingPromotion.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst CodingPromotion = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md p-5 hover:shadow-lg transition-all duration-300\">\n      <h3 className=\"font-bold text-lg text-cebleu-purple-800 mb-2\">\n        {t(\"products.learnCoding\")}\n      </h3>\n      <div className=\"flex flex-col md:flex-row lg:flex-col gap-4\">\n        <div className=\"flex-1\">\n          <p className=\"text-sm text-gray-700 mb-2\">\n            {t(\"products.freeCodingCourse\")}\n          </p>\n          <Button\n            variant=\"link\"\n            className=\"p-0 text-sm text-cebleu-purple-600 font-medium\"\n          >\n            {t(\"products.learnMore\")}\n          </Button>\n        </div>\n        <div className=\"flex-1\">\n          <img\n            src=\"https://images.unsplash.com/photo-1516116216624-53e697fedbea?w=500&q=80\"\n            alt=\"Coding\"\n            className=\"w-full h-28 object-cover rounded-lg\"\n            loading=\"lazy\"\n          />\n        </div>\n      </div>\n\n      <div className=\"mt-6 p-4 border border-gray-100 rounded-lg\">\n        <div className=\"flex items-center\">\n          <div className=\"flex-1\">\n            <h4 className=\"text-lg font-medium uppercase text-gray-800\">\n              KRUPS\n            </h4>\n            <p className=\"text-xs text-gray-600 italic mt-1\">\n              {t(\"products.createdForTaste\")}\n            </p>\n            <div className=\"flex items-center mt-2\">\n              <div className=\"flex items-center\">\n                <span className=\"text-yellow-500\">★★★★☆</span>\n              </div>\n              <span className=\"text-xs ml-1\">551</span>\n            </div>\n            <p className=\"font-bold mt-2\">525,00€</p>\n          </div>\n          <div className=\"w-24 h-24\">\n            <img\n              src=\"https://images.unsplash.com/photo-1570354930395-5179aa201e14?w=500&q=80\"\n              alt=\"Coffee machine\"\n              className=\"w-full h-full object-contain\"\n              loading=\"lazy\"\n            />\n          </div>\n        </div>\n        <p className=\"text-xs text-gray-500 text-right mt-1\">\n          {t(\"products.sponsored\")}\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport default CodingPromotion;\n","size_bytes":2404},"client/src/DummyData/products/sections/ContinueShopping.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingCart } from \"lucide-react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst ContinueShopping = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-br from-cebleu-purple-50 to-white p-5 rounded-lg shadow-md hover:shadow-lg transition-all duration-300\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"font-bold text-lg text-cebleu-purple-800 flex items-center\">\n          <ShoppingCart className=\"w-4 h-4 mr-2 text-cebleu-gold\" />\n          {t(\"products.continueShoppingTitle\")}\n        </h3>\n      </div>\n\n      <div className=\"mt-4 space-y-4\">\n        <div className=\"flex items-center gap-3 group cursor-pointer hover:bg-cebleu-purple-50 p-2 rounded-lg transition-all\">\n          <div className=\"w-16 h-16 border border-gray-200 rounded-md overflow-hidden\">\n            <img\n              src=\"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500&q=80\"\n              alt=\"Wireless Headphones\"\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-all\"\n            />\n          </div>\n          <div>\n            <h4 className=\"text-sm font-medium\">Wireless Headphones</h4>\n            <p className=\"text-xs text-gray-500\">Premium Sound Quality</p>\n            <p className=\"text-sm font-bold text-cebleu-purple-800 mt-1\">\n              €129.99\n            </p>\n          </div>\n        </div>\n\n        <div className=\"flex items-center gap-3 group cursor-pointer hover:bg-cebleu-purple-50 p-2 rounded-lg transition-all\">\n          <div className=\"w-16 h-16 border border-gray-200 rounded-md overflow-hidden\">\n            <img\n              src=\"https://images.unsplash.com/photo-1546868871-7041f2a55e12?w=500&q=80\"\n              alt=\"Smart Watch\"\n              className=\"w-full h-full object-cover group-hover:scale-105 transition-all\"\n            />\n          </div>\n          <div>\n            <h4 className=\"text-sm font-medium\">Smart Watch Series 7</h4>\n            <p className=\"text-xs text-gray-500\">Fitness Tracker + GPS</p>\n            <p className=\"text-sm font-bold text-cebleu-purple-800 mt-1\">\n              €199.99\n            </p>\n          </div>\n        </div>\n\n        <div className=\"mt-6 text-center\">\n          <Button\n            variant=\"outline\"\n            className=\"w-full border-cebleu-purple-300 text-cebleu-purple-700 hover:bg-cebleu-purple-50\"\n          >\n            {t(\"products.viewMore\")}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ContinueShopping;\n","size_bytes":2713},"client/src/DummyData/products/sections/FeaturedPromotions.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { ArrowRight, BadgePercent } from \"lucide-react\";\n\ninterface FeaturedSection {\n  title: string;\n  bgColor: string;\n  textColor: string;\n  image: string;\n  link: string;\n  linkText: string;\n}\n\ninterface FeaturedPromotionsProps {\n  featuredSections: FeaturedSection[];\n}\n\nconst FeaturedPromotions = ({ featuredSections }: FeaturedPromotionsProps) => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  // Enhanced fallback images with high quality photos\n  const fallbackImages = [\n    \"https://images.unsplash.com/photo-1556742502-ec7c0e9f34b1?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1555529669-e69e7aa0ba9a?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1581539250439-c96689b516dd?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1603384179269-c506545097b5?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1610465299996-30f240ac2b1c?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1532298229144-0ec0c57515c7?w=500&q=80&auto=format&fit=crop\",\n  ];\n\n  // Additional themed promotion images\n  const promotionImages = [\n    \"https://images.unsplash.com/photo-1558089687-f282ffcbc0d4?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1505740420928-5e560c06d30e?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1611186871348-b1ce696e52c9?w=500&q=80&auto=format&fit=crop\",\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 md:gap-6\">\n      {featuredSections.map((section, index) => (\n        <div\n          key={index}\n          className={`${section.bgColor} ${section.textColor} rounded-lg overflow-hidden shadow-md h-full relative hover:shadow-xl transition-all duration-300 group border border-cebleu-purple-100/40`}\n        >\n          <div className=\"absolute top-4 left-4 z-10\">\n            <div className=\"flex items-center gap-1.5 bg-white/90 backdrop-blur-sm rounded-full px-3 py-1 shadow-sm\">\n              <BadgePercent className=\"h-3.5 w-3.5 text-cebleu-gold\" />\n              <span className=\"text-xs font-medium text-cebleu-purple-800\">\n                Special Offer\n              </span>\n            </div>\n          </div>\n\n          <div className=\"p-5 pb-16\">\n            <h3 className=\"font-bold text-lg mb-5 relative\">\n              {section.title}\n              <span className=\"absolute bottom-[-6px] left-0 w-12 h-1 bg-current opacity-50 rounded-full\"></span>\n            </h3>\n            <div className=\"flex justify-center items-center h-48 mb-4 overflow-hidden rounded-md bg-gradient-to-br from-cebleu-purple-50/50 to-cebleu-purple-100/30\">\n              <img\n                src={\n                  section.image ||\n                  promotionImages[index % promotionImages.length] ||\n                  fallbackImages[index % fallbackImages.length]\n                }\n                alt={section.title}\n                className=\"h-full w-full object-cover transition-transform duration-700 group-hover:scale-110\"\n                loading=\"lazy\"\n                onError={(e) => {\n                  // Enhanced fallback image logic\n                  const target = e.target as HTMLImageElement;\n                  const currentSrc = target.src;\n\n                  // First try a themed promotion image if available\n                  if (\n                    index < promotionImages.length &&\n                    currentSrc !== promotionImages[index]\n                  ) {\n                    target.src = promotionImages[index];\n                  }\n                  // Otherwise use one of the general fallback images\n                  else if (\n                    currentSrc !== fallbackImages[index % fallbackImages.length]\n                  ) {\n                    target.src = fallbackImages[index % fallbackImages.length];\n                  }\n                  // If both failed, use the first fallback image\n                  else {\n                    target.src = fallbackImages[0];\n                  }\n                }}\n              />\n            </div>\n            <div className=\"absolute bottom-4 left-5\">\n              <Button\n                variant=\"link\"\n                className={`p-0 flex items-center ${section.textColor} font-medium group-hover:translate-x-1 transition-transform`}\n              >\n                {section.linkText}\n                <ArrowRight className=\"ml-1.5 h-3.5 w-3.5 opacity-80\" />\n              </Button>\n            </div>\n          </div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default FeaturedPromotions;\n","size_bytes":4808},"client/src/DummyData/products/sections/FeaturedPromotionsSection.tsx":{"content":"import React from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport FeaturedPromotions from \"./FeaturedPromotions\";\nimport { getFeaturedSections } from \"../data/productGroupsData\";\n\nconst FeaturedPromotionsSection = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n  const featuredSections = getFeaturedSections(t);\n\n  return (\n    <div className=\"mb-8 text-center\">\n      <h2 className=\"text-2xl font-bold text-cebleu-purple-800 mb-2\">\n        {t(\"products.featuredPromotions\")}\n      </h2>\n      <p className=\"text-cebleu-purple-600 text-sm\">\n        {t(\"products.specialOffers\")}\n      </p>\n      <div className=\"grid grid-cols-1 gap-6 mb-8 mt-8\">\n        <FeaturedPromotions featuredSections={featuredSections} />\n      </div>\n    </div>\n  );\n};\n\nexport default FeaturedPromotionsSection;\n","size_bytes":895},"client/src/DummyData/products/sections/FeaturedSportsItem.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ShoppingBag } from \"lucide-react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst FeaturedSportsItem = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-white p-5 rounded-lg shadow-md hover:shadow-lg transition-all duration-300\">\n      <div className=\"flex items-center justify-between mb-3\">\n        <h3 className=\"font-bold text-lg text-cebleu-purple-800 flex items-center\">\n          <ShoppingBag className=\"w-4 h-4 mr-2 text-cebleu-gold\" />\n          {t(\"products.featuredSports\")}\n        </h3>\n        <span className=\"text-xs text-gray-500\">{t(\"products.sponsored\")}</span>\n      </div>\n      <div className=\"flex items-center justify-center h-64 mt-4 border border-gray-100 rounded-lg p-2 overflow-hidden relative\">\n        <div className=\"absolute top-2 right-2 bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full\">\n          -30%\n        </div>\n        <img\n          src=\"https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=500&q=80\"\n          alt=\"Premium sport shoes\"\n          className=\"max-h-full max-w-full object-contain hover:scale-105 transition-transform duration-300\"\n          loading=\"lazy\"\n        />\n      </div>\n      <div className=\"mt-4\">\n        <h4 className=\"text-sm font-bold\">Premium Running Shoes</h4>\n        <div className=\"flex items-center justify-between mt-2\">\n          <div className=\"flex items-baseline\">\n            <span className=\"text-lg font-bold text-cebleu-purple-800\">\n              €89.99\n            </span>\n            <span className=\"text-sm line-through text-gray-500 ml-2\">\n              €129.99\n            </span>\n          </div>\n          <Button\n            variant=\"link\"\n            className=\"p-0 text-sm text-cebleu-purple-600 font-medium hover:text-cebleu-purple-800\"\n          >\n            {t(\"products.learnMore\")}\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FeaturedSportsItem;\n","size_bytes":2129},"client/src/DummyData/products/sections/GiftIdeas.tsx":{"content":"import React, { useState } from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { ImageOff } from \"lucide-react\";\n\ninterface SuggestionItem {\n  name: string;\n  image: string;\n}\n\ninterface GiftIdeasProps {\n  items: SuggestionItem[];\n  icon?: React.ReactNode;\n}\n\nconst GiftIdeas = ({ items, icon }: GiftIdeasProps) => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  // Fallback images pour les cadeaux\n  const fallbackImages = [\n    \"https://images.unsplash.com/photo-1513885535751-8b9238bd345a?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1549465220-1a8b9238cd48?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1607083206869-4c7672e72a8a?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1515377905703-c4788e51af15?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1557844352-761f2565b576?w=500&q=80&auto=format&fit=crop\",\n  ];\n\n  const handleImageError =\n    (index: number) => (e: React.SyntheticEvent<HTMLImageElement>) => {\n      const target = e.target as HTMLImageElement;\n      target.onerror = null; // Éviter les boucles infinies\n\n      // Utiliser une image de secours basée sur l'index\n      const fallbackIndex = index % fallbackImages.length;\n      target.src = fallbackImages[fallbackIndex];\n\n      // Si le fallback échoue aussi, montrer une image d'erreur stylée\n      target.onerror = () => {\n        // Ajouter la classe pour montrer l'overlay d'erreur\n        const parent = target.parentElement;\n        if (parent) {\n          parent.classList.add(\"image-error\");\n        }\n      };\n    };\n\n  return (\n    <div className=\"bg-white p-5 rounded-lg shadow-md hover:shadow-lg transition-all duration-300\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h3 className=\"font-bold text-lg text-cebleu-purple-800 flex items-center\">\n          {icon && <span className=\"mr-2\">{icon}</span>}\n          {t(\"products.giftIdeasTitle\")}\n        </h3>\n      </div>\n\n      <div className=\"grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-4\">\n        {items.map((item, index) => (\n          <div key={index} className=\"group cursor-pointer\">\n            <div className=\"overflow-hidden rounded-lg border border-gray-200 mb-2 aspect-square relative\">\n              <img\n                src={item.image}\n                alt={item.name}\n                className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n                loading=\"lazy\"\n                onError={handleImageError(index)}\n              />\n              {/* Overlay d'erreur qui s'affiche si toutes les tentatives échouent */}\n              <div className=\"absolute inset-0 flex items-center justify-center bg-cebleu-purple-50/80 opacity-0 pointer-events-none image-error:opacity-100\">\n                <div className=\"text-center\">\n                  <ImageOff className=\"h-8 w-8 text-cebleu-purple-300 mx-auto mb-1\" />\n                  <p className=\"text-xs text-cebleu-purple-400 font-medium\">\n                    {item.name}\n                  </p>\n                </div>\n              </div>\n            </div>\n            <h4 className=\"text-xs font-medium text-center line-clamp-2\">\n              {item.name}\n            </h4>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default GiftIdeas;\n","size_bytes":3458},"client/src/DummyData/products/sections/ProductGroupCard.tsx":{"content":"import React from \"react\";\nimport { Card, CardContent, CardHeader } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ChevronRight,\n  ImageOff,\n  ShoppingBag,\n  Zap,\n  FolderOpen,\n  Gift,\n} from \"lucide-react\";\ninterface ProductGroupCardItem {\n  name: string;\n  image: string;\n  consultations?: number;\n}\ninterface ProductGroupCardProps {\n  title: string;\n  iconName: \"shopping-bag\" | \"zap\" | \"folder-open\" | \"gift\";\n  items: ProductGroupCardItem[];\n  index: number;\n}\nconst ProductGroupCard = ({\n  title,\n  iconName,\n  items,\n  index,\n}: ProductGroupCardProps) => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  // Render the appropriate icon based on the iconName\n  const renderIcon = () => {\n    switch (iconName) {\n      case \"shopping-bag\":\n        return <ShoppingBag className=\"h-5 w-5 text-cebleu-gold\" />;\n      case \"zap\":\n        return (\n          <Zap className=\"h-5 w-5 text-cebleu-gold fill-cebleu-gold-light\" />\n        );\n      case \"folder-open\":\n        return <FolderOpen className=\"h-5 w-5 text-cebleu-gold\" />;\n      case \"gift\":\n        return <Gift className=\"h-5 w-5 text-cebleu-gold\" />;\n      default:\n        return <ShoppingBag className=\"h-5 w-5 text-cebleu-gold\" />;\n    }\n  };\n\n  // Fallback images array for different categories\n  const fallbackImages = [\n    // Tech & Electronics\n    \"https://images.unsplash.com/photo-1588872657578-7efd1f1555ed?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1605810230434-7631ac76ec81?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1518770660439-4636190af475?w=500&q=80&auto=format&fit=crop\",\n    // Home & Furniture\n    \"https://images.unsplash.com/photo-1555041469-a586c61ea9bc?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1616486338812-3dadae4b4ace?w=500&q=80&auto=format&fit=crop\",\n    // Fashion\n    \"https://images.unsplash.com/photo-1617019114583-affb34d1b3cd?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1549062572-544a64fb0c56?w=500&q=80&auto=format&fit=crop\",\n    // Gaming\n    \"https://images.unsplash.com/photo-1600080972464-8e5f35f63d08?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1616763355548-1b606f439f86?w=500&q=80&auto=format&fit=crop\",\n  ];\n  const handleImageError =\n    (idx: number) => (e: React.SyntheticEvent<HTMLImageElement>) => {\n      const target = e.target as HTMLImageElement;\n      const fallbackIndex = idx % fallbackImages.length;\n\n      // First try a category-specific fallback\n      target.src = fallbackImages[fallbackIndex];\n\n      // Add a second error handler in case the fallback itself fails\n      target.onerror = () => {\n        // If the fallback fails, use the first image as a last resort\n        target.src = fallbackImages[0];\n        target.onerror = null; // Prevent infinite error handling loop\n\n        // Show the error placeholder\n        const parent = target.closest(\".image-container\");\n        if (parent) {\n          parent.classList.add(\"image-error\");\n        }\n      };\n    };\n  return (\n    <Card className=\"border-gray-200 h-full shadow-sm hover:shadow-md transition-all duration-300 group overflow-hidden\">\n      <CardHeader className=\"pb-3\">\n        <div className=\"flex items-center\">\n          {renderIcon()}\n          <h3 className=\"font-semibold ml-2 text-cebleu-purple-800\">{title}</h3>\n        </div>\n      </CardHeader>\n\n      <CardContent>\n        <div className=\"grid grid-cols-2 gap-3\">\n          {items.map((item, idx) => (\n            <div key={idx} className=\"group/item cursor-pointer\">\n              <div className=\"relative h-28 md:h-32 rounded-md overflow-hidden mb-2 border border-gray-200 bg-gradient-to-br from-cebleu-purple-50/50 to-cebleu-purple-100/30 image-container\">\n                <img\n                  src={item.image}\n                  alt={item.name}\n                  className=\"w-full h-full object-cover transition-transform duration-300 group-hover/item:scale-110\"\n                  loading=\"lazy\"\n                  onError={handleImageError(idx)}\n                />\n                <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 to-transparent opacity-0 group-hover/item:opacity-100 transition-opacity duration-300\"></div>\n\n                {/* Image loading error placeholder */}\n                <div className=\"absolute inset-0 flex flex-col items-center justify-center bg-cebleu-purple-50/80 opacity-0 image-error:opacity-100 pointer-events-none\">\n                  <ImageOff className=\"w-8 h-8 text-cebleu-purple-300 mb-1\" />\n                  <p className=\"text-xs text-cebleu-purple-400 font-medium px-2 text-center\">\n                    {item.name}\n                  </p>\n                </div>\n              </div>\n              <p className=\"text-xs md:text-sm font-medium line-clamp-2\">\n                {item.name}\n              </p>\n              {item.consultations}\n            </div>\n          ))}\n        </div>\n\n        <Button\n          variant=\"link\"\n          className=\"p-0 mt-4 text-cebleu-purple-600 hover:text-cebleu-purple-900 text-sm\"\n        >\n          <span>{t(\"products.seeAllButton\")}</span>\n          <ChevronRight className=\"ml-1 h-4 w-4\" />\n        </Button>\n      </CardContent>\n    </Card>\n  );\n};\nexport default ProductGroupCard;\n","size_bytes":5467},"client/src/DummyData/products/sections/ProductGroupsSection.tsx":{"content":"import React from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport ProductGroupCard from \"./ProductGroupCard\";\nimport { getProductGroups } from \"../data/productGroupsData\";\n\nconst ProductGroupsSection = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n  const productGroups = getProductGroups(t);\n\n  return (\n    <div className=\"bg-gradient-to-b from-white to-cebleu-purple-50/30 py-8 sm:py-12\">\n      <div className=\"container mx-auto px-3 sm:px-4\">\n        <div className=\"mb-8 text-center\">\n          <h2 className=\"text-2xl font-bold text-cebleu-purple-800 mb-2\">\n            {t(\"products.shopByCategory\")}\n          </h2>\n          <p className=\"text-cebleu-purple-600 text-sm\">\n            {t(\"products.discoverUnique\")}\n          </p>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-5 md:gap-6\">\n          {productGroups.map((group, index) => (\n            <ProductGroupCard\n              key={index}\n              title={group.title}\n              iconName={group.iconName}\n              items={group.items}\n              index={index}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ProductGroupsSection;\n","size_bytes":1288},"client/src/DummyData/products/sections/ProductSuggestions.tsx":{"content":"import React from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\n\nconst ProductSuggestions = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  const photoIds = [\n    \"photo-1556742502-ec7c0e9f34b1\",\n    \"photo-1523275335684-37898b6baf30\",\n    \"photo-1546868871-7041f2a55e12\",\n    \"photo-1585386959984-a4155224a1ad\",\n    \"photo-1600080972464-8e5f35f63d08\",\n    \"photo-1581539250439-c96689b516dd\",\n    \"photo-1560769629-975ec94e6a86\",\n    \"photo-1484704849700-f032a568e944\",\n  ];\n\n  return (\n    <div className=\"bg-white p-5 rounded-lg shadow-md hover:shadow-lg transition-all duration-300\">\n      <h3 className=\"font-bold text-lg text-cebleu-purple-800 mb-5\">\n        {t(\"products.youMayAlsoLike\")}\n      </h3>\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 md:grid-cols-5 lg:grid-cols-8 gap-3\">\n        {photoIds.map((photoId, idx) => (\n          <div\n            key={idx}\n            className=\"cursor-pointer border border-gray-200 rounded-md overflow-hidden hover:shadow-md transition-all duration-300\"\n          >\n            <img\n              src={`https://images.unsplash.com/${photoId}?w=200&q=80`}\n              alt={`Suggested product ${idx + 1}`}\n              className=\"w-full h-24 object-cover\"\n              loading=\"lazy\"\n            />\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ProductSuggestions;\n","size_bytes":1458},"client/src/DummyData/products/sections/ShoppingGridSection.tsx":{"content":"import React from \"react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport ContinueShopping from \"./ContinueShopping\";\nimport FeaturedSportsItem from \"./FeaturedSportsItem\";\nimport TrendingItems from \"./TrendingItems\";\nimport { getTrendingItems } from \"../data/productGroupsData\";\n\nconst ShoppingGridSection = () => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n  const trendingItems = getTrendingItems(t);\n\n  return (\n    <div className=\"mt-8 grid grid-cols-1 lg:grid-cols-4 gap-4 md:gap-6\">\n      {/* First column - Continue Shopping */}\n      <ContinueShopping />\n\n      {/* Second column - Featured Sports Item */}\n      <FeaturedSportsItem />\n\n      {/* Third and Fourth columns - Resume Shopping items */}\n      <div className=\"col-span-1 lg:col-span-2 grid grid-cols-1 sm:grid-cols-2 gap-4 md:gap-6\">\n        <TrendingItems\n          title={t(\"products.resumeShoppingWhere\")}\n          items={trendingItems.slice(0, 2)}\n        />\n\n        <TrendingItems\n          title={t(\"products.resumeShoppingWhere\")}\n          items={trendingItems.slice(2, 4)}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default ShoppingGridSection;\n","size_bytes":1230},"client/src/DummyData/products/sections/TrendingItems.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { Star, Tag, ArrowRight, ShoppingBag } from \"lucide-react\";\n\ninterface TrendingItem {\n  name: string;\n  image: string;\n  price: string;\n  oldPrice?: string;\n}\n\ninterface TrendingItemsProps {\n  title: string;\n  items: TrendingItem[];\n}\n\nconst TrendingItems = ({ title, items }: TrendingItemsProps) => {\n  // const { t } = useLanguage();\n  const { t } = useTranslation();\n\n  // Enhanced collection of fallback images with higher quality selections\n  const fallbackImages = [\n    \"https://images.unsplash.com/photo-1555529669-e69e7aa0ba9a?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1525966222134-fcfa99b8ae77?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1600080972464-8e5f35f63d08?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1546868871-7041f2a55e12?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1585298723682-7115561c51b7?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1600185365926-3a2ce3cdb9eb?w=500&q=80&auto=format&fit=crop\",\n  ];\n\n  // Additional product images for variety\n  const productImages = [\n    \"https://images.unsplash.com/photo-1572635196237-14b3f281503f?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1542291026-7eec264c27ff?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1608571423902-eed4a5ad8108?w=500&q=80&auto=format&fit=crop\",\n    \"https://images.unsplash.com/photo-1583394838336-acd977736f90?w=500&q=80&auto=format&fit=crop\",\n  ];\n\n  return (\n    <div className=\"bg-gradient-to-b from-white to-cebleu-purple-50/30 p-5 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 h-full border border-cebleu-purple-100/40\">\n      <h3 className=\"font-bold text-lg text-cebleu-purple-800 mb-5 flex items-center\">\n        <Tag className=\"w-4 h-4 mr-2 text-cebleu-gold\" />\n        {title}\n      </h3>\n      <div className=\"grid grid-cols-2 gap-4\">\n        {items.map((item, idx) => {\n          // Use a combination of provided image, product images, or fallbacks\n          const imageToUse =\n            item.image && item.image !== \"\"\n              ? item.image\n              : productImages[idx % productImages.length] ||\n                fallbackImages[idx % fallbackImages.length];\n\n          return (\n            <div key={idx} className=\"cursor-pointer group\">\n              <div className=\"mb-2 border border-cebleu-purple-100/50 rounded-md overflow-hidden relative shadow-sm group-hover:shadow-md transition-all duration-300\">\n                {item.oldPrice && (\n                  <div className=\"absolute top-0 right-0 bg-gradient-to-r from-red-500 to-red-600 text-white text-[10px] px-2 py-0.5 rounded-bl-md font-medium z-10\">\n                    {t(\"products.sale\")}\n                  </div>\n                )}\n                <div className=\"h-28 overflow-hidden bg-gradient-to-br from-cebleu-purple-50 to-cebleu-purple-100/30\">\n                  <img\n                    src={imageToUse}\n                    alt={item.name}\n                    className=\"w-full h-full object-cover transition-transform duration-300 group-hover:scale-110\"\n                    loading=\"lazy\"\n                    onError={(e) => {\n                      // Enhanced fallback logic with multiple fallback options\n                      const target = e.target as HTMLImageElement;\n                      const currentSrc = target.src;\n                      const fallbackIndex = idx % fallbackImages.length;\n\n                      // Try the assigned fallback first\n                      if (currentSrc !== fallbackImages[fallbackIndex]) {\n                        target.src = fallbackImages[fallbackIndex];\n                      } else {\n                        // If that fails, use a different fallback\n                        const alternativeFallback =\n                          fallbackImages[\n                            (fallbackIndex + 1) % fallbackImages.length\n                          ];\n                        target.src = alternativeFallback;\n                      }\n                    }}\n                  />\n                </div>\n              </div>\n              <h5 className=\"text-xs font-medium line-clamp-1 group-hover:text-cebleu-purple-700 transition-colors\">\n                {item.name}\n              </h5>\n              <div className=\"flex items-baseline gap-2\">\n                <p className=\"text-sm font-bold text-cebleu-purple-800\">\n                  {item.price}\n                </p>\n                {item.oldPrice && (\n                  <p className=\"text-xs line-through text-gray-500\">\n                    {item.oldPrice}\n                  </p>\n                )}\n              </div>\n              <div className=\"flex items-center mt-1\">\n                <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                <Star className=\"h-3 w-3 fill-yellow-400 text-yellow-400\" />\n                <Star className=\"h-3 w-3 text-gray-300\" />\n                <span className=\"text-[10px] text-gray-500 ml-1\">4.0</span>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n      <div className=\"mt-5 pt-4 border-t border-cebleu-purple-100/40\">\n        <Button\n          variant=\"link\"\n          className=\"p-0 text-sm text-cebleu-purple-600 font-medium hover:text-cebleu-purple-800 hover:translate-x-1 transition-transform flex items-center\"\n        >\n          {t(\"products.viewMore\")}\n          <ArrowRight className=\"h-3.5 w-3.5 ml-1\" />\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TrendingItems;\n","size_bytes":5941},"client/src/DummyData/products/sections/index.ts":{"content":"\nexport { default as ProductGroupCard } from './ProductGroupCard';\nexport { default as FeaturedPromotions } from './FeaturedPromotions';\nexport { default as CodingPromotion } from './CodingPromotion';\nexport { default as ContinueShopping } from './ContinueShopping';\nexport { default as FeaturedSportsItem } from './FeaturedSportsItem';\nexport { default as TrendingItems } from './TrendingItems';\nexport { default as GiftIdeas } from './GiftIdeas';\nexport { default as ProductSuggestions } from './ProductSuggestions';\n","size_bytes":519},"client/src/components/SubComponents/CategoryMenu.tsx":{"content":"import React from \"react\";\nimport {\n  Smartphone,\n  Tv,\n  Monitor,\n  Home,\n  ShoppingBag,\n  Shirt,\n  Heart,\n  Gamepad2,\n  Wrench,\n  Dumbbell,\n  Baby,\n  CircleEllipsis,\n} from \"lucide-react\";\n// import { useLanguage } from '../contexts/LanguageContext';\nimport { useQuery } from \"@tanstack/react-query\";\nconst CategoryMenu = () => {\n  // const { t } = useLanguage();\n\n  // List of categories with their icons and item counts\n  //remove all t() functions\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/categories\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/categories\");\n      if (!res.ok) throw new Error(\"Failed to fetch categories\");\n      return res.json();\n    },\n    enabled: true,\n  });\n\n  // const categories = [\n  //   {\n  //     icon: <Smartphone size={22} />,\n  //     label: \"Phone & Tablets\",\n  //     count: \"4,352 Items\",\n  //   },\n  //   {\n  //     icon: <Tv size={22} />,\n  //     label: \"TV & Tech\",\n  //     count: \"2,817 Items\",\n  //   },\n  //   {\n  //     icon: <Monitor size={22} />,\n  //     label: \"Computers\",\n  //     count: \"3,219 Items\",\n  //   },\n  //   {\n  //     icon: <Home size={22} />,\n  //     label: \"Home, Kitchen & Office\",\n  //     count: \"5,704 Items\",\n  //   },\n  //   {\n  //     icon: <ShoppingBag size={22} />,\n  //     label: \"Appliances\",\n  //     count: \"1,532 Items\",\n  //   },\n  //   {\n  //     icon: <Shirt size={22} />,\n  //     label: \"Clothing & Shoes\",\n  //     count: \"8,932 Items\",\n  //   },\n  //   {\n  //     icon: <Heart size={22} />,\n  //     label: \"Health & Beauty\",\n  //     count: \"4,251 Items\",\n  //   },\n  //   {\n  //     icon: <Gamepad2 size={22} />,\n  //     label: \"Video Games & Consoles\",\n  //     count: \"907 Items\",\n  //   },\n  //   {\n  //     icon: <Wrench size={22} />,\n  //     label: \"DIY & Tools\",\n  //     count: \"3,175 Items\",\n  //   },\n  //   {\n  //     icon: <Dumbbell size={22} />,\n  //     label: \"Sports & Leisure\",\n  //     count: \"2,654 Items\",\n  //   },\n  //   {\n  //     icon: <Baby size={22} />,\n  //     label: \"Baby Toys\",\n  //     count: \"1,849 Items\",\n  //   },\n  //   {\n  //     icon: <CircleEllipsis size={22} />,\n  //     label: \"Other Categories\",\n  //     count: \"10,000+ Items\",\n  //   },\n  // ];\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-xl shadow-md h-full border border-cebleu-purple-200\">\n      <div className=\"px-4 py-3 border-b border-cebleu-purple-200/70\">\n        <h3 className=\"text-lg font-semibold text-cebleu-purple-800\">\n          Categories\n        </h3>\n      </div>\n      <div className=\"py-2 px-2\">\n        {categories.map((category, index) => (\n          <div\n            key={index}\n            className=\"flex items-center justify-between py-2 px-2 mb-1 rounded-lg cursor-pointer transition-all duration-200 hover:bg-cebleu-purple-50 group\"\n          >\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-8 h-8 flex items-center justify-center rounded-full bg-gradient-to-br from-cebleu-purple-50 to-white shadow-sm border border-cebleu-purple-100 group-hover:bg-cebleu-purple-100 group-hover:text-cebleu-purple transition-colors\">\n                {category.icon}\n              </div>\n              <span className=\"text-sm font-medium text-cebleu-purple-800 group-hover:text-cebleu-purple-900\">\n                {category.label}\n              </span>\n            </div>\n            <span className=\"text-xs font-medium text-cebleu-purple-400 group-hover:opacity-100 transition-all\">\n              {category.count}\n            </span>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default CategoryMenu;\n","size_bytes":3678},"client/src/components/SubComponents/ExtendedCategoryMenu copy.tsx":{"content":"import React from \"react\";\n// import { useLanguage } from '../contexts/LanguageContext';\nimport CategoryList from \"@/DummyData/categoryData/CategoryList\";\n// import { useCategoryData } from './categories/CategoryData';\nimport { useQuery } from \"@tanstack/react-query\";\nconst ExtendedCategoryMenu = () => {\n  // const { t } = useLanguage();\n  // const categories = useCategoryData();\n  const { data: categories = [] } = useQuery<any[]>({\n    queryKey: [\"/api/categories\"],\n    queryFn: async () => {\n      const res = await fetch(\"/api/categories\");\n      if (!res.ok) throw new Error(\"Failed to fetch categories\");\n      return res.json();\n    },\n    enabled: true,\n  });\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-xl shadow-md h-full border border-cebleu-purple-200\">\n      <div className=\"px-4 py-2 border-b border-cebleu-purple-200/70\">\n        <h3 className=\"text-base font-semibold text-cebleu-purple-800\">\n          Categories\n        </h3>\n      </div>\n      <CategoryList categories={categories} />\n    </div>\n  );\n};\n\nexport default ExtendedCategoryMenu;\n","size_bytes":1115},"client/src/components/SubComponents/ExtendedCategoryMenu.tsx":{"content":"import { useCategoryData } from \"@/DummyData/categoryData/CategoryData\";\nimport CategoryList from \"@/DummyData/categoryData/CategoryList\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ExtendedCategoryMenu = () => {\n  const { t } = useTranslation();\n  const categories = useCategoryData();\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-xl shadow-md h-full border border-cebleu-purple-200\">\n      <div className=\"px-4 py-2 border-b border-cebleu-purple-200/70\">\n        <h3 className=\"text-base font-semibold text-cebleu-purple-800\">\n          {t(\"categories.heading\")}\n        </h3>\n      </div>\n      <CategoryList categories={categories} />\n    </div>\n  );\n};\n\nexport default ExtendedCategoryMenu;\n","size_bytes":785},"client/src/components/SubComponents/HeroContent copy.tsx":{"content":"import React from \"react\";\nimport {\n  HelpCircle,\n  RefreshCcw,\n  Store,\n  ChevronRight,\n  ShieldCheck,\n  Gift,\n  Star,\n  BarChart2,\n  Megaphone,\n  TrendingUp,\n  Video,\n} from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\n\nconst ServiceCard = ({\n  icon,\n  title,\n  description,\n  button = false,\n  buttonText = \"\",\n  className = \"\",\n}: {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  button?: boolean;\n  buttonText?: string;\n  className?: string;\n}) => {\n  return (\n    <div className={`mb-4 ${className}`}>\n      <div className=\"flex items-center gap-3 mb-2\">\n        <div className=\"icon-circle flex items-center justify-center w-8 h-8 rounded-full bg-cebleu-purple-50 border border-cebleu-purple-100 text-cebleu-dark\">\n          {icon}\n        </div>\n        <h3 className=\"text-sm font-semibold text-cebleu-purple-900\">\n          {title}\n        </h3>\n      </div>\n\n      <div className=\"ml-11\">\n        {button ? (\n          <div className=\"bg-cebleu-gray-light p-3 rounded-lg border border-cebleu-gold/20\">\n            <p className=\"text-sm text-gray-600 mb-3\">{description}</p>\n            <Button className=\"gold-button bg-cebleu-gold text-cebleu-dark hover:bg-cebleu-gold-rich text-xs py-1 h-8\">\n              {buttonText}\n              <ChevronRight size={14} className=\"ml-1\" />\n            </Button>\n          </div>\n        ) : (\n          <p className=\"text-sm text-gray-600\">{description}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ConfidenceCard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-lg p-4 space-y-2 border border-cebleu-purple-200 shadow-sm mb-4\">\n      <div className=\"flex items-center gap-2 text-sm font-semibold text-cebleu-purple-900\">\n        <ShieldCheck className=\"text-cebleu-gold\" size={18} />\n        {t(\"popSearches.shopConfidence\")}\n      </div>\n      <p className=\"text-xs text-cebleu-purple-700\">\n        {t(\"popSearches.secureTransactions\")}\n      </p>\n      <Button className=\"w-full bg-cebleu-gold text-cebleu-dark text-xs font-medium py-1 h-8 rounded-md hover:bg-cebleu-gold-rich transition-colors\">\n        {t(\"common.startShopping\")}\n      </Button>\n    </div>\n  );\n};\n\nconst ExclusiveDealsCard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-lg p-4 space-y-2 border border-cebleu-purple-200 shadow-sm mb-4\">\n      <div className=\"flex items-center gap-2 text-sm font-semibold text-cebleu-purple-900\">\n        <Gift className=\"text-cebleu-gold\" size={18} />\n        {t(\"popSearches.exclusiveDeals\")}\n      </div>\n      <p className=\"text-xs text-cebleu-purple-700\">\n        {t(\"popSearches.accessSpecial\")}\n      </p>\n      <Button className=\"w-full border border-cebleu-gold text-cebleu-gold text-xs font-medium py-1 h-8 rounded-md hover:bg-cebleu-gold/10 transition-colors\">\n        {t(\"common.viewDeals\")}\n      </Button>\n    </div>\n  );\n};\n\nconst GoldLevelCard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-purple-50 rounded-lg p-4 border border-cebleu-purple-200 shadow-sm mb-4\">\n      <h3 className=\"flex items-center text-sm font-semibold text-cebleu-purple-900 pb-2 border-b border-cebleu-purple-100\">\n        <Star className=\"mr-1.5 text-cebleu-gold fill-cebleu-gold\" size={16} />\n        {t(\"popSearches.goldLevel\")}\n      </h3>\n      <div className=\"mt-3 space-y-3\">\n        <div className=\"border-b border-cebleu-purple-100 pb-2\">\n          <ul className=\"space-y-1.5 pl-4\">\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">\n              {t(\"popSearches.premiumServices\")}\n            </li>\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">\n              {t(\"popSearches.fastDelivery\")}\n            </li>\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">\n              {t(\"popSearches.vipSupport\")}\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"pt-1\">\n          <h4 className=\"text-xs font-medium text-cebleu-purple-800 mb-2\">\n            🛠️ {t(\"popSearches.toolsServices\")}\n          </h4>\n          <ul className=\"space-y-2\">\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <Megaphone className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>📢 {t(\"popSearches.promoCreation\")}</span>\n            </li>\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <BarChart2 className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>📊 {t(\"popSearches.advancedAnalytics\")}</span>\n            </li>\n\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <TrendingUp className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>📈 {t(\"popSearches.internalAdvertising\")}</span>\n            </li>\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <Video className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>🎥 {t(\"popSearches.exclusiveTraining\")}</span>\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst HeroContent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"space-y-2 animate-fade-in flex flex-col py-2\">\n      <ConfidenceCard />\n      <ExclusiveDealsCard />\n      <GoldLevelCard />\n\n      <ServiceCard\n        icon={<HelpCircle size={18} className=\"text-cebleu-dark\" />}\n        title={t(\"popSearches.helpCenter\")}\n        description={t(\"popSearches.customerCare\")}\n        className=\"mt-3\"\n      />\n\n      <ServiceCard\n        icon={<RefreshCcw size={18} className=\"text-cebleu-dark\" />}\n        title={t(\"popSearches.easyReturn\")}\n        description={t(\"popSearches.quickRefund\")}\n        button\n        buttonText={t(\"popSearches.learnMore\")}\n      />\n\n      <ServiceCard\n        icon={<Store size={18} className=\"text-cebleu-dark\" />}\n        title={t(\"popSearches.sellOnCebleu\")}\n        description={t(\"popSearches.millionsVisitors\")}\n      />\n    </div>\n  );\n};\n\nexport default HeroContent;\n","size_bytes":6270},"client/src/components/SubComponents/HeroContent.tsx":{"content":"import React from \"react\";\nimport {\n  HelpCircle,\n  RefreshCcw,\n  Store,\n  ChevronRight,\n  ShieldCheck,\n  Gift,\n  Star,\n  BarChart2,\n  Megaphone,\n  TrendingUp,\n  Video,\n} from \"lucide-react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from \"react-i18next\";\n\n// const { t } = useTranslation();\nconst ServiceCard = ({\n  icon,\n  title,\n  description,\n  button = false,\n  buttonText = \"\",\n  className = \"\",\n}: {\n  icon: React.ReactNode;\n  title: string;\n  description: string;\n  button?: boolean;\n  buttonText?: string;\n  className?: string;\n}) => {\n  return (\n    <div className={`mb-4 ${className}`}>\n      <div className=\"flex items-center gap-3 mb-2\">\n        <div className=\"icon-circle flex items-center justify-center w-8 h-8 rounded-full bg-cebleu-purple-50 border border-cebleu-purple-100 text-cebleu-dark\">\n          {icon}\n        </div>\n        <h3 className=\"text-sm font-semibold text-cebleu-purple-900\">\n          {title}\n        </h3>\n      </div>\n\n      <div className=\"ml-11\">\n        {button ? (\n          <div className=\"bg-cebleu-gray-light p-3 rounded-lg border border-cebleu-gold/20\">\n            <p className=\"text-sm text-gray-600 mb-3\">{description}</p>\n            <Button className=\"gold-button bg-cebleu-gold text-cebleu-dark hover:bg-cebleu-gold-rich text-xs py-1 h-8\">\n              {buttonText}\n              <ChevronRight size={14} className=\"ml-1\" />\n            </Button>\n          </div>\n        ) : (\n          <p className=\"text-sm text-gray-600\">{description}</p>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst ConfidenceCard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-lg p-4 space-y-2 border border-cebleu-purple-200 shadow-sm mb-4\">\n      <div className=\"flex items-center gap-2 text-sm font-semibold text-cebleu-purple-900\">\n        <ShieldCheck className=\"text-cebleu-gold\" size={18} />\n        {t('popSearches.shopConfidence')}\n        {/* Shop with Confidence */}\n      </div>\n      <p className=\"text-xs text-cebleu-purple-700\">  {t(\"common.secureTransactions\")}</p>\n      <Button className=\"w-full bg-cebleu-gold text-cebleu-dark text-xs font-medium py-1 h-8 rounded-md hover:bg-cebleu-gold-rich transition-colors\">\n        {t(\"common.startShopping\")}\n        {/* Start Shopping{\" \"} */}\n      </Button>\n    </div>\n  );\n};\n\nconst ExclusiveDealsCard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-lg p-4 space-y-2 border border-cebleu-purple-200 shadow-sm mb-4\">\n      <div className=\"flex items-center gap-2 text-sm font-semibold text-cebleu-purple-900\">\n        <Gift className=\"text-cebleu-gold\" size={18} />\n        {t(\"popSearches.exclusiveDeals\")}\n        {/* Exclusive Deals */}\n      </div>\n      <p className=\"text-xs text-cebleu-purple-700\">\n        {t('popSearches.accessSpecial')}\n        {/* Access special discounts and offers available only to our members. */}\n      </p>\n      <Button className=\"w-full border border-cebleu-gold text-cebleu-gold text-xs font-medium py-1 h-8 rounded-md hover:bg-cebleu-gold/10 transition-colors\">\n        {t('common.viewDeals')}\n        {/* View Deals */}\n      </Button>\n    </div>\n  );\n};\n\nconst GoldLevelCard = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-br from-white to-cebleu-purple-50 rounded-lg p-4 border border-cebleu-purple-200 shadow-sm mb-4\">\n      <h3 className=\"flex items-center text-sm font-semibold text-cebleu-purple-900 pb-2 border-b border-cebleu-purple-100\">\n        <Star className=\"mr-1.5 text-cebleu-gold fill-cebleu-gold\" size={16} />\n        {t(\"popSearches.goldLevel\")}\n        {/* Gold Level Benefits */}\n      </h3>\n      <div className=\"mt-3 space-y-3\">\n        <div className=\"border-b border-cebleu-purple-100 pb-2\">\n          <ul className=\"space-y-1.5 pl-4\">\n            {/* <li className=\"text-xs text-cebleu-purple-700 list-disc\">{t('popSearches.premiumServices')}</li>\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">{t('popSearches.fastDelivery')}</li>\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">{t('popSearches.vipSupport')}</li> */}\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">\n              {t(\"popSearches.premiumServices\")}\n            </li>\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">\n              {t(\"popSearches.fastDelivery\")}\n            </li>\n            <li className=\"text-xs text-cebleu-purple-700 list-disc\">\n              {t(\"popSearches.vipSupport\")}\n            </li>\n          </ul>\n        </div>\n\n        <div className=\"pt-1\">\n          <h4 className=\"text-xs font-medium text-cebleu-purple-800 mb-2\">\n            🛠️ {t(\"popSearches.toolsServices\")}\n            {/* 🛠️ Tools & Services */}\n          </h4>\n          <ul className=\"space-y-2\">\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <Megaphone className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>📢 {t('popSearches.promoCreation')}</span>\n              {/* <span>📢 Promo Creation</span> */}\n            </li>\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <BarChart2 className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>📊 {t('popSearches.advancedAnalytics')}</span>\n              {/* <span>📊 Advanced Analytics</span> */}\n            </li>\n\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <TrendingUp className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>📈 {t('popSearches.internalAdvertising')}</span>\n              {/* <span>📈 Internal Advertising</span> */}\n            </li>\n            <li className=\"flex items-center text-xs text-cebleu-purple-700\">\n              <Video className=\"mr-2 h-3 w-3 text-cebleu-gold\" />\n              <span>🎥 {t('popSearches.exclusiveTraining')}</span>\n              {/* <span>🎥 Exclusive Training</span> */}\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst HeroContent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"space-y-2 animate-fade-in flex flex-col py-2\">\n      <ConfidenceCard />\n      <ExclusiveDealsCard />\n      <GoldLevelCard />\n\n      <ServiceCard\n        icon={<HelpCircle size={18} className=\"text-cebleu-dark\" />}\n         title={t('popSearches.helpCenter')}\n         description={t('popSearches.customerCare')}\n        //title=\"Help Center\"\n        //description=\"Customer Care\"\n        className=\"mt-3\"\n      />\n\n      <ServiceCard\n        icon={<RefreshCcw size={18} className=\"text-cebleu-dark\" />}\n        button\n         title={t(\"popSearches.easyReturn\")}\n         description={t(\"popSearches.quickRefund\")}\n         buttonText={t(\"popSearches.learnMore\")}\n        //title=\"Easy Return\"\n       // description=\"Quick Refund\"\n        //buttonText=\"Learn More\"\n      />\n\n      <ServiceCard\n        icon={<Store size={18} className=\"text-cebleu-dark\" />}\n         title={t(\"popSearches.sellOnCebleu\")}\n         description={t(\"popSearches.millionsVisitors\")}\n        //title=\"Sell on Cebleu\"\n       // description=\"Millions of Visitors\"\n      />\n    </div>\n  );\n};\n\nexport default HeroContent;\n","size_bytes":7458},"client/src/components/SubComponents/ImageBanner.tsx":{"content":"import React, { useEffect, useRef, useState } from \"react\";\nimport { ChevronRight, AlertCircle } from \"lucide-react\";\nimport { ShoppingCartIcon } from \"./ShoppingCartIcon\";\n// import DisputeChat from './disputes/DisputeChat';\nimport { useTranslation } from \"react-i18next\";\n\nconst ImageBanner = ({ imageSrc }: { imageSrc?: string }) => {\n  const bannerRef = useRef<HTMLDivElement>(null);\n  const { t } = useTranslation();\n\n  useEffect(() => {\n    if (bannerRef.current) {\n      bannerRef.current.classList.add(\"animate-fade-in\");\n    }\n  }, []);\n\n  return (\n    <div\n      ref={bannerRef}\n      className=\"rounded-lg overflow-hidden shadow-sm opacity-0 bg-white\"\n    >\n      <div className=\"relative\">\n        <div className=\"bg-white\">\n          <div className=\"flex flex-col md:flex-row items-center\">\n            <div className=\"p-6 md:p-10 md:w-1/2 flex flex-col items-center md:items-start\">\n              <div className=\"flex items-center mb-4 text-cebleu-dark\">\n                <h2 className=\"text-4xl font-bold text-cebleu-purple-dark tracking-tight\">\n                  {t(\"common.findEverything\")}\n                </h2>\n                <div className=\"ml-3\">\n                  <ShoppingCartIcon />\n                </div>\n              </div>\n              <p className=\"mb-6 text-gray-600 text-base font-poppins max-w-md\">\n                {t(\"common.shopDescription\")}\n              </p>\n              <button className=\"bg-[#403E43] text-white font-semibold py-3 px-7 rounded-full hover:bg-[#333333] transition-all duration-300 flex items-center font-poppins text-base\">\n                {t(\"common.exploreMarketplace\")}\n                <ChevronRight className=\"ml-2\" size={20} />\n              </button>\n\n              <div className=\"mt-4\">{/* <DisputeChat /> */}</div>\n            </div>\n            <div className=\"md:w-1/2 flex justify-center items-center p-6 md:p-10\">\n              {imageSrc ? (\n                <img\n                  src={imageSrc}\n                  alt=\"Marketplace Illustration\"\n                  className=\"w-full max-w-[450px] h-auto object-cover rounded-lg shadow-sm\"\n                />\n              ) : (\n                <div className=\"scale-[2.5] text-cebleu-dark\">\n                  <ShoppingCartIcon />\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageBanner;\n","size_bytes":2400},"client/src/components/SubComponents/PopularSearches.tsx":{"content":"import React from \"react\";\nimport {\n  Star,\n  ShoppingBag,\n  HelpCircle,\n  ArrowLeft,\n  ShoppingCart,\n  ShieldCheck,\n  Gift,\n  Megaphone,\n  BarChart2,\n  Edit,\n  TrendingUp,\n  Video,\n} from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst PopularSearches = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Shop with Confidence */}\n      <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-lg p-5 space-y-3 border border-cebleu-purple-200 shadow-md\">\n        <div className=\"flex items-center gap-2 text-sm font-semibold text-cebleu-purple-900\">\n          <ShieldCheck className=\"text-cebleu-gold\" size={20} />\n          {t(\"popSearches.shopConfidence\")}\n        </div>\n        <p className=\"text-xs text-cebleu-purple-700\">\n          {t(\"popSearches.secureTransactions\")}\n        </p>\n        <button className=\"w-full bg-cebleu-gold text-cebleu-dark text-xs font-medium py-2.5 rounded-md hover:bg-cebleu-gold-rich transition-colors\">\n          {t(\"common.startShopping\")}\n        </button>\n      </div>\n\n      {/* Exclusive Deals bloc */}\n      <div className=\"bg-gradient-to-br from-white to-cebleu-blue-extra-pale rounded-lg p-5 space-y-3 border border-cebleu-purple-200 shadow-md\">\n        <div className=\"flex items-center gap-2 text-sm font-semibold text-cebleu-purple-900\">\n          <Gift className=\"text-cebleu-gold\" size={20} />\n          {t(\"popSearches.exclusiveDeals\")}\n        </div>\n        <p className=\"text-xs text-cebleu-purple-700\">\n          {t(\"popSearches.accessSpecial\")}\n        </p>\n        <button className=\"w-full border border-cebleu-gold text-cebleu-gold text-xs font-medium py-2.5 rounded-md hover:bg-cebleu-gold/10 transition-colors\">\n          {t(\"common.viewDeals\")}\n        </button>\n      </div>\n\n      {/* Niveau Or */}\n      <div className=\"bg-gradient-to-br from-white to-cebleu-purple-50 rounded-lg p-5 border border-cebleu-purple-200 shadow-md\">\n        <h3 className=\"flex items-center text-sm font-semibold text-cebleu-purple-900 pb-2 border-b border-cebleu-purple-100\">\n          <Star\n            className=\"mr-1.5 text-cebleu-gold fill-cebleu-gold\"\n            size={16}\n          />\n          {t(\"popSearches.goldLevel\")}\n        </h3>\n        <div className=\"mt-3 space-y-3\">\n          <div className=\"border-b border-cebleu-purple-100 pb-3\">\n            <ul className=\"space-y-2 pl-4\">\n              <li className=\"text-sm text-cebleu-purple-700 list-disc\">\n                {t(\"popSearches.premiumServices\")}\n              </li>\n              <li className=\"text-sm text-cebleu-purple-700 list-disc\">\n                {t(\"popSearches.fastDelivery\")}\n              </li>\n              <li className=\"text-sm text-cebleu-purple-700 list-disc\">\n                {t(\"popSearches.vipSupport\")}\n              </li>\n            </ul>\n          </div>\n\n          <div className=\"pt-1\">\n            <h4 className=\"text-sm font-medium text-cebleu-purple-800 mb-2\">\n              🛠️ {t(\"popSearches.toolsServices\")}\n            </h4>\n            <ul className=\"space-y-2.5\">\n              <li className=\"flex items-center text-sm text-cebleu-purple-700\">\n                <Megaphone className=\"mr-2 h-4 w-4 text-cebleu-gold\" />\n                <span>📢 {t(\"popSearches.promoCreation\")}</span>\n              </li>\n              <li className=\"flex items-center text-sm text-cebleu-purple-700\">\n                <BarChart2 className=\"mr-2 h-4 w-4 text-cebleu-gold\" />\n                <span>📊 {t(\"popSearches.advancedAnalytics\")}</span>\n              </li>\n\n              <li className=\"flex items-center text-sm text-cebleu-purple-700\">\n                <TrendingUp className=\"mr-2 h-4 w-4 text-cebleu-gold\" />\n                <span>📈 {t(\"popSearches.internalAdvertising\")}</span>\n              </li>\n              <li className=\"flex items-center text-sm text-cebleu-purple-700\">\n                <Video className=\"mr-2 h-4 w-4 text-cebleu-gold\" />\n                <span>🎥 {t(\"popSearches.exclusiveTraining\")}</span>\n              </li>\n            </ul>\n          </div>\n        </div>\n      </div>\n\n      {/* Help Center and other sections in one card */}\n      <div className=\"bg-gradient-to-br from-cebleu-purple-50 to-white rounded-lg p-5 space-y-4 border border-cebleu-purple-200 shadow-md\">\n        {/* Help Center */}\n        <div>\n          <h3 className=\"flex items-center text-sm font-semibold text-cebleu-purple-900 pb-2 border-b border-cebleu-purple-100\">\n            <HelpCircle className=\"mr-1.5 text-cebleu-gold\" size={18} />\n            {t(\"popSearches.helpCenter\")}\n          </h3>\n          <p className=\"mt-2 text-sm text-cebleu-purple-700\">\n            {t(\"popSearches.customerCare\")}\n          </p>\n        </div>\n\n        {/* Easy Return */}\n        <div className=\"pt-2 border-t border-cebleu-purple-100\">\n          <h3 className=\"flex items-center text-sm font-semibold text-cebleu-purple-900 pb-2\">\n            <ArrowLeft className=\"mr-1.5 text-cebleu-gold\" size={18} />\n            {t(\"popSearches.easyReturn\")}\n          </h3>\n          <p className=\"text-sm text-cebleu-purple-700\">\n            {t(\"popSearches.quickRefund\")}\n          </p>\n          <button className=\"mt-2 bg-cebleu-gold/10 text-cebleu-purple-800 hover:text-cebleu-dark rounded-md px-4 py-1.5 text-xs font-medium\">\n            {t(\"popSearches.learnMore\")}\n          </button>\n        </div>\n\n        {/* Sell on CEBLEU */}\n        <div className=\"pt-2 border-t border-cebleu-purple-100\">\n          <h3 className=\"flex items-center text-sm font-semibold text-cebleu-purple-900 pb-2\">\n            <ShoppingCart className=\"mr-1.5 text-cebleu-gold\" size={18} />\n            {t(\"popSearches.sellOnCebleu\")}\n          </h3>\n          <p className=\"text-sm text-cebleu-purple-700\">\n            {t(\"popSearches.millionsVisitors\")}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PopularSearches;\n","size_bytes":5959},"client/src/components/SubComponents/SearchCommand.tsx":{"content":"import React, { useState, useEffect, useRef } from \"react\";\nimport {\n  Command,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n} from \"@/components/ui/command\";\nimport { Search } from \"lucide-react\";\n// import { useLanguage } from '@/contexts/LanguageContext';\n// import { toast } from \"sonner\";\n// import { SearchHistory, SearchAlerts, SellerOptions } from './search';\n\ninterface SearchCommandProps {\n  isOpen: boolean;\n  onClose: () => void;\n  searchRef: React.RefObject<HTMLDivElement>;\n}\n\nconst SearchCommand = ({ isOpen, onClose, searchRef }: SearchCommandProps) => {\n  const commandRef = useRef<HTMLDivElement>(null);\n  // const { t } = useLanguage();\n\n  const [recentSearches, setRecentSearches] = useState<string[]>([\n    \"chaussure femme\",\n    \"parfum\",\n    \"table basse\",\n  ]);\n\n  const [searchValue, setSearchValue] = useState(\"\");\n\n  // Handle search submission\n  const handleSearch = (query: string) => {\n    if (!query.trim()) return;\n\n    // Add to recent searches if not already included\n    if (!recentSearches.includes(query)) {\n      setRecentSearches((prevSearches) => [query, ...prevSearches.slice(0, 4)]);\n\n      // Could store in localStorage for persistence\n      localStorage.setItem(\n        \"recentSearches\",\n        JSON.stringify([query, ...recentSearches.slice(0, 4)])\n      );\n    }\n\n    // In a real app, we would navigate to search results page\n    // toast(`Searching for \"${query}\"...`);\n    onClose();\n  };\n\n  // Handle search history item click\n  const handleSearchHistoryItemClick = (search: string) => {\n    setSearchValue(search);\n    handleSearch(search);\n  };\n\n  // Load recent searches from localStorage on mount\n  useEffect(() => {\n    const savedSearches = localStorage.getItem(\"recentSearches\");\n    if (savedSearches) {\n      try {\n        const parsedSearches = JSON.parse(savedSearches);\n        if (Array.isArray(parsedSearches)) {\n          setRecentSearches(parsedSearches);\n        }\n      } catch (e) {\n        console.error(\"Failed to parse saved searches\", e);\n      }\n    }\n  }, []);\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (\n        commandRef.current &&\n        !commandRef.current.contains(event.target as Node) &&\n        searchRef.current &&\n        !searchRef.current.contains(event.target as Node)\n      ) {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener(\"mousedown\", handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener(\"mousedown\", handleClickOutside);\n    };\n  }, [isOpen, onClose, searchRef]);\n\n  // Handle keyboard events\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (e.key === \"Enter\" && searchValue) {\n        handleSearch(searchValue);\n      } else if (e.key === \"Escape\") {\n        onClose();\n      }\n    };\n\n    if (isOpen) {\n      document.addEventListener(\"keydown\", handleKeyDown);\n    }\n\n    return () => {\n      document.removeEventListener(\"keydown\", handleKeyDown);\n    };\n  }, [isOpen, searchValue, onClose]);\n\n  if (!isOpen) return null;\n\n  return (\n    <div\n      ref={commandRef}\n      className=\"absolute top-full left-0 right-0 mt-1 bg-white rounded-lg shadow-xl border border-gray-200 overflow-hidden z-50 max-h-[85vh] overflow-y-auto\"\n      style={{ maxWidth: searchRef.current?.offsetWidth }}\n    >\n      <Command className=\"border-none\">\n        <CommandInput\n          // placeholder={t('search.placeholder')}\n          placeholder=\"Search for products, brands and more\"\n          value={searchValue}\n          onValueChange={setSearchValue}\n          onKeyDown={(e) => {\n            if (e.key === \"Enter\") {\n              handleSearch(searchValue);\n            }\n          }}\n          className=\"px-4 py-3 focus:ring-2 focus:ring-cebleu-purple-200 text-base\"\n        />\n        <CommandList className=\"max-h-[70vh] overflow-y-auto\">\n          <CommandEmpty className=\"py-6 text-center text-gray-500\">\n            {/* {t('search.noResults')}\n             */}\n            No results found.\n          </CommandEmpty>\n\n          <div className=\"p-4\">\n            <div className=\"flex flex-col md:flex-row md:gap-10\">\n              {/* Left Column - Recent Searches */}\n              <div className=\"flex-1 mb-6 md:mb-0\">\n                {/* <SearchHistory\n                  recentSearches={recentSearches}\n                  setRecentSearches={setRecentSearches}\n                  onSearchHistoryItemClick={handleSearchHistoryItemClick}\n                /> */}\n\n                {/* <SearchAlerts searchValue={searchValue} /> */}\n              </div>\n\n              {/* Right Column - Find Sellers & Premium Tools */}\n              <div className=\"flex-1 border-t md:border-t-0 md:border-l border-gray-200 pt-4 md:pt-0 md:pl-10\">\n                {/* <SellerOptions /> */}\n              </div>\n            </div>\n          </div>\n        </CommandList>\n      </Command>\n    </div>\n  );\n};\n\nexport default SearchCommand;\n","size_bytes":4953},"client/src/components/SubComponents/ShoppingCartIcon.tsx":{"content":"import React from 'react';\nexport const ShoppingCartIcon = () => {\n  return <div className=\"relative\">\n      \n    </div>;\n};","size_bytes":124},"client/src/components/SubComponents/TrendingCategories.tsx":{"content":"import React, { useRef, useCallback } from \"react\";\nimport { ChevronRight, ChevronLeft } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n// import { useLanguage } from '../contexts/LanguageContext';\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\ninterface CategoryItem {\n  icon: string;\n  name: string;\n}\n\n// Separate Category Card component for better structure\nconst CategoryCard: React.FC<{ category: CategoryItem }> = ({ category }) => (\n  <div className=\"flex flex-col items-center min-w-[65px] sm:min-w-[90px] cursor-pointer group\">\n    <div className=\"w-10 h-10 sm:w-14 sm:h-14 rounded-full bg-gradient-to-br from-white to-cebleu-purple-50 flex items-center justify-center shadow-md border border-cebleu-purple-100/80 mb-2 transition-transform duration-300 transform group-hover:scale-110 group-hover:shadow-lg group-hover:border-cebleu-purple-300/80\">\n      <span className=\"text-lg sm:text-2xl\">{category.icon}</span>\n    </div>\n    <span className=\"text-[10px] sm:text-xs font-medium text-cebleu-purple-800 text-center w-full truncate max-w-[65px] sm:max-w-[90px] group-hover:text-cebleu-purple transition-colors\">\n      {category.name}\n    </span>\n  </div>\n);\n\n// Navigation Button component for better structure\nconst ScrollButton: React.FC<{\n  direction: \"left\" | \"right\";\n  onClick: () => void;\n  className?: string;\n}> = ({ direction, onClick, className = \"\" }) => (\n  <button\n    onClick={onClick}\n    className={`bg-white/90 backdrop-blur-sm rounded-full p-1.5 shadow-sm hover:bg-cebleu-purple-50 transition-colors z-10 border border-cebleu-purple-100 ${className}`}\n  >\n    {direction === \"left\" ? (\n      <ChevronLeft size={16} className=\"text-cebleu-purple-800\" />\n    ) : (\n      <ChevronRight size={16} className=\"text-cebleu-purple-800\" />\n    )}\n  </button>\n);\n\nconst TrendingCategories: React.FC = () => {\n  const { t, i18n } = useTranslation();\n  const scrollContainerRef = useRef<HTMLDivElement>(null);\n  // const { t, language } = useLanguage();\n  const isMobile = useIsMobile();\n\n  // const categories: CategoryItem[] = [\n  //   { icon: '🏥', name: t('categories.medical') },\n  //   { icon: '💅', name: t('categories.beauty') },\n  //   { icon: '🧘', name: t('categories.wellness') },\n  //   { icon: '🔧', name: t('categories.plumber') },\n  //   { icon: '⚡', name: t('categories.electrical') },\n  //   { icon: '👷', name: t('categories.tradesmen') },\n  //   { icon: '🧹', name: t('categories.cleaning') },\n  //   { icon: '📚', name: t('categories.tutors') },\n  //   { icon: '🚗', name: t('categories.auto') },\n  //   { icon: '🛡️', name: t('categories.insurance') },\n  //   { icon: '🏠', name: t('categories.mortgage') },\n  //   { icon: '🍳', name: t('categories.kitchen') },\n  //   { icon: '🚿', name: t('categories.bathroom') },\n  // ];\n  const categories: CategoryItem[] = [\n    { icon: \"🏥\", name: t(\"categories.medical\") },\n    { icon: \"💅\", name: t(\"categories.beauty\") },\n    { icon: \"🧘\", name: t(\"categories.wellness\") },\n    { icon: \"🔧\", name: t(\"categories.plumber\") },\n    { icon: \"⚡\", name: t(\"categories.electrical\") },\n    { icon: \"👷\", name: t(\"categories.tradesmen\") },\n    { icon: \"🧹\", name: t(\"categories.cleaning\") },\n    { icon: \"📚\", name: t(\"categories.tutors\") },\n    { icon: \"🚗\", name: t(\"categories.auto\") },\n    { icon: \"🛡️\", name: t(\"categories.insurance\") },\n    { icon: \"🏠\", name: t(\"categories.mortgage\") },\n    { icon: \"🍳\", name: t(\"categories.kitchen\") },\n    { icon: \"🚿\", name: t(\"categories.bathroom\") },\n  ];\n\n  const scroll = useCallback(\n    (direction: \"left\" | \"right\") => {\n      if (!scrollContainerRef.current) return;\n      const container = scrollContainerRef.current;\n      const scrollAmount = isMobile ? 120 : 250;\n      container.scrollBy({\n        left: direction === \"left\" ? -scrollAmount : scrollAmount,\n        behavior: \"smooth\",\n      });\n    },\n    [isMobile]\n  );\n\n  return (\n    <div className=\"w-full bg-white py-3 shadow-sm mb-4 relative max-w-[100vw] overflow-hidden\">\n      <div className=\"container mx-auto px-2 sm:px-4 relative\">\n        <div className=\"flex items-center gap-2 sm:gap-3 overflow-hidden\">\n          <h3 className=\"text-xs sm:text-base font-medium text-cebleu-purple-800 whitespace-nowrap pl-1 flex-shrink-0\">\n            {t(\"index.popularCategories\")}\n            {/* Popular Categories */}\n          </h3>\n\n          <div className=\"relative flex-1 min-w-0 mx-1\">\n            <div\n              ref={scrollContainerRef}\n              className=\"flex items-center gap-3 sm:gap-4 overflow-x-auto py-1.5 scrollbar-none scroll-smooth\"\n              style={{ scrollbarWidth: \"none\", msOverflowStyle: \"none\" }}\n            >\n              {categories.map((category, index) => (\n                <CategoryCard key={index} category={category} />\n              ))}\n            </div>\n\n            {/* Gradients for smooth scroll edges */}\n            <div className=\"absolute left-0 top-0 bottom-0 w-4 sm:w-6 bg-gradient-to-r from-white to-transparent z-10\"></div>\n            <div className=\"absolute right-0 top-0 bottom-0 w-4 sm:w-6 bg-gradient-to-l from-white to-transparent z-10\"></div>\n          </div>\n\n          <div className=\"flex items-center gap-1 shrink-0 pr-1\">\n            <ScrollButton direction=\"left\" onClick={() => scroll(\"left\")} />\n            <ScrollButton direction=\"right\" onClick={() => scroll(\"right\")} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default TrendingCategories;\n","size_bytes":5520},"client/src/components/home/AdventureCard.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\n// import { useLanguage } from '@/contexts/LanguageContext';\nimport { useTranslation } from \"react-i18next\";\nimport { ChevronRight, Compass } from \"lucide-react\";\nconst AdventureCard = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"bg-white rounded-xl shadow-md overflow-hidden border border-gray-200 hover:shadow-lg transition-all duration-300\">\n      <div className=\"md:flex\"></div>\n    </div>\n  );\n};\nexport default AdventureCard;\n","size_bytes":536},"client/src/components/home/AdvertisementBanner.tsx":{"content":"import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst AdvertisementBanner = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"mt-4 mb-4 bg-white rounded-lg shadow-sm overflow-hidden border border-gray-200\">\n      <div className=\"p-4 flex flex-col md:flex-row items-center\">\n        <div className=\"md:w-1/3 flex justify-center mb-4 md:mb-0\">\n          <img\n            src=\"https://images.unsplash.com/photo-1606041008023-472dfb5e530f?auto=format&fit=crop&w=400&q=80\"\n            alt=\"iPhone\"\n            className=\"h-40 object-contain\"\n          />\n        </div>\n        <div className=\"md:w-2/3 md:pl-6 text-center md:text-left\">\n          <h3 className=\"font-bold text-xl text-gray-800 mb-2\">\n            iPhone 15 Pro\n          </h3>\n          <p className=\"text-gray-600 mb-3\">\n            {t(\"index.discoverNewTech\")}. {t(\"index.titanium\")}.{\" \"}\n            {t(\"index.newCamera\")}. {t(\"index.allDayBattery\")}.\n          </p>\n          <div className=\"flex flex-col sm:flex-row gap-3 justify-center md:justify-start\">\n            <button className=\"bg-black text-white font-medium py-2 px-4 rounded-md hover:bg-gray-800 transition-colors\">\n              {t(\"index.buyNow\")}\n            </button>\n            <button className=\"border border-gray-300 text-gray-700 font-medium py-2 px-4 rounded-md hover:bg-gray-50 transition-colors\">\n              {t(\"index.learnMore\")}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default AdvertisementBanner;\n","size_bytes":1553},"client/src/components/home/BestSellers.tsx":{"content":"import React, { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ChevronRight,\n  Award,\n  Heart,\n  TrendingUp,\n  ShoppingBag,\n  Crown,\n  Clock,\n  Star,\n  Tag,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Card } from \"@/components/ui/card\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n// import { products } from '@/data/products';\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\n\ninterface SellerItem {\n  rank: number;\n  name: string;\n  rating: number;\n  reviews: number;\n  image: string;\n}\n\nconst BestSellers = () => {\n  const { t } = useTranslation();\n  const [activeTab, setActiveTab] = useState(\"weekly\");\n\n  // Sample data for weekly sellers\n  const weeklySellers: SellerItem[] = [\n    {\n      rank: 1,\n      name: \"ElectroMart\",\n      rating: 5,\n      reviews: 673,\n      image:\n        \"https://images.unsplash.com/photo-1472851294608-062f824d29cc?auto=format&fit=crop&w=100&q=80\",\n    },\n    {\n      rank: 2,\n      name: \"SportZone\",\n      rating: 4.9,\n      reviews: 512,\n      image:\n        \"https://images.unsplash.com/photo-1517836357463-d25dfeac3438?auto=format&fit=crop&w=100&q=80\",\n    },\n    {\n      rank: 3,\n      name: \"HomeDecorPro\",\n      rating: 4.8,\n      reviews: 418,\n      image:\n        \"https://images.unsplash.com/photo-1513694203232-719a280e022f?auto=format&fit=crop&w=100&q=80\",\n    },\n    {\n      rank: 4,\n      name: \"GadgetWorld\",\n      rating: 4.7,\n      reviews: 356,\n      image:\n        \"https://images.unsplash.com/photo-1550745165-9bc0b252726f?auto=format&fit=crop&w=100&q=80\",\n    },\n    {\n      rank: 5,\n      name: \"FashionTrends\",\n      rating: 4.6,\n      reviews: 289,\n      image:\n        \"https://images.unsplash.com/photo-1551488831-00ddcb6c6bd3?auto=format&fit=crop&w=100&q=80\",\n    },\n  ];\n\n  // Products of the week with improved images\n  const weeklyProducts = [\n    {\n      id: 1,\n      name: 'Gaming Monitor 32\" UHD',\n      shopName: \"TechPro Store\",\n      rating: 4.8,\n      reviews: 245,\n      category: \"Electronics\",\n      image:\n        \"https://images.unsplash.com/photo-1616711906333-23cf1306b3e9?w=500&q=80\",\n      price: \"399.99\",\n      currency: \"€\",\n      description:\n        \"32-inch 4K UHD gaming monitor with 144Hz refresh rate and 1ms response time.\",\n      badges: [\"New\", \"Gaming\"],\n      delivery: \"Express\",\n    },\n    {\n      id: 2,\n      name: \"Pro Travel Backpack\",\n      shopName: \"Adventure Gear\",\n      rating: 4.9,\n      reviews: 189,\n      category: \"Travel\",\n      image:\n        \"https://images.unsplash.com/photo-1622560480605-d83c853bc5c3?w=500&q=80\",\n      price: \"89.99\",\n      currency: \"€\",\n      description:\n        \"Waterproof travel backpack with laptop compartment and USB charging port.\",\n      badges: [\"Bestseller\", \"Travel\"],\n      delivery: \"Standard\",\n    },\n    {\n      id: 3,\n      name: \"Wireless Gaming Headset\",\n      shopName: \"GameZone\",\n      rating: 4.7,\n      reviews: 312,\n      category: \"Gaming\",\n      image:\n        \"https://images.unsplash.com/photo-1618366712010-f4ae9c647dcb?w=500&q=80\",\n      price: \"159.99\",\n      currency: \"€\",\n      description:\n        \"Premium wireless gaming headset with 7.1 surround sound and noise cancellation.\",\n      badges: [\"Gaming\", \"Wireless\"],\n      delivery: \"Express\",\n    },\n    {\n      id: 4,\n      name: \"Smart Mini Fridge\",\n      shopName: \"Home Tech\",\n      rating: 4.6,\n      reviews: 156,\n      category: \"Appliances\",\n      image:\n        \"https://images.unsplash.com/photo-1610416481686-c3468da9f293?w=500&q=80\",\n      price: \"299.99\",\n      currency: \"€\",\n      description:\n        \"Compact smart refrigerator with temperature control and app connectivity.\",\n      badges: [\"Smart Home\", \"New\"],\n      delivery: \"Standard\",\n    },\n    {\n      id: 5,\n      name: \"Ergonomic Office Chair\",\n      shopName: \"WorkSpace Pro\",\n      rating: 4.8,\n      reviews: 203,\n      category: \"Furniture\",\n      image:\n        \"https://images.unsplash.com/photo-1589384267710-7a25bc5b68bb?w=500&q=80\",\n      price: \"249.99\",\n      currency: \"€\",\n      description:\n        \"Premium ergonomic office chair with lumbar support and adjustable features.\",\n      badges: [\"Ergonomic\", \"Office\"],\n      delivery: \"Premium\",\n    },\n  ];\n\n  // Customer favorites - Products of the week\n  const customerFavorites = [\n    {\n      id: 7,\n      name: \"4K Webcam Pro\",\n      shopName: \"StreamTech\",\n      rating: 4.9,\n      reviews: 267,\n      category: \"Electronics\",\n      image:\n        \"https://images.unsplash.com/photo-1629429407756-28d453c7fcc7?w=500&q=80\",\n      price: \"199.99\",\n      currency: \"€\",\n      description:\n        \"Professional 4K webcam with auto-focus and low light correction.\",\n      badges: [\"Streaming\", \"4K\"],\n      delivery: \"Standard\",\n    },\n    {\n      id: 8,\n      name: \"Wireless Gaming Mouse\",\n      shopName: \"GameZone\",\n      rating: 4.7,\n      reviews: 389,\n      category: \"Gaming\",\n      image:\n        \"https://images.unsplash.com/photo-1615663245857-ac93bb7c39e7?w=500&q=80\",\n      price: \"79.99\",\n      currency: \"€\",\n      description: \"Ultra-light wireless gaming mouse with 25K DPI sensor.\",\n      badges: [\"Gaming\", \"Wireless\"],\n      delivery: \"Express\",\n    },\n    {\n      id: 6,\n      name: \"Mechanical Gaming Keyboard\",\n      shopName: \"Gaming Gear Pro\",\n      rating: 4.7,\n      reviews: 178,\n      category: \"Gaming\",\n      image:\n        \"https://images.unsplash.com/photo-1644933891402-2e5ea8fd3abc?w=500&q=80\",\n      price: \"129.99\",\n      currency: \"€\",\n      description:\n        \"RGB mechanical gaming keyboard with custom switches and programmable keys.\",\n      badges: [\"Gaming\", \"RGB\"],\n      delivery: \"Express\",\n    },\n  ];\n\n  const renderStars = (rating: number) => {\n    const stars = [];\n    for (let i = 1; i <= 5; i++) {\n      stars.push(\n        <span\n          key={i}\n          className={i <= rating ? \"text-yellow-400\" : \"text-gray-300\"}\n        >\n          ★\n        </span>\n      );\n    }\n    return stars;\n  };\n\n  const renderSellerItem = (seller: SellerItem, index: number) => (\n    <div\n      key={seller.name}\n      className=\"flex items-center py-2 px-1 hover:bg-gray-50 rounded transition-colors group\"\n    >\n      <div className=\"flex items-center justify-center w-6 h-6 rounded-full relative\">\n        {index === 0 ? (\n          <div className=\"absolute inset-0 bg-gradient-to-r from-amber-400 to-yellow-300 rounded-full flex items-center justify-center\">\n            <Crown className=\"w-3 h-3 text-white\" />\n          </div>\n        ) : (\n          <span className=\"text-xs font-semibold w-5 h-5 flex items-center justify-center bg-cebleu-purple-100 rounded-full text-cebleu-purple\">\n            {seller.rank}\n          </span>\n        )}\n      </div>\n      <div className=\"relative ml-2 mr-3\">\n        <img\n          src={seller.image}\n          alt={seller.name}\n          className=\"w-8 h-8 object-cover rounded-full border-2 border-white shadow-sm\"\n        />\n        {index === 0 && (\n          <div className=\"absolute -top-1 -right-1 bg-yellow-400 rounded-full w-3 h-3 flex items-center justify-center\">\n            <Star className=\"w-2 h-2 text-white fill-current\" />\n          </div>\n        )}\n      </div>\n      <div className=\"flex-grow min-w-0\">\n        <p className=\"text-xs font-medium truncate flex items-center\">\n          {seller.name}\n          {index === 0 && <Tag className=\"w-3 h-3 ml-1 text-amber-500\" />}\n        </p>\n        <div className=\"flex items-center\">\n          <span className=\"flex text-xs\">{renderStars(seller.rating)}</span>\n          <span className=\"text-[9px] text-gray-500 ml-0.5\">\n            ({seller.reviews})\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n\n  const renderProductItem = (\n    product: any,\n    isFavorite: boolean = false,\n    index: number = -1\n  ) => (\n    <div\n      key={product.id}\n      className=\"flex items-center gap-3 hover:bg-gray-50 rounded p-2 transition-colors group\"\n    >\n      <div className=\"relative w-14 h-14 rounded-md overflow-hidden border border-gray-200 shadow-sm\">\n        <AspectRatio ratio={1 / 1}>\n          <img\n            src={product.image}\n            alt={product.name}\n            className=\"w-full h-full object-cover group-hover:scale-110 transition-transform duration-300\"\n          />\n        </AspectRatio>\n        {isFavorite && (\n          <div className=\"absolute top-0 right-0 bg-gradient-to-br from-cebleu-gold to-cebleu-gold-rich text-white rounded-bl-md p-0.5\">\n            <Heart className=\"w-3 h-3 fill-white\" />\n          </div>\n        )}\n        {index === 0 && !isFavorite && (\n          <div className=\"absolute top-0 left-0 bg-gradient-to-r from-amber-500 to-yellow-500 text-white px-1.5 py-0.5 text-[8px] font-bold rounded-br-md\">\n            #1\n          </div>\n        )}\n        {product.badges && product.badges.includes(\"New\") && (\n          <div className=\"absolute bottom-0 left-0 bg-cebleu-blue px-1 py-0.5 text-[8px] font-bold text-white rounded-tr-md\">\n            NEW\n          </div>\n        )}\n      </div>\n      <div className=\"flex-grow min-w-0\">\n        <div className=\"flex items-center\">\n          <p className=\"text-xs font-bold truncate text-gray-800\">\n            {product.name}\n          </p>\n          {product.reviews > 300 && (\n            <span className=\"ml-1\">\n              <TrendingUp className=\"w-3 h-3 text-cebleu-purple\" />\n            </span>\n          )}\n        </div>\n        <p className=\"text-[10px] text-gray-500 truncate\">{product.shopName}</p>\n        <div className=\"flex items-center justify-between mt-1\">\n          <p className=\"text-sm font-bold text-cebleu-purple-800\">\n            {product.price} {product.currency}\n          </p>\n          {product.delivery === \"Express\" && (\n            <span className=\"text-[8px] bg-green-100 text-green-800 px-1.5 py-0.5 rounded-full flex items-center\">\n              <Clock className=\"w-2 h-2 mr-0.5\" /> 24h\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-4 py-2\">\n      <div className=\"flex justify-between items-center mb-4\">\n        <h2 className=\"text-lg font-bold text-cebleu-dark flex items-center\">\n          <Crown className=\"w-5 h-5 mr-2 text-cebleu-gold-rich\" />\n          <span className=\"bg-clip-text text-transparent bg-gradient-to-r from-cebleu-purple-800 to-cebleu-purple\">\n            Meilleur vente du mois\n          </span>\n        </h2>\n        <Button\n          variant=\"ghost\"\n          size=\"sm\"\n          className=\"h-7 text-xs text-cebleu-purple hover:text-cebleu-purple-dark hover:bg-cebleu-purple-50\"\n        >\n          {t(\"common.seeAll\")} <ChevronRight className=\"w-3 h-3 ml-0.5\" />\n        </Button>\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {/* Best Sellers Section */}\n        <Card className=\"shadow-sm overflow-hidden border-gray-200 hover:shadow-md transition-shadow\">\n          <div className=\"bg-gradient-to-r from-cebleu-purple-800 to-cebleu-purple-600 px-4 py-2.5 border-b border-cebleu-purple-800\">\n            <h3 className=\"font-medium text-sm flex items-center text-white\">\n              <Award className=\"w-4 h-4 mr-1.5\" />\n              {t(\"bestSellers.weeklyProducts\")}\n            </h3>\n          </div>\n\n          <div className=\"p-2\">\n            <ScrollArea className=\"h-[220px]\">\n              <div className=\"space-y-0.5 px-2\">\n                {weeklySellers.map((seller, idx) =>\n                  renderSellerItem(seller, idx)\n                )}\n              </div>\n            </ScrollArea>\n          </div>\n        </Card>\n\n        {/* Best Products Section */}\n        <Card className=\"shadow-sm overflow-hidden border-gray-200 hover:shadow-md transition-shadow\">\n          <div className=\"bg-gradient-to-r from-cebleu-blue-dark to-cebleu-blue px-4 py-2.5 border-b border-cebleu-blue-dark\">\n            <h3 className=\"font-medium text-sm flex items-center text-white\">\n              <ShoppingBag className=\"w-4 h-4 mr-1.5\" />\n              {t(\"bestSellers.weeklySellers\")}\n            </h3>\n          </div>\n\n          <div className=\"p-2\">\n            <ScrollArea className=\"h-[220px]\">\n              <div className=\"space-y-2 px-2\">\n                {weeklyProducts.map((product, idx) =>\n                  renderProductItem(product, false, idx)\n                )}\n              </div>\n            </ScrollArea>\n          </div>\n        </Card>\n\n        {/* Weekly Customer Favorites */}\n        <Card className=\"shadow-sm overflow-hidden border-gray-200 hover:shadow-md transition-shadow\">\n          <div className=\"bg-gradient-to-r from-cebleu-gold-rich to-cebleu-gold px-4 py-2.5 border-b border-cebleu-gold-rich\">\n            <h3 className=\"font-medium text-sm flex items-center text-gray-800\">\n              <Heart className=\"w-4 h-4 mr-1.5 fill-cebleu-gray-dark\" />\n              {t(\"bestSellers.customerFavorites\")}\n            </h3>\n          </div>\n\n          <div className=\"p-3\">\n            <ScrollArea className=\"h-[220px]\">\n              <div className=\"space-y-3\">\n                {customerFavorites.map((product, idx) =>\n                  renderProductItem(product, true, idx)\n                )}\n\n                {/* Special Flash Sale Item */}\n                <div className=\"mt-4\">\n                  <div className=\"relative overflow-hidden rounded-lg shadow-sm border border-cebleu-gold\">\n                    <div className=\"absolute -right-12 -top-12 transform rotate-45 w-24 h-24 bg-red-600 text-white\"></div>\n                    <div className=\"absolute right-1 top-1 transform rotate-45 text-[9px] font-bold text-white\">\n                      -40%\n                    </div>\n\n                    <div className=\"bg-gradient-to-r from-cebleu-gold-light to-cebleu-gold-light p-3\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center\">\n                          <div className=\"animate-pulse inline-block w-2 h-2 bg-red-600 rounded-full mr-1\"></div>\n                          <p className=\"text-xs font-bold text-red-600\">\n                            {t(\"common.flashSale\")}\n                          </p>\n                        </div>\n                        <div className=\"flex items-center gap-1 bg-white px-2 py-0.5 rounded-full shadow-sm\">\n                          <Clock className=\"w-3 h-3 text-red-600\" />\n                          <span className=\"text-[10px] font-bold text-gray-800\">\n                            {t(\"common.endsSoon\")}\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex items-center mt-2 gap-3\">\n                        <div className=\"relative w-12 h-12 rounded-md overflow-hidden border border-white shadow-sm\">\n                          <img\n                            src=\"https://images.unsplash.com/photo-1618366712010-f4ae9c647dcb?auto=format&fit=crop&w=100&q=80\"\n                            alt=\"Flash sale product\"\n                            className=\"w-full h-full object-cover\"\n                          />\n                        </div>\n                        <div>\n                          <p className=\"text-xs font-bold text-gray-800\">\n                            {t(\"common.wirelessHeadset\")}\n                          </p>\n                          <div className=\"flex items-baseline mt-1\">\n                            <span className=\"text-xs font-bold text-red-600\">\n                              €99.99\n                            </span>\n                            <span className=\"ml-1.5 text-[10px] line-through text-gray-500\">\n                              €169.99\n                            </span>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"w-full bg-gray-200 rounded-full h-1.5 mt-2\">\n                        <div className=\"bg-red-600 h-1.5 rounded-full w-3/4\"></div>\n                      </div>\n                      <p className=\"text-[9px] text-gray-600 mt-1\">\n                        75% {t(\"common.claimed\")}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </ScrollArea>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n};\n\nexport default BestSellers;\n","size_bytes":16511},"client/src/components/home/CarAdvertisement.tsx":{"content":"import { use } from \"passport\";\nimport React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst CarAdvertisement = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"mt-8 bg-white rounded-xl shadow-lg overflow-hidden border border-gray-200 hover:shadow-xl transition-all duration-300\">\n      <div className=\"p-4 md:p-6\">\n        <h3 className=\"font-bold text-gray-800 text-xl md:text-2xl mb-2\">\n          {t(\"index.luxuryAutomobiles\")}\n        </h3>\n\n        <div className=\"flex flex-col md:flex-row gap-6 mt-4\">\n          <div className=\"flex-1\">\n            <div className=\"bg-gradient-to-r from-blue-100 via-blue-200 to-gray-200 rounded-lg p-4 relative\">\n              <img\n                src=\"https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?auto=format&fit=crop&w=600&q=80\"\n                alt=\"Mercedes EQS\"\n                className=\"rounded-lg shadow-md w-full h-40 md:h-52 object-cover mb-2\"\n              />\n              <h4 className=\"font-bold text-gray-900 text-lg mt-2\">\n                Mercedes-Benz EQS 2023\n              </h4>\n              <p className=\"text-sm text-gray-700 mt-1\">\n                {t(\"index.electricLuxurySedanDesc\")}\n              </p>\n\n              <div className=\"mt-2 flex items-baseline gap-2\">\n                <span className=\"font-bold text-2xl text-gray-900\">\n                  89 900€<sup>00</sup>\n                </span>\n                <span className=\"text-xs text-gray-500 line-through\">\n                  104 780€\n                </span>\n              </div>\n\n              <span className=\"absolute top-2 right-2 bg-red-500 text-white text-xs font-bold py-1 px-2 rounded\">\n                12% OFF\n              </span>\n            </div>\n\n            <div className=\"mt-3\">\n              <div className=\"flex space-x-2 pb-2\">\n                <div className=\"border-2 border-gray-300 hover:border-cebleu-purple transition-colors rounded-md overflow-hidden w-16 h-16 flex-shrink-0\">\n                  <img\n                    src=\"https://images.unsplash.com/photo-1549317661-bd32c8ce0db2?auto=format&fit=crop&w=150&q=80\"\n                    alt=\"Mercedes exterior\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div className=\"border-2 border-cebleu-purple rounded-md overflow-hidden w-16 h-16 flex-shrink-0\">\n                  <img\n                    src=\"https://images.unsplash.com/photo-1618843479313-40f8afb4b4d8?auto=format&fit=crop&w=150&q=80\"\n                    alt=\"Mercedes interior\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div className=\"border-2 border-gray-300 hover:border-cebleu-purple transition-colors rounded-md overflow-hidden w-16 h-16 flex-shrink-0\">\n                  <img\n                    src=\"https://images.unsplash.com/photo-1631294839366-1caf083c3343?auto=format&fit=crop&w=150&q=80\"\n                    alt=\"Mercedes dashboard\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n                <div className=\"border-2 border-gray-300 hover:border-cebleu-purple transition-colors rounded-md overflow-hidden w-16 h-16 flex-shrink-0\">\n                  <img\n                    src=\"https://images.unsplash.com/photo-1571987502227-9231b837d92a?auto=format&fit=crop&w=150&q=80\"\n                    alt=\"Mercedes rear view\"\n                    className=\"w-full h-full object-cover\"\n                  />\n                </div>\n              </div>\n            </div>\n\n            <button className=\"mt-3 w-full bg-cebleu-purple-700 hover:bg-cebleu-purple-800 text-white font-medium py-2 px-4 rounded-md transition-colors\">\n              {t(\"index.discoverVehicle\")}\n            </button>\n          </div>\n\n          <div className=\"hidden md:block border-l border-gray-200\"></div>\n\n          <div className=\"flex-1 md:pl-4\">\n            <h4 className=\"font-medium text-gray-700 mb-3\">\n              {t(\"index.similarVehicles\")}\n            </h4>\n\n            <div className=\"space-y-4\">\n              <div className=\"bg-gray-50 rounded-lg p-3 flex gap-3 hover:bg-gray-100 transition-colors cursor-pointer\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1617469767053-d3b16ee6829f?auto=format&fit=crop&w=150&q=80\"\n                  alt=\"BMW i7\"\n                  className=\"w-20 h-20 object-cover rounded-md\"\n                />\n                <div>\n                  <h5 className=\"font-medium text-sm\">BMW i7 xDrive60</h5>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {t(\"index.electricSedanBMW\")}\n                  </p>\n                  <div className=\"mt-1\">\n                    <span className=\"font-bold text-gray-900\">92 800€</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 rounded-lg p-3 flex gap-3 hover:bg-gray-100 transition-colors cursor-pointer\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1606016159991-dfe4f2746ad5?auto=format&fit=crop&w=150&q=80\"\n                  alt=\"Audi e-tron\"\n                  className=\"w-20 h-20 object-cover rounded-md\"\n                />\n                <div>\n                  <h5 className=\"font-medium text-sm\">Audi e-tron GT</h5>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {t(\"index.sportbackElectric\")}\n                  </p>\n                  <div className=\"mt-1\">\n                    <span className=\"font-bold text-gray-900\">86 500€</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 rounded-lg p-3 flex gap-3 hover:bg-gray-100 transition-colors cursor-pointer\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1562911791-c7a97b729ec5?auto=format&fit=crop&w=150&q=80\"\n                  alt=\"Tesla Model S\"\n                  className=\"w-20 h-20 object-cover rounded-md\"\n                />\n                <div>\n                  <h5 className=\"font-medium text-sm\">Tesla Model S Plaid</h5>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {t(\"index.electricSedanTesla\")}\n                  </p>\n                  <div className=\"mt-1\">\n                    <span className=\"font-bold text-gray-900\">101 990€</span>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"bg-gray-50 rounded-lg p-3 flex gap-3 hover:bg-gray-100 transition-colors cursor-pointer\">\n                <img\n                  src=\"https://images.unsplash.com/photo-1603584173870-7f23fdae1b7a?auto=format&fit=crop&w=150&q=80\"\n                  alt=\"Porsche Taycan\"\n                  className=\"w-20 h-20 object-cover rounded-md\"\n                />\n                <div>\n                  <h5 className=\"font-medium text-sm\">Porsche Taycan Turbo</h5>\n                  <p className=\"text-xs text-gray-500 mt-1\">\n                    {t(\"index.sportElectric\")}\n                  </p>\n                  <div className=\"mt-1\">\n                    <span className=\"font-bold text-gray-900\">96 254€</span>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <button className=\"mt-3 w-full border border-gray-300 text-gray-700 hover:bg-gray-50 font-medium py-2 px-4 rounded-md transition-colors\">\n              {t(\"index.viewAllModels\")}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default CarAdvertisement;\n","size_bytes":7658},"client/src/components/home/CartComponent.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  ShoppingCart, \n  Plus, \n  Minus, \n  Trash2, \n  ArrowRight,\n  X\n} from \"lucide-react\";\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n  SheetTrigger,\n} from \"@/components/ui/sheet\";\n\ninterface CartItem {\n  id: string;\n  productId: string;\n  quantity: number;\n  name: string;\n  description: string;\n  price: number;\n  images: { url: string }[];\n  stock: number;\n  createdAt: string;\n}\n\ninterface CartComponentProps {\n  className?: string;\n}\n\nexport default function CartComponent({ className }: CartComponentProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [isOpen, setIsOpen] = useState(false);\n\n  // Fetch cart items\n  const { data: cartItems = [], isLoading } = useQuery<CartItem[]>({\n    queryKey: [\"/api/cart\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/cart\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to fetch cart\");\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Update cart item quantity\n  const updateQuantityMutation = useMutation({\n    mutationFn: async ({ productId, quantity }: { productId: string; quantity: number }) => {\n      const response = await fetch(`/api/cart/${productId}`, {\n        method: \"PATCH\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ quantity }),\n      });\n      if (!response.ok) throw new Error(\"Failed to update quantity\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to update quantity\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove item from cart\n  const removeItemMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const response = await fetch(`/api/cart/${productId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(\"Failed to remove item\");\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Success\",\n        description: \"Item removed from cart\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove item\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateQuantity = (productId: string, newQuantity: number) => {\n    if (newQuantity < 1) return;\n    updateQuantityMutation.mutate({ productId, quantity: newQuantity });\n  };\n\n  const removeItem = (productId: string) => {\n    removeItemMutation.mutate(productId);\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat(\"en-DZ\", {\n      style: \"currency\",\n      currency: \"DZD\",\n      minimumFractionDigits: 0,\n    }).format(price);\n  };\n\n  const getTotalItems = () => {\n    return cartItems.reduce((total, item) => total + item.quantity, 0);\n  };\n\n  const getTotalPrice = () => {\n    return cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n  };\n\n  const cartItemCount = getTotalItems();\n  const totalPrice = getTotalPrice();\n  const { t } = useTranslation();\n\n  return (\n    <Sheet open={isOpen} onOpenChange={setIsOpen}>\n      <SheetTrigger asChild>\n        <Button variant=\"outline\" size=\"sm\" className={`relative ${className}`}>\n          <ShoppingCart className=\"h-4 w-4\" />\n          {cartItemCount > 0 && (\n            <Badge className=\"absolute -top-2 -right-2 h-5 w-5 rounded-full p-0 flex items-center justify-center text-xs\">\n              {cartItemCount}\n            </Badge>\n          )}\n        </Button>\n      </SheetTrigger>\n\n      <SheetContent className=\"w-full sm:max-w-lg\">\n        <SheetHeader>\n          <SheetTitle className=\"flex items-center gap-2\">\n            <ShoppingCart className=\"h-5 w-5\" />\n            {t(\"cart.title\")} ({cartItemCount} {t(\"cart.subtotal.items\")})\n          </SheetTitle>\n          <SheetDescription>\n            {t(\"cart.description\")}\n          </SheetDescription>\n        </SheetHeader>\n\n        <div className=\"mt-6 flex-1 overflow-y-auto\">\n          {isLoading ? (\n            <div className=\"space-y-4\">\n              {Array.from({ length: 3 }).map((_, i) => (\n                <div key={i} className=\"animate-pulse\">\n                  <div className=\"flex gap-4\">\n                    <div className=\"h-16 w-16 bg-gray-200 rounded\"></div>\n                    <div className=\"flex-1\">\n                      <div className=\"h-4 bg-gray-200 rounded mb-2\"></div>\n                      <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : cartItems.length === 0 ? (\n            <div className=\"text-center py-8\">\n              <ShoppingCart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">\n                {t(\"cart.empty.title\")}\n              </h3>\n              <p className=\"text-gray-600 mb-4\">\n                {t(\"cart.empty.subtitle\")}\n              </p>\n              <Button onClick={() => setIsOpen(false)}>\n                {t(\"cart.empty.button\")}\n              </Button>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {cartItems.map((item) => (\n                <Card key={item.id}>\n                  <CardContent className=\"p-4\">\n                    <div className=\"flex gap-4\">\n                      <img\n                        src={item.images?.[0]?.url || \"/placeholder-image.jpg\"}\n                        alt={item.name}\n                        className=\"h-16 w-16 object-cover rounded-lg\"\n                      />\n                      <div className=\"flex-1 min-w-0\">\n                        <h4 className=\"font-medium text-sm truncate\">\n                          {item.name}\n                        </h4>\n                        <p className=\"text-sm text-gray-600\">\n                          {item.description}\n                        </p>\n                        <div className=\"flex items-center justify-between mt-2\">\n                          <span className=\"font-semibold text-blue-600\">\n                            {formatPrice(item.price)}\n                          </span>\n                          <div className=\"flex items-center gap-2\">\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateQuantity(item.productId, item.quantity - 1)\n                              }\n                              disabled={\n                                item.quantity <= 1 ||\n                                updateQuantityMutation.isPending\n                              }\n                            >\n                              <Minus className=\"h-3 w-3\" />\n                            </Button>\n                            <span className=\"w-8 text-center text-sm\">\n                              {item.quantity}\n                            </span>\n                            <Button\n                              variant=\"outline\"\n                              size=\"sm\"\n                              onClick={() =>\n                                updateQuantity(item.productId, item.quantity + 1)\n                              }\n                              disabled={\n                                item.quantity >= item.stock ||\n                                updateQuantityMutation.isPending\n                              }\n                            >\n                              <Plus className=\"h-3 w-3\" />\n                            </Button>\n                          </div>\n                        </div>\n                      </div>\n                      <Button\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeItem(item.productId)}\n                        disabled={removeItemMutation.isPending}\n                        className=\"text-red-500 hover:text-red-700\"\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    </div>\n                    <div className=\"mt-3 flex justify-between items-center text-sm\">\n                      <span className=\"text-gray-600\">\n                        {t(\"cart.subtotal\")}: {formatPrice(item.price * item.quantity)}\n                      </span>\n                      {item.stock < 5 && (\n                        <Badge variant=\"destructive\" className=\"text-xs\">\n                          {t(\"cart.onlyLeft\", { count: item.stock })}\n                        </Badge>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </div>\n\n        {cartItems.length > 0 && (\n          <div className=\"border-t pt-4 mt-6\">\n            <div className=\"space-y-2\">\n              <div className=\"flex justify-between text-sm\">\n                <span>{t(\"cart.subtotal.items\", { count: cartItemCount })}</span>\n                <span>{formatPrice(totalPrice)}</span>\n              </div>\n              <div className=\"flex justify-between text-sm\">\n                <span>{t(\"cart.shipping\")}</span>\n                <span className=\"text-green-600\">{t(\"cart.shipping.free\")}</span>\n              </div>\n              <Separator />\n              <div className=\"flex justify-between font-semibold text-lg\">\n                <span>{t(\"cart.total\")}</span>\n                <span className=\"text-blue-600\">{formatPrice(totalPrice)}</span>\n              </div>\n            </div>\n\n            <div className=\"mt-4 space-y-2\">\n              <Button\n                className=\"w-full\"\n                size=\"lg\"\n                onClick={() => (window.location.href = \"/checkout\")}\n                data-testid=\"button-proceed-checkout\"\n              >\n                {t(\"cart.checkout\")} • {formatPrice(totalPrice)}\n                <ArrowRight className=\"h-4 w-4 ml-2\" />\n              </Button>\n              <Button\n                variant=\"outline\"\n                className=\"w-full\"\n                onClick={() => setIsOpen(false)}\n              >\n                {t(\"cart.empty.button\")}\n              </Button>\n            </div>\n          </div>\n        )}\n      </SheetContent>\n    </Sheet>\n  );\n}","size_bytes":11166},"client/src/components/home/FeaturesGrid.tsx":{"content":"import React from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight } from \"lucide-react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst FeaturesGrid = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"grid grid-cols-2 gap-4\">\n      <div className=\"bg-white rounded-lg p-6 h-full flex flex-col border border-cebleu-purple-200 shadow-md bg-gradient-to-br from-white to-cebleu-blue-extra-pale\">\n        <div className=\"text-center mb-4\">\n          <h2 className=\"text-xl font-bold mb-3 text-cebleu-purple-dark\">\n            {t(\"index.maximizeSales\")}\n          </h2>\n          <p className=\"text-sm text-cebleu-purple-700 mb-4\">\n            {t(\"index.leverageTools\")}\n          </p>\n          <Button className=\"bg-cebleu-gold text-cebleu-dark hover:bg-cebleu-gold-rich text-sm h-9 px-4 mx-auto\">\n            {t(\"index.exploreTools\")} <ArrowRight className=\"ml-1\" size={14} />\n          </Button>\n        </div>\n        <div className=\"mt-auto flex justify-center\">\n          <img\n            alt=\"Tableau de Bord d'Analytique\"\n            className=\"rounded-md w-full max-w-[220px] h-auto shadow-sm\"\n            src=\"/lovable-uploads/b62cf8e5-cf2c-41ec-8372-82ee496531d2.png\"\n          />\n        </div>\n      </div>\n\n      <div className=\"bg-white rounded-lg p-6 h-full flex flex-col border border-cebleu-purple-200 shadow-md bg-gradient-to-br from-white to-cebleu-blue-extra-pale\">\n        <div className=\"text-center mb-4\">\n          <h2 className=\"text-xl font-bold mb-3 text-cebleu-purple-dark\">\n            {t(\"index.discoverUniqueProducts\")}\n          </h2>\n          <p className=\"text-sm text-cebleu-purple-700 mb-4\">\n            {t(\"index.browseThousands\")}\n          </p>\n          <Button className=\"bg-cebleu-gold text-cebleu-dark hover:bg-cebleu-gold-rich flex items-center justify-center text-sm h-9 px-4 mx-auto\">\n            {t(\"index.startBuying\")} <ArrowRight className=\"ml-1\" size={14} />\n          </Button>\n        </div>\n        <div className=\"mt-auto flex justify-center\">\n          <img\n            alt=\"Marketplace\"\n            src=\"/lovable-uploads/ad33cdde-3fc1-46be-9746-30992b60cf4c.png\"\n            className=\"rounded-md w-full max-w-[220px] h-auto shadow-sm\"\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default FeaturesGrid;\n","size_bytes":2342},"client/src/components/home/HeroSection.tsx":{"content":"import React from \"react\";\n\nimport { useTranslation } from \"react-i18next\";\nimport CategoryMenu from \"../SubComponents/CategoryMenu\";\nimport ImageBanner from \"../SubComponents/ImageBanner\";\nimport PopularSearches from \"../SubComponents/PopularSearches\";\n\nconst HeroSection = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"grid grid-cols-12 gap-4\">\n      <div className=\"col-span-3 animate-on-scroll opacity-0\">\n        <div className=\"bg-white rounded-lg p-3 border border-cebleu-purple-200 shadow-sm\">\n          <CategoryMenu />\n        </div>\n      </div>\n\n      <div className=\"col-span-6 space-y-4\">\n        <ImageBanner imageSrc=\"/lovable-uploads/de7383ff-f064-4975-acfb-06e5f88275b0.png\" />\n      </div>\n\n      <div className=\"col-span-3\">\n        <PopularSearches />\n      </div>\n    </div>\n  );\n};\n\nexport default HeroSection;\n","size_bytes":862},"client/src/components/home/InfoBanner.tsx":{"content":"import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst InfoBanner = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-cebleu-blue-dark text-white p-4 rounded-lg grid grid-cols-3 gap-4 shadow-md\">\n      <div className=\"flex items-center gap-3\">\n        <div className=\"text-cebleu-gold\">\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M12 2L15.09 8.26L22 9.27L17 14.14L18.18 21.02L12 17.77L5.82 21.02L7 14.14L2 9.27L8.91 8.26L12 2Z\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </div>\n        <div>\n          <h3 className=\"text-xs font-semibold\">{t(\"footer.fastDelivery\")}</h3>\n          <p className=\"text-xs text-gray-400\">{t(\"footer.onOrdersOver\")}</p>\n        </div>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <div className=\"text-cebleu-gold\">\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            <path\n              d=\"M9 12L11 14L15 10\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </div>\n        <div>\n          <h3 className=\"text-xs font-semibold\">\n            {t(\"footer.securePayments\")}\n          </h3>\n          <p className=\"text-xs text-gray-400\">\n            {t(\"footer.protectedPayments\")}\n          </p>\n        </div>\n      </div>\n      <div className=\"flex items-center gap-3\">\n        <div className=\"text-cebleu-gold\">\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M20 12V22H4V12\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            <path\n              d=\"M22 7H2V12H22V7Z\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            <path\n              d=\"M12 22V7\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            <path\n              d=\"M12 7H16.5C17.163 7 17.7989 6.73661 18.2678 6.26777C18.7366 5.79893 19 5.16304 19 4.5C19 3.83696 18.7366 3.20107 18.2678 2.73223C17.7989 2.26339 17.163 2 16.5 2C13 2 12 7 12 7Z\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n            <path\n              d=\"M12 7H7.5C6.83696 7 6.20107 6.73661 5.73223 6.26777C5.26339 5.79893 5 5.16304 5 4.5C5 3.83696 5.26339 3.20107 5.73223 2.73223C6.20107 2.26339 6.83696 2 7.5 2C11 2 12 7 12 7Z\"\n              stroke=\"#D4AF37\"\n              strokeWidth=\"2\"\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n            />\n          </svg>\n        </div>\n        <div>\n          <h3 className=\"text-xs font-semibold\">\n            {t(\"footer.moneyBackGuarantee\")}\n          </h3>\n          <p className=\"text-xs text-gray-400\">{t(\"footer.returnPolicy\")}</p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default InfoBanner;\n","size_bytes":3983},"client/src/components/home/MainContent.tsx":{"content":"import React from \"react\";\nimport SellerBuyerTabs from \"./SellerBuyerTabs\";\nimport AdventureCard from \"./AdventureCard\";\nimport FeaturesGrid from \"./FeaturesGrid\";\nimport InfoBanner from \"./InfoBanner\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport { useTranslation } from \"react-i18next\";\nimport CategoryMenu from \"../SubComponents/CategoryMenu\";\nimport PopularSearches from \"../SubComponents/PopularSearches\";\n\nconst MainContent = () => {\n  const isMobile = useIsMobile();\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"space-y-3 sm:space-y-4\">\n      {isMobile && (\n        <div className=\"bg-white rounded-lg p-3 border border-cebleu-purple-200 shadow-sm mb-3\">\n          <CategoryMenu />\n        </div>\n      )}\n      <SellerBuyerTabs />\n      <AdventureCard />\n      <FeaturesGrid />\n      <InfoBanner />\n      {isMobile && (\n        <div className=\"mt-3\">\n          <PopularSearches />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default MainContent;\n","size_bytes":994},"client/src/components/home/MainLayout.tsx":{"content":"import React from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\n\nimport MainContent from \"@/components/home/MainContent\";\n\nimport CarAdvertisement from \"./CarAdvertisement\";\nimport RealEstateAd from \"./RealEstateAd\";\nimport TechAdvertisement from \"./TechAdvertisement\";\nimport BestSellers from \"./BestSellers\";\nimport HeroContent from \"../SubComponents/HeroContent\";\nimport ExtendedCategoryMenu from \"../SubComponents/ExtendedCategoryMenu\";\n// import { useLanguage } from '@/contexts/LanguageContext';\n\nconst MainLayout = () => {\n  const isMobile = useIsMobile();\n  // const { t } = useLanguage();\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-12 gap-4 md:gap-6 mb-6\">\n      <div className=\"hidden md:block md:col-span-3 animate-on-scroll\">\n        <div className=\"bg-white rounded-lg p-4 border border-gray-200 shadow-sm h-full overflow-visible\">\n          <ExtendedCategoryMenu />\n        </div>\n      </div>\n\n      <div className=\"col-span-1 md:col-span-6\">\n        <MainContent />\n        <CarAdvertisement />\n      </div>\n\n      <div className=\"hidden md:flex md:col-span-3 md:items-center flex-col space-y-4\">\n        <div className=\"bg-white rounded-lg p-4 border border-gray-200 shadow-sm w-full overflow-visible\">\n          <HeroContent />\n        </div>\n\n        <RealEstateAd />\n        <TechAdvertisement />\n      </div>\n\n      {/* BestSellers positioned below all content, spanning all columns with proper padding */}\n      <div className=\"col-span-1 md:col-span-12 mt-6 bg-white rounded-lg p-4 border border-gray-200 shadow-sm\">\n        <BestSellers />\n      </div>\n    </div>\n  );\n};\n\nexport default MainLayout;\n","size_bytes":1656},"client/src/components/home/RealEstateAd.tsx":{"content":"import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nconst RealEstateAd = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-white rounded-lg p-4 border border-gray-200 shadow-sm w-full overflow-visible\">\n      <div className=\"h-auto space-y-3\">\n        <h3 className=\"font-bold text-lg text-gray-800\">\n          {t(\"realEstate.title\")}\n        </h3>\n        <img\n          src=\"https://images.unsplash.com/photo-1459767129954-1b1c1f9b9ace?auto=format&fit=crop&w=600&q=80\"\n          alt=\"Apartment building\"\n          className=\"w-full h-32 object-cover rounded-md\"\n        />\n        <div className=\"space-y-2\">\n          <h4 className=\"font-medium text-sm\">Appartement de Luxe</h4>\n          <p className=\"text-xs text-gray-600\">\n            3 chambres • 2 salles de bain • 120m²\n          </p>\n          <div className=\"flex items-baseline gap-2\">\n            <span className=\"font-bold text-sm text-gray-900\">259 000€</span>\n            <span className=\"text-xs text-gray-500\">Saint-Germain</span>\n          </div>\n          <button className=\"w-full bg-cebleu-purple hover:bg-cebleu-purple-dark text-white text-sm font-medium py-1.5 px-3 rounded-md transition-colors\">\n            Voir le bien\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default RealEstateAd;\n","size_bytes":1352},"client/src/components/home/SellerBuyerTabs.tsx":{"content":"import React, { useState } from \"react\";\nimport {\n  Store,\n  ShoppingBag,\n  BarChart2,\n  ShieldCheck,\n  Package,\n  CreditCard,\n  ChevronRight,\n} from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTranslation } from \"react-i18next\";\n\nconst SellerBuyerTabs = () => {\n  const [activeTab, setActiveTab] = useState(\"sellers\");\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-md overflow-hidden border border-cebleu-purple-200\">\n      <div className=\"grid grid-cols-2\">\n        <div\n          className={`${\n            activeTab === \"sellers\"\n              ? \"bg-gold-gradient text-cebleu-dark\"\n              : \"bg-cebleu-purple-100/50 text-cebleu-gray-dark\"\n          } font-medium p-3 text-center cursor-pointer transition-colors`}\n          onClick={() => setActiveTab(\"sellers\")}\n        >\n          {t(\"index.becomeSeller\")}\n        </div>\n        <div\n          className={`${\n            activeTab === \"buyers\"\n              ? \"bg-gold-gradient text-cebleu-dark\"\n              : \"bg-cebleu-purple-100/50 text-cebleu-gray-dark\"\n          } font-medium p-3 text-center cursor-pointer transition-colors`}\n          onClick={() => setActiveTab(\"buyers\")}\n        >\n          {t(\"index.buyOnCebleu\")}\n        </div>\n      </div>\n\n      {activeTab === \"sellers\" && (\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-semibold text-cebleu-dark mb-2\">\n            {t(\"index.developBusiness\")}\n          </h2>\n          <p className=\"text-gray-600 mb-6 text-sm\">{t(\"index.expandReach\")}</p>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"flex flex-col items-center text-center\">\n              <div className=\"w-12 h-12 bg-cebleu-gold/10 rounded-full flex items-center justify-center mb-3\">\n                <Store className=\"text-cebleu-gold\" size={24} />\n              </div>\n              <h3 className=\"font-medium text-sm mb-1\">\n                {t(\"index.createShop\")}\n              </h3>\n              <p className=\"text-xs text-gray-500\">\n                {t(\"index.buildOnlinePresence\")}\n              </p>\n            </div>\n\n            <div className=\"flex flex-col items-center text-center\">\n              <div className=\"w-12 h-12 bg-cebleu-purple-100 rounded-full flex items-center justify-center mb-3\">\n                <ShoppingBag className=\"text-cebleu-purple\" size={24} />\n              </div>\n              <h3 className=\"font-medium text-sm mb-1\">\n                {t(\"index.showcaseProducts\")}\n              </h3>\n              <p className=\"text-xs text-gray-500\">{t(\"index.uploadPrice\")}</p>\n            </div>\n\n            <div className=\"flex flex-col items-center text-center\">\n              <div className=\"w-12 h-12 bg-cebleu-gold/10 rounded-full flex items-center justify-center mb-3\">\n                <BarChart2 className=\"text-cebleu-gold\" size={24} />\n              </div>\n              <h3 className=\"font-medium text-sm mb-1\">\n                {t(\"index.analyzePerformance\")}\n              </h3>\n              <p className=\"text-xs text-gray-500\">\n                {t(\"index.optimizeSelling\")}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <Button className=\"bg-cebleu-gold text-cebleu-dark hover:bg-cebleu-gold/90 group text-sm px-4 py-2 h-auto\">\n              {t(\"index.startSelling\")}\n              <ChevronRight className=\"ml-1\" size={16} />\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {activeTab === \"buyers\" && (\n        <div className=\"p-6\">\n          <h2 className=\"text-xl font-semibold text-cebleu-dark mb-2\">\n            {t(\"index.ultimateShopping\")}\n          </h2>\n          <p className=\"text-gray-600 mb-6 text-sm\">\n            {t(\"index.discoverQuality\")}\n          </p>\n\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n            <div className=\"flex flex-col items-center text-center\">\n              <div className=\"w-12 h-12 bg-cebleu-gold/10 rounded-full flex items-center justify-center mb-3\">\n                <ShieldCheck className=\"text-cebleu-gold\" size={24} />\n              </div>\n              <h3 className=\"font-medium text-sm mb-1\">\n                {t(\"index.totalProtection\")}\n              </h3>\n              <p className=\"text-xs text-gray-500\">\n                {t(\"index.secureTransactions\")}\n              </p>\n            </div>\n\n            <div className=\"flex flex-col items-center text-center\">\n              <div className=\"w-12 h-12 bg-cebleu-purple-100 rounded-full flex items-center justify-center mb-3\">\n                <Package className=\"text-cebleu-purple\" size={24} />\n              </div>\n              <h3 className=\"font-medium text-sm mb-1\">\n                {t(\"index.fastShipping\")}\n              </h3>\n              <p className=\"text-xs text-gray-500\">\n                {t(\"index.rapidDelivery\")}\n              </p>\n            </div>\n\n            <div className=\"flex flex-col items-center text-center\">\n              <div className=\"w-12 h-12 bg-cebleu-gold/10 rounded-full flex items-center justify-center mb-3\">\n                <CreditCard className=\"text-cebleu-gold\" size={24} />\n              </div>\n              <h3 className=\"font-medium text-sm mb-1\">\n                {t(\"index.hassleReturns\")}\n              </h3>\n              <p className=\"text-xs text-gray-500\">\n                {t(\"index.simpleReturns\")}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex justify-center\">\n            <Button className=\"bg-cebleu-gold text-cebleu-dark hover:bg-cebleu-gold/90 group text-sm px-4 py-2 h-auto\">\n              {t(\"index.shopNow\")}\n              <ChevronRight className=\"ml-1\" size={16} />\n            </Button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default SellerBuyerTabs;\n","size_bytes":5897},"client/src/components/home/TechAdvertisement.tsx":{"content":"import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@/components/ui/button\";\nimport { Plane, Calendar, Clock, Star, TrendingUp, Globe } from \"lucide-react\";\nimport { AspectRatio } from \"@/components/ui/aspect-ratio\";\nimport { use } from \"passport\";\n\nconst TechAdvertisement = () => {\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"bg-gradient-to-b from-white via-sky-50 to-blue-100 rounded-lg border border-blue-200 shadow-sm w-full overflow-hidden flex flex-col h-full group hover:shadow-md transition-all duration-300\">\n      <div className=\"flex-grow flex flex-col space-y-2 p-3\">\n        <div className=\"flex items-center justify-between\">\n          <h3 className=\"font-bold text-sm text-blue-800 flex items-center\">\n            <Globe className=\"mr-1.5 text-blue-600\" size={16} />{\" \"}\n            {t(\"common.flightBooking\")}\n          </h3>\n          <div className=\"bg-gradient-to-r from-red-500 to-red-600 text-white text-xs px-2 py-0.5 rounded-full font-medium shadow-sm group-hover:scale-110 transition-transform\">\n            -30%\n          </div>\n        </div>\n\n        <div className=\"relative overflow-hidden rounded-md shadow-sm\">\n          <AspectRatio ratio={16 / 9} className=\"bg-blue-50\">\n            <img\n              src=\"https://images.unsplash.com/photo-1605810230434-7631ac76ec81?auto=format&fit=crop&w=600&q=80\"\n              alt=\"Airplane in sky\"\n              className=\"w-full h-full object-cover transition-transform duration-500 group-hover:scale-105\"\n            />\n          </AspectRatio>\n          <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/60 to-transparent p-2\">\n            <div className=\"flex items-center\">\n              {[1, 2, 3, 4, 5].map((_, index) => (\n                <Star\n                  key={index}\n                  fill=\"#FFCA28\"\n                  stroke=\"none\"\n                  className=\"w-3 h-3 mr-0.5\"\n                />\n              ))}\n              <span className=\"text-white text-xs ml-1 font-medium\">4.9/5</span>\n            </div>\n          </div>\n\n          <div className=\"absolute top-2 right-2 bg-blue-600 text-white rounded-full p-1.5 shadow-md group-hover:bg-blue-700 transition-colors\">\n            <TrendingUp size={14} />\n          </div>\n        </div>\n\n        <div className=\"flex-grow flex flex-col space-y-2\">\n          <div className=\"bg-white/70 backdrop-blur-sm p-2 rounded-md border border-blue-100 shadow-inner\">\n            <h4 className=\"font-medium text-xs text-blue-700 mb-1.5 flex items-center\">\n              <Calendar className=\"mr-1 text-blue-500\" size={14} />{\" \"}\n              {t(\"common.topDestinations\")}\n            </h4>\n            <div className=\"space-y-1.5\">\n              <div className=\"flex items-center justify-between text-xs hover:bg-blue-50 p-1 rounded transition-colors cursor-pointer\">\n                <span className=\"font-medium\">Paris → New York</span>\n                <span className=\"text-red-600 font-bold\">399€</span>\n              </div>\n              <div className=\"flex items-center justify-between text-xs hover:bg-blue-50 p-1 rounded transition-colors cursor-pointer\">\n                <span className=\"font-medium\">London → Tokyo</span>\n                <span className=\"text-red-600 font-bold\">549€</span>\n              </div>\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-between bg-gradient-to-r from-blue-50 to-blue-100 p-1.5 rounded-md shadow-inner text-xs\">\n            <div className=\"flex items-center text-blue-700\">\n              <Clock size={12} className=\"mr-1 animate-pulse text-red-500\" />\n              <span>{t(\"common.limitedTimeOffer\")}</span>\n            </div>\n            <div className=\"bg-blue-600 text-white px-1.5 py-0.5 rounded-full text-[10px] font-bold\">\n              48h\n            </div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"bg-gradient-to-r from-blue-500 to-blue-700 p-2.5 transition-colors group-hover:from-blue-600 group-hover:to-blue-800\">\n        <Button className=\"w-full h-7 bg-white hover:bg-blue-50 text-blue-700 text-xs font-medium py-0 px-2 rounded-md transition-colors shadow-sm flex items-center justify-center\">\n          <Plane className=\"mr-1 text-blue-600\" size={14} />\n          {t(\"common.bookNow\")}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nexport default TechAdvertisement;\n","size_bytes":4445},"client/src/components/layout/headerC.tsx":{"content":"import React, { useRef } from \"react\";\r\nimport { Search, Heart, User, ChevronDown, Store } from \"lucide-react\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { ShoppingCartIcon } from \"../SubComponents/ShoppingCartIcon\";\r\nimport SearchCommand from \"../SubComponents/SearchCommand\";\nimport CartComponent from \"../home/CartComponent\";\r\n// import { useLanguage } from \"../contexts/LanguageContext\";\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from \"@/components/ui/dropdown-menu\";\r\nimport { useAuth } from \"@/hooks/use-auth\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { Link } from \"wouter\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\r\nimport { LanguageSwitcher } from \"@/components/ui/language-switcher\";\r\nconst HeaderC = () => {\r\n  const [searchOpen, setSearchOpen] = React.useState(false);\r\n  const searchRef = useRef<HTMLDivElement>(null);\r\n  //   const { language, setLanguage, t, currentFlag } = useLanguage();\r\n  const { user, logoutMutation } = useAuth();\r\n  const { t } = useTranslation();\r\n\r\n  const handleLogout = () => {\r\n    logoutMutation.mutate();\r\n  };\r\n\r\n  const languages = [\r\n    { code: \"en\", name: \"English\", flag: \"🇬🇧\" },\r\n    { code: \"fr\", name: \"Français\", flag: \"🇫🇷\" },\r\n    { code: \"ar\", name: \"العربية\", flag: \"🇩🇿\" },\r\n  ];\r\n\r\n  const handleLanguageChange = (langCode: \"en\" | \"fr\" | \"ar\") => {\r\n    // setLanguage(langCode);\r\n  };\r\n\r\n  const getDashboardPath = () => {\r\n    if (!user) return \"/auth\";\r\n    switch (user.role) {\r\n      case \"admin\":\r\n        return \"/dashboard/admin\";\r\n      case \"seller\":\r\n        return \"/dashboard/seller\";\r\n      default:\r\n        return \"/dashboard/client\";\r\n    }\r\n  };\r\n\r\n  return (\r\n    <header className=\"w-full bg-white border-b border-cebleu-purple-200 shadow-sm\">\n      <div className=\"max-w-[1920px] mx-auto px-4 py-3\">\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center gap-6\">\n            <div className=\"flex items-center\">\n              <div className=\"h-12 w-auto\"></div>\n            </div>\n\n            <div className=\"flex items-center\">\n              <button className=\"flex items-center gap-2 bg-cebleu-gold-light/10 border border-cebleu-gold text-cebleu-dark px-4 py-2 rounded-full hover:bg-cebleu-gold-light/20 transition-colors group\">\n                <Store\n                  size={20}\n                  className=\"text-cebleu-gold group-hover:text-cebleu-gold-rich transition-colors\"\n                />\n                <span className=\"font-medium group-hover:text-cebleu-dark transition-colors\">\n                  {t(\"index.becomeSeller\")}\n                </span>\n              </button>\n            </div>\n          </div>\n\n          <div className=\"relative flex-1 max-w-3xl mx-6\" ref={searchRef}>\n            <div className=\"relative flex items-center\">\n              <Input\n                type=\"text\"\n                placeholder={t(\"nav.searchPlaceholder\")}\n                className=\"w-full py-2 pl-4 pr-10 rounded-full border border-cebleu-purple-300 focus:border-cebleu-purple-500 focus:ring-2 focus:ring-cebleu-purple-200 bg-cebleu-purple-50/30\"\n                onClick={() => setSearchOpen(true)}\n              />\n              <div className=\"absolute right-3 p-1 rounded-full text-cebleu-purple\">\n                <Search size={18} />\n              </div>\n            </div>\n\n            <SearchCommand\n              isOpen={searchOpen}\n              onClose={() => setSearchOpen(false)}\n              searchRef={searchRef}\n            />\n          </div>\n\n          <div className=\"flex items-center gap-6\">\n            <div className=\"font-medium text-cebleu-purple hover:text-cebleu-purple-dark transition-colors cursor-pointer\">\n              <span>{t(\"nav.deals\")}</span>\n            </div>\n\n            <div className=\"flex items-center gap-1.5 text-cebleu-purple hover:text-cebleu-purple-dark transition-colors cursor-pointer\">\n              <User size={22} />\n            </div>\n\n            <div className=\"flex items-center gap-1.5 text-cebleu-purple hover:text-cebleu-purple-dark transition-colors cursor-pointer\">\n              <Link href=\"/wishlist\">\n                <Heart size={22} />\n              </Link>\n            </div>\n\n            <div className=\"flex items-center gap-1.5 text-cebleu-purple hover:text-cebleu-purple-dark transition-colors cursor-pointer\">\n              <CartComponent className=\"text-cebleu-purple hover:text-cebleu-purple-dark\" />\n            </div>\n\n            <LanguageSwitcher />\n\n            {user ? (\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button\n                    variant=\"ghost\"\n                    className=\"flex items-center space-x-2 p-1\"\n                    data-testid=\"button-user-menu\"\n                  >\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage\n                        src={user.avatar || undefined}\n                        alt={user.username}\n                      />\n                      <AvatarFallback>\n                        {user.firstName?.[0]}\n                        {user.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\" className=\"w-56\">\n                  <div className=\"flex items-center justify-start gap-2 p-2\">\n                    <Avatar className=\"h-8 w-8\">\n                      <AvatarImage\n                        src={user.avatar || undefined}\n                        alt={user.username}\n                      />\n                      <AvatarFallback>\n                        {user.firstName?.[0]}\n                        {user.lastName?.[0]}\n                      </AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex flex-col space-y-1 leading-none\">\n                      <p\n                        className=\"font-medium text-sm\"\n                        data-testid=\"text-user-name\"\n                      >\n                        {user.firstName} {user.lastName}\n                      </p>\n                      <p\n                        className=\"w-[200px] truncate text-xs text-muted-foreground\"\n                        data-testid=\"text-user-email\"\n                      >\n                        {user.email}\n                      </p>\n                    </div>\n                  </div>\n                  <DropdownMenuSeparator />\n                  <Link href={getDashboardPath()}>\n                    <DropdownMenuItem\n                      className=\"cursor-pointer\"\n                      data-testid=\"link-dashboard\"\n                    >\n                      <User className=\"mr-2 h-4 w-4\" />\n                      {t(\"nav.profile\")}\n                    </DropdownMenuItem>\n                  </Link>\n                  <DropdownMenuSeparator />\n                  <DropdownMenuItem\n                    onClick={handleLogout}\n                    className=\"cursor-pointer text-red-600 hover:text-red-700 hover:bg-red-50\"\n                    data-testid=\"button-logout\"\n                  >\n                    {t(\"nav.logout\")}\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n            ) : (\n              <Link href=\"/auth\">\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  className=\"bg-primary-600 hover:bg-primary-700 text-white\"\n                  data-testid=\"button-login\"\n                >\n                  {t(\"nav.login\")}\n                </Button>\n              </Link>\n            )}\n          </div>\n        </div>\n      </div>\n    </header>\n\r\n  );\r\n};\r\n\r\nexport default HeaderC;\r\n","size_bytes":7962},"client/src/pages/client/wishlist.tsx":{"content":"import { useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { \n  Heart, \n  ShoppingCart, \n  Info, \n  Star, \n  Plus, \n  Minus, \n  Shield, \n  Truck,\n  MessageCircle,\n  ThumbsUp,\n  X\n} from \"lucide-react\";\n\ninterface WishlistProduct {\n  id: string;\n  name: string;\n  brand: string;\n  price: number;\n  originalPrice?: number;\n  image: string;\n  stock: number;\n  rating: number;\n  reviewCount: number;\n  sku: string;\n  weight?: string;\n  category: string;\n  isNew?: boolean;\n  inStock: boolean;\n  description?: string;\n  specifications?: Array<{ name: string; value: string }>;\n  faqs?: Array<{ question: string; answer: string }>;\n  reviews?: Array<{\n    id: string;\n    userName: string;\n    rating: number;\n    comment: string;\n    date: string;\n    verified: boolean;\n    helpful: number;\n  }>;\n}\n\nexport default function WishlistPage() {\n  const { t } = useTranslation();\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedProduct, setSelectedProduct] = useState<WishlistProduct | null>(null);\n  const [productQuantities, setProductQuantities] = useState<Record<string, number>>({});\n  const [newQuestion, setNewQuestion] = useState(\"\");\n\n  // Fetch wishlist items\n  const { data: wishlistItems = [], isLoading } = useQuery<WishlistProduct[]>({\n    queryKey: [\"/api/wishlist\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/wishlist\", {\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(t(\"wishlist.errors.fetch\"));\n      return response.json();\n    },\n    enabled: !!user,\n  });\n\n  // Remove from wishlist mutation\n  const removeFromWishlistMutation = useMutation({\n    mutationFn: async (productId: string) => {\n      const response = await fetch(`/api/wishlist/${productId}`, {\n        method: \"DELETE\",\n        credentials: \"include\",\n      });\n      if (!response.ok) throw new Error(t(\"wishlist.errors.remove\"));\n      return response.json();\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/wishlist\"] });\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"wishlist.messages.removed\"),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"common.error\"),\n        description: t(\"wishlist.errors.remove\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Add to cart mutation\n  const addToCartMutation = useMutation({\n    mutationFn: async ({ productId, quantity }: { productId: string; quantity: number }) => {\n      const response = await fetch(\"/api/cart/add\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify({ productId, quantity }),\n      });\n      if (!response.ok) throw new Error(t(\"wishlist.errors.addToCart\"));\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: t(\"common.success\"),\n        description: t(\"wishlist.messages.addedToCart\"),\n      });\n    },\n    onError: () => {\n      toast({\n        title: t(\"common.error\"),\n        description: t(\"wishlist.errors.addToCart\"),\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  if (!user) {\n    return (\n      <div className=\"min-h-screen bg-gray-50\">\n        <Header />\n        <div className=\"container mx-auto px-4 py-16 text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">{t(\"auth.signInRequired\")}</h1>\n          <p className=\"text-gray-600\">{t(\"wishlist.signInMessage\")}</p>\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <Header />\n\n      <main className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-gray-900\">{t(\"wishlist.title\")}</h1>\n            <p className=\"text-gray-600 mt-1\">\n              {wishlistItems.length} {t(\"wishlist.productsInList\", { count: wishlistItems.length })}\n            </p>\n          </div>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Skeleton loaders */}\n          </div>\n        ) : wishlistItems.length === 0 ? (\n          <div className=\"text-center py-16\">\n            <Heart className=\"h-16 w-16 text-gray-300 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-semibold text-gray-900 mb-2\">{t(\"wishlist.emptyTitle\")}</h2>\n            <p className=\"text-gray-600 mb-8\">{t(\"wishlist.emptyMessage\")}</p>\n            <Button>{t(\"wishlist.browseProducts\")}</Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {/* Product cards */}\n          </div>\n        )}\n\n        {/* Product Details Modal */}\n        <Dialog open={!!selectedProduct} onOpenChange={() => setSelectedProduct(null)}>\n          <DialogContent className=\"max-w-4xl max-h-[90vh] overflow-y-auto\">\n            {selectedProduct && (\n              <>\n                <DialogHeader>\n                  <DialogTitle>{selectedProduct.name}</DialogTitle>\n                </DialogHeader>\n\n                {/* Tabs */}\n                <Tabs defaultValue=\"description\" className=\"mt-6\">\n                  <TabsList className=\"grid w-full grid-cols-3\">\n                    <TabsTrigger value=\"description\">{t(\"product.description\")}</TabsTrigger>\n                    <TabsTrigger value=\"reviews\">\n                      {t(\"product.reviews\")} ({selectedProduct.reviewCount})\n                    </TabsTrigger>\n                    <TabsTrigger value=\"questions\">{t(\"product.questions\")}</TabsTrigger>\n                  </TabsList>\n\n                  <TabsContent value=\"description\" className=\"mt-4\">\n                    <p>{selectedProduct.description || t(\"product.noDescription\")}</p>\n                  </TabsContent>\n\n                  <TabsContent value=\"reviews\" className=\"mt-4\">\n                    {/* Reviews */}\n                  </TabsContent>\n\n                  <TabsContent value=\"questions\" className=\"mt-4\">\n                    <h4>{t(\"product.askQuestion\")}</h4>\n                    <Textarea placeholder={t(\"product.askPlaceholder\")} />\n                    <Button size=\"sm\">{t(\"product.submitQuestion\")}</Button>\n                  </TabsContent>\n                </Tabs>\n              </>\n            )}\n          </DialogContent>\n        </Dialog>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":7285},"client/src/pages/checkout.tsx":{"content":"// import { useState, useEffect } from \"react\";\n// import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\n// import { useAuth } from \"@/hooks/use-auth\";\n// import { Button } from \"@/components/ui/button\";\n// import { Input } from \"@/components/ui/input\";\n// import { Label } from \"@/components/ui/label\";\n// import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\n// import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\n// import { Separator } from \"@/components/ui/separator\";\n// import { Badge } from \"@/components/ui/badge\";\n// import { useToast } from \"@/hooks/use-toast\";\n// import { useLocation } from \"wouter\";\n// import { CreditCard, MapPin, Package, ArrowLeft } from \"lucide-react\";\n\n// interface CartItem {\n//   id: string;\n//   productId: string;\n//   quantity: number;\n//   name: string;\n//   description: string;\n//   price: number;\n//   images: { url: string }[];\n//   stock: number;\n// }\n\n// interface ShippingAddress {\n//   street: string;\n//   city: string;\n//   state: string;\n//   zipCode: string;\n//   country: string;\n// }\n\n// export default function CheckoutPage() {\n//   const { user, isAuthenticated } = useAuth();\n//   const { toast } = useToast();\n//   const [, setLocation] = useLocation();\n//   const queryClient = useQueryClient();\n\n//   const [shippingAddress, setShippingAddress] = useState<ShippingAddress>({\n//     street: \"\",\n//     city: \"\",\n//     state: \"\",\n//     zipCode: \"\",\n//     country: \"Algeria\",\n//   });\n//   const [paymentMethod, setPaymentMethod] = useState(\"Bank card\");\n\n//   // Fetch cart items\n//   const { data: cartItems = [], isLoading } = useQuery<CartItem[]>({\n//     queryKey: [\"/api/cart\"],\n//     enabled: isAuthenticated,\n//   });\n\n//   // Calculate totals\n//   const subtotal = cartItems.reduce((total, item) => total + (item.price * item.quantity), 0);\n//   const shipping = 500; // Fixed shipping cost in DZD\n//   const total = subtotal + shipping;\n\n//   // Checkout mutation\n//   const checkoutMutation = useMutation({\n//     mutationFn: async (checkoutData: {\n//       shippingAddress: ShippingAddress;\n//       paymentMethod: string;\n//     }) => {\n//       const response = await fetch(\"/api/checkout\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         credentials: \"include\",\n//         body: JSON.stringify(checkoutData),\n//       });\n//       if (!response.ok) throw new Error(\"Failed to process checkout\");\n//       return response.json();\n//     },\n//     onSuccess: (data) => {\n//       queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n//       toast({\n//         title: \"Order Placed Successfully!\",\n//         description: `Your order #${data.order.orderNumber} has been confirmed.`,\n//       });\n//       setLocation(\"/orders\");\n//     },\n//     onError: (error) => {\n//       toast({\n//         title: \"Checkout Failed\",\n//         description: error.message,\n//         variant: \"destructive\",\n//       });\n//     },\n//   });\n\n//   const handleCheckout = () => {\n//     if (!shippingAddress.street || !shippingAddress.city || !shippingAddress.zipCode) {\n//       toast({\n//         title: \"Missing Information\",\n//         description: \"Please fill in all shipping address fields.\",\n//         variant: \"destructive\",\n//       });\n//       return;\n//     }\n\n//     checkoutMutation.mutate({\n//       shippingAddress,\n//       paymentMethod,\n//     });\n//   };\n\n//   const formatPrice = (price: number) => {\n//     return new Intl.NumberFormat(\"en-DZ\", {\n//       style: \"currency\",\n//       currency: \"DZD\",\n//     }).format(price);\n//   };\n\n//   // Redirect if not authenticated\n//   useEffect(() => {\n//     if (!isAuthenticated) {\n//       setLocation(\"/login\");\n//     }\n//   }, [isAuthenticated, setLocation]);\n\n//   if (!isAuthenticated) {\n//     return null;\n//   }\n\n//   if (isLoading) {\n//     return (\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <div className=\"flex items-center justify-center h-64\">\n//           <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   if (cartItems.length === 0) {\n//     return (\n//       <div className=\"container mx-auto px-4 py-8\">\n//         <div className=\"text-center\">\n//           <Package className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n//           <h2 className=\"text-2xl font-semibold mb-2\">Your cart is empty</h2>\n//           <p className=\"text-gray-600 mb-6\">Add some items to your cart before checking out.</p>\n//           <Button onClick={() => setLocation(\"/\")} className=\"gap-2\">\n//             <ArrowLeft className=\"w-4 h-4\" />\n//             Continue Shopping\n//           </Button>\n//         </div>\n//       </div>\n//     );\n//   }\n\n//   return (\n//     <div className=\"container mx-auto px-4 py-8\">\n//       <div className=\"mb-6\">\n//         <Button\n//           variant=\"ghost\"\n//           onClick={() => setLocation(\"/\")}\n//           className=\"gap-2 mb-4\"\n//           data-testid=\"button-back-shopping\"\n//         >\n//           <ArrowLeft className=\"w-4 h-4\" />\n//           Back to Shopping\n//         </Button>\n//         <h1 className=\"text-3xl font-bold\">Checkout</h1>\n//         <p className=\"text-gray-600 mt-2\">Complete your order below</p>\n//       </div>\n\n//       <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n//         {/* Shipping and Payment Forms */}\n//         <div className=\"lg:col-span-2 space-y-6\">\n//           {/* Shipping Address */}\n//           <Card>\n//             <CardHeader>\n//               <CardTitle className=\"flex items-center gap-2\">\n//                 <MapPin className=\"w-5 h-5\" />\n//                 Shipping Address\n//               </CardTitle>\n//             </CardHeader>\n//             <CardContent className=\"space-y-4\">\n//               <div>\n//                 <Label htmlFor=\"street\">Street Address</Label>\n//                 <Input\n//                   id=\"street\"\n//                   value={shippingAddress.street}\n//                   onChange={(e) => setShippingAddress(prev => ({ ...prev, street: e.target.value }))}\n//                   placeholder=\"Enter your street address\"\n//                   data-testid=\"input-street-address\"\n//                 />\n//               </div>\n//               <div className=\"grid grid-cols-2 gap-4\">\n//                 <div>\n//                   <Label htmlFor=\"city\">City</Label>\n//                   <Input\n//                     id=\"city\"\n//                     value={shippingAddress.city}\n//                     onChange={(e) => setShippingAddress(prev => ({ ...prev, city: e.target.value }))}\n//                     placeholder=\"City\"\n//                     data-testid=\"input-city\"\n//                   />\n//                 </div>\n//                 <div>\n//                   <Label htmlFor=\"state\">State/Province</Label>\n//                   <Input\n//                     id=\"state\"\n//                     value={shippingAddress.state}\n//                     onChange={(e) => setShippingAddress(prev => ({ ...prev, state: e.target.value }))}\n//                     placeholder=\"State/Province\"\n//                     data-testid=\"input-state\"\n//                   />\n//                 </div>\n//               </div>\n//               <div className=\"grid grid-cols-2 gap-4\">\n//                 <div>\n//                   <Label htmlFor=\"zipCode\">ZIP/Postal Code</Label>\n//                   <Input\n//                     id=\"zipCode\"\n//                     value={shippingAddress.zipCode}\n//                     onChange={(e) => setShippingAddress(prev => ({ ...prev, zipCode: e.target.value }))}\n//                     placeholder=\"ZIP Code\"\n//                     data-testid=\"input-zip-code\"\n//                   />\n//                 </div>\n//                 <div>\n//                   <Label htmlFor=\"country\">Country</Label>\n//                   <Select\n//                     value={shippingAddress.country}\n//                     onValueChange={(value) => setShippingAddress(prev => ({ ...prev, country: value }))}\n//                   >\n//                     <SelectTrigger data-testid=\"select-country\">\n//                       <SelectValue />\n//                     </SelectTrigger>\n//                     <SelectContent>\n//                       <SelectItem value=\"Algeria\">Algeria</SelectItem>\n//                       <SelectItem value=\"Morocco\">Morocco</SelectItem>\n//                       <SelectItem value=\"Tunisia\">Tunisia</SelectItem>\n//                     </SelectContent>\n//                   </Select>\n//                 </div>\n//               </div>\n//             </CardContent>\n//           </Card>\n\n//           {/* Payment Method */}\n//           <Card>\n//             <CardHeader>\n//               <CardTitle className=\"flex items-center gap-2\">\n//                 <CreditCard className=\"w-5 h-5\" />\n//                 Payment Method\n//               </CardTitle>\n//             </CardHeader>\n//             <CardContent>\n//               <Select value={paymentMethod} onValueChange={setPaymentMethod}>\n//                 <SelectTrigger data-testid=\"select-payment-method\">\n//                   <SelectValue />\n//                 </SelectTrigger>\n//                 <SelectContent>\n//                   <SelectItem value=\"Bank card\">Bank Card</SelectItem>\n//                   <SelectItem value=\"PayPal\">PayPal</SelectItem>\n//                   <SelectItem value=\"Cash on Delivery\">Cash on Delivery</SelectItem>\n//                 </SelectContent>\n//               </Select>\n//               <p className=\"text-sm text-gray-600 mt-2\">\n//                 Payment will be processed securely after order confirmation.\n//               </p>\n//             </CardContent>\n//           </Card>\n//         </div>\n\n//         {/* Order Summary */}\n//         <div>\n//           <Card>\n//             <CardHeader>\n//               <CardTitle>Order Summary</CardTitle>\n//             </CardHeader>\n//             <CardContent className=\"space-y-4\">\n//               {/* Order Items */}\n//               <div className=\"space-y-3\">\n//                 {cartItems.map((item) => (\n//                   <div key={item.id} className=\"flex gap-3\">\n//                     <img\n//                       src={item.images?.[0]?.url || '/placeholder-image.jpg'}\n//                       alt={item.name}\n//                       className=\"w-16 h-16 object-cover rounded\"\n//                     />\n//                     <div className=\"flex-1 min-w-0\">\n//                       <h4 className=\"font-medium text-sm truncate\" data-testid={`text-item-name-${item.id}`}>\n//                         {item.name}\n//                       </h4>\n//                       <p className=\"text-sm text-gray-600\">Qty: {item.quantity}</p>\n//                       <p className=\"font-semibold text-sm\" data-testid={`text-item-price-${item.id}`}>\n//                         {formatPrice(item.price * item.quantity)}\n//                       </p>\n//                     </div>\n//                   </div>\n//                 ))}\n//               </div>\n\n//               <Separator />\n\n//               {/* Price Breakdown */}\n//               <div className=\"space-y-2\">\n//                 <div className=\"flex justify-between\">\n//                   <span>Subtotal</span>\n//                   <span data-testid=\"text-subtotal\">{formatPrice(subtotal)}</span>\n//                 </div>\n//                 <div className=\"flex justify-between\">\n//                   <span>Shipping</span>\n//                   <span data-testid=\"text-shipping\">{formatPrice(shipping)}</span>\n//                 </div>\n//                 <Separator />\n//                 <div className=\"flex justify-between text-lg font-semibold\">\n//                   <span>Total</span>\n//                   <span data-testid=\"text-total\">{formatPrice(total)}</span>\n//                 </div>\n//               </div>\n\n//               <Button\n//                 onClick={handleCheckout}\n//                 disabled={checkoutMutation.isPending || cartItems.length === 0}\n//                 className=\"w-full\"\n//                 size=\"lg\"\n//                 data-testid=\"button-place-order\"\n//               >\n//                 {checkoutMutation.isPending ? \"Processing...\" : `Place Order • ${formatPrice(total)}`}\n//               </Button>\n\n//               <div className=\"text-xs text-gray-500 text-center\">\n//                 By placing your order, you agree to our terms and conditions.\n//               </div>\n//             </CardContent>\n//           </Card>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\nimport { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useLocation } from \"wouter\";\nimport {\n  CreditCard,\n  MapPin,\n  Package,\n  ArrowLeft,\n  Phone,\n  User,\n} from \"lucide-react\";\nimport { loadStripe } from \"@stripe/stripe-js\";\nimport {\n  Elements,\n  CardElement,\n  useStripe,\n  useElements,\n} from \"@stripe/react-stripe-js\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\n\nconst stripePromise = loadStripe(\n  \"pk_test_51KMzn1SHHfrH8iaca5YGz9YWQl1kU3Sw1UtfBm1u8TP7LAupLRpAIaaJdj12a3J6OYNHDxT3M3P1UCry3nAneJE600vYe8X0uE\",\n);\n\ninterface CartItem {\n  id: string;\n  productId: string;\n  quantity: number;\n  name: string;\n  description: string;\n  price: number;\n  images: { url: string }[];\n  stock: number;\n}\n\ninterface ShippingAddress {\n  fullName: string;\n  email: string;\n  phone: string;\n  street: string;\n  city: string;\n  state: string;\n  zipCode: string;\n  // country: string;\n}\n\nfunction PaymentModal({\n  isOpen,\n  onClose,\n  shippingAddress,\n  total,\n  cartItems,\n  onPaymentSuccess,\n}: {\n  isOpen: boolean;\n  onClose: () => void;\n  shippingAddress: ShippingAddress;\n  total: number;\n  cartItems: CartItem[];\n  onPaymentSuccess: (paymentIntentId: string) => void;\n}) {\n  const stripe = useStripe();\n  const elements = useElements();\n  const { toast } = useToast();\n\n  const paymentMutation = useMutation({\n    mutationFn: async () => {\n      if (!stripe || !elements) throw new Error(\"Stripe not ready\");\n\n      const res = await fetch(\"/api/checkout/payment\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          cartItems,\n          shippingAddress,\n          amount: total,\n          currency: \"usd\",\n        }),\n      });\n      const { clientSecret } = await res.json();\n      if (!clientSecret) throw new Error(\"No client secret received\");\n\n      const cardElement = elements.getElement(CardElement);\n      // const { error, paymentIntent } = await stripe.confirmCardPayment(clientSecret, {\n      //   payment_method: { card: cardElement! },\n      // });\n\n      const { error, paymentIntent } = await stripe.confirmCardPayment(\n        clientSecret,\n        {\n          payment_method: {\n            card: cardElement!,\n            billing_details: {\n              name: shippingAddress.fullName,\n              email: shippingAddress.email,\n              phone: shippingAddress.phone,\n              address: {\n                line1: shippingAddress.street,\n                city: shippingAddress.city,\n                country: shippingAddress.state,\n                postal_code: shippingAddress.zipCode,\n                // country: shippingAddress.country,\n              },\n            },\n          },\n        },\n      );\n\n      if (error) throw new Error(error.message);\n      if (!paymentIntent || paymentIntent.status !== \"succeeded\")\n        throw new Error(\"Payment did not succeed\");\n\n      return paymentIntent.id;\n    },\n    onSuccess: (paymentIntentId) => {\n      toast({\n        title: \"Payment Successful\",\n        description: \"Your payment has been processed.\",\n      });\n      onPaymentSuccess(paymentIntentId);\n      onClose();\n    },\n    onError: (err: any) => {\n      toast({\n        title: \"Payment Failed\",\n        description: err.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handlePayment = () => {\n    paymentMutation.mutate();\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Enter Card Details</DialogTitle>\n        </DialogHeader>\n        <div className=\"p-4 space-y-4\">\n          <CardElement className=\"p-2 border rounded\" />\n          <Button\n            onClick={handlePayment}\n            disabled={paymentMutation.isPending}\n            className=\"w-full\"\n          >\n            {paymentMutation.isPending\n              ? \"Processing...\"\n              : `Pay ${new Intl.NumberFormat(\"en-DZ\", { style: \"currency\", currency: \"DZD\" }).format(total)}`}\n          </Button>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n\nexport default function CheckoutPage() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const queryClient = useQueryClient();\n\n  const [shippingAddress, setShippingAddress] = useState<ShippingAddress>({\n    fullName: \"\",\n    email: \"\",\n    phone: \"\",\n    street: \"\",\n    city: \"\",\n    state: \"\",\n    zipCode: \"\",\n    // country: \"\",\n  });\n\n  const [showPaymentModal, setShowPaymentModal] = useState(false);\n\n  // Fetch cart items\n  const { data: cartItems = [], isLoading } = useQuery<CartItem[]>({\n    queryKey: [\"/api/cart\"],\n    enabled: !!user,\n  });\n\n  // Calculate totals\n  const subtotal = cartItems.reduce(\n    (total, item) => total + item.price * item.quantity,\n    0,\n  );\n  const shipping = 500;\n  const total = subtotal + shipping;\n\n  // Checkout mutation\n  const checkoutMutation = useMutation({\n    mutationFn: async (checkoutData: {\n      shippingAddress: ShippingAddress;\n      paymentIntentId: string;\n      cartItems: CartItem[];\n      amount: number;\n    }) => {\n      const response = await fetch(\"/api/checkout\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        credentials: \"include\",\n        body: JSON.stringify(checkoutData),\n      });\n      if (!response.ok) throw new Error(\"Failed to process checkout\");\n      return response.json();\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/cart\"] });\n      toast({\n        title: \"Order Placed Successfully!\",\n        description: `Your order #${data.order.orderNumber} has been confirmed.`,\n      });\n      setLocation(\"/orders\");\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Checkout Failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleCheckout = () => {\n    if (\n      !shippingAddress.fullName ||\n      !shippingAddress.phone ||\n      !shippingAddress.street ||\n      !shippingAddress.city ||\n      !shippingAddress.zipCode\n    ) {\n      toast({\n        title: \"Missing Information\",\n        description: \"Please fill in all required fields.\",\n        variant: \"destructive\",\n      });\n      return;\n    }\n    setShowPaymentModal(true);\n  };\n\n  const handlePaymentSuccess = (paymentIntentId: string) => {\n    checkoutMutation.mutate({\n      shippingAddress,\n      paymentIntentId,\n      cartItems, // include the cart items\n      amount: total, // include the total amount\n    });\n  };\n\n  const formatPrice = (price: number) =>\n    new Intl.NumberFormat(\"en-DZ\", {\n      style: \"currency\",\n      currency: \"DZD\",\n    }).format(price);\n\n  // Redirect if not authenticated\n  useEffect(() => {\n    if (!user) setLocation(\"/login\");\n  }, [user, setLocation]);\n\n  if (!user) return null;\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 flex items-center justify-center h-64\">\n        <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n      </div>\n    );\n  }\n  if (cartItems.length === 0) {\n    return (\n      <div className=\"container mx-auto px-4 py-8 text-center\">\n        <Package className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n        <h2 className=\"text-2xl font-semibold mb-2\">Your cart is empty</h2>\n        <p className=\"text-gray-600 mb-6\">\n          Add some items to your cart before checking out.\n        </p>\n        <Button onClick={() => setLocation(\"/\")} className=\"gap-2\">\n          <ArrowLeft className=\"w-4 h-4\" />\n          Continue Shopping\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <Elements stripe={stripePromise}>\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"mb-6\">\n          <Button\n            variant=\"ghost\"\n            onClick={() => setLocation(\"/\")}\n            className=\"gap-2 mb-4\"\n          >\n            <ArrowLeft className=\"w-4 h-4\" />\n            Back to Shopping\n          </Button>\n          <h1 className=\"text-3xl font-bold\">Checkout</h1>\n          <p className=\"text-gray-600 mt-2\">Complete your order below</p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Shipping Address */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"flex items-center gap-2\">\n                  <MapPin className=\"w-5 h-5\" /> Shipping Address\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"fullName\">Full Name</Label>\n                  <Input\n                    id=\"fullName\"\n                    value={shippingAddress.fullName}\n                    onChange={(e) =>\n                      setShippingAddress((p) => ({\n                        ...p,\n                        fullName: e.target.value,\n                      }))\n                    }\n                    placeholder=\"Enter your full name\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    id=\"email\"\n                    value={shippingAddress.email}\n                    onChange={(e) =>\n                      setShippingAddress((p) => ({\n                        ...p,\n                        email: e.target.value,\n                      }))\n                    }\n                    placeholder=\"Enter your Email Address\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"phone\">Phone Number</Label>\n                  <Input\n                    id=\"phone\"\n                    value={shippingAddress.phone}\n                    onChange={(e) =>\n                      setShippingAddress((p) => ({\n                        ...p,\n                        phone: e.target.value,\n                      }))\n                    }\n                    placeholder=\"Enter your phone number\"\n                  />\n                </div>\n                <div>\n                  <Label htmlFor=\"street\">Street Address</Label>\n                  <Input\n                    id=\"street\"\n                    value={shippingAddress.street}\n                    onChange={(e) =>\n                      setShippingAddress((p) => ({\n                        ...p,\n                        street: e.target.value,\n                      }))\n                    }\n                    placeholder=\"Street Address\"\n                  />\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"city\">City</Label>\n                    <Input\n                      id=\"city\"\n                      value={shippingAddress.city}\n                      onChange={(e) =>\n                        setShippingAddress((p) => ({\n                          ...p,\n                          city: e.target.value,\n                        }))\n                      }\n                      placeholder=\"City\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"state\">State/Province</Label>\n                    <Input\n                      id=\"state\"\n                      value={shippingAddress.state}\n                      onChange={(e) =>\n                        setShippingAddress((p) => ({\n                          ...p,\n                          state: e.target.value,\n                        }))\n                      }\n                      placeholder=\"CA\"\n                    />\n                  </div>\n                </div>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"zipCode\">ZIP/Postal Code</Label>\n                    <Input\n                      id=\"zipCode\"\n                      value={shippingAddress.zipCode}\n                      onChange={(e) =>\n                        setShippingAddress((p) => ({\n                          ...p,\n                          zipCode: e.target.value,\n                        }))\n                      }\n                      placeholder=\"ZIP Code\"\n                    />\n                  </div>\n                  {/* <div>\n                    <Label htmlFor=\"country\">Country</Label>\n                    <Input\n                      id=\"country\"\n                      value={shippingAddress.country}\n                      onChange={(e) => setShippingAddress((p) => ({ ...p, country: e.target.value }))}\n                      placeholder=\"Country\"\n                    />\n                  </div> */}\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Order Summary */}\n          <div>\n            <Card>\n              <CardHeader>\n                <CardTitle>Order Summary</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                {cartItems.map((item) => (\n                  <div key={item.id} className=\"flex gap-3\">\n                    <img\n                      src={item.images?.[0]?.url || \"/placeholder.jpg\"}\n                      alt={item.name}\n                      className=\"w-16 h-16 object-cover rounded\"\n                    />\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-sm truncate\">\n                        {item.name}\n                      </h4>\n                      <p className=\"text-sm text-gray-600\">\n                        Qty: {item.quantity}\n                      </p>\n                      <p className=\"font-semibold text-sm\">\n                        {formatPrice(item.price * item.quantity)}\n                      </p>\n                    </div>\n                  </div>\n                ))}\n                <Separator />\n                <div className=\"flex justify-between\">\n                  <span>Subtotal</span>\n                  <span>{formatPrice(subtotal)}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span>Shipping</span>\n                  <span>{formatPrice(shipping)}</span>\n                </div>\n                <Separator />\n                <div className=\"flex justify-between text-lg font-semibold\">\n                  <span>Total</span>\n                  <span>{formatPrice(total)}</span>\n                </div>\n                <Button\n                  onClick={handleCheckout}\n                  disabled={checkoutMutation.isPending}\n                  className=\"w-full\"\n                  size=\"lg\"\n                >\n                  {checkoutMutation.isPending\n                    ? \"Processing...\"\n                    : `Place Order • ${formatPrice(total)}`}\n                </Button>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n      <PaymentModal\n        isOpen={showPaymentModal}\n        onClose={() => setShowPaymentModal(false)}\n        shippingAddress={shippingAddress}\n        total={total}\n        cartItems={cartItems}\n        onPaymentSuccess={handlePaymentSuccess}\n      />\n    </Elements>\n  );\n}\n","size_bytes":28490},"client/src/pages/client/orders.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { \n  Package, \n  Search, \n  Filter, \n  Truck, \n  CheckCircle, \n  Clock, \n  XCircle,\n  Eye,\n  MapPin\n} from \"lucide-react\";\n\ninterface Order {\n  id: string;\n  orderNumber: string;\n  status: string;\n  paymentStatus: string;\n  paymentMethod: string;\n  totalAmount: number;\n  vendorName: string;\n  itemCount: number;\n  trackingNumber: string;\n  deliveryDate: string | null;\n  createdAt: string;\n  items: OrderItem[];\n}\n\ninterface OrderItem {\n  id: string;\n  productId: string;\n  quantity: number;\n  unitPrice: number;\n  totalPrice: number;\n  product: {\n    name: string;\n    images: { url: string }[];\n  };\n}\n\nexport default function OrdersPage() {\n  const { user, isAuthenticated } = useAuth();\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedStatus, setSelectedStatus] = useState(\"all\");\n\n  // Fetch user orders\n  const { data: orders = [], isLoading, error } = useQuery<Order[]>({\n    queryKey: [\"/api/orders\"],\n    enabled: isAuthenticated,\n  });\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return <Clock className=\"w-4 h-4\" />;\n      case \"in_preparation\":\n        return <Package className=\"w-4 h-4\" />;\n      case \"in_delivery\":\n        return <Truck className=\"w-4 h-4\" />;\n      case \"delivered\":\n        return <CheckCircle className=\"w-4 h-4\" />;\n      case \"cancelled\":\n        return <XCircle className=\"w-4 h-4\" />;\n      default:\n        return <Clock className=\"w-4 h-4\" />;\n    }\n  };\n\n  const getStatusBadgeVariant = (status: string) => {\n    switch (status) {\n      case \"delivered\":\n        return \"default\" as const;\n      case \"in_delivery\":\n        return \"secondary\" as const;\n      case \"in_preparation\":\n        return \"outline\" as const;\n      case \"cancelled\":\n        return \"destructive\" as const;\n      default:\n        return \"outline\" as const;\n    }\n  };\n\n  const getStatusLabel = (status: string) => {\n    switch (status) {\n      case \"pending\":\n        return \"Pending\";\n      case \"in_preparation\":\n        return \"In preparation\";\n      case \"in_delivery\":\n        return \"In delivery\";\n      case \"delivered\":\n        return \"Delivered\";\n      case \"cancelled\":\n        return \"Cancelled\";\n      default:\n        return status;\n    }\n  };\n\n  const formatPrice = (price: number) => {\n    return new Intl.NumberFormat(\"en-DZ\", {\n      style: \"currency\",\n      currency: \"DZD\",\n    }).format(price);\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString(\"en-US\", {\n      year: \"numeric\",\n      month: \"short\",\n      day: \"numeric\",\n    });\n  };\n\n  // Filter orders based on search and status\n  const filteredOrders = orders.filter((order) => {\n    const matchesSearch = order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         order.vendorName.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = selectedStatus === \"all\" || order.status === selectedStatus;\n    return matchesSearch && matchesStatus;\n  });\n\n  const getOrdersByStatus = (status: string) => {\n    if (status === \"all\") return orders;\n    return orders.filter(order => order.status === status);\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Please log in to view your orders</h2>\n        </div>\n      </div>\n    );\n  }\n\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"flex items-center justify-center h-64\">\n          <div className=\"animate-spin w-8 h-8 border-4 border-primary border-t-transparent rounded-full\" />\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"container mx-auto px-4 py-8\">\n        <div className=\"text-center\">\n          <h2 className=\"text-2xl font-semibold mb-4\">Error loading orders</h2>\n          <p className=\"text-gray-600\">Please try again later.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto px-4 py-8\">\n      {/* Header */}\n      <div className=\"mb-8\">\n        <div className=\"flex items-center justify-between mb-4\">\n          <h1 className=\"text-3xl font-bold\">My Orders</h1>\n          <Button className=\"gap-2\" data-testid=\"button-order-again\">\n            <Package className=\"w-4 h-4\" />\n            Order again\n          </Button>\n        </div>\n        \n        {/* Search and Filter */}\n        <div className=\"flex gap-4 mb-6\">\n          <div className=\"relative flex-1\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n            <Input\n              placeholder=\"Search for an order...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n              data-testid=\"input-search-orders\"\n            />\n          </div>\n          <Button variant=\"outline\" className=\"gap-2\" data-testid=\"button-filter\">\n            <Filter className=\"w-4 h-4\" />\n            Filter\n          </Button>\n        </div>\n      </div>\n\n      {/* Order Tracking Tabs */}\n      <Tabs value={selectedStatus} onValueChange={setSelectedStatus} className=\"mb-6\">\n        <TabsList className=\"grid w-full grid-cols-6\">\n          <TabsTrigger value=\"all\">All ({orders.length})</TabsTrigger>\n          <TabsTrigger value=\"in_preparation\">In preparation ({getOrdersByStatus(\"in_preparation\").length})</TabsTrigger>\n          <TabsTrigger value=\"in_delivery\">In delivery ({getOrdersByStatus(\"in_delivery\").length})</TabsTrigger>\n          <TabsTrigger value=\"delivered\">Delivered ({getOrdersByStatus(\"delivered\").length})</TabsTrigger>\n          <TabsTrigger value=\"cancelled\">Cancelled ({getOrdersByStatus(\"cancelled\").length})</TabsTrigger>\n        </TabsList>\n\n        <TabsContent value={selectedStatus} className=\"mt-6\">\n          {filteredOrders.length === 0 ? (\n            <div className=\"text-center py-12\">\n              <Package className=\"w-16 h-16 mx-auto text-gray-400 mb-4\" />\n              <h3 className=\"text-xl font-semibold mb-2\">No orders found</h3>\n              <p className=\"text-gray-600\">\n                {selectedStatus === \"all\" \n                  ? \"You haven't placed any orders yet.\" \n                  : `No orders with status \"${getStatusLabel(selectedStatus)}\" found.`}\n              </p>\n            </div>\n          ) : (\n            <div className=\"space-y-4\">\n              {filteredOrders.map((order) => (\n                <Card key={order.id} className=\"overflow-hidden\">\n                  <CardHeader className=\"pb-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-3\">\n                        <Badge \n                          variant={getStatusBadgeVariant(order.status)}\n                          className=\"gap-1\"\n                          data-testid={`badge-status-${order.id}`}\n                        >\n                          {getStatusIcon(order.status)}\n                          {getStatusLabel(order.status)}\n                        </Badge>\n                        <span className=\"text-sm text-gray-600\">\n                          {formatDate(order.createdAt)} • {order.vendorName}\n                        </span>\n                      </div>\n                      <div className=\"text-right\">\n                        <div className=\"font-semibold text-lg\" data-testid={`text-order-total-${order.id}`}>\n                          {formatPrice(order.totalAmount)}\n                        </div>\n                        <div className=\"text-sm text-gray-600\">\n                          {order.itemCount} article{order.itemCount !== 1 ? \"s\" : \"\"}\n                        </div>\n                      </div>\n                    </div>\n                  </CardHeader>\n                  \n                  <CardContent className=\"pt-0\">\n                    <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                      {/* Order Details */}\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Order Details</h4>\n                        <div className=\"space-y-1 text-sm text-gray-600\">\n                          <div>Shop: {order.vendorName}</div>\n                          <div>Date: {formatDate(order.createdAt)}</div>\n                          <div>Items: {order.itemCount}</div>\n                          <div>Total: {formatPrice(order.totalAmount)}</div>\n                        </div>\n                      </div>\n\n                      {/* Delivery Information */}\n                      <div>\n                        <h4 className=\"font-medium mb-2\">Delivery information</h4>\n                        <div className=\"space-y-1 text-sm text-gray-600\">\n                          <div className=\"flex items-center gap-1\">\n                            <span>Status:</span>\n                            <Badge variant={order.status === \"in_delivery\" ? \"secondary\" : \"outline\"} className=\"text-xs\">\n                              {order.status === \"in_delivery\" ? \"In delivery\" : getStatusLabel(order.status)}\n                            </Badge>\n                          </div>\n                          <div className=\"flex items-center gap-1\">\n                            <span>Payment:</span>\n                            <Badge variant={order.paymentStatus === \"paid\" ? \"default\" : \"outline\"} className=\"text-xs\">\n                              {order.paymentMethod}\n                            </Badge>\n                          </div>\n                          {order.trackingNumber && (\n                            <div>Tracking number: {order.trackingNumber}</div>\n                          )}\n                        </div>\n                      </div>\n\n                      {/* Actions */}\n                      <div className=\"flex flex-col gap-2\">\n                        <Button \n                          variant=\"outline\" \n                          size=\"sm\" \n                          className=\"gap-2\"\n                          data-testid={`button-view-details-${order.id}`}\n                        >\n                          <Eye className=\"w-4 h-4\" />\n                          Full details\n                        </Button>\n                        {order.status === \"in_delivery\" && (\n                          <Button \n                            variant=\"outline\" \n                            size=\"sm\" \n                            className=\"gap-2\"\n                            data-testid={`button-track-delivery-${order.id}`}\n                          >\n                            <MapPin className=\"w-4 h-4\" />\n                            Track delivery\n                          </Button>\n                        )}\n                        {order.status === \"cancelled\" && (\n                          <Button \n                            variant=\"destructive\" \n                            size=\"sm\"\n                            data-testid={`button-cancel-order-${order.id}`}\n                          >\n                            Cancel order\n                          </Button>\n                        )}\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              ))}\n            </div>\n          )}\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":11949}},"version":1}